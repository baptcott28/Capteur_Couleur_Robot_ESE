
couleur_fonctionel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  0800bc28  0800bc28  0001bc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c708  0800c708  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c708  0800c708  0001c708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c710  0800c710  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c710  0800c710  0001c710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ec  200001e0  0800c8f8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044cc  0800c8f8  000244cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b66e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bcb  00000000  00000000  0003b87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0003f450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  000408a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299bf  00000000  00000000  00041b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fd2  00000000  00000000  0006b537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb605  00000000  00000000  00084509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fb0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f8  00000000  00000000  0017fb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc0c 	.word	0x0800bc0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bc0c 	.word	0x0800bc0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <colorSetOutputFreqScaling>:
// ----- Global Fonctions -----


// --- fonctions de gestion du hardware ---

static void colorSetOutputFreqScaling(h_color_sensor_t * h_color_sensor){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	switch(h_color_sensor->ouput_scale){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d836      	bhi.n	8000fac <colorSetOutputFreqScaling+0x80>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <colorSetOutputFreqScaling+0x18>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f97 	.word	0x08000f97
 8000f48:	08000f81 	.word	0x08000f81
 8000f4c:	08000f6b 	.word	0x08000f6b
 8000f50:	08000f55 	.word	0x08000f55
	case 4:
		// 100%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f5a:	f000 fd52 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f64:	f000 fd4d 	bl	8001a02 <GPIO_write>
		break;
 8000f68:	e020      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 3:
		// 20%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f70:	f000 fd47 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f7a:	f000 fd42 	bl	8001a02 <GPIO_write>
		break;
 8000f7e:	e015      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 2:
		// 2%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f86:	f000 fd3c 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f90:	f000 fd37 	bl	8001a02 <GPIO_write>
		break;
 8000f94:	e00a      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 1:
		// Power_down
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f9c:	f000 fd31 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000fa6:	f000 fd2c 	bl	8001a02 <GPIO_write>
		break;
 8000faa:	bf00      	nop
	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021800 	.word	0x40021800

08000fbc <colorSetPhotodiodeType>:

void colorSetPhotodiodeType(h_color_sensor_t * h_color_sensor,color_sensor_color_t color){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	h_color_sensor->color=color;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	701a      	strb	r2, [r3, #0]
	switch(color){
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d842      	bhi.n	800105c <colorSetPhotodiodeType+0xa0>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <colorSetPhotodiodeType+0x20>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001025 	.word	0x08001025
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08000fed 	.word	0x08000fed
	case GREEN:
		//GREEN
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481c      	ldr	r0, [pc, #112]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8000ff2:	f000 fd06 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8000ffc:	f000 fd01 	bl	8001a02 <GPIO_write>
		printf("\n--- photosensor set vert ---\r\n\n");
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <colorSetPhotodiodeType+0xb0>)
 8001002:	f007 ffa1 	bl	8008f48 <puts>
		break;
 8001006:	e029      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case CLEAR:
		//clear
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800100e:	f000 fcf8 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 8001012:	2200      	movs	r2, #0
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001018:	f000 fcf3 	bl	8001a02 <GPIO_write>
		printf("\n--- photosensor set clear ---\r\n\n");
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <colorSetPhotodiodeType+0xb4>)
 800101e:	f007 ff93 	bl	8008f48 <puts>
		break;
 8001022:	e01b      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case BLUE:
		//BLUE
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800102a:	f000 fcea 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 800102e:	2201      	movs	r2, #1
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001034:	f000 fce5 	bl	8001a02 <GPIO_write>
		printf("\n--- photosensor set blue ---\r\n\n");
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <colorSetPhotodiodeType+0xb8>)
 800103a:	f007 ff85 	bl	8008f48 <puts>
		break;
 800103e:	e00d      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case RED:
		//RED
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8001046:	f000 fcdc 	bl	8001a02 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 800104a:	2200      	movs	r2, #0
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001050:	f000 fcd7 	bl	8001a02 <GPIO_write>
		printf("\n--- photosensor set rouge ---\r\n\n");
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <colorSetPhotodiodeType+0xbc>)
 8001056:	f007 ff77 	bl	8008f48 <puts>
		break;
 800105a:	bf00      	nop
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020400 	.word	0x40020400
 8001068:	40021800 	.word	0x40021800
 800106c:	0800bc28 	.word	0x0800bc28
 8001070:	0800bc48 	.word	0x0800bc48
 8001074:	0800bc6c 	.word	0x0800bc6c
 8001078:	0800bc8c 	.word	0x0800bc8c

0800107c <colorSensorInit>:

void colorSensorInit(h_color_sensor_t *h_color_sensor, color_sensor_color_t color, color_sensor_output_scale_t output_scale, color_sensor_state_t state){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	460b      	mov	r3, r1
 8001090:	70bb      	strb	r3, [r7, #2]
 8001092:	4613      	mov	r3, r2
 8001094:	707b      	strb	r3, [r7, #1]
	h_color_sensor->color=color;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	701a      	strb	r2, [r3, #0]
	h_color_sensor->ouput_scale=output_scale;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	78ba      	ldrb	r2, [r7, #2]
 80010a0:	705a      	strb	r2, [r3, #1]
	h_color_sensor->sensor_state=state;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	787a      	ldrb	r2, [r7, #1]
 80010a6:	709a      	strb	r2, [r3, #2]
	h_color_sensor->frequence=0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
	h_color_sensor->blue_color=0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
	h_color_sensor->green_color=0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	h_color_sensor->red_color=0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]

	h_color_sensor->green_transformation.green_coef_dir=1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_min_freq=1;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	835a      	strh	r2, [r3, #26]
	h_color_sensor->green_transformation.green_ord_origin=1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	831a      	strh	r2, [r3, #24]

	h_color_sensor->red_transformation.red_coef_dir=1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_min_freq=1;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	841a      	strh	r2, [r3, #32]
	h_color_sensor->red_transformation.red_ord_origin=1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	83da      	strh	r2, [r3, #30]

	h_color_sensor->calib_state=WAINTING_FOR_CALIB;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	751a      	strb	r2, [r3, #20]
	h_color_sensor->calib_struct.calib_value_rouge_canette=1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	84da      	strh	r2, [r3, #38]	; 0x26
	h_color_sensor->calib_struct.calib_value_rouge_vide=1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
	h_color_sensor->calib_struct.calib_value_vert_canette=1;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	845a      	strh	r2, [r3, #34]	; 0x22
	h_color_sensor->calib_struct.calib_value_vert_vide=1;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	849a      	strh	r2, [r3, #36]	; 0x24
	colorSetOutputFreqScaling(h_color_sensor);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff12 	bl	8000f2c <colorSetOutputFreqScaling>
	colorSetPhotodiodeType(h_color_sensor,color);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff55 	bl	8000fbc <colorSetPhotodiodeType>
	colorDisable(h_color_sensor);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f804 	bl	8001120 <colorDisable>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <colorDisable>:
uint32_t colorGetGreenValue(h_color_sensor_t * h_color_sensor){
	printf("sensor_value : %ld\r\n",h_color_sensor->frequence);
	return h_color_sensor->green_color;
}

void colorDisable(h_color_sensor_t * h_color_sensor){
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b095      	sub	sp, #84	; 0x54
 8001124:	af12      	add	r7, sp, #72	; 0x48
 8001126:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	4810      	ldr	r0, [pc, #64]	; (8001170 <colorDisable+0x50>)
 800112e:	f000 fc68 	bl	8001a02 <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_DISABLE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,STOP,TIM_CHANNEL_1);
 8001138:	4e0e      	ldr	r6, [pc, #56]	; (8001174 <colorDisable+0x54>)
 800113a:	2300      	movs	r3, #0
 800113c:	9311      	str	r3, [sp, #68]	; 0x44
 800113e:	2300      	movs	r3, #0
 8001140:	9310      	str	r3, [sp, #64]	; 0x40
 8001142:	2301      	movs	r3, #1
 8001144:	930f      	str	r3, [sp, #60]	; 0x3c
 8001146:	466d      	mov	r5, sp
 8001148:	f106 0410 	add.w	r4, r6, #16
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800115c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001160:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001164:	f000 fbdb 	bl	800191e <timer_handle>
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001170:	40020800 	.word	0x40020800
 8001174:	20000698 	.word	0x20000698

08001178 <colorEnable>:

void colorEnable(h_color_sensor_t * h_color_sensor){
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b095      	sub	sp, #84	; 0x54
 800117c:	af12      	add	r7, sp, #72	; 0x48
 800117e:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <colorEnable+0x50>)
 8001186:	f000 fc3c 	bl	8001a02 <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_ENABLE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,START,TIM_CHANNEL_1);
 8001190:	4e0e      	ldr	r6, [pc, #56]	; (80011cc <colorEnable+0x54>)
 8001192:	2300      	movs	r3, #0
 8001194:	9311      	str	r3, [sp, #68]	; 0x44
 8001196:	2301      	movs	r3, #1
 8001198:	9310      	str	r3, [sp, #64]	; 0x40
 800119a:	2301      	movs	r3, #1
 800119c:	930f      	str	r3, [sp, #60]	; 0x3c
 800119e:	466d      	mov	r5, sp
 80011a0:	f106 0410 	add.w	r4, r6, #16
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011bc:	f000 fbaf 	bl	800191e <timer_handle>
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c8:	40020800 	.word	0x40020800
 80011cc:	20000698 	.word	0x20000698

080011d0 <colorHandleCalibrationSensor>:


// --- fonctions de calibration ---

uint32_t colorHandleCalibrationSensor(h_color_sensor_t * h_color_sensor){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	calibration_flag=1;
 80011d8:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <colorHandleCalibrationSensor+0x224>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
	printf("calibration flag : %d\r\n",calibration_flag);
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <colorHandleCalibrationSensor+0x224>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4884      	ldr	r0, [pc, #528]	; (80013f8 <colorHandleCalibrationSensor+0x228>)
 80011e6:	f007 fe29 	bl	8008e3c <iprintf>
	char entree[2];
	h_color_sensor->calib_state=CALIB_VERT_CANETTE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	751a      	strb	r2, [r3, #20]
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80011f0:	e090      	b.n	8001314 <colorHandleCalibrationSensor+0x144>
		//printf("entré dans while\r\n");
		switch(h_color_sensor->calib_state){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7d1b      	ldrb	r3, [r3, #20]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	f200 808a 	bhi.w	8001312 <colorHandleCalibrationSensor+0x142>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <colorHandleCalibrationSensor+0x34>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	08001259 	.word	0x08001259
 800120c:	08001297 	.word	0x08001297
 8001210:	080012d5 	.word	0x080012d5
		case CALIB_VERT_CANETTE:
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 8001214:	2104      	movs	r1, #4
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fed0 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 800121c:	4877      	ldr	r0, [pc, #476]	; (80013fc <colorHandleCalibrationSensor+0x22c>)
 800121e:	f007 fe93 	bl	8008f48 <puts>
			scanf( "%s",entree);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4619      	mov	r1, r3
 8001228:	4875      	ldr	r0, [pc, #468]	; (8001400 <colorHandleCalibrationSensor+0x230>)
 800122a:	f007 ff0f 	bl	800904c <iscanf>
			printf("%s\r\n",entree);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	4619      	mov	r1, r3
 8001234:	4873      	ldr	r0, [pc, #460]	; (8001404 <colorHandleCalibrationSensor+0x234>)
 8001236:	f007 fe01 	bl	8008e3c <iprintf>
			h_color_sensor->calib_struct.calib_value_vert_canette=0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	845a      	strh	r2, [r3, #34]	; 0x22
			colorEnable(h_color_sensor);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff99 	bl	8001178 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_vert_canette==0){
 8001246:	bf00      	nop
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0fb      	beq.n	8001248 <colorHandleCalibrationSensor+0x78>
				//Wait for calib completed
			}
			h_color_sensor->calib_state=CALIB_VERT_VIDE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	751a      	strb	r2, [r3, #20]
			break;
 8001256:	e05d      	b.n	8001314 <colorHandleCalibrationSensor+0x144>

		case CALIB_VERT_VIDE:
			printf("calib_vert_vide\r\n");
 8001258:	486b      	ldr	r0, [pc, #428]	; (8001408 <colorHandleCalibrationSensor+0x238>)
 800125a:	f007 fe75 	bl	8008f48 <puts>
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 800125e:	2104      	movs	r1, #4
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff feab 	bl	8000fbc <colorSetPhotodiodeType>
			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when the green can is removed\r\n");
 8001266:	4869      	ldr	r0, [pc, #420]	; (800140c <colorHandleCalibrationSensor+0x23c>)
 8001268:	f007 fe6e 	bl	8008f48 <puts>
			scanf("%s",entree);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	4863      	ldr	r0, [pc, #396]	; (8001400 <colorHandleCalibrationSensor+0x230>)
 8001274:	f007 feea 	bl	800904c <iscanf>
			h_color_sensor->calib_struct.calib_value_vert_vide=0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	849a      	strh	r2, [r3, #36]	; 0x24
			colorEnable(h_color_sensor);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff7a 	bl	8001178 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_vert_vide==0){
 8001284:	bf00      	nop
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0fb      	beq.n	8001286 <colorHandleCalibrationSensor+0xb6>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_CANETTE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	751a      	strb	r2, [r3, #20]
			break;
 8001294:	e03e      	b.n	8001314 <colorHandleCalibrationSensor+0x144>

		case CALIB_ROUGE_CANETTE:
			printf("calib_rouge_canette\r\n");
 8001296:	485e      	ldr	r0, [pc, #376]	; (8001410 <colorHandleCalibrationSensor+0x240>)
 8001298:	f007 fe56 	bl	8008f48 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 800129c:	2101      	movs	r1, #1
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fe8c 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a red can is captured\r\n");
 80012a4:	485b      	ldr	r0, [pc, #364]	; (8001414 <colorHandleCalibrationSensor+0x244>)
 80012a6:	f007 fe4f 	bl	8008f48 <puts>
			scanf("%s",entree);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4853      	ldr	r0, [pc, #332]	; (8001400 <colorHandleCalibrationSensor+0x230>)
 80012b2:	f007 fecb 	bl	800904c <iscanf>
			h_color_sensor->calib_struct.calib_value_rouge_canette=0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	84da      	strh	r2, [r3, #38]	; 0x26
			colorEnable(h_color_sensor);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff5b 	bl	8001178 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_rouge_canette==0){
 80012c2:	bf00      	nop
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0fb      	beq.n	80012c4 <colorHandleCalibrationSensor+0xf4>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_VIDE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2204      	movs	r2, #4
 80012d0:	751a      	strb	r2, [r3, #20]
			break;
 80012d2:	e01f      	b.n	8001314 <colorHandleCalibrationSensor+0x144>

		case CALIB_ROUGE_VIDE:
			printf("calib_rouge_vide\r\n");
 80012d4:	4850      	ldr	r0, [pc, #320]	; (8001418 <colorHandleCalibrationSensor+0x248>)
 80012d6:	f007 fe37 	bl	8008f48 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 80012da:	2101      	movs	r1, #1
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fe6d 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 80012e2:	4846      	ldr	r0, [pc, #280]	; (80013fc <colorHandleCalibrationSensor+0x22c>)
 80012e4:	f007 fe30 	bl	8008f48 <puts>
			scanf("%s",entree);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4844      	ldr	r0, [pc, #272]	; (8001400 <colorHandleCalibrationSensor+0x230>)
 80012f0:	f007 feac 	bl	800904c <iscanf>
			h_color_sensor->calib_struct.calib_value_rouge_vide=0;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	851a      	strh	r2, [r3, #40]	; 0x28
			colorEnable(h_color_sensor);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff3c 	bl	8001178 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_rouge_vide==0){
 8001300:	bf00      	nop
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0fb      	beq.n	8001302 <colorHandleCalibrationSensor+0x132>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_DONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	751a      	strb	r2, [r3, #20]
			break;
 8001310:	e000      	b.n	8001314 <colorHandleCalibrationSensor+0x144>

		default:
			break;
 8001312:	bf00      	nop
	while(h_color_sensor->calib_state!=CALIB_DONE){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7d1b      	ldrb	r3, [r3, #20]
 8001318:	2b05      	cmp	r3, #5
 800131a:	f47f af6a 	bne.w	80011f2 <colorHandleCalibrationSensor+0x22>
		}
	}
	printf("calib_verte_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001322:	4619      	mov	r1, r3
 8001324:	483d      	ldr	r0, [pc, #244]	; (800141c <colorHandleCalibrationSensor+0x24c>)
 8001326:	f007 fd89 	bl	8008e3c <iprintf>
	printf("calib_verte_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	483b      	ldr	r0, [pc, #236]	; (8001420 <colorHandleCalibrationSensor+0x250>)
 8001332:	f007 fd83 	bl	8008e3c <iprintf>
	printf("calib_rouge_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800133a:	4619      	mov	r1, r3
 800133c:	4839      	ldr	r0, [pc, #228]	; (8001424 <colorHandleCalibrationSensor+0x254>)
 800133e:	f007 fd7d 	bl	8008e3c <iprintf>
	printf("calib_rouge_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001346:	4619      	mov	r1, r3
 8001348:	4837      	ldr	r0, [pc, #220]	; (8001428 <colorHandleCalibrationSensor+0x258>)
 800134a:	f007 fd77 	bl	8008e3c <iprintf>

	//computation of the transformation coefficient
	h_color_sensor->green_transformation.green_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_color_sensor->calib_struct.calib_value_vert_vide)-(h_color_sensor->calib_struct.calib_value_vert_canette)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f242 7210 	movw	r2, #10000	; 0x2710
 800135e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->green_transformation.green_coef_dir)*(h_color_sensor->calib_struct.calib_value_vert_vide)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	8ada      	ldrh	r2, [r3, #22]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	b29a      	uxth	r2, r3
 8001376:	f644 6320 	movw	r3, #20000	; 0x4e20
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	831a      	strh	r2, [r3, #24]
	printf("coef dir vert : %u\r\nord origin vert : %u\r\nmin freq vert : %u\r\n\n",h_color_sensor->green_transformation.green_coef_dir,h_color_sensor->green_transformation.green_ord_origin,h_color_sensor->green_transformation.green_min_freq);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	8adb      	ldrh	r3, [r3, #22]
 8001386:	4619      	mov	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8b1b      	ldrh	r3, [r3, #24]
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8b5b      	ldrh	r3, [r3, #26]
 8001392:	4826      	ldr	r0, [pc, #152]	; (800142c <colorHandleCalibrationSensor+0x25c>)
 8001394:	f007 fd52 	bl	8008e3c <iprintf>

	h_color_sensor->red_transformation.red_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_color_sensor->calib_struct.calib_value_rouge_vide)-(h_color_sensor->calib_struct.calib_value_rouge_canette)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	461a      	mov	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80013a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->red_transformation.red_coef_dir)*(h_color_sensor->calib_struct.calib_value_rouge_vide)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	8b9a      	ldrh	r2, [r3, #28]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ba:	fb12 f303 	smulbb	r3, r2, r3
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	83da      	strh	r2, [r3, #30]
	printf("coef dir rouge : %u\r\nord origin rouge : %u\r\nmin freq rouge : %u\r\n\n",h_color_sensor->red_transformation.red_coef_dir,h_color_sensor->red_transformation.red_ord_origin,h_color_sensor->red_transformation.red_min_freq);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	8b9b      	ldrh	r3, [r3, #28]
 80013d0:	4619      	mov	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	8bdb      	ldrh	r3, [r3, #30]
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	8c1b      	ldrh	r3, [r3, #32]
 80013dc:	4814      	ldr	r0, [pc, #80]	; (8001430 <colorHandleCalibrationSensor+0x260>)
 80013de:	f007 fd2d 	bl	8008e3c <iprintf>


	// flag to say hey calibration finished
	calibration_flag=0;
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <colorHandleCalibrationSensor+0x224>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002d8 	.word	0x200002d8
 80013f8:	0800bcc8 	.word	0x0800bcc8
 80013fc:	0800bce0 	.word	0x0800bce0
 8001400:	0800bd0c 	.word	0x0800bd0c
 8001404:	0800bd10 	.word	0x0800bd10
 8001408:	0800bd18 	.word	0x0800bd18
 800140c:	0800bd2c 	.word	0x0800bd2c
 8001410:	0800bd58 	.word	0x0800bd58
 8001414:	0800bd70 	.word	0x0800bd70
 8001418:	0800bd98 	.word	0x0800bd98
 800141c:	0800bdac 	.word	0x0800bdac
 8001420:	0800bdc8 	.word	0x0800bdc8
 8001424:	0800bde4 	.word	0x0800bde4
 8001428:	0800be00 	.word	0x0800be00
 800142c:	0800be1c 	.word	0x0800be1c
 8001430:	0800be5c 	.word	0x0800be5c

08001434 <colorSensorHandleInputCapture_IT>:


// --- fonction de gestion du retour capteur ---

void colorSensorHandleInputCapture_IT(h_color_sensor_t * h_color_sensor,TIM_TypeDef *TIM){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	//printf("entré dans tim2 IT\r\n");
	if(tour==0){
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <colorSensorHandleInputCapture_IT+0xb0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <colorSensorHandleInputCapture_IT+0x22>
		temps1=TIM->CNT;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	461a      	mov	r2, r3
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <colorSensorHandleInputCapture_IT+0xb4>)
 800144e:	601a      	str	r2, [r3, #0]
		tour=0;
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <colorSensorHandleInputCapture_IT+0xb0>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
	}
	if(tour==1){
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <colorSensorHandleInputCapture_IT+0xb0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <colorSensorHandleInputCapture_IT+0x3a>
		temps2=TIM->CNT;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	461a      	mov	r2, r3
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <colorSensorHandleInputCapture_IT+0xb8>)
 8001466:	601a      	str	r2, [r3, #0]
		tour=1;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <colorSensorHandleInputCapture_IT+0xb0>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
	}
	tour=1-tour;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <colorSensorHandleInputCapture_IT+0xb0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f1c3 0301 	rsb	r3, r3, #1
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <colorSensorHandleInputCapture_IT+0xb0>)
 8001478:	6013      	str	r3, [r2, #0]
	freq=abs(temps2-temps1);
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <colorSensorHandleInputCapture_IT+0xb8>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <colorSensorHandleInputCapture_IT+0xb4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	bfb8      	it	lt
 8001488:	425b      	neglt	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <colorSensorHandleInputCapture_IT+0xbc>)
 800148e:	601a      	str	r2, [r3, #0]
	h_color_sensor->frequence=freq;
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <colorSensorHandleInputCapture_IT+0xbc>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]
		}
		printf("fin affichage\r\n");
		u=0;
	}*/

	if((calibration_flag==1)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <colorSensorHandleInputCapture_IT+0xc0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10c      	bne.n	80014ba <colorSensorHandleInputCapture_IT+0x86>
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <colorSensorHandleInputCapture_IT+0xbc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d806      	bhi.n	80014ba <colorSensorHandleInputCapture_IT+0x86>
		colorHandleCalibrationValues(h_color_sensor,freq);
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <colorSensorHandleInputCapture_IT+0xbc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f820 	bl	80014f8 <colorHandleCalibrationValues>
	}
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
		// Analyse des valeur pour prise de decision sur la couleur
		colorHandleRawValues(h_color_sensor, freq);
	}
}
 80014b8:	e00f      	b.n	80014da <colorSensorHandleInputCapture_IT+0xa6>
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <colorSensorHandleInputCapture_IT+0xc0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10b      	bne.n	80014da <colorSensorHandleInputCapture_IT+0xa6>
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <colorSensorHandleInputCapture_IT+0xbc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d805      	bhi.n	80014da <colorSensorHandleInputCapture_IT+0xa6>
		colorHandleRawValues(h_color_sensor, freq);
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <colorSensorHandleInputCapture_IT+0xbc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8cd 	bl	8001674 <colorHandleRawValues>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000208 	.word	0x20000208
 80014e8:	20000200 	.word	0x20000200
 80014ec:	20000204 	.word	0x20000204
 80014f0:	200001fc 	.word	0x200001fc
 80014f4:	200002d8 	.word	0x200002d8

080014f8 <colorHandleCalibrationValues>:

static int colorHandleCalibrationValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	calib_tab[u]=freq;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <colorHandleCalibrationValues+0x144>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a4e      	ldr	r2, [pc, #312]	; (8001640 <colorHandleCalibrationValues+0x148>)
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	494e      	ldr	r1, [pc, #312]	; (8001644 <colorHandleCalibrationValues+0x14c>)
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u++;
 8001510:	4b4a      	ldr	r3, [pc, #296]	; (800163c <colorHandleCalibrationValues+0x144>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a49      	ldr	r2, [pc, #292]	; (800163c <colorHandleCalibrationValues+0x144>)
 8001518:	6013      	str	r3, [r2, #0]
	if(u==CALIBRATION_NB_VALUES){
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <colorHandleCalibrationValues+0x144>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b1e      	cmp	r3, #30
 8001520:	f040 8087 	bne.w	8001632 <colorHandleCalibrationValues+0x13a>
		colorDisable(h_color_sensor);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fdfb 	bl	8001120 <colorDisable>
		uint32_t res=0;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<30;i++){
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	e012      	b.n	800155a <colorHandleCalibrationValues+0x62>
			res=res+calib_tab[i];
 8001534:	4a43      	ldr	r2, [pc, #268]	; (8001644 <colorHandleCalibrationValues+0x14c>)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
			printf("calib values[%d] : %ld\r\n",i,calib_tab[i]);
 8001542:	4a40      	ldr	r2, [pc, #256]	; (8001644 <colorHandleCalibrationValues+0x14c>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	461a      	mov	r2, r3
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	483e      	ldr	r0, [pc, #248]	; (8001648 <colorHandleCalibrationValues+0x150>)
 8001550:	f007 fc74 	bl	8008e3c <iprintf>
		for(int i=0;i<30;i++){
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3301      	adds	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b1d      	cmp	r3, #29
 800155e:	dde9      	ble.n	8001534 <colorHandleCalibrationValues+0x3c>
		}
		switch(h_color_sensor->calib_state){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7d1b      	ldrb	r3, [r3, #20]
 8001564:	3b01      	subs	r3, #1
 8001566:	2b03      	cmp	r3, #3
 8001568:	d85a      	bhi.n	8001620 <colorHandleCalibrationValues+0x128>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <colorHandleCalibrationValues+0x78>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001581 	.word	0x08001581
 8001574:	080015ad 	.word	0x080015ad
 8001578:	080015d1 	.word	0x080015d1
 800157c:	080015fd 	.word	0x080015fd
		case CALIB_VERT_CANETTE:
			h_color_sensor->calib_struct.calib_value_vert_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4a32      	ldr	r2, [pc, #200]	; (800164c <colorHandleCalibrationValues+0x154>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	845a      	strh	r2, [r3, #34]	; 0x22
			h_color_sensor->green_transformation.green_min_freq=h_color_sensor->calib_struct.calib_value_vert_canette;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	835a      	strh	r2, [r3, #26]
			printf("Struct calib : champ vert_canette remplie\r\n");
 8001598:	482d      	ldr	r0, [pc, #180]	; (8001650 <colorHandleCalibrationValues+0x158>)
 800159a:	f007 fcd5 	bl	8008f48 <puts>
			printf("Calib_value_vert_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015a2:	4619      	mov	r1, r3
 80015a4:	482b      	ldr	r0, [pc, #172]	; (8001654 <colorHandleCalibrationValues+0x15c>)
 80015a6:	f007 fc49 	bl	8008e3c <iprintf>
			break;
 80015aa:	e03d      	b.n	8001628 <colorHandleCalibrationValues+0x130>
		case CALIB_VERT_VIDE:
			h_color_sensor->calib_struct.calib_value_vert_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a27      	ldr	r2, [pc, #156]	; (800164c <colorHandleCalibrationValues+0x154>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	849a      	strh	r2, [r3, #36]	; 0x24
			printf("Struct calib : champ vert_vide remplie\r\n");
 80015bc:	4826      	ldr	r0, [pc, #152]	; (8001658 <colorHandleCalibrationValues+0x160>)
 80015be:	f007 fcc3 	bl	8008f48 <puts>
			printf("Calib_value_vert_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4824      	ldr	r0, [pc, #144]	; (800165c <colorHandleCalibrationValues+0x164>)
 80015ca:	f007 fc37 	bl	8008e3c <iprintf>
			break;
 80015ce:	e02b      	b.n	8001628 <colorHandleCalibrationValues+0x130>
		case CALIB_ROUGE_CANETTE:
			h_color_sensor->calib_struct.calib_value_rouge_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <colorHandleCalibrationValues+0x154>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	84da      	strh	r2, [r3, #38]	; 0x26
			h_color_sensor->red_transformation.red_min_freq=h_color_sensor->calib_struct.calib_value_rouge_canette;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	841a      	strh	r2, [r3, #32]
			printf("Struct calib : champ rouge_canette remplie\r\n");
 80015e8:	481d      	ldr	r0, [pc, #116]	; (8001660 <colorHandleCalibrationValues+0x168>)
 80015ea:	f007 fcad 	bl	8008f48 <puts>
			printf("Calib_value_rouge_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015f2:	4619      	mov	r1, r3
 80015f4:	481b      	ldr	r0, [pc, #108]	; (8001664 <colorHandleCalibrationValues+0x16c>)
 80015f6:	f007 fc21 	bl	8008e3c <iprintf>
			break;
 80015fa:	e015      	b.n	8001628 <colorHandleCalibrationValues+0x130>
		case CALIB_ROUGE_VIDE:
			h_color_sensor->calib_struct.calib_value_rouge_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <colorHandleCalibrationValues+0x154>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
			printf("Struct calib : champ rouge_vide remplie\r\n");
 800160c:	4816      	ldr	r0, [pc, #88]	; (8001668 <colorHandleCalibrationValues+0x170>)
 800160e:	f007 fc9b 	bl	8008f48 <puts>
			printf("Calib_value_vert_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001616:	4619      	mov	r1, r3
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <colorHandleCalibrationValues+0x174>)
 800161a:	f007 fc0f 	bl	8008e3c <iprintf>
			break;
 800161e:	e003      	b.n	8001628 <colorHandleCalibrationValues+0x130>
		default:
			printf("bug dans la calibration\r\n\n");
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <colorHandleCalibrationValues+0x178>)
 8001622:	f007 fc91 	bl	8008f48 <puts>
			break;
 8001626:	bf00      	nop
		}
		u=0;
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <colorHandleCalibrationValues+0x144>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
		return 1;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <colorHandleCalibrationValues+0x13c>
	}
	return 0;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000354 	.word	0x20000354
 8001640:	200001fc 	.word	0x200001fc
 8001644:	200002dc 	.word	0x200002dc
 8001648:	0800bea0 	.word	0x0800bea0
 800164c:	88888889 	.word	0x88888889
 8001650:	0800bebc 	.word	0x0800bebc
 8001654:	0800bee8 	.word	0x0800bee8
 8001658:	0800bf0c 	.word	0x0800bf0c
 800165c:	0800bf34 	.word	0x0800bf34
 8001660:	0800bf54 	.word	0x0800bf54
 8001664:	0800bf80 	.word	0x0800bf80
 8001668:	0800bfa4 	.word	0x0800bfa4
 800166c:	0800bfd0 	.word	0x0800bfd0
 8001670:	0800bff0 	.word	0x0800bff0

08001674 <colorHandleRawValues>:

static int colorHandleRawValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af02      	add	r7, sp, #8
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	//printf("entre dans color_handle\r\n");
	if(raw_values_compteur<((NB_MEASURE_WANTED/2)-1)){
 800167e:	4b84      	ldr	r3, [pc, #528]	; (8001890 <colorHandleRawValues+0x21c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d826      	bhi.n	80016d4 <colorHandleRawValues+0x60>
		// premieres valeurs du tableau donc on est dans le vert
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8b5b      	ldrh	r3, [r3, #26]
 800168a:	461a      	mov	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4293      	cmp	r3, r2
 8001690:	d202      	bcs.n	8001698 <colorHandleRawValues+0x24>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	8b5b      	ldrh	r3, [r3, #26]
 8001696:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001698:	4b7d      	ldr	r3, [pc, #500]	; (8001890 <colorHandleRawValues+0x21c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	4a7d      	ldr	r2, [pc, #500]	; (8001894 <colorHandleRawValues+0x220>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	8adb      	ldrh	r3, [r3, #22]
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	8b12      	ldrh	r2, [r2, #24]
 80016b6:	4610      	mov	r0, r2
 80016b8:	4a75      	ldr	r2, [pc, #468]	; (8001890 <colorHandleRawValues+0x21c>)
 80016ba:	7812      	ldrb	r2, [r2, #0]
 80016bc:	4611      	mov	r1, r2
 80016be:	4403      	add	r3, r0
 80016c0:	4a75      	ldr	r2, [pc, #468]	; (8001898 <colorHandleRawValues+0x224>)
 80016c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <colorHandleRawValues+0x21c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b70      	ldr	r3, [pc, #448]	; (8001890 <colorHandleRawValues+0x21c>)
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e0d7      	b.n	8001884 <colorHandleRawValues+0x210>
	}

	else if(raw_values_compteur==((NB_MEASURE_WANTED/2)-1)){
 80016d4:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <colorHandleRawValues+0x21c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b09      	cmp	r3, #9
 80016da:	d130      	bne.n	800173e <colorHandleRawValues+0xca>
		//on est encore dans le vert mais on doit en plus changer la couleur de detection
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8b5b      	ldrh	r3, [r3, #26]
 80016e0:	461a      	mov	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d202      	bcs.n	80016ee <colorHandleRawValues+0x7a>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	8b5b      	ldrh	r3, [r3, #26]
 80016ec:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80016ee:	4b68      	ldr	r3, [pc, #416]	; (8001890 <colorHandleRawValues+0x21c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4a67      	ldr	r2, [pc, #412]	; (8001894 <colorHandleRawValues+0x220>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8adb      	ldrh	r3, [r3, #22]
 8001700:	461a      	mov	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	8b12      	ldrh	r2, [r2, #24]
 800170c:	4610      	mov	r0, r2
 800170e:	4a60      	ldr	r2, [pc, #384]	; (8001890 <colorHandleRawValues+0x21c>)
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	4611      	mov	r1, r2
 8001714:	4403      	add	r3, r0
 8001716:	4a60      	ldr	r2, [pc, #384]	; (8001898 <colorHandleRawValues+0x224>)
 8001718:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 800171c:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <colorHandleRawValues+0x21c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <colorHandleRawValues+0x21c>)
 8001726:	701a      	strb	r2, [r3, #0]

		// color change
		colorDisable(h_color_sensor);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fcf9 	bl	8001120 <colorDisable>
		colorSetPhotodiodeType(h_color_sensor,RED);
 800172e:	2101      	movs	r1, #1
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fc43 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(h_color_sensor);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fd1e 	bl	8001178 <colorEnable>
 800173c:	e0a2      	b.n	8001884 <colorHandleRawValues+0x210>
	}

	else if((raw_values_compteur>((NB_MEASURE_WANTED/2)-1))&&(raw_values_compteur<NB_MEASURE_WANTED)){
 800173e:	4b54      	ldr	r3, [pc, #336]	; (8001890 <colorHandleRawValues+0x21c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b09      	cmp	r3, #9
 8001744:	d92a      	bls.n	800179c <colorHandleRawValues+0x128>
 8001746:	4b52      	ldr	r3, [pc, #328]	; (8001890 <colorHandleRawValues+0x21c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b13      	cmp	r3, #19
 800174c:	d826      	bhi.n	800179c <colorHandleRawValues+0x128>
		// valeures rouges
		if(frequence<(h_color_sensor->red_transformation.red_min_freq)){
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8c1b      	ldrh	r3, [r3, #32]
 8001752:	461a      	mov	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4293      	cmp	r3, r2
 8001758:	d202      	bcs.n	8001760 <colorHandleRawValues+0xec>
			frequence = (uint32_t)h_color_sensor->red_transformation.red_min_freq;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	8c1b      	ldrh	r3, [r3, #32]
 800175e:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <colorHandleRawValues+0x21c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <colorHandleRawValues+0x220>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->red_transformation.red_coef_dir)*frequence)+(h_color_sensor->red_transformation.red_ord_origin);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	8b9b      	ldrh	r3, [r3, #28]
 8001772:	461a      	mov	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	8bd2      	ldrh	r2, [r2, #30]
 800177e:	4610      	mov	r0, r2
 8001780:	4a43      	ldr	r2, [pc, #268]	; (8001890 <colorHandleRawValues+0x21c>)
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	4611      	mov	r1, r2
 8001786:	4403      	add	r3, r0
 8001788:	4a43      	ldr	r2, [pc, #268]	; (8001898 <colorHandleRawValues+0x224>)
 800178a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 800178e:	4b40      	ldr	r3, [pc, #256]	; (8001890 <colorHandleRawValues+0x21c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <colorHandleRawValues+0x21c>)
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e073      	b.n	8001884 <colorHandleRawValues+0x210>
	}

	else if(raw_values_compteur==NB_MEASURE_WANTED){
 800179c:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <colorHandleRawValues+0x21c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b14      	cmp	r3, #20
 80017a2:	d16f      	bne.n	8001884 <colorHandleRawValues+0x210>
		// Pret a faire la moyenne du tableau pour plus de fiabilité
		colorDisable(h_color_sensor);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fcbb 	bl	8001120 <colorDisable>
		uint32_t green_mean=0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
		uint32_t red_mean=0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]

		// green mean with erase of waste values (the 2 first one each time)
		//printf("calcul moyenne vert\r\n");
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 80017b2:	2302      	movs	r3, #2
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e009      	b.n	80017cc <colorHandleRawValues+0x158>
			green_mean=green_mean+color_scaled_values[i];
 80017b8:	4a37      	ldr	r2, [pc, #220]	; (8001898 <colorHandleRawValues+0x224>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	61fb      	str	r3, [r7, #28]
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b09      	cmp	r3, #9
 80017d0:	ddf2      	ble.n	80017b8 <colorHandleRawValues+0x144>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne verte : %ld\r\n",i,color_scaled_values[i]);
			printf("green mean : %ld\r\n",green_mean);*/
		}
		green_color_value=floor(green_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feb4 	bl	8000544 <__aeabi_ui2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fa00 	bl	8000be8 <__aeabi_d2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a2c      	ldr	r2, [pc, #176]	; (800189c <colorHandleRawValues+0x228>)
 80017ec:	6013      	str	r3, [r2, #0]
		h_color_sensor->green_color=green_color_value;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <colorHandleRawValues+0x228>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]
		//printf("green color value : %ld\r\n",green_color_value);


		//red values mean
		//printf("calcul moyenne rouge\r\n");
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017f6:	230c      	movs	r3, #12
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e009      	b.n	8001810 <colorHandleRawValues+0x19c>
			red_mean=red_mean+color_scaled_values[i];
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <colorHandleRawValues+0x224>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4413      	add	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3301      	adds	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b13      	cmp	r3, #19
 8001814:	ddf2      	ble.n	80017fc <colorHandleRawValues+0x188>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne rouge : %ld\r\n",i,color_scaled_values[i]);
			printf("red mean : %ld\r\n",red_mean);*/
		}
		red_color_value=floor(red_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe92 	bl	8000544 <__aeabi_ui2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9de 	bl	8000be8 <__aeabi_d2uiz>
 800182c:	4603      	mov	r3, r0
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <colorHandleRawValues+0x22c>)
 8001830:	6013      	str	r3, [r2, #0]
		h_color_sensor->red_color=red_color_value;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <colorHandleRawValues+0x22c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60da      	str	r2, [r3, #12]

		//--debug
		//printf("red color value : %ld\r\n",red_color_value);

		raw_values_compteur=0;
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <colorHandleRawValues+0x21c>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]

		//Affichage tableau
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e010      	b.n	8001868 <colorHandleRawValues+0x1f4>
			printf("color_raw_values[%d] : %ld\t->\t color_scaled_value[%d] : %ld\r\n",i,color_raw_values[i],i,color_scaled_values[i]);
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <colorHandleRawValues+0x220>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800184e:	4912      	ldr	r1, [pc, #72]	; (8001898 <colorHandleRawValues+0x224>)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	4811      	ldr	r0, [pc, #68]	; (80018a4 <colorHandleRawValues+0x230>)
 800185e:	f007 faed 	bl	8008e3c <iprintf>
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b13      	cmp	r3, #19
 800186c:	ddeb      	ble.n	8001846 <colorHandleRawValues+0x1d2>
		}
		colorAnalyse(h_color_sensor,green_color_value,red_color_value);
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <colorHandleRawValues+0x228>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <colorHandleRawValues+0x22c>)
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f817 	bl	80018ac <colorAnalyse>
		printf("waiting for button press : \r\n");
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <colorHandleRawValues+0x234>)
 8001880:	f007 fb62 	bl	8008f48 <puts>
	}

	return 0; // fonctionnement normal
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002cc 	.word	0x200002cc
 8001894:	2000026c 	.word	0x2000026c
 8001898:	2000020c 	.word	0x2000020c
 800189c:	200002d0 	.word	0x200002d0
 80018a0:	200002d4 	.word	0x200002d4
 80018a4:	0800c00c 	.word	0x0800c00c
 80018a8:	0800c04c 	.word	0x0800c04c

080018ac <colorAnalyse>:


// --- fonction d'analyse et de prise de décision ---

static void colorAnalyse(h_color_sensor_t * h_color_sensor, color_t green, color_t red){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	printf("green : %ld \r\n",green);
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	480f      	ldr	r0, [pc, #60]	; (80018f8 <colorAnalyse+0x4c>)
 80018bc:	f007 fabe 	bl	8008e3c <iprintf>
	printf("red : %ld \r\n",red);
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <colorAnalyse+0x50>)
 80018c4:	f007 faba 	bl	8008e3c <iprintf>
	if(green<red){
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d203      	bcs.n	80018d8 <colorAnalyse+0x2c>
		printf("c'est vert\r\n");
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <colorAnalyse+0x54>)
 80018d2:	f007 fb39 	bl	8008f48 <puts>
		colorDoMeasureAgain(h_color_sensor);
	}
	else {
		printf("c'est rouge\r\n");
	}
}
 80018d6:	e00a      	b.n	80018ee <colorAnalyse+0x42>
	else if(green==red){
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d103      	bne.n	80018e8 <colorAnalyse+0x3c>
		colorDoMeasureAgain(h_color_sensor);
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f811 	bl	8001908 <colorDoMeasureAgain>
}
 80018e6:	e002      	b.n	80018ee <colorAnalyse+0x42>
		printf("c'est rouge\r\n");
 80018e8:	4806      	ldr	r0, [pc, #24]	; (8001904 <colorAnalyse+0x58>)
 80018ea:	f007 fb2d 	bl	8008f48 <puts>
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0800c06c 	.word	0x0800c06c
 80018fc:	0800c07c 	.word	0x0800c07c
 8001900:	0800c08c 	.word	0x0800c08c
 8001904:	0800c098 	.word	0x0800c098

08001908 <colorDoMeasureAgain>:

static void colorDoMeasureAgain(h_color_sensor_t * h_color_sensor){
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	colorEnable(h_color_sensor);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fc31 	bl	8001178 <colorEnable>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <timer_handle>:
 * tim_mode_t mode : htim configuration accirding to what is in .ioc file (INPUT_CAPTURE_IT, BASE_IT, PWM)
 * tim_status_t status : same but START,STOP
 * uint32_t channel ; the output channel of htim
 * @return none
 */
void timer_handle(TIM_HandleTypeDef htim, tim_mode_t mode, tim_status_t status,uint32_t channel){
 800191e:	b084      	sub	sp, #16
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
 8001924:	f107 0c08 	add.w	ip, r7, #8
 8001928:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(status==START){
 800192c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001930:	2b01      	cmp	r3, #1
 8001932:	d11b      	bne.n	800196c <timer_handle+0x4e>
		switch(mode){
 8001934:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001938:	2b03      	cmp	r3, #3
 800193a:	d00c      	beq.n	8001956 <timer_handle+0x38>
 800193c:	2b03      	cmp	r3, #3
 800193e:	dc53      	bgt.n	80019e8 <timer_handle+0xca>
 8001940:	2b01      	cmp	r3, #1
 8001942:	d002      	beq.n	800194a <timer_handle+0x2c>
 8001944:	2b02      	cmp	r3, #2
 8001946:	d00c      	beq.n	8001962 <timer_handle+0x44>
			break;
		case BASE_IT:
			HAL_TIM_Base_Start_IT(&htim);
			break;
		default :
			break;
 8001948:	e04e      	b.n	80019e8 <timer_handle+0xca>
			HAL_TIM_IC_Start_IT(&htim, channel);
 800194a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800194c:	f107 0008 	add.w	r0, r7, #8
 8001950:	f002 fd50 	bl	80043f4 <HAL_TIM_IC_Start_IT>
			break;
 8001954:	e04f      	b.n	80019f6 <timer_handle+0xd8>
			HAL_TIM_PWM_Start(&htim,channel);
 8001956:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001958:	f107 0008 	add.w	r0, r7, #8
 800195c:	f002 fb6e 	bl	800403c <HAL_TIM_PWM_Start>
			break;
 8001960:	e049      	b.n	80019f6 <timer_handle+0xd8>
			HAL_TIM_Base_Start_IT(&htim);
 8001962:	f107 0008 	add.w	r0, r7, #8
 8001966:	f002 fa61 	bl	8003e2c <HAL_TIM_Base_Start_IT>
			break;
 800196a:	e044      	b.n	80019f6 <timer_handle+0xd8>
		}
	}
	else if (status==STOP){
 800196c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11b      	bne.n	80019ac <timer_handle+0x8e>
		switch(mode){
 8001974:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001978:	2b03      	cmp	r3, #3
 800197a:	d00c      	beq.n	8001996 <timer_handle+0x78>
 800197c:	2b03      	cmp	r3, #3
 800197e:	dc35      	bgt.n	80019ec <timer_handle+0xce>
 8001980:	2b01      	cmp	r3, #1
 8001982:	d002      	beq.n	800198a <timer_handle+0x6c>
 8001984:	2b02      	cmp	r3, #2
 8001986:	d00c      	beq.n	80019a2 <timer_handle+0x84>
			break;
		case BASE_IT:
			HAL_TIM_Base_Stop_IT(&htim);
			break;
		default :
			break;
 8001988:	e030      	b.n	80019ec <timer_handle+0xce>
			HAL_TIM_IC_Stop_IT(&htim, channel);
 800198a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800198c:	f107 0008 	add.w	r0, r7, #8
 8001990:	f002 fe80 	bl	8004694 <HAL_TIM_IC_Stop_IT>
			break;
 8001994:	e02f      	b.n	80019f6 <timer_handle+0xd8>
			HAL_TIM_PWM_Stop(&htim,channel);
 8001996:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001998:	f107 0008 	add.w	r0, r7, #8
 800199c:	f002 fc48 	bl	8004230 <HAL_TIM_PWM_Stop>
			break;
 80019a0:	e029      	b.n	80019f6 <timer_handle+0xd8>
			HAL_TIM_Base_Stop_IT(&htim);
 80019a2:	f107 0008 	add.w	r0, r7, #8
 80019a6:	f002 fab9 	bl	8003f1c <HAL_TIM_Base_Stop_IT>
			break;
 80019aa:	e024      	b.n	80019f6 <timer_handle+0xd8>
		}
	}
	else if (status==INIT){
 80019ac:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d11d      	bne.n	80019f0 <timer_handle+0xd2>
		switch(mode){
 80019b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d00b      	beq.n	80019d4 <timer_handle+0xb6>
 80019bc:	2b03      	cmp	r3, #3
 80019be:	dc19      	bgt.n	80019f4 <timer_handle+0xd6>
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d002      	beq.n	80019ca <timer_handle+0xac>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d00a      	beq.n	80019de <timer_handle+0xc0>
			break;
		case BASE_IT:
			HAL_TIM_Base_Init(&htim);
			break;
		default :
			break;
 80019c8:	e014      	b.n	80019f4 <timer_handle+0xd6>
			HAL_TIM_IC_Init(&htim);
 80019ca:	f107 0008 	add.w	r0, r7, #8
 80019ce:	f002 fcaf 	bl	8004330 <HAL_TIM_IC_Init>
			break;
 80019d2:	e010      	b.n	80019f6 <timer_handle+0xd8>
			HAL_TIM_PWM_Init(&htim);
 80019d4:	f107 0008 	add.w	r0, r7, #8
 80019d8:	f002 facf 	bl	8003f7a <HAL_TIM_PWM_Init>
			break;
 80019dc:	e00b      	b.n	80019f6 <timer_handle+0xd8>
			HAL_TIM_Base_Init(&htim);
 80019de:	f107 0008 	add.w	r0, r7, #8
 80019e2:	f002 f9cb 	bl	8003d7c <HAL_TIM_Base_Init>
			break;
 80019e6:	e006      	b.n	80019f6 <timer_handle+0xd8>
			break;
 80019e8:	bf00      	nop
 80019ea:	e004      	b.n	80019f6 <timer_handle+0xd8>
			break;
 80019ec:	bf00      	nop
 80019ee:	e002      	b.n	80019f6 <timer_handle+0xd8>
		}
	}
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <timer_handle+0xd8>
			break;
 80019f4:	bf00      	nop
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fe:	b004      	add	sp, #16
 8001a00:	4770      	bx	lr

08001a02 <GPIO_write>:
 * uint16_t gpio_pin : The pin of the GPIO you want to deal with
 * GPIO_PinState gpio_PinState : the state you want your GPIO to have (1 or 0)
 *
 * @return 0 if fail else 1
 */
void GPIO_write(GPIO_TypeDef * gpio_port,uint16_t gpio_pin,GPIO_PinState gpio_PinState ){
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	807b      	strh	r3, [r7, #2]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(gpio_port,gpio_pin,gpio_PinState);
 8001a12:	787a      	ldrb	r2, [r7, #1]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f001 f881 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <vApplicationGetIdleTaskMemory+0x30>)
 8001a3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000035c 	.word	0x2000035c
 8001a58:	20000410 	.word	0x20000410

08001a5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_FREERTOS_Init+0x30>)
 8001a64:	1d3c      	adds	r4, r7, #4
 8001a66:	461d      	mov	r5, r3
 8001a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 fa65 	bl	8005f48 <osThreadCreate>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <MX_FREERTOS_Init+0x34>)
 8001a82:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	0800c1a4 	.word	0x0800c1a4
 8001a90:	20000358 	.word	0x20000358

08001a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f004 fa9f 	bl	8005fe0 <osDelay>
 8001aa2:	e7fb      	b.n	8001a9c <StartDefaultTask+0x8>

08001aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a3a      	ldr	r2, [pc, #232]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(color_S2_GPIO_Port, color_S2_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	4829      	ldr	r0, [pc, #164]	; (8001bf4 <MX_GPIO_Init+0x150>)
 8001b50:	f000 ffe6 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, color_enable_Pin|color_S0_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	21c0      	movs	r1, #192	; 0xc0
 8001b58:	4827      	ldr	r0, [pc, #156]	; (8001bf8 <MX_GPIO_Init+0x154>)
 8001b5a:	f000 ffe1 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, color_S3_Pin|color_S1_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	21c0      	movs	r1, #192	; 0xc0
 8001b62:	4826      	ldr	r0, [pc, #152]	; (8001bfc <MX_GPIO_Init+0x158>)
 8001b64:	f000 ffdc 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = color_S2_Pin;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(color_S2_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <MX_GPIO_Init+0x150>)
 8001b80:	f000 fe22 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8001b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4819      	ldr	r0, [pc, #100]	; (8001c00 <MX_GPIO_Init+0x15c>)
 8001b9c:	f000 fe14 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = color_enable_Pin|color_S0_Pin;
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MX_GPIO_Init+0x154>)
 8001bb8:	f000 fe06 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = color_S3_Pin|color_S1_Pin;
 8001bbc:	23c0      	movs	r3, #192	; 0xc0
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <MX_GPIO_Init+0x158>)
 8001bd4:	f000 fdf8 	bl	80027c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2105      	movs	r1, #5
 8001bdc:	2028      	movs	r0, #40	; 0x28
 8001bde:	f000 fdc9 	bl	8002774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be2:	2028      	movs	r0, #40	; 0x28
 8001be4:	f000 fde2 	bl	80027ac <HAL_NVIC_EnableIRQ>

}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
		colorSetPhotodiodeType(&color_sensor1, GREEN);
		printf("semaphore colormeasureSemaphore donné\r\n");
		xSemaphoreGiveFromISR(colorMeasureSemaphore,&higher_priority_task_woken);*/
		//colorEnable(&color_sensor1);
	}
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <bidonTask>:

TaskHandle_t h_bidonTask;
TaskHandle_t h_processWU;
SemaphoreHandle_t sem_bidon;

void bidonTask(void * pvParameters){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(sem_bidon,portMAX_DELAY);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <bidonTask+0x2c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 fc71 	bl	8006514 <xQueueSemaphoreTake>
		printf("je suis la fonction bidon\r\n");
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <bidonTask+0x30>)
 8001c34:	f007 f988 	bl	8008f48 <puts>
		xSemaphoreGive(sem_bidon);
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <bidonTask+0x2c>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	f004 fb61 	bl	8006308 <xQueueGenericSend>
		xSemaphoreTake(sem_bidon,portMAX_DELAY);
 8001c46:	e7ed      	b.n	8001c24 <bidonTask+0x8>
 8001c48:	20000644 	.word	0x20000644
 8001c4c:	0800c1c0 	.word	0x0800c1c0

08001c50 <task_process_Wake_Up>:
	}
}

void task_process_Wake_Up(void * pvParameters){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	sem_bidon=xSemaphoreCreateBinary();
 8001c58:	2203      	movs	r2, #3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f004 faf1 	bl	8006244 <xQueueGenericCreate>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <task_process_Wake_Up+0x44>)
 8001c66:	6013      	str	r3, [r2, #0]
	uint32_t counter=0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

	for(;;){
		if(counter==500){
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c72:	d108      	bne.n	8001c86 <task_process_Wake_Up+0x36>
			xSemaphoreGive(sem_bidon);
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <task_process_Wake_Up+0x44>)
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f004 fb43 	bl	8006308 <xQueueGenericSend>
			counter=0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
		}
		/*if(counter==800){
			xSemaphoreGive(colorMeasureSemaphore);
		}*/
		counter++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
		vTaskDelay(1); //crée le delay de 1ms
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f005 f809 	bl	8006ca4 <vTaskDelay>
		if(counter==500){
 8001c92:	e7eb      	b.n	8001c6c <task_process_Wake_Up+0x1c>
 8001c94:	20000644 	.word	0x20000644

08001c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9e:	f000 fc84 	bl	80025aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca2:	f000 f883 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca6:	f7ff fefd 	bl	8001aa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001caa:	f000 fae7 	bl	800227c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001cae:	f000 fba1 	bl	80023f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //desactive the internal buffering for scanf, that is set by default in syscalls.c
  setvbuf(stdin, NULL, _IONBF, 0);
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <main+0xd0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6858      	ldr	r0, [r3, #4]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2202      	movs	r2, #2
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	f007 f9dd 	bl	800907c <setvbuf>

	printf("\n\n---- color sensor ----\r\n");
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <main+0xd4>)
 8001cc4:	f007 f940 	bl	8008f48 <puts>
  	colorHandleCalibrationSensor(&color_sensor1);
  	printf("waiting for button press to measure : \r\n");*/

	// ----- test 4 : FreeRTOS -----

	colorSensorInit(&color_sensor1, GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2204      	movs	r2, #4
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4828      	ldr	r0, [pc, #160]	; (8001d70 <main+0xd8>)
 8001cd0:	f7ff f9d4 	bl	800107c <colorSensorInit>
	colorHandleCalibrationSensor(&color_sensor1);
 8001cd4:	4826      	ldr	r0, [pc, #152]	; (8001d70 <main+0xd8>)
 8001cd6:	f7ff fa7b 	bl	80011d0 <colorHandleCalibrationSensor>


	// creation tache process
	if(pdTRUE==xTaskCreate(task_process_Wake_Up,"Taskprocess",COLOR_STACK_DEPTH,NULL,10,&h_processWU)){
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <main+0xdc>)
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	230a      	movs	r3, #10
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ce8:	4923      	ldr	r1, [pc, #140]	; (8001d78 <main+0xe0>)
 8001cea:	4824      	ldr	r0, [pc, #144]	; (8001d7c <main+0xe4>)
 8001cec:	f004 fe8b 	bl	8006a06 <xTaskCreate>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d103      	bne.n	8001cfe <main+0x66>
		printf("process wake up created successfully\r\n");
 8001cf6:	4822      	ldr	r0, [pc, #136]	; (8001d80 <main+0xe8>)
 8001cf8:	f007 f926 	bl	8008f48 <puts>
 8001cfc:	e002      	b.n	8001d04 <main+0x6c>
	}
	else{
		printf("process wake up creation failed !\r\n");
 8001cfe:	4821      	ldr	r0, [pc, #132]	; (8001d84 <main+0xec>)
 8001d00:	f007 f922 	bl	8008f48 <puts>
	}

	// creation tache bidon
	if(pdTRUE==xTaskCreate(bidonTask,"bidonTask",COLOR_STACK_DEPTH,NULL,1,&h_bidonTask)){
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <main+0xf0>)
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d12:	491e      	ldr	r1, [pc, #120]	; (8001d8c <main+0xf4>)
 8001d14:	481e      	ldr	r0, [pc, #120]	; (8001d90 <main+0xf8>)
 8001d16:	f004 fe76 	bl	8006a06 <xTaskCreate>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d103      	bne.n	8001d28 <main+0x90>
		printf("bidonTask created successfully\r\n");
 8001d20:	481c      	ldr	r0, [pc, #112]	; (8001d94 <main+0xfc>)
 8001d22:	f007 f911 	bl	8008f48 <puts>
 8001d26:	e002      	b.n	8001d2e <main+0x96>
	}
	else{
		printf("bidonTask creation failed !\r\n");
 8001d28:	481b      	ldr	r0, [pc, #108]	; (8001d98 <main+0x100>)
 8001d2a:	f007 f90d 	bl	8008f48 <puts>
	}

	// creation semaphore bidon
	sem_bidon=xSemaphoreCreateBinary();
 8001d2e:	2203      	movs	r2, #3
 8001d30:	2100      	movs	r1, #0
 8001d32:	2001      	movs	r0, #1
 8001d34:	f004 fa86 	bl	8006244 <xQueueGenericCreate>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <main+0x104>)
 8001d3c:	6013      	str	r3, [r2, #0]
	if(sem_bidon==NULL){
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <main+0x104>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <main+0xb4>
		printf("sem bidon creation failed ! \r\n");
 8001d46:	4816      	ldr	r0, [pc, #88]	; (8001da0 <main+0x108>)
 8001d48:	f007 f8fe 	bl	8008f48 <puts>
	}
	printf("sem bidon created\r\n");
 8001d4c:	4815      	ldr	r0, [pc, #84]	; (8001da4 <main+0x10c>)
 8001d4e:	f007 f8fb 	bl	8008f48 <puts>
	//colorStartSensor(&color_sensor1);




	printf("scheduler started\r\n");
 8001d52:	4815      	ldr	r0, [pc, #84]	; (8001da8 <main+0x110>)
 8001d54:	f007 f8f8 	bl	8008f48 <puts>
  	vTaskStartScheduler();
 8001d58:	f004 ffda 	bl	8006d10 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d5c:	f7ff fe7e 	bl	8001a5c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d60:	f004 f8eb 	bl	8005f3a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001d64:	e7fe      	b.n	8001d64 <main+0xcc>
 8001d66:	bf00      	nop
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	0800c1dc 	.word	0x0800c1dc
 8001d70:	20000610 	.word	0x20000610
 8001d74:	20000640 	.word	0x20000640
 8001d78:	0800c1f8 	.word	0x0800c1f8
 8001d7c:	08001c51 	.word	0x08001c51
 8001d80:	0800c204 	.word	0x0800c204
 8001d84:	0800c22c 	.word	0x0800c22c
 8001d88:	2000063c 	.word	0x2000063c
 8001d8c:	0800c250 	.word	0x0800c250
 8001d90:	08001c1d 	.word	0x08001c1d
 8001d94:	0800c25c 	.word	0x0800c25c
 8001d98:	0800c27c 	.word	0x0800c27c
 8001d9c:	20000644 	.word	0x20000644
 8001da0:	0800c29c 	.word	0x0800c29c
 8001da4:	0800c2bc 	.word	0x0800c2bc
 8001da8:	0800c2d0 	.word	0x0800c2d0

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	; 0x50
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	2230      	movs	r2, #48	; 0x30
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f006 fb37 	bl	800842e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <SystemClock_Config+0xd4>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <SystemClock_Config+0xd4>)
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <SystemClock_Config+0xd4>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <SystemClock_Config+0xd8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <SystemClock_Config+0xd8>)
 8001dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <SystemClock_Config+0xd8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e14:	2319      	movs	r3, #25
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e22:	2309      	movs	r3, #9
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fefa 	bl	8002c24 <HAL_RCC_OscConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e36:	f000 f869 	bl	8001f0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e3a:	f000 fea3 	bl	8002b84 <HAL_PWREx_EnableOverDrive>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e44:	f000 f862 	bl	8001f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e48:	230f      	movs	r3, #15
 8001e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2106      	movs	r1, #6
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 f980 	bl	800316c <HAL_RCC_ClockConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001e72:	f000 f84b 	bl	8001f0c <Error_Handler>
  }
}
 8001e76:	bf00      	nop
 8001e78:	3750      	adds	r7, #80	; 0x50
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000

08001e88 <__io_putchar>:

/* USER CODE BEGIN 4 */

//--_ Redirection du printf
int __io_putchar(int ch){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001e90:	1d39      	adds	r1, r7, #4
 8001e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e96:	2201      	movs	r2, #1
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <__io_putchar+0x20>)
 8001e9a:	f003 faeb 	bl	8005474 <HAL_UART_Transmit>
	return ch;
 8001e9e:	687b      	ldr	r3, [r7, #4]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200006e4 	.word	0x200006e4

08001eac <__io_getchar>:


// --- redirection du scanf
int __io_getchar(void){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <__io_getchar+0x38>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ebe:	1df9      	adds	r1, r7, #7
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <__io_getchar+0x38>)
 8001ec8:	f003 fb57 	bl	800557a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ecc:	1df9      	adds	r1, r7, #7
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <__io_getchar+0x38>)
 8001ed6:	f003 facd 	bl	8005474 <HAL_UART_Transmit>
  return ch;
 8001eda:	79fb      	ldrb	r3, [r7, #7]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200006e4 	.word	0x200006e4

08001ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001efa:	f000 fb63 	bl	80025c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40001000 	.word	0x40001000

08001f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f14:	e7fe      	b.n	8001f14 <Error_Handler+0x8>
	...

08001f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	210f      	movs	r1, #15
 8001f52:	f06f 0001 	mvn.w	r0, #1
 8001f56:	f000 fc0d 	bl	8002774 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08e      	sub	sp, #56	; 0x38
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_InitTick+0xe0>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_InitTick+0xe0>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_InitTick+0xe0>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f90:	f107 0210 	add.w	r2, r7, #16
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 facc 	bl	8003538 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001faa:	f001 fa9d 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8001fae:	6378      	str	r0, [r7, #52]	; 0x34
 8001fb0:	e004      	b.n	8001fbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fb2:	f001 fa99 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_InitTick+0xe4>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_InitTick+0xe8>)
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <HAL_InitTick+0xec>)
 8001fce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_InitTick+0xe8>)
 8001fd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_InitTick+0xe8>)
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_InitTick+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_InitTick+0xe8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_InitTick+0xe8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ff0:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_InitTick+0xe8>)
 8001ff2:	f001 fec3 	bl	8003d7c <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11b      	bne.n	800203c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002004:	4812      	ldr	r0, [pc, #72]	; (8002050 <HAL_InitTick+0xe8>)
 8002006:	f001 ff11 	bl	8003e2c <HAL_TIM_Base_Start_IT>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002014:	2b00      	cmp	r3, #0
 8002016:	d111      	bne.n	800203c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002018:	2036      	movs	r0, #54	; 0x36
 800201a:	f000 fbc7 	bl	80027ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d808      	bhi.n	8002036 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	2036      	movs	r0, #54	; 0x36
 800202a:	f000 fba3 	bl	8002774 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_InitTick+0xf0>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e002      	b.n	800203c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800203c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002040:	4618      	mov	r0, r3
 8002042:	3738      	adds	r7, #56	; 0x38
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	431bde83 	.word	0x431bde83
 8002050:	20000648 	.word	0x20000648
 8002054:	40001000 	.word	0x40001000
 8002058:	20000004 	.word	0x20000004

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler+0x4>

08002062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <MemManage_Handler+0x4>

0800206e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler+0x4>

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	colorSensorHandleInputCapture_IT(&color_sensor1, TIM2);
 800208c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <TIM2_IRQHandler+0x18>)
 8002092:	f7ff f9cf 	bl	8001434 <colorSensorHandleInputCapture_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002096:	4803      	ldr	r0, [pc, #12]	; (80020a4 <TIM2_IRQHandler+0x1c>)
 8002098:	f002 fbba 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000610 	.word	0x20000610
 80020a4:	20000698 	.word	0x20000698

080020a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80020ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020b0:	f000 fd50 	bl	8002b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM6_DAC_IRQHandler+0x10>)
 80020be:	f002 fba7 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000648 	.word	0x20000648

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e6:	f006 f855 	bl	8008194 <__errno>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2216      	movs	r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
	return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800210e:	e7fe      	b.n	800210e <_exit+0x12>

08002110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002122:	f7ff fec3 	bl	8001eac <__io_getchar>
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
	}

return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e009      	b.n	8002170 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fe8f 	bl	8001e88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	dbf1      	blt.n	800215c <_write+0x12>
	}
	return len;
 8002178:	687b      	ldr	r3, [r7, #4]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_close>:

int _close(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021aa:	605a      	str	r2, [r3, #4]
	return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_isatty>:

int _isatty(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f005 ffba 	bl	8008194 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20050000 	.word	0x20050000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000694 	.word	0x20000694
 8002254:	200044d0 	.word	0x200044d0

08002258 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	f107 0320 	add.w	r3, r7, #32
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022b2:	2263      	movs	r2, #99	; 0x63
 80022b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <MX_TIM2_Init+0xe0>)
 80022c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ce:	4822      	ldr	r0, [pc, #136]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022d0:	f001 fd54 	bl	8003d7c <HAL_TIM_Base_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80022da:	f7ff fe17 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022e4:	f107 0320 	add.w	r3, r7, #32
 80022e8:	4619      	mov	r1, r3
 80022ea:	481b      	ldr	r0, [pc, #108]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022ec:	f002 fc4c 	bl	8004b88 <HAL_TIM_ConfigClockSource>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022f6:	f7ff fe09 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80022fa:	4817      	ldr	r0, [pc, #92]	; (8002358 <MX_TIM2_Init+0xdc>)
 80022fc:	f002 f818 	bl	8004330 <HAL_TIM_IC_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002306:	f7ff fe01 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	480f      	ldr	r0, [pc, #60]	; (8002358 <MX_TIM2_Init+0xdc>)
 800231a:	f002 ffb1 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002324:	f7ff fdf2 	bl	8001f0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_TIM2_Init+0xdc>)
 8002340:	f002 fb85 	bl	8004a4e <HAL_TIM_IC_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800234a:	f7ff fddf 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	3730      	adds	r7, #48	; 0x30
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000698 	.word	0x20000698
 800235c:	000f4240 	.word	0x000f4240

08002360 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d130      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_TIM_Base_MspInit+0x8c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_TIM_Base_MspInit+0x8c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_TIM_Base_MspInit+0x8c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_TIM_Base_MspInit+0x8c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_TIM_Base_MspInit+0x8c>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_TIM_Base_MspInit+0x8c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = color_input_freq_Pin;
 80023b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023bc:	2301      	movs	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c0:	2302      	movs	r3, #2
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023c4:	2301      	movs	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(color_input_freq_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4808      	ldr	r0, [pc, #32]	; (80023f0 <HAL_TIM_Base_MspInit+0x90>)
 80023d0:	f000 f9fa 	bl	80027c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2105      	movs	r1, #5
 80023d8:	201c      	movs	r0, #28
 80023da:	f000 f9cb 	bl	8002774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023de:	201c      	movs	r0, #28
 80023e0:	f000 f9e4 	bl	80027ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_USART1_UART_Init+0x58>)
 80023fa:	4a15      	ldr	r2, [pc, #84]	; (8002450 <MX_USART1_UART_Init+0x5c>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <MX_USART1_UART_Init+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_USART1_UART_Init+0x58>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <MX_USART1_UART_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_USART1_UART_Init+0x58>)
 8002438:	f002 ffce 	bl	80053d8 <HAL_UART_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002442:	f7ff fd63 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200006e4 	.word	0x200006e4
 8002450:	40011000 	.word	0x40011000

08002454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0ac      	sub	sp, #176	; 0xb0
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 0318 	add.w	r3, r7, #24
 8002470:	2284      	movs	r2, #132	; 0x84
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f005 ffda 	bl	800842e <memset>
  if(uartHandle->Instance==USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a32      	ldr	r2, [pc, #200]	; (8002548 <HAL_UART_MspInit+0xf4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d15c      	bne.n	800253e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002484:	2340      	movs	r3, #64	; 0x40
 8002486:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002488:	2300      	movs	r3, #0
 800248a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	f107 0318 	add.w	r3, r7, #24
 8002490:	4618      	mov	r0, r3
 8002492:	f001 f883 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800249c:	f7ff fd36 	bl	8001f0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	4a29      	ldr	r2, [pc, #164]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024a6:	f043 0310 	orr.w	r3, r3, #16
 80024aa:	6453      	str	r3, [r2, #68]	; 0x44
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4a23      	ldr	r2, [pc, #140]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6313      	str	r3, [r2, #48]	; 0x30
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_UART_MspInit+0xf8>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002500:	2307      	movs	r3, #7
 8002502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800250a:	4619      	mov	r1, r3
 800250c:	4810      	ldr	r0, [pc, #64]	; (8002550 <HAL_UART_MspInit+0xfc>)
 800250e:	f000 f95b 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800252c:	2307      	movs	r3, #7
 800252e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002536:	4619      	mov	r1, r3
 8002538:	4806      	ldr	r0, [pc, #24]	; (8002554 <HAL_UART_MspInit+0x100>)
 800253a:	f000 f945 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800253e:	bf00      	nop
 8002540:	37b0      	adds	r7, #176	; 0xb0
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40011000 	.word	0x40011000
 800254c:	40023800 	.word	0x40023800
 8002550:	40020400 	.word	0x40020400
 8002554:	40020000 	.word	0x40020000

08002558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002590 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800255c:	480d      	ldr	r0, [pc, #52]	; (8002594 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800255e:	490e      	ldr	r1, [pc, #56]	; (8002598 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002560:	4a0e      	ldr	r2, [pc, #56]	; (800259c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002564:	e002      	b.n	800256c <LoopCopyDataInit>

08002566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256a:	3304      	adds	r3, #4

0800256c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800256c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002570:	d3f9      	bcc.n	8002566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002574:	4c0b      	ldr	r4, [pc, #44]	; (80025a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002578:	e001      	b.n	800257e <LoopFillZerobss>

0800257a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800257c:	3204      	adds	r2, #4

0800257e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002580:	d3fb      	bcc.n	800257a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002582:	f7ff fe69 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002586:	f005 ff1d 	bl	80083c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258a:	f7ff fb85 	bl	8001c98 <main>
  bx  lr    
 800258e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002590:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002598:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800259c:	0800c718 	.word	0x0800c718
  ldr r2, =_sbss
 80025a0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025a4:	200044cc 	.word	0x200044cc

080025a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a8:	e7fe      	b.n	80025a8 <ADC_IRQHandler>

080025aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ae:	2003      	movs	r0, #3
 80025b0:	f000 f8d5 	bl	800275e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b4:	200f      	movs	r0, #15
 80025b6:	f7ff fcd7 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ba:	f7ff fcad 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_IncTick+0x20>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x24>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_IncTick+0x24>)
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008
 80025e8:	2000076c 	.word	0x2000076c

080025ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return uwTick;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_GetTick+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000076c 	.word	0x2000076c

08002604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <__NVIC_SetPriorityGrouping+0x40>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x40>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00
 8002648:	05fa0000 	.word	0x05fa0000

0800264c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <__NVIC_GetPriorityGrouping+0x18>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	f003 0307 	and.w	r3, r3, #7
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db0b      	blt.n	8002692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4907      	ldr	r1, [pc, #28]	; (80026a0 <__NVIC_EnableIRQ+0x38>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff4c 	bl	8002604 <__NVIC_SetPriorityGrouping>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002786:	f7ff ff61 	bl	800264c <__NVIC_GetPriorityGrouping>
 800278a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	6978      	ldr	r0, [r7, #20]
 8002792:	f7ff ffb1 	bl	80026f8 <NVIC_EncodePriority>
 8002796:	4602      	mov	r2, r0
 8002798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff80 	bl	80026a4 <__NVIC_SetPriority>
}
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff54 	bl	8002668 <__NVIC_EnableIRQ>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e175      	b.n	8002ad4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8164 	bne.w	8002ace <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d005      	beq.n	800281e <HAL_GPIO_Init+0x56>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d130      	bne.n	8002880 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2203      	movs	r2, #3
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 0201 	and.w	r2, r3, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d123      	bne.n	8002910 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80be 	beq.w	8002ace <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a65      	ldr	r2, [pc, #404]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800296a:	4a61      	ldr	r2, [pc, #388]	; (8002af0 <HAL_GPIO_Init+0x328>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_GPIO_Init+0x32c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d037      	beq.n	8002a06 <HAL_GPIO_Init+0x23e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_GPIO_Init+0x330>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d031      	beq.n	8002a02 <HAL_GPIO_Init+0x23a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_GPIO_Init+0x334>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d02b      	beq.n	80029fe <HAL_GPIO_Init+0x236>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a55      	ldr	r2, [pc, #340]	; (8002b00 <HAL_GPIO_Init+0x338>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d025      	beq.n	80029fa <HAL_GPIO_Init+0x232>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x33c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01f      	beq.n	80029f6 <HAL_GPIO_Init+0x22e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <HAL_GPIO_Init+0x340>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d019      	beq.n	80029f2 <HAL_GPIO_Init+0x22a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <HAL_GPIO_Init+0x344>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_GPIO_Init+0x226>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a51      	ldr	r2, [pc, #324]	; (8002b10 <HAL_GPIO_Init+0x348>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00d      	beq.n	80029ea <HAL_GPIO_Init+0x222>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a50      	ldr	r2, [pc, #320]	; (8002b14 <HAL_GPIO_Init+0x34c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <HAL_GPIO_Init+0x21e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_GPIO_Init+0x350>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_GPIO_Init+0x21a>
 80029de:	2309      	movs	r3, #9
 80029e0:	e012      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029e2:	230a      	movs	r3, #10
 80029e4:	e010      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029e6:	2308      	movs	r3, #8
 80029e8:	e00e      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029ea:	2307      	movs	r3, #7
 80029ec:	e00c      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029ee:	2306      	movs	r3, #6
 80029f0:	e00a      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029f2:	2305      	movs	r3, #5
 80029f4:	e008      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e004      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_GPIO_Init+0x240>
 8002a06:	2300      	movs	r3, #0
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f002 0203 	and.w	r2, r2, #3
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	4093      	lsls	r3, r2
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a18:	4935      	ldr	r1, [pc, #212]	; (8002af0 <HAL_GPIO_Init+0x328>)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4a:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a50:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a74:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a7a:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9e:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_GPIO_Init+0x354>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	f67f ae86 	bls.w	80027e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3724      	adds	r7, #36	; 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40013800 	.word	0x40013800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40020400 	.word	0x40020400
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020c00 	.word	0x40020c00
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40021400 	.word	0x40021400
 8002b0c:	40021800 	.word	0x40021800
 8002b10:	40021c00 	.word	0x40021c00
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40022400 	.word	0x40022400
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b3c:	e003      	b.n	8002b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	619a      	str	r2, [r3, #24]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b6a:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f846 	bl	8001c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb2:	f7ff fd1b 	bl	80025ec <HAL_GetTick>
 8002bb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bb8:	e009      	b.n	8002bce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bba:	f7ff fd17 	bl	80025ec <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc8:	d901      	bls.n	8002bce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e022      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d1ee      	bne.n	8002bba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7ff fd00 	bl	80025ec <HAL_GetTick>
 8002bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bee:	e009      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf0:	f7ff fcfc 	bl	80025ec <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfe:	d901      	bls.n	8002c04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e007      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e291      	b.n	800315e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8087 	beq.w	8002d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c48:	4b96      	ldr	r3, [pc, #600]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d00c      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c54:	4b93      	ldr	r3, [pc, #588]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d112      	bne.n	8002c86 <HAL_RCC_OscConfig+0x62>
 8002c60:	4b90      	ldr	r3, [pc, #576]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6c:	d10b      	bne.n	8002c86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d06c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x130>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d168      	bne.n	8002d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e26b      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x7a>
 8002c90:	4b84      	ldr	r3, [pc, #528]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a83      	ldr	r2, [pc, #524]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e02e      	b.n	8002cfc <HAL_RCC_OscConfig+0xd8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x9c>
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7b      	ldr	r2, [pc, #492]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01d      	b.n	8002cfc <HAL_RCC_OscConfig+0xd8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002cca:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a75      	ldr	r2, [pc, #468]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a72      	ldr	r2, [pc, #456]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0xd8>
 8002ce4:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6e      	ldr	r2, [pc, #440]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b6c      	ldr	r3, [pc, #432]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6b      	ldr	r2, [pc, #428]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7ff fc72 	bl	80025ec <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff fc6e 	bl	80025ec <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e21f      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7ff fc5e 	bl	80025ec <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7ff fc5a 	bl	80025ec <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e20b      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x110>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d069      	beq.n	8002e36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d11c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x190>
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d116      	bne.n	8002db4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_RCC_OscConfig+0x17a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e1df      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	493d      	ldr	r1, [pc, #244]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	e040      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fc10 	bl	80025ec <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7ff fc0c 	bl	80025ec <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1bd      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4929      	ldr	r1, [pc, #164]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
 8002e02:	e018      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7ff fbec 	bl	80025ec <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7ff fbe8 	bl	80025ec <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e199      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d038      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d019      	beq.n	8002e7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7ff fbc9 	bl	80025ec <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7ff fbc5 	bl	80025ec <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e176      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x23a>
 8002e7c:	e01a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8a:	f7ff fbaf 	bl	80025ec <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e92:	f7ff fbab 	bl	80025ec <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d903      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e15c      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
 8002ea4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b91      	ldr	r3, [pc, #580]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ee      	bne.n	8002e92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a4 	beq.w	800300a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b8b      	ldr	r3, [pc, #556]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a87      	ldr	r2, [pc, #540]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eea:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d118      	bne.n	8002f28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7e      	ldr	r2, [pc, #504]	; (80030f4 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f02:	f7ff fb73 	bl	80025ec <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7ff fb6f 	bl	80025ec <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b64      	cmp	r3, #100	; 0x64
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e120      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1c:	4b75      	ldr	r3, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x31a>
 8002f30:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	e02d      	b.n	8002f9a <HAL_RCC_OscConfig+0x376>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x33c>
 8002f46:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
 8002f52:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	f023 0304 	bic.w	r3, r3, #4
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	e01c      	b.n	8002f9a <HAL_RCC_OscConfig+0x376>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x35e>
 8002f68:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a60      	ldr	r2, [pc, #384]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	4b5e      	ldr	r3, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a5d      	ldr	r2, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e00b      	b.n	8002f9a <HAL_RCC_OscConfig+0x376>
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a5a      	ldr	r2, [pc, #360]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8e:	4b58      	ldr	r3, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a57      	ldr	r2, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d015      	beq.n	8002fce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7ff fb23 	bl	80025ec <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7ff fb1f 	bl	80025ec <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0ce      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	4b4b      	ldr	r3, [pc, #300]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ee      	beq.n	8002faa <HAL_RCC_OscConfig+0x386>
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7ff fb0d 	bl	80025ec <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7ff fb09 	bl	80025ec <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ee      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4b3c      	ldr	r3, [pc, #240]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80a4 	beq.w	800315c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003014:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d06b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d149      	bne.n	80030bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7ff fada 	bl	80025ec <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7ff fad6 	bl	80025ec <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e087      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	3b01      	subs	r3, #1
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	4313      	orrs	r3, r2
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003086:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff faaa 	bl	80025ec <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7ff faa6 	bl	80025ec <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e057      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x478>
 80030ba:	e04f      	b.n	800315c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff fa90 	bl	80025ec <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7ff fa8c 	bl	80025ec <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e03d      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4ac>
 80030ee:	e035      	b.n	800315c <HAL_RCC_OscConfig+0x538>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x544>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d028      	beq.n	8003158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d121      	bne.n	8003158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d11a      	bne.n	8003158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800312e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003130:	4293      	cmp	r3, r2
 8003132:	d111      	bne.n	8003158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	3b01      	subs	r3, #1
 8003142:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0d0      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d910      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b67      	ldr	r3, [pc, #412]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 020f 	bic.w	r2, r3, #15
 800319a:	4965      	ldr	r1, [pc, #404]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d040      	beq.n	8003290 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d115      	bne.n	800324e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e073      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06b      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4936      	ldr	r1, [pc, #216]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7ff f9c4 	bl	80025ec <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7ff f9c0 	bl	80025ec <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e053      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d210      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	4922      	ldr	r1, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1cc>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x1d0>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1d4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fe22 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	0800c2f8 	.word	0x0800c2f8
 800333c:	20000000 	.word	0x20000000
 8003340:	20000004 	.word	0x20000004

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b090      	sub	sp, #64	; 0x40
 800334a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	637b      	str	r3, [r7, #52]	; 0x34
 8003350:	2300      	movs	r3, #0
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	2300      	movs	r3, #0
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335c:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d00d      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x40>
 8003368:	2b08      	cmp	r3, #8
 800336a:	f200 80a1 	bhi.w	80034b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x34>
 8003372:	2b04      	cmp	r3, #4
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x3a>
 8003376:	e09b      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800337c:	e09b      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003382:	e098      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003384:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800338e:	4b4d      	ldr	r3, [pc, #308]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d028      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b4a      	ldr	r3, [pc, #296]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	2200      	movs	r2, #0
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	627a      	str	r2, [r7, #36]	; 0x24
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033ac:	2100      	movs	r1, #0
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 80033b0:	fb03 f201 	mul.w	r2, r3, r1
 80033b4:	2300      	movs	r3, #0
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	4a43      	ldr	r2, [pc, #268]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 80033be:	fba0 1202 	umull	r1, r2, r0, r2
 80033c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c4:	460a      	mov	r2, r1
 80033c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	4413      	add	r3, r2
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d0:	2200      	movs	r2, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	61fa      	str	r2, [r7, #28]
 80033d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033de:	f7fd fc23 	bl	8000c28 <__aeabi_uldivmod>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4613      	mov	r3, r2
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ea:	e053      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	617a      	str	r2, [r7, #20]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033fe:	f04f 0b00 	mov.w	fp, #0
 8003402:	4652      	mov	r2, sl
 8003404:	465b      	mov	r3, fp
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003414:	0150      	lsls	r0, r2, #5
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	ebb2 080a 	subs.w	r8, r2, sl
 800341e:	eb63 090b 	sbc.w	r9, r3, fp
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800342e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003436:	ebb2 0408 	subs.w	r4, r2, r8
 800343a:	eb63 0509 	sbc.w	r5, r3, r9
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	00eb      	lsls	r3, r5, #3
 8003448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344c:	00e2      	lsls	r2, r4, #3
 800344e:	4614      	mov	r4, r2
 8003450:	461d      	mov	r5, r3
 8003452:	eb14 030a 	adds.w	r3, r4, sl
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	eb45 030b 	adc.w	r3, r5, fp
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346a:	4629      	mov	r1, r5
 800346c:	028b      	lsls	r3, r1, #10
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003474:	4621      	mov	r1, r4
 8003476:	028a      	lsls	r2, r1, #10
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	2200      	movs	r2, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	60fa      	str	r2, [r7, #12]
 8003484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003488:	f7fd fbce 	bl	8000c28 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80034a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3740      	adds	r7, #64	; 0x40
 80034bc:	46bd      	mov	sp, r7
 80034be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	017d7840 	.word	0x017d7840

080034d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000000 	.word	0x20000000

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ec:	f7ff fff0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	0800c308 	.word	0x0800c308

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003514:	f7ff ffdc 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0b5b      	lsrs	r3, r3, #13
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	0800c308 	.word	0x0800c308

08003538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	220f      	movs	r2, #15
 8003546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_GetClockConfig+0x60>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40023c00 	.word	0x40023c00

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d012      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035c4:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035ce:	6093      	str	r3, [r2, #8]
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d8:	4964      	ldr	r1, [pc, #400]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d017      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f6:	4b5d      	ldr	r3, [pc, #372]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	4959      	ldr	r1, [pc, #356]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003614:	d101      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d017      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003632:	4b4e      	ldr	r3, [pc, #312]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	494a      	ldr	r1, [pc, #296]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003650:	d101      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800365e:	2301      	movs	r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800366e:	2301      	movs	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 808b 	beq.w	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a39      	ldr	r2, [pc, #228]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a34      	ldr	r2, [pc, #208]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fe ffa2 	bl	80025ec <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ac:	f7fe ff9e 	bl	80025ec <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e357      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d035      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d02e      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003708:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800370a:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d114      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe ff66 	bl	80025ec <HAL_GetTick>
 8003720:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe ff62 	bl	80025ec <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e319      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ee      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003752:	d111      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003762:	400b      	ands	r3, r1
 8003764:	4901      	ldr	r1, [pc, #4]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
 800376a:	e00b      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000
 8003774:	0ffffcff 	.word	0x0ffffcff
 8003778:	4baa      	ldr	r3, [pc, #680]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4aa9      	ldr	r2, [pc, #676]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003782:	6093      	str	r3, [r2, #8]
 8003784:	4ba7      	ldr	r3, [pc, #668]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	49a4      	ldr	r1, [pc, #656]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003792:	4313      	orrs	r3, r2
 8003794:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d010      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037a2:	4ba0      	ldr	r3, [pc, #640]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a8:	4a9e      	ldr	r2, [pc, #632]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037b2:	4b9c      	ldr	r3, [pc, #624]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	4999      	ldr	r1, [pc, #612]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d0:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037de:	4991      	ldr	r1, [pc, #580]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f2:	4b8c      	ldr	r3, [pc, #560]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003800:	4988      	ldr	r1, [pc, #544]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003814:	4b83      	ldr	r3, [pc, #524]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003822:	4980      	ldr	r1, [pc, #512]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003836:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4977      	ldr	r1, [pc, #476]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003858:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	496f      	ldr	r1, [pc, #444]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f023 020c 	bic.w	r2, r3, #12
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003888:	4966      	ldr	r1, [pc, #408]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	495e      	ldr	r1, [pc, #376]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	4955      	ldr	r1, [pc, #340]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003902:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	4944      	ldr	r1, [pc, #272]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	493c      	ldr	r1, [pc, #240]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003954:	4933      	ldr	r1, [pc, #204]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003976:	492b      	ldr	r1, [pc, #172]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d011      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800398a:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003998:	4922      	ldr	r1, [pc, #136]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d8:	4912      	ldr	r1, [pc, #72]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d006      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80d9 	beq.w	8003bca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a18:	4b02      	ldr	r3, [pc, #8]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a01      	ldr	r2, [pc, #4]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2a:	f7fe fddf 	bl	80025ec <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a32:	f7fe fddb 	bl	80025ec <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	; 0x64
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e194      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a44:	4b6c      	ldr	r3, [pc, #432]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d021      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d11d      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a64:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a72:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a78:	0e1b      	lsrs	r3, r3, #24
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	019a      	lsls	r2, r3, #6
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	071b      	lsls	r3, r3, #28
 8003a98:	4957      	ldr	r1, [pc, #348]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d129      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad2:	0c1b      	lsrs	r3, r3, #16
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae0:	0f1b      	lsrs	r3, r3, #28
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	019a      	lsls	r2, r3, #6
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	071b      	lsls	r3, r3, #28
 8003b00:	493d      	ldr	r1, [pc, #244]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0e:	f023 021f 	bic.w	r2, r3, #31
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4937      	ldr	r1, [pc, #220]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01d      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b2c:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	0e1b      	lsrs	r3, r3, #24
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b40:	0f1b      	lsrs	r3, r3, #28
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	019a      	lsls	r2, r3, #6
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	431a      	orrs	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	071b      	lsls	r3, r3, #28
 8003b60:	4925      	ldr	r1, [pc, #148]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d011      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	019a      	lsls	r2, r3, #6
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	071b      	lsls	r3, r3, #28
 8003b90:	4919      	ldr	r1, [pc, #100]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fd22 	bl	80025ec <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bac:	f7fe fd1e 	bl	80025ec <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0d7      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 80cd 	bne.w	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fe fd05 	bl	80025ec <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be6:	f7fe fd01 	bl	80025ec <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	; 0x64
 8003bf2:	d903      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0ba      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bfc:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d0ed      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d12a      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c32:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c40:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	0f1b      	lsrs	r3, r3, #28
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4944      	ldr	r1, [pc, #272]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c6e:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	493d      	ldr	r1, [pc, #244]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d022      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9c:	d11d      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	0e1b      	lsrs	r3, r3, #24
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	0f1b      	lsrs	r3, r3, #28
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	019a      	lsls	r2, r3, #6
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	4929      	ldr	r1, [pc, #164]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d028      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	0e1b      	lsrs	r3, r3, #24
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	019a      	lsls	r2, r3, #6
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	4917      	ldr	r1, [pc, #92]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4911      	ldr	r1, [pc, #68]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d44:	f7fe fc52 	bl	80025ec <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d4c:	f7fe fc4e 	bl	80025ec <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e007      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6a:	d1ef      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e049      	b.n	8003e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe fadc 	bl	8002360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f000 ffd6 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d001      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e054      	b.n	8003eee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d022      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d01d      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <HAL_TIM_Base_Start_IT+0xe0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d115      	bne.n	8003ed8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_TIM_Base_Start_IT+0xec>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d015      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0xbe>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d011      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40001800 	.word	0x40001800
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_TIM_Base_Stop_IT+0x48>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_Base_Stop_IT+0x48>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e049      	b.n	8004020 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f841 	bl	8004028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 fed7 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_TIM_PWM_Start+0x24>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e03c      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d109      	bne.n	800407a <HAL_TIM_PWM_Start+0x3e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e02f      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start+0x58>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e022      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d109      	bne.n	80040ae <HAL_TIM_PWM_Start+0x72>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e015      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x8c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e008      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e092      	b.n	8004208 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xb6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	e023      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0xc6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	e01b      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xd6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	e013      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	d104      	bne.n	8004122 <HAL_TIM_PWM_Start+0xe6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004120:	e00b      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d104      	bne.n	8004132 <HAL_TIM_PWM_Start+0xf6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004130:	e003      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2201      	movs	r2, #1
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f001 f876 	bl	8005234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a30      	ldr	r2, [pc, #192]	; (8004210 <HAL_TIM_PWM_Start+0x1d4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIM_PWM_Start+0x120>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <HAL_TIM_PWM_Start+0x1d8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_TIM_PWM_Start+0x124>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_TIM_PWM_Start+0x126>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <HAL_TIM_PWM_Start+0x1d4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d01d      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a22      	ldr	r2, [pc, #136]	; (8004218 <HAL_TIM_PWM_Start+0x1dc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <HAL_TIM_PWM_Start+0x1e0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_TIM_PWM_Start+0x1e4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_TIM_PWM_Start+0x1d8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <HAL_TIM_PWM_Start+0x1e8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x18a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a19      	ldr	r2, [pc, #100]	; (8004228 <HAL_TIM_PWM_Start+0x1ec>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d115      	bne.n	80041f2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_TIM_PWM_Start+0x1f0>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	d015      	beq.n	8004204 <HAL_TIM_PWM_Start+0x1c8>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d011      	beq.n	8004204 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f0:	e008      	b.n	8004204 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e000      	b.n	8004206 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40010000 	.word	0x40010000
 8004214:	40010400 	.word	0x40010400
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40014000 	.word	0x40014000
 8004228:	40001800 	.word	0x40001800
 800422c:	00010007 	.word	0x00010007

08004230 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fff6 	bl	8005234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a36      	ldr	r2, [pc, #216]	; (8004328 <HAL_TIM_PWM_Stop+0xf8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_TIM_PWM_Stop+0x2c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a35      	ldr	r2, [pc, #212]	; (800432c <HAL_TIM_PWM_Stop+0xfc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_TIM_PWM_Stop+0x30>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_TIM_PWM_Stop+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d017      	beq.n	8004296 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_TIM_PWM_Stop+0x66>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	f240 4344 	movw	r3, #1092	; 0x444
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <HAL_TIM_PWM_Stop+0x66>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	f241 1311 	movw	r3, #4369	; 0x1111
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <HAL_TIM_PWM_Stop+0x96>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	f240 4344 	movw	r3, #1092	; 0x444
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <HAL_TIM_PWM_Stop+0x96>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Stop+0xa6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	e023      	b.n	800431e <HAL_TIM_PWM_Stop+0xee>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Stop+0xb6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e4:	e01b      	b.n	800431e <HAL_TIM_PWM_Stop+0xee>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Stop+0xc6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f4:	e013      	b.n	800431e <HAL_TIM_PWM_Stop+0xee>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b0c      	cmp	r3, #12
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Stop+0xd6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004304:	e00b      	b.n	800431e <HAL_TIM_PWM_Stop+0xee>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b10      	cmp	r3, #16
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Stop+0xe6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004314:	e003      	b.n	800431e <HAL_TIM_PWM_Stop+0xee>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40010000 	.word	0x40010000
 800432c:	40010400 	.word	0x40010400

08004330 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e049      	b.n	80043d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f841 	bl	80043de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 fcfc 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_TIM_IC_Start_IT+0x1e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e023      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d104      	bne.n	8004422 <HAL_TIM_IC_Start_IT+0x2e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e01b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d104      	bne.n	8004432 <HAL_TIM_IC_Start_IT+0x3e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e013      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d104      	bne.n	8004442 <HAL_TIM_IC_Start_IT+0x4e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e00b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b10      	cmp	r3, #16
 8004446:	d104      	bne.n	8004452 <HAL_TIM_IC_Start_IT+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e003      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004458:	b2db      	uxtb	r3, r3
 800445a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_TIM_IC_Start_IT+0x78>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e013      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d104      	bne.n	800447c <HAL_TIM_IC_Start_IT+0x88>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e00b      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d104      	bne.n	800448c <HAL_TIM_IC_Start_IT+0x98>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e003      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004492:	b2db      	uxtb	r3, r3
 8004494:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004496:	7bbb      	ldrb	r3, [r7, #14]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d102      	bne.n	80044a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800449c:	7b7b      	ldrb	r3, [r7, #13]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0e2      	b.n	800466c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_IT+0xc2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	e023      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_IC_Start_IT+0xd2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	e01b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_IC_Start_IT+0xe2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	e013      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_IC_Start_IT+0xf2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_IC_Start_IT+0x102>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f4:	e003      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0x11a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450c:	e013      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x12a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451c:	e00b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_IC_Start_IT+0x13a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800452c:	e003      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d841      	bhi.n	80045c0 <HAL_TIM_IC_Start_IT+0x1cc>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_TIM_IC_Start_IT+0x150>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004579 	.word	0x08004579
 8004548:	080045c1 	.word	0x080045c1
 800454c:	080045c1 	.word	0x080045c1
 8004550:	080045c1 	.word	0x080045c1
 8004554:	0800458b 	.word	0x0800458b
 8004558:	080045c1 	.word	0x080045c1
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080045c1 	.word	0x080045c1
 8004564:	0800459d 	.word	0x0800459d
 8004568:	080045c1 	.word	0x080045c1
 800456c:	080045c1 	.word	0x080045c1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045af 	.word	0x080045af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0202 	orr.w	r2, r2, #2
 8004586:	60da      	str	r2, [r3, #12]
      break;
 8004588:	e01d      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0204 	orr.w	r2, r2, #4
 8004598:	60da      	str	r2, [r3, #12]
      break;
 800459a:	e014      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	60da      	str	r2, [r3, #12]
      break;
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0210 	orr.w	r2, r2, #16
 80045bc:	60da      	str	r2, [r3, #12]
      break;
 80045be:	e002      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      break;
 80045c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d14e      	bne.n	800466a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2201      	movs	r2, #1
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fe2d 	bl	8005234 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a25      	ldr	r2, [pc, #148]	; (8004674 <HAL_TIM_IC_Start_IT+0x280>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d01d      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a21      	ldr	r2, [pc, #132]	; (8004678 <HAL_TIM_IC_Start_IT+0x284>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1f      	ldr	r2, [pc, #124]	; (800467c <HAL_TIM_IC_Start_IT+0x288>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <HAL_TIM_IC_Start_IT+0x28c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1c      	ldr	r2, [pc, #112]	; (8004684 <HAL_TIM_IC_Start_IT+0x290>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIM_IC_Start_IT+0x294>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_TIM_IC_Start_IT+0x236>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <HAL_TIM_IC_Start_IT+0x298>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d115      	bne.n	8004656 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_TIM_IC_Start_IT+0x29c>)
 8004632:	4013      	ands	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b06      	cmp	r3, #6
 800463a:	d015      	beq.n	8004668 <HAL_TIM_IC_Start_IT+0x274>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d011      	beq.n	8004668 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004654:	e008      	b.n	8004668 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e000      	b.n	800466a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40010000 	.word	0x40010000
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40010400 	.word	0x40010400
 8004688:	40014000 	.word	0x40014000
 800468c:	40001800 	.word	0x40001800
 8004690:	00010007 	.word	0x00010007

08004694 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d841      	bhi.n	800472c <HAL_TIM_IC_Stop_IT+0x98>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	0800472d 	.word	0x0800472d
 80046b8:	0800472d 	.word	0x0800472d
 80046bc:	0800472d 	.word	0x0800472d
 80046c0:	080046f7 	.word	0x080046f7
 80046c4:	0800472d 	.word	0x0800472d
 80046c8:	0800472d 	.word	0x0800472d
 80046cc:	0800472d 	.word	0x0800472d
 80046d0:	08004709 	.word	0x08004709
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	0800471b 	.word	0x0800471b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0202 	bic.w	r2, r2, #2
 80046f2:	60da      	str	r2, [r3, #12]
      break;
 80046f4:	e01d      	b.n	8004732 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0204 	bic.w	r2, r2, #4
 8004704:	60da      	str	r2, [r3, #12]
      break;
 8004706:	e014      	b.n	8004732 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0208 	bic.w	r2, r2, #8
 8004716:	60da      	str	r2, [r3, #12]
      break;
 8004718:	e00b      	b.n	8004732 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0210 	bic.w	r2, r2, #16
 8004728:	60da      	str	r2, [r3, #12]
      break;
 800472a:	e002      	b.n	8004732 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      break;
 8004730:	bf00      	nop
  }

  if (status == HAL_OK)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d166      	bne.n	8004806 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fd77 	bl	8005234 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <HAL_TIM_IC_Stop_IT+0xe2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	f240 4344 	movw	r3, #1092	; 0x444
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_TIM_IC_Stop_IT+0xe2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_TIM_IC_Stop_IT+0xf2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004784:	e023      	b.n	80047ce <HAL_TIM_IC_Stop_IT+0x13a>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d104      	bne.n	8004796 <HAL_TIM_IC_Stop_IT+0x102>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004794:	e01b      	b.n	80047ce <HAL_TIM_IC_Stop_IT+0x13a>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_IC_Stop_IT+0x112>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	e013      	b.n	80047ce <HAL_TIM_IC_Stop_IT+0x13a>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_IC_Stop_IT+0x122>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b4:	e00b      	b.n	80047ce <HAL_TIM_IC_Stop_IT+0x13a>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_IC_Stop_IT+0x132>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c4:	e003      	b.n	80047ce <HAL_TIM_IC_Stop_IT+0x13a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_TIM_IC_Stop_IT+0x14a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047dc:	e013      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x172>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_IC_Stop_IT+0x15a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x172>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_IC_Stop_IT+0x16a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047fc:	e003      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x172>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b02      	cmp	r3, #2
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b02      	cmp	r3, #2
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0202 	mvn.w	r2, #2
 800483c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa6c 	bl	8004d30 <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa5e 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fa6f 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0204 	mvn.w	r2, #4
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa42 	bl	8004d30 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa34 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fa45 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0208 	mvn.w	r2, #8
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2204      	movs	r2, #4
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa18 	bl	8004d30 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa0a 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa1b 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b10      	cmp	r3, #16
 8004920:	d122      	bne.n	8004968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b10      	cmp	r3, #16
 800492e:	d11b      	bne.n	8004968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9ee 	bl	8004d30 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9e0 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f9f1 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10e      	bne.n	8004994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0201 	mvn.w	r2, #1
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd faaa 	bl	8001ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d10e      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d107      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fcf8 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d10e      	bne.n	80049ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d107      	bne.n	80049ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fceb 	bl	80053c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d10e      	bne.n	8004a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d107      	bne.n	8004a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f99f 	bl	8004d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d10e      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d107      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f06f 0220 	mvn.w	r2, #32
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fcab 	bl	800539c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e088      	b.n	8004b7e <HAL_TIM_IC_ConfigChannel+0x130>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11b      	bne.n	8004ab2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f000 fa0f 	bl	8004eac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 020c 	bic.w	r2, r2, #12
 8004a9c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6999      	ldr	r1, [r3, #24]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	619a      	str	r2, [r3, #24]
 8004ab0:	e060      	b.n	8004b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d11c      	bne.n	8004af2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f000 fa93 	bl	8004ff2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ada:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	619a      	str	r2, [r3, #24]
 8004af0:	e040      	b.n	8004b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f000 fae0 	bl	80050cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 020c 	bic.w	r2, r2, #12
 8004b1a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69d9      	ldr	r1, [r3, #28]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	61da      	str	r2, [r3, #28]
 8004b2e:	e021      	b.n	8004b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d11c      	bne.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f000 fafd 	bl	8005144 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b58:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	021a      	lsls	r2, r3, #8
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	61da      	str	r2, [r3, #28]
 8004b6e:	e001      	b.n	8004b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e0b4      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x186>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_TIM_ConfigClockSource+0x190>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d03e      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0xd4>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	f200 8087 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	f000 8086 	beq.w	8004cfa <HAL_TIM_ConfigClockSource+0x172>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	d87f      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b70      	cmp	r3, #112	; 0x70
 8004bf6:	d01a      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0xa6>
 8004bf8:	2b70      	cmp	r3, #112	; 0x70
 8004bfa:	d87b      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d050      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c00:	2b60      	cmp	r3, #96	; 0x60
 8004c02:	d877      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b50      	cmp	r3, #80	; 0x50
 8004c06:	d03c      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xfa>
 8004c08:	2b50      	cmp	r3, #80	; 0x50
 8004c0a:	d873      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d058      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d86f      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b30      	cmp	r3, #48	; 0x30
 8004c16:	d064      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	d86b      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d060      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d867      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d05a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	e062      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6899      	ldr	r1, [r3, #8]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f000 fad9 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	609a      	str	r2, [r3, #8]
      break;
 8004c5a:	e04f      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f000 fac2 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c7e:	609a      	str	r2, [r3, #8]
      break;
 8004c80:	e03c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 f980 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2150      	movs	r1, #80	; 0x50
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fa8f 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e02c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 f9dc 	bl	800506c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2160      	movs	r1, #96	; 0x60
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa7f 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e01c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 f960 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fa6f 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e00c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f000 fa66 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e003      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf8:	e000      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	fffeff88 	.word	0xfffeff88

08004d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <TIM_Base_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8a:	d00f      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3d      	ldr	r2, [pc, #244]	; (8004e84 <TIM_Base_SetConfig+0x118>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00b      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a3c      	ldr	r2, [pc, #240]	; (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3b      	ldr	r2, [pc, #236]	; (8004e8c <TIM_Base_SetConfig+0x120>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3a      	ldr	r2, [pc, #232]	; (8004e90 <TIM_Base_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d108      	bne.n	8004dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2f      	ldr	r2, [pc, #188]	; (8004e80 <TIM_Base_SetConfig+0x114>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d02b      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d027      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <TIM_Base_SetConfig+0x118>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d023      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01f      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2a      	ldr	r2, [pc, #168]	; (8004e8c <TIM_Base_SetConfig+0x120>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01b      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <TIM_Base_SetConfig+0x124>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d017      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a28      	ldr	r2, [pc, #160]	; (8004e94 <TIM_Base_SetConfig+0x128>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <TIM_Base_SetConfig+0x12c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <TIM_Base_SetConfig+0x130>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <TIM_Base_SetConfig+0x134>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <TIM_Base_SetConfig+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a23      	ldr	r2, [pc, #140]	; (8004ea8 <TIM_Base_SetConfig+0x13c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <TIM_Base_SetConfig+0x114>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0xf8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <TIM_Base_SetConfig+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40001800 	.word	0x40001800
 8004ea4:	40001c00 	.word	0x40001c00
 8004ea8:	40002000 	.word	0x40002000

08004eac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <TIM_TI1_SetConfig+0xcc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01b      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d017      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <TIM_TI1_SetConfig+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a24      	ldr	r2, [pc, #144]	; (8004f80 <TIM_TI1_SetConfig+0xd4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00f      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <TIM_TI1_SetConfig+0xd8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <TIM_TI1_SetConfig+0xdc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <TIM_TI1_SetConfig+0xe0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_TI1_SetConfig+0x66>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <TIM_TI1_SetConfig+0xe4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <TIM_TI1_SetConfig+0x6a>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <TIM_TI1_SetConfig+0x6c>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e003      	b.n	8004f36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 030a 	bic.w	r3, r3, #10
 8004f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 030a 	and.w	r3, r3, #10
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40001800 	.word	0x40001800

08004f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 030a 	bic.w	r3, r3, #10
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b087      	sub	sp, #28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f023 0210 	bic.w	r2, r3, #16
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	031b      	lsls	r3, r3, #12
 8005036:	b29b      	uxth	r3, r3
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005044:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f023 0210 	bic.w	r2, r3, #16
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	031b      	lsls	r3, r3, #12
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	b2db      	uxtb	r3, r3
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800511c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	031b      	lsls	r3, r3, #12
 8005188:	b29b      	uxth	r3, r3
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005196:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	031b      	lsls	r3, r3, #12
 800519c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f043 0307 	orr.w	r3, r3, #7
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	431a      	orrs	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e06d      	b.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a30      	ldr	r2, [pc, #192]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a20      	ldr	r2, [pc, #128]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d022      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d01d      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a15      	ldr	r2, [pc, #84]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a15      	ldr	r2, [pc, #84]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10c      	bne.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e040      	b.n	800546c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fd f82a 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f974 	bl	8005704 <UART_SetConfig>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e022      	b.n	800546c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fbcc 	bl	8005bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fc53 	bl	8005d10 <UART_CheckIdleState>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005488:	2b20      	cmp	r3, #32
 800548a:	d171      	bne.n	8005570 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_UART_Transmit+0x24>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e06a      	b.n	8005572 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2221      	movs	r2, #33	; 0x21
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054aa:	f7fd f89f 	bl	80025ec <HAL_GetTick>
 80054ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d108      	bne.n	80054dc <HAL_UART_Transmit+0x68>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e003      	b.n	80054e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e4:	e02c      	b.n	8005540 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fc44 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e038      	b.n	8005572 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	3302      	adds	r3, #2
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	e007      	b.n	800552e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	3301      	adds	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1cc      	bne.n	80054e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2200      	movs	r2, #0
 8005554:	2140      	movs	r1, #64	; 0x40
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fc11 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e005      	b.n	8005572 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b08a      	sub	sp, #40	; 0x28
 800557e:	af02      	add	r7, sp, #8
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005590:	2b20      	cmp	r3, #32
 8005592:	f040 80b1 	bne.w	80056f8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_UART_Receive+0x28>
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0a9      	b.n	80056fa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2222      	movs	r2, #34	; 0x22
 80055b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055bc:	f7fd f816 	bl	80025ec <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	88fa      	ldrh	r2, [r7, #6]
 80055c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d10e      	bne.n	80055fa <HAL_UART_Receive+0x80>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_UART_Receive+0x76>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ee:	e02d      	b.n	800564c <HAL_UART_Receive+0xd2>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	22ff      	movs	r2, #255	; 0xff
 80055f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f8:	e028      	b.n	800564c <HAL_UART_Receive+0xd2>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10d      	bne.n	800561e <HAL_UART_Receive+0xa4>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <HAL_UART_Receive+0x9a>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005612:	e01b      	b.n	800564c <HAL_UART_Receive+0xd2>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	227f      	movs	r2, #127	; 0x7f
 8005618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800561c:	e016      	b.n	800564c <HAL_UART_Receive+0xd2>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005626:	d10d      	bne.n	8005644 <HAL_UART_Receive+0xca>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <HAL_UART_Receive+0xc0>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	227f      	movs	r2, #127	; 0x7f
 8005634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005638:	e008      	b.n	800564c <HAL_UART_Receive+0xd2>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	223f      	movs	r2, #63	; 0x3f
 800563e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005642:	e003      	b.n	800564c <HAL_UART_Receive+0xd2>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005652:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565c:	d108      	bne.n	8005670 <HAL_UART_Receive+0xf6>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e003      	b.n	8005678 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005678:	e032      	b.n	80056e0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2120      	movs	r1, #32
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fb7a 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e032      	b.n	80056fa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	8a7b      	ldrh	r3, [r7, #18]
 80056a4:	4013      	ands	r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	3302      	adds	r3, #2
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	e00c      	b.n	80056ce <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	8a7b      	ldrh	r3, [r7, #18]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4013      	ands	r3, r2
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1c6      	bne.n	800567a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4ba6      	ldr	r3, [pc, #664]	; (80059c8 <UART_SetConfig+0x2c4>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6979      	ldr	r1, [r7, #20]
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a94      	ldr	r2, [pc, #592]	; (80059cc <UART_SetConfig+0x2c8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d120      	bne.n	80057c2 <UART_SetConfig+0xbe>
 8005780:	4b93      	ldr	r3, [pc, #588]	; (80059d0 <UART_SetConfig+0x2cc>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b03      	cmp	r3, #3
 800578c:	d816      	bhi.n	80057bc <UART_SetConfig+0xb8>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0x90>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b1 	.word	0x080057b1
 800579c:	080057ab 	.word	0x080057ab
 80057a0:	080057b7 	.word	0x080057b7
 80057a4:	2301      	movs	r3, #1
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e150      	b.n	8005a4c <UART_SetConfig+0x348>
 80057aa:	2302      	movs	r3, #2
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e14d      	b.n	8005a4c <UART_SetConfig+0x348>
 80057b0:	2304      	movs	r3, #4
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e14a      	b.n	8005a4c <UART_SetConfig+0x348>
 80057b6:	2308      	movs	r3, #8
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e147      	b.n	8005a4c <UART_SetConfig+0x348>
 80057bc:	2310      	movs	r3, #16
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e144      	b.n	8005a4c <UART_SetConfig+0x348>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a83      	ldr	r2, [pc, #524]	; (80059d4 <UART_SetConfig+0x2d0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d132      	bne.n	8005832 <UART_SetConfig+0x12e>
 80057cc:	4b80      	ldr	r3, [pc, #512]	; (80059d0 <UART_SetConfig+0x2cc>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d828      	bhi.n	800582c <UART_SetConfig+0x128>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0xdc>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	08005815 	.word	0x08005815
 80057e4:	0800582d 	.word	0x0800582d
 80057e8:	0800582d 	.word	0x0800582d
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	08005821 	.word	0x08005821
 80057f4:	0800582d 	.word	0x0800582d
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	0800581b 	.word	0x0800581b
 8005804:	0800582d 	.word	0x0800582d
 8005808:	0800582d 	.word	0x0800582d
 800580c:	0800582d 	.word	0x0800582d
 8005810:	08005827 	.word	0x08005827
 8005814:	2300      	movs	r3, #0
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e118      	b.n	8005a4c <UART_SetConfig+0x348>
 800581a:	2302      	movs	r3, #2
 800581c:	77fb      	strb	r3, [r7, #31]
 800581e:	e115      	b.n	8005a4c <UART_SetConfig+0x348>
 8005820:	2304      	movs	r3, #4
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e112      	b.n	8005a4c <UART_SetConfig+0x348>
 8005826:	2308      	movs	r3, #8
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	e10f      	b.n	8005a4c <UART_SetConfig+0x348>
 800582c:	2310      	movs	r3, #16
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e10c      	b.n	8005a4c <UART_SetConfig+0x348>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a68      	ldr	r2, [pc, #416]	; (80059d8 <UART_SetConfig+0x2d4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d120      	bne.n	800587e <UART_SetConfig+0x17a>
 800583c:	4b64      	ldr	r3, [pc, #400]	; (80059d0 <UART_SetConfig+0x2cc>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005846:	2b30      	cmp	r3, #48	; 0x30
 8005848:	d013      	beq.n	8005872 <UART_SetConfig+0x16e>
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	d814      	bhi.n	8005878 <UART_SetConfig+0x174>
 800584e:	2b20      	cmp	r3, #32
 8005850:	d009      	beq.n	8005866 <UART_SetConfig+0x162>
 8005852:	2b20      	cmp	r3, #32
 8005854:	d810      	bhi.n	8005878 <UART_SetConfig+0x174>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <UART_SetConfig+0x15c>
 800585a:	2b10      	cmp	r3, #16
 800585c:	d006      	beq.n	800586c <UART_SetConfig+0x168>
 800585e:	e00b      	b.n	8005878 <UART_SetConfig+0x174>
 8005860:	2300      	movs	r3, #0
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e0f2      	b.n	8005a4c <UART_SetConfig+0x348>
 8005866:	2302      	movs	r3, #2
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	e0ef      	b.n	8005a4c <UART_SetConfig+0x348>
 800586c:	2304      	movs	r3, #4
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e0ec      	b.n	8005a4c <UART_SetConfig+0x348>
 8005872:	2308      	movs	r3, #8
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e0e9      	b.n	8005a4c <UART_SetConfig+0x348>
 8005878:	2310      	movs	r3, #16
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e0e6      	b.n	8005a4c <UART_SetConfig+0x348>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a56      	ldr	r2, [pc, #344]	; (80059dc <UART_SetConfig+0x2d8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d120      	bne.n	80058ca <UART_SetConfig+0x1c6>
 8005888:	4b51      	ldr	r3, [pc, #324]	; (80059d0 <UART_SetConfig+0x2cc>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005892:	2bc0      	cmp	r3, #192	; 0xc0
 8005894:	d013      	beq.n	80058be <UART_SetConfig+0x1ba>
 8005896:	2bc0      	cmp	r3, #192	; 0xc0
 8005898:	d814      	bhi.n	80058c4 <UART_SetConfig+0x1c0>
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d009      	beq.n	80058b2 <UART_SetConfig+0x1ae>
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d810      	bhi.n	80058c4 <UART_SetConfig+0x1c0>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <UART_SetConfig+0x1a8>
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	d006      	beq.n	80058b8 <UART_SetConfig+0x1b4>
 80058aa:	e00b      	b.n	80058c4 <UART_SetConfig+0x1c0>
 80058ac:	2300      	movs	r3, #0
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e0cc      	b.n	8005a4c <UART_SetConfig+0x348>
 80058b2:	2302      	movs	r3, #2
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e0c9      	b.n	8005a4c <UART_SetConfig+0x348>
 80058b8:	2304      	movs	r3, #4
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e0c6      	b.n	8005a4c <UART_SetConfig+0x348>
 80058be:	2308      	movs	r3, #8
 80058c0:	77fb      	strb	r3, [r7, #31]
 80058c2:	e0c3      	b.n	8005a4c <UART_SetConfig+0x348>
 80058c4:	2310      	movs	r3, #16
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e0c0      	b.n	8005a4c <UART_SetConfig+0x348>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a44      	ldr	r2, [pc, #272]	; (80059e0 <UART_SetConfig+0x2dc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d125      	bne.n	8005920 <UART_SetConfig+0x21c>
 80058d4:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <UART_SetConfig+0x2cc>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e2:	d017      	beq.n	8005914 <UART_SetConfig+0x210>
 80058e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e8:	d817      	bhi.n	800591a <UART_SetConfig+0x216>
 80058ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ee:	d00b      	beq.n	8005908 <UART_SetConfig+0x204>
 80058f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f4:	d811      	bhi.n	800591a <UART_SetConfig+0x216>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <UART_SetConfig+0x1fe>
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	d006      	beq.n	800590e <UART_SetConfig+0x20a>
 8005900:	e00b      	b.n	800591a <UART_SetConfig+0x216>
 8005902:	2300      	movs	r3, #0
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e0a1      	b.n	8005a4c <UART_SetConfig+0x348>
 8005908:	2302      	movs	r3, #2
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e09e      	b.n	8005a4c <UART_SetConfig+0x348>
 800590e:	2304      	movs	r3, #4
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e09b      	b.n	8005a4c <UART_SetConfig+0x348>
 8005914:	2308      	movs	r3, #8
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e098      	b.n	8005a4c <UART_SetConfig+0x348>
 800591a:	2310      	movs	r3, #16
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e095      	b.n	8005a4c <UART_SetConfig+0x348>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <UART_SetConfig+0x2e0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d125      	bne.n	8005976 <UART_SetConfig+0x272>
 800592a:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <UART_SetConfig+0x2cc>)
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005938:	d017      	beq.n	800596a <UART_SetConfig+0x266>
 800593a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800593e:	d817      	bhi.n	8005970 <UART_SetConfig+0x26c>
 8005940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005944:	d00b      	beq.n	800595e <UART_SetConfig+0x25a>
 8005946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594a:	d811      	bhi.n	8005970 <UART_SetConfig+0x26c>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <UART_SetConfig+0x254>
 8005950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005954:	d006      	beq.n	8005964 <UART_SetConfig+0x260>
 8005956:	e00b      	b.n	8005970 <UART_SetConfig+0x26c>
 8005958:	2301      	movs	r3, #1
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e076      	b.n	8005a4c <UART_SetConfig+0x348>
 800595e:	2302      	movs	r3, #2
 8005960:	77fb      	strb	r3, [r7, #31]
 8005962:	e073      	b.n	8005a4c <UART_SetConfig+0x348>
 8005964:	2304      	movs	r3, #4
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e070      	b.n	8005a4c <UART_SetConfig+0x348>
 800596a:	2308      	movs	r3, #8
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e06d      	b.n	8005a4c <UART_SetConfig+0x348>
 8005970:	2310      	movs	r3, #16
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e06a      	b.n	8005a4c <UART_SetConfig+0x348>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <UART_SetConfig+0x2e4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d138      	bne.n	80059f2 <UART_SetConfig+0x2ee>
 8005980:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <UART_SetConfig+0x2cc>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800598a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800598e:	d017      	beq.n	80059c0 <UART_SetConfig+0x2bc>
 8005990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005994:	d82a      	bhi.n	80059ec <UART_SetConfig+0x2e8>
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599a:	d00b      	beq.n	80059b4 <UART_SetConfig+0x2b0>
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d824      	bhi.n	80059ec <UART_SetConfig+0x2e8>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <UART_SetConfig+0x2aa>
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d006      	beq.n	80059ba <UART_SetConfig+0x2b6>
 80059ac:	e01e      	b.n	80059ec <UART_SetConfig+0x2e8>
 80059ae:	2300      	movs	r3, #0
 80059b0:	77fb      	strb	r3, [r7, #31]
 80059b2:	e04b      	b.n	8005a4c <UART_SetConfig+0x348>
 80059b4:	2302      	movs	r3, #2
 80059b6:	77fb      	strb	r3, [r7, #31]
 80059b8:	e048      	b.n	8005a4c <UART_SetConfig+0x348>
 80059ba:	2304      	movs	r3, #4
 80059bc:	77fb      	strb	r3, [r7, #31]
 80059be:	e045      	b.n	8005a4c <UART_SetConfig+0x348>
 80059c0:	2308      	movs	r3, #8
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e042      	b.n	8005a4c <UART_SetConfig+0x348>
 80059c6:	bf00      	nop
 80059c8:	efff69f3 	.word	0xefff69f3
 80059cc:	40011000 	.word	0x40011000
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40004400 	.word	0x40004400
 80059d8:	40004800 	.word	0x40004800
 80059dc:	40004c00 	.word	0x40004c00
 80059e0:	40005000 	.word	0x40005000
 80059e4:	40011400 	.word	0x40011400
 80059e8:	40007800 	.word	0x40007800
 80059ec:	2310      	movs	r3, #16
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e02c      	b.n	8005a4c <UART_SetConfig+0x348>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a72      	ldr	r2, [pc, #456]	; (8005bc0 <UART_SetConfig+0x4bc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d125      	bne.n	8005a48 <UART_SetConfig+0x344>
 80059fc:	4b71      	ldr	r3, [pc, #452]	; (8005bc4 <UART_SetConfig+0x4c0>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a0a:	d017      	beq.n	8005a3c <UART_SetConfig+0x338>
 8005a0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a10:	d817      	bhi.n	8005a42 <UART_SetConfig+0x33e>
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d00b      	beq.n	8005a30 <UART_SetConfig+0x32c>
 8005a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1c:	d811      	bhi.n	8005a42 <UART_SetConfig+0x33e>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <UART_SetConfig+0x326>
 8005a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a26:	d006      	beq.n	8005a36 <UART_SetConfig+0x332>
 8005a28:	e00b      	b.n	8005a42 <UART_SetConfig+0x33e>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	77fb      	strb	r3, [r7, #31]
 8005a2e:	e00d      	b.n	8005a4c <UART_SetConfig+0x348>
 8005a30:	2302      	movs	r3, #2
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e00a      	b.n	8005a4c <UART_SetConfig+0x348>
 8005a36:	2304      	movs	r3, #4
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e007      	b.n	8005a4c <UART_SetConfig+0x348>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e004      	b.n	8005a4c <UART_SetConfig+0x348>
 8005a42:	2310      	movs	r3, #16
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e001      	b.n	8005a4c <UART_SetConfig+0x348>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a54:	d15b      	bne.n	8005b0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d828      	bhi.n	8005aae <UART_SetConfig+0x3aa>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <UART_SetConfig+0x360>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005aaf 	.word	0x08005aaf
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fd fd2e 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	61b8      	str	r0, [r7, #24]
        break;
 8005a8e:	e013      	b.n	8005ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a90:	f7fd fd3e 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 8005a94:	61b8      	str	r0, [r7, #24]
        break;
 8005a96:	e00f      	b.n	8005ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b4b      	ldr	r3, [pc, #300]	; (8005bc8 <UART_SetConfig+0x4c4>)
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e00c      	b.n	8005ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fd fc51 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8005aa2:	61b8      	str	r0, [r7, #24]
        break;
 8005aa4:	e008      	b.n	8005ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aaa:	61bb      	str	r3, [r7, #24]
        break;
 8005aac:	e004      	b.n	8005ab8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d074      	beq.n	8005ba8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	005a      	lsls	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	441a      	add	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d916      	bls.n	8005b08 <UART_SetConfig+0x404>
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d212      	bcs.n	8005b08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f023 030f 	bic.w	r3, r3, #15
 8005aea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	89fa      	ldrh	r2, [r7, #14]
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	e04f      	b.n	8005ba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	77bb      	strb	r3, [r7, #30]
 8005b0c:	e04c      	b.n	8005ba8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b0e:	7ffb      	ldrb	r3, [r7, #31]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d828      	bhi.n	8005b66 <UART_SetConfig+0x462>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0x418>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	08005b67 	.word	0x08005b67
 8005b2c:	08005b57 	.word	0x08005b57
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b67 	.word	0x08005b67
 8005b38:	08005b67 	.word	0x08005b67
 8005b3c:	08005b5f 	.word	0x08005b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fd fcd2 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8005b44:	61b8      	str	r0, [r7, #24]
        break;
 8005b46:	e013      	b.n	8005b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b48:	f7fd fce2 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 8005b4c:	61b8      	str	r0, [r7, #24]
        break;
 8005b4e:	e00f      	b.n	8005b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <UART_SetConfig+0x4c4>)
 8005b52:	61bb      	str	r3, [r7, #24]
        break;
 8005b54:	e00c      	b.n	8005b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b56:	f7fd fbf5 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8005b5a:	61b8      	str	r0, [r7, #24]
        break;
 8005b5c:	e008      	b.n	8005b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	61bb      	str	r3, [r7, #24]
        break;
 8005b64:	e004      	b.n	8005b70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b6e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085a      	lsrs	r2, r3, #1
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	441a      	add	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d909      	bls.n	8005ba4 <UART_SetConfig+0x4a0>
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b96:	d205      	bcs.n	8005ba4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e001      	b.n	8005ba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40007c00 	.word	0x40007c00
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	00f42400 	.word	0x00f42400

08005bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cca:	d10a      	bne.n	8005ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d20:	f7fc fc64 	bl	80025ec <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d10e      	bne.n	8005d52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f81b 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e011      	b.n	8005d76 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b09c      	sub	sp, #112	; 0x70
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8e:	e0a7      	b.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	f000 80a3 	beq.w	8005ee0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fc fc27 	bl	80025ec <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d13f      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e6      	bne.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3308      	adds	r3, #8
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e068      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d050      	beq.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d148      	bne.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
 8005e78:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e6      	bne.n	8005e58 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eaa:	623a      	str	r2, [r7, #32]
 8005eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e5      	bne.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e010      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	bf0c      	ite	eq
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	2300      	movne	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f43f af48 	beq.w	8005d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3770      	adds	r7, #112	; 0x70
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	4603      	mov	r3, r0
 8005f12:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f1c:	2b84      	cmp	r3, #132	; 0x84
 8005f1e:	d005      	beq.n	8005f2c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	3303      	adds	r3, #3
 8005f2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f3e:	f000 fee7 	bl	8006d10 <vTaskStartScheduler>
  
  return osOK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af04      	add	r7, sp, #16
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <osThreadCreate+0x54>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01c      	beq.n	8005f9c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685c      	ldr	r4, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681d      	ldr	r5, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691e      	ldr	r6, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ffc8 	bl	8005f0a <makeFreeRtosPriority>
 8005f7a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f84:	9202      	str	r2, [sp, #8]
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	9100      	str	r1, [sp, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	4632      	mov	r2, r6
 8005f8e:	4629      	mov	r1, r5
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fcd5 	bl	8006940 <xTaskCreateStatic>
 8005f96:	4603      	mov	r3, r0
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	e01c      	b.n	8005fd6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685c      	ldr	r4, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fa8:	b29e      	uxth	r6, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff ffaa 	bl	8005f0a <makeFreeRtosPriority>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	9200      	str	r2, [sp, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	4632      	mov	r2, r6
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 fd1d 	bl	8006a06 <xTaskCreate>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d001      	beq.n	8005fd6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fe0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <osDelay+0x16>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	e000      	b.n	8005ff8 <osDelay+0x18>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fe53 	bl	8006ca4 <vTaskDelay>
  
  return osOK;
 8005ffe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f103 0208 	add.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f103 0208 	add.w	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f103 0208 	add.w	r2, r3, #8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d103      	bne.n	80060ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e00c      	b.n	80060e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3308      	adds	r3, #8
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e002      	b.n	80060d8 <vListInsert+0x2e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d2f6      	bcs.n	80060d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6892      	ldr	r2, [r2, #8]
 8006132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d103      	bne.n	8006150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1e5a      	subs	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10c      	bne.n	800619e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	b672      	cpsid	i
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	b662      	cpsie	i
 8006198:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800619e:	f001 fd2d 	bl	8007bfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	3b01      	subs	r3, #1
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d114      	bne.n	800621e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3310      	adds	r3, #16
 8006200:	4618      	mov	r0, r3
 8006202:	f000 ffe3 	bl	80071cc <xTaskRemoveFromEventList>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d012      	beq.n	8006232 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <xQueueGenericReset+0xd0>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	e009      	b.n	8006232 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fef0 	bl	8006008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff feeb 	bl	8006008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006232:	f001 fd17 	bl	8007c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	; 0x28
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e004      	b.n	8006288 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	3348      	adds	r3, #72	; 0x48
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fd9d 	bl	8007dcc <pvPortMalloc>
 8006292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d011      	beq.n	80062be <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	3348      	adds	r3, #72	; 0x48
 80062a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062ac:	79fa      	ldrb	r2, [r7, #7]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f805 	bl	80062c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062be:	69bb      	ldr	r3, [r7, #24]
	}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d103      	bne.n	80062e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e002      	b.n	80062ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062f6:	2101      	movs	r1, #1
 80062f8:	69b8      	ldr	r0, [r7, #24]
 80062fa:	f7ff ff39 	bl	8006170 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08e      	sub	sp, #56	; 0x38
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006316:	2300      	movs	r3, #0
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10c      	bne.n	800633e <xQueueGenericSend+0x36>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	b672      	cpsid	i
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	b662      	cpsie	i
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <xQueueGenericSend+0x44>
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <xQueueGenericSend+0x48>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <xQueueGenericSend+0x4a>
 8006350:	2300      	movs	r3, #0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10c      	bne.n	8006370 <xQueueGenericSend+0x68>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	b672      	cpsid	i
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	b662      	cpsie	i
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d103      	bne.n	800637e <xQueueGenericSend+0x76>
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <xQueueGenericSend+0x7a>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <xQueueGenericSend+0x7c>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <xQueueGenericSend+0x9a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	b672      	cpsid	i
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	b662      	cpsie	i
 800639c:	623b      	str	r3, [r7, #32]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a2:	f001 f8db 	bl	800755c <xTaskGetSchedulerState>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <xQueueGenericSend+0xaa>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericSend+0xae>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericSend+0xb0>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <xQueueGenericSend+0xce>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	b672      	cpsid	i
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	b662      	cpsie	i
 80063d0:	61fb      	str	r3, [r7, #28]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d6:	f001 fc11 	bl	8007bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <xQueueGenericSend+0xe4>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d129      	bne.n	8006440 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f2:	f000 f9bb 	bl	800676c <prvCopyDataToQueue>
 80063f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fee1 	bl	80071cc <xTaskRemoveFromEventList>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006410:	4b3f      	ldr	r3, [pc, #252]	; (8006510 <xQueueGenericSend+0x208>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	e00a      	b.n	8006438 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b39      	ldr	r3, [pc, #228]	; (8006510 <xQueueGenericSend+0x208>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006438:	f001 fc14 	bl	8007c64 <vPortExitCritical>
				return pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	e063      	b.n	8006508 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006446:	f001 fc0d 	bl	8007c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800644a:	2300      	movs	r3, #0
 800644c:	e05c      	b.n	8006508 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006454:	f107 0314 	add.w	r3, r7, #20
 8006458:	4618      	mov	r0, r3
 800645a:	f000 ff1b 	bl	8007294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006462:	f001 fbff 	bl	8007c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006466:	f000 fcc1 	bl	8006dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800646a:	f001 fbc7 	bl	8007bfc <vPortEnterCritical>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006474:	b25b      	sxtb	r3, r3
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d103      	bne.n	8006484 <xQueueGenericSend+0x17c>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648a:	b25b      	sxtb	r3, r3
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <xQueueGenericSend+0x192>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649a:	f001 fbe3 	bl	8007c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800649e:	1d3a      	adds	r2, r7, #4
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 ff0a 	bl	80072c0 <xTaskCheckForTimeOut>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d124      	bne.n	80064fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b4:	f000 fa2c 	bl	8006910 <prvIsQueueFull>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	3310      	adds	r3, #16
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fe5a 	bl	8007180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ce:	f000 f9b7 	bl	8006840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064d2:	f000 fc99 	bl	8006e08 <xTaskResumeAll>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f af7c 	bne.w	80063d6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <xQueueGenericSend+0x208>)
 80064e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	e772      	b.n	80063d6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f000 f9a5 	bl	8006840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f6:	f000 fc87 	bl	8006e08 <xTaskResumeAll>
 80064fa:	e76c      	b.n	80063d6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064fe:	f000 f99f 	bl	8006840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006502:	f000 fc81 	bl	8006e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006508:	4618      	mov	r0, r3
 800650a:	3738      	adds	r7, #56	; 0x38
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	b672      	cpsid	i
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	b662      	cpsie	i
 8006544:	623b      	str	r3, [r7, #32]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	61fb      	str	r3, [r7, #28]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800656c:	f000 fff6 	bl	800755c <xTaskGetSchedulerState>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <xQueueSemaphoreTake+0x68>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <xQueueSemaphoreTake+0x6c>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <xQueueSemaphoreTake+0x6e>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	b672      	cpsid	i
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	b662      	cpsie	i
 800659a:	61bb      	str	r3, [r7, #24]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065a0:	f001 fb2c 	bl	8007bfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d024      	beq.n	80065fa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	1e5a      	subs	r2, r3, #1
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d104      	bne.n	80065ca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065c0:	f001 f992 	bl	80078e8 <pvTaskIncrementMutexHeldCount>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	3310      	adds	r3, #16
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fdf8 	bl	80071cc <xTaskRemoveFromEventList>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065e2:	4b55      	ldr	r3, [pc, #340]	; (8006738 <xQueueSemaphoreTake+0x224>)
 80065e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065f2:	f001 fb37 	bl	8007c64 <vPortExitCritical>
				return pdPASS;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e099      	b.n	800672e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d113      	bne.n	8006628 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	b672      	cpsid	i
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	b662      	cpsie	i
 800661a:	617b      	str	r3, [r7, #20]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006620:	f001 fb20 	bl	8007c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006624:	2300      	movs	r3, #0
 8006626:	e082      	b.n	800672e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800662e:	f107 030c 	add.w	r3, r7, #12
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fe2e 	bl	8007294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800663c:	f001 fb12 	bl	8007c64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006640:	f000 fbd4 	bl	8006dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006644:	f001 fada 	bl	8007bfc <vPortEnterCritical>
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800664e:	b25b      	sxtb	r3, r3
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d103      	bne.n	800665e <xQueueSemaphoreTake+0x14a>
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006664:	b25b      	sxtb	r3, r3
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d103      	bne.n	8006674 <xQueueSemaphoreTake+0x160>
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006674:	f001 faf6 	bl	8007c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006678:	463a      	mov	r2, r7
 800667a:	f107 030c 	add.w	r3, r7, #12
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fe1d 	bl	80072c0 <xTaskCheckForTimeOut>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d132      	bne.n	80066f2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800668e:	f000 f929 	bl	80068e4 <prvIsQueueEmpty>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d026      	beq.n	80066e6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80066a0:	f001 faac 	bl	8007bfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 ff75 	bl	8007598 <xTaskPriorityInherit>
 80066ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066b0:	f001 fad8 	bl	8007c64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	3324      	adds	r3, #36	; 0x24
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fd5f 	bl	8007180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066c4:	f000 f8bc 	bl	8006840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066c8:	f000 fb9e 	bl	8006e08 <xTaskResumeAll>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f47f af66 	bne.w	80065a0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80066d4:	4b18      	ldr	r3, [pc, #96]	; (8006738 <xQueueSemaphoreTake+0x224>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	e75c      	b.n	80065a0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066e8:	f000 f8aa 	bl	8006840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ec:	f000 fb8c 	bl	8006e08 <xTaskResumeAll>
 80066f0:	e756      	b.n	80065a0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f4:	f000 f8a4 	bl	8006840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066f8:	f000 fb86 	bl	8006e08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066fe:	f000 f8f1 	bl	80068e4 <prvIsQueueEmpty>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	f43f af4b 	beq.w	80065a0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006710:	f001 fa74 	bl	8007bfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006716:	f000 f811 	bl	800673c <prvGetDisinheritPriorityAfterTimeout>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f842 	bl	80077ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006728:	f001 fa9c 	bl	8007c64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800672c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800672e:	4618      	mov	r0, r3
 8006730:	3738      	adds	r7, #56	; 0x38
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d006      	beq.n	800675a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1c3 0307 	rsb	r3, r3, #7
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e001      	b.n	800675e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800675e:	68fb      	ldr	r3, [r7, #12]
	}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10d      	bne.n	80067a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d14d      	bne.n	800682e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ff7e 	bl	8007698 <xTaskPriorityDisinherit>
 800679c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	e043      	b.n	800682e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d119      	bne.n	80067e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6858      	ldr	r0, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	461a      	mov	r2, r3
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	f001 fe2b 	bl	8008412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	441a      	add	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d32b      	bcc.n	800682e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	e026      	b.n	800682e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68d8      	ldr	r0, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	461a      	mov	r2, r3
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	f001 fe11 	bl	8008412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	425b      	negs	r3, r3
 80067fa:	441a      	add	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d207      	bcs.n	800681c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	425b      	negs	r3, r3
 8006816:	441a      	add	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d105      	bne.n	800682e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	3b01      	subs	r3, #1
 800682c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006836:	697b      	ldr	r3, [r7, #20]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006848:	f001 f9d8 	bl	8007bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006854:	e011      	b.n	800687a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d012      	beq.n	8006884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3324      	adds	r3, #36	; 0x24
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fcb2 	bl	80071cc <xTaskRemoveFromEventList>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800686e:	f000 fd8d 	bl	800738c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	3b01      	subs	r3, #1
 8006876:	b2db      	uxtb	r3, r3
 8006878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800687a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	dce9      	bgt.n	8006856 <prvUnlockQueue+0x16>
 8006882:	e000      	b.n	8006886 <prvUnlockQueue+0x46>
					break;
 8006884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	22ff      	movs	r2, #255	; 0xff
 800688a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800688e:	f001 f9e9 	bl	8007c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006892:	f001 f9b3 	bl	8007bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800689c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800689e:	e011      	b.n	80068c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d012      	beq.n	80068ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3310      	adds	r3, #16
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fc8d 	bl	80071cc <xTaskRemoveFromEventList>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068b8:	f000 fd68 	bl	800738c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	3b01      	subs	r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dce9      	bgt.n	80068a0 <prvUnlockQueue+0x60>
 80068cc:	e000      	b.n	80068d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	22ff      	movs	r2, #255	; 0xff
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068d8:	f001 f9c4 	bl	8007c64 <vPortExitCritical>
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ec:	f001 f986 	bl	8007bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e001      	b.n	8006902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006902:	f001 f9af 	bl	8007c64 <vPortExitCritical>

	return xReturn;
 8006906:	68fb      	ldr	r3, [r7, #12]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006918:	f001 f970 	bl	8007bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	429a      	cmp	r2, r3
 8006926:	d102      	bne.n	800692e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e001      	b.n	8006932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006932:	f001 f997 	bl	8007c64 <vPortExitCritical>

	return xReturn;
 8006936:	68fb      	ldr	r3, [r7, #12]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af04      	add	r7, sp, #16
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	b672      	cpsid	i
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	b662      	cpsie	i
 8006968:	623b      	str	r3, [r7, #32]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10c      	bne.n	800698e <xTaskCreateStatic+0x4e>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	61fb      	str	r3, [r7, #28]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800698e:	23b4      	movs	r3, #180	; 0xb4
 8006990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2bb4      	cmp	r3, #180	; 0xb4
 8006996:	d00c      	beq.n	80069b2 <xTaskCreateStatic+0x72>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	b672      	cpsid	i
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	b662      	cpsie	i
 80069ac:	61bb      	str	r3, [r7, #24]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01e      	beq.n	80069f8 <xTaskCreateStatic+0xb8>
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01b      	beq.n	80069f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069d2:	2300      	movs	r3, #0
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	9302      	str	r3, [sp, #8]
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f850 	bl	8006a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069f2:	f000 f8ed 	bl	8006bd0 <prvAddNewTaskToReadyList>
 80069f6:	e001      	b.n	80069fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069fc:	697b      	ldr	r3, [r7, #20]
	}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3728      	adds	r7, #40	; 0x28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b08c      	sub	sp, #48	; 0x30
 8006a0a:	af04      	add	r7, sp, #16
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 f9d6 	bl	8007dcc <pvPortMalloc>
 8006a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a28:	20b4      	movs	r0, #180	; 0xb4
 8006a2a:	f001 f9cf 	bl	8007dcc <pvPortMalloc>
 8006a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a3c:	e005      	b.n	8006a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f001 fa8e 	bl	8007f60 <vPortFree>
 8006a44:	e001      	b.n	8006a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d017      	beq.n	8006a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a58:	88fa      	ldrh	r2, [r7, #6]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	9302      	str	r3, [sp, #8]
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f80e 	bl	8006a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a74:	69f8      	ldr	r0, [r7, #28]
 8006a76:	f000 f8ab 	bl	8006bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e002      	b.n	8006a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a80:	f04f 33ff 	mov.w	r3, #4294967295
 8006a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a86:	69bb      	ldr	r3, [r7, #24]
	}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006aa8:	440b      	add	r3, r1
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f023 0307 	bic.w	r3, r3, #7
 8006ab6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	617b      	str	r3, [r7, #20]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01f      	beq.n	8006b22 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e012      	b.n	8006b0e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	7819      	ldrb	r1, [r3, #0]
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	3334      	adds	r3, #52	; 0x34
 8006af8:	460a      	mov	r2, r1
 8006afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b0f      	cmp	r3, #15
 8006b12:	d9e9      	bls.n	8006ae8 <prvInitialiseNewTask+0x58>
 8006b14:	e000      	b.n	8006b18 <prvInitialiseNewTask+0x88>
			{
				break;
 8006b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b20:	e003      	b.n	8006b2a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	2b06      	cmp	r3, #6
 8006b2e:	d901      	bls.n	8006b34 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b30:	2306      	movs	r3, #6
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff fa7c 	bl	8006048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fa77 	bl	8006048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	f1c3 0207 	rsb	r2, r3, #7
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	334c      	adds	r3, #76	; 0x4c
 8006b84:	2260      	movs	r2, #96	; 0x60
 8006b86:	2100      	movs	r1, #0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fc50 	bl	800842e <memset>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <prvInitialiseNewTask+0x134>)
 8006b92:	651a      	str	r2, [r3, #80]	; 0x50
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	4a0c      	ldr	r2, [pc, #48]	; (8006bc8 <prvInitialiseNewTask+0x138>)
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <prvInitialiseNewTask+0x13c>)
 8006b9e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	69b8      	ldr	r0, [r7, #24]
 8006ba6:	f000 ff19 	bl	80079dc <pxPortInitialiseStack>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bbc:	bf00      	nop
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	0800c330 	.word	0x0800c330
 8006bc8:	0800c350 	.word	0x0800c350
 8006bcc:	0800c310 	.word	0x0800c310

08006bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bd8:	f001 f810 	bl	8007bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bdc:	4b2a      	ldr	r3, [pc, #168]	; (8006c88 <prvAddNewTaskToReadyList+0xb8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <prvAddNewTaskToReadyList+0xb8>)
 8006be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <prvAddNewTaskToReadyList+0xbc>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bee:	4a27      	ldr	r2, [pc, #156]	; (8006c8c <prvAddNewTaskToReadyList+0xbc>)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bf4:	4b24      	ldr	r3, [pc, #144]	; (8006c88 <prvAddNewTaskToReadyList+0xb8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d110      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bfc:	f000 fbea 	bl	80073d4 <prvInitialiseTaskLists>
 8006c00:	e00d      	b.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <prvAddNewTaskToReadyList+0xc0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c0a:	4b20      	ldr	r3, [pc, #128]	; (8006c8c <prvAddNewTaskToReadyList+0xbc>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d802      	bhi.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c18:	4a1c      	ldr	r2, [pc, #112]	; (8006c8c <prvAddNewTaskToReadyList+0xbc>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	4a1b      	ldr	r2, [pc, #108]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006c26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <prvAddNewTaskToReadyList+0xcc>)
 8006c48:	441a      	add	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4610      	mov	r0, r2
 8006c52:	f7ff fa06 	bl	8006062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c56:	f001 f805 	bl	8007c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <prvAddNewTaskToReadyList+0xc0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c62:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <prvAddNewTaskToReadyList+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d207      	bcs.n	8006c80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000870 	.word	0x20000870
 8006c8c:	20000770 	.word	0x20000770
 8006c90:	2000087c 	.word	0x2000087c
 8006c94:	2000088c 	.word	0x2000088c
 8006c98:	20000878 	.word	0x20000878
 8006c9c:	20000774 	.word	0x20000774
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d019      	beq.n	8006cea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <vTaskDelay+0x64>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <vTaskDelay+0x34>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	b672      	cpsid	i
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	b662      	cpsie	i
 8006cd2:	60bb      	str	r3, [r7, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006cd8:	f000 f888 	bl	8006dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cdc:	2100      	movs	r1, #0
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fe16 	bl	8007910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ce4:	f000 f890 	bl	8006e08 <xTaskResumeAll>
 8006ce8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006cf0:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <vTaskDelay+0x68>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000898 	.word	0x20000898
 8006d0c:	e000ed04 	.word	0xe000ed04

08006d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d1e:	463a      	mov	r2, r7
 8006d20:	1d39      	adds	r1, r7, #4
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fa fe7e 	bl	8001a28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	9202      	str	r2, [sp, #8]
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	2300      	movs	r3, #0
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	460a      	mov	r2, r1
 8006d3e:	4923      	ldr	r1, [pc, #140]	; (8006dcc <vTaskStartScheduler+0xbc>)
 8006d40:	4823      	ldr	r0, [pc, #140]	; (8006dd0 <vTaskStartScheduler+0xc0>)
 8006d42:	f7ff fdfd 	bl	8006940 <xTaskCreateStatic>
 8006d46:	4603      	mov	r3, r0
 8006d48:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <vTaskStartScheduler+0xc4>)
 8006d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d4c:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <vTaskStartScheduler+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d54:	2301      	movs	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e001      	b.n	8006d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d11d      	bne.n	8006da0 <vTaskStartScheduler+0x90>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	b672      	cpsid	i
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	b662      	cpsie	i
 8006d78:	613b      	str	r3, [r7, #16]
}
 8006d7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d7c:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <vTaskStartScheduler+0xc8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	334c      	adds	r3, #76	; 0x4c
 8006d82:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <vTaskStartScheduler+0xcc>)
 8006d84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d86:	4b16      	ldr	r3, [pc, #88]	; (8006de0 <vTaskStartScheduler+0xd0>)
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <vTaskStartScheduler+0xd4>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d94:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <vTaskStartScheduler+0xd8>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d9a:	f000 feb1 	bl	8007b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d9e:	e010      	b.n	8006dc2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d10c      	bne.n	8006dc2 <vTaskStartScheduler+0xb2>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	b672      	cpsid	i
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	b662      	cpsie	i
 8006dbc:	60fb      	str	r3, [r7, #12]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <vTaskStartScheduler+0xb0>
}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	0800c2e4 	.word	0x0800c2e4
 8006dd0:	080073a5 	.word	0x080073a5
 8006dd4:	20000894 	.word	0x20000894
 8006dd8:	20000770 	.word	0x20000770
 8006ddc:	20000010 	.word	0x20000010
 8006de0:	20000890 	.word	0x20000890
 8006de4:	2000087c 	.word	0x2000087c
 8006de8:	20000874 	.word	0x20000874

08006dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006df0:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <vTaskSuspendAll+0x18>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	4a03      	ldr	r2, [pc, #12]	; (8006e04 <vTaskSuspendAll+0x18>)
 8006df8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006dfa:	bf00      	nop
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	20000898 	.word	0x20000898

08006e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e16:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <xTaskResumeAll+0x118>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10c      	bne.n	8006e38 <xTaskResumeAll+0x30>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	b672      	cpsid	i
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	b662      	cpsie	i
 8006e32:	603b      	str	r3, [r7, #0]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e38:	f000 fee0 	bl	8007bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e3c:	4b38      	ldr	r3, [pc, #224]	; (8006f20 <xTaskResumeAll+0x118>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	4a37      	ldr	r2, [pc, #220]	; (8006f20 <xTaskResumeAll+0x118>)
 8006e44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e46:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <xTaskResumeAll+0x118>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d161      	bne.n	8006f12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e4e:	4b35      	ldr	r3, [pc, #212]	; (8006f24 <xTaskResumeAll+0x11c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d05d      	beq.n	8006f12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e56:	e02e      	b.n	8006eb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e58:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <xTaskResumeAll+0x120>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3318      	adds	r3, #24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f959 	bl	800611c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff f954 	bl	800611c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	2201      	movs	r2, #1
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	; (8006f2c <xTaskResumeAll+0x124>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <xTaskResumeAll+0x124>)
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4a27      	ldr	r2, [pc, #156]	; (8006f30 <xTaskResumeAll+0x128>)
 8006e94:	441a      	add	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7ff f8e0 	bl	8006062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea6:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <xTaskResumeAll+0x12c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006eb0:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <xTaskResumeAll+0x130>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb6:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <xTaskResumeAll+0x120>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1cc      	bne.n	8006e58 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ec4:	f000 fb2a 	bl	800751c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <xTaskResumeAll+0x134>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d010      	beq.n	8006ef6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ed4:	f000 f836 	bl	8006f44 <xTaskIncrementTick>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006ede:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <xTaskResumeAll+0x130>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f1      	bne.n	8006ed4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006ef0:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <xTaskResumeAll+0x134>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <xTaskResumeAll+0x130>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006efe:	2301      	movs	r3, #1
 8006f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f02:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <xTaskResumeAll+0x138>)
 8006f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f12:	f000 fea7 	bl	8007c64 <vPortExitCritical>

	return xAlreadyYielded;
 8006f16:	68bb      	ldr	r3, [r7, #8]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000898 	.word	0x20000898
 8006f24:	20000870 	.word	0x20000870
 8006f28:	20000830 	.word	0x20000830
 8006f2c:	20000878 	.word	0x20000878
 8006f30:	20000774 	.word	0x20000774
 8006f34:	20000770 	.word	0x20000770
 8006f38:	20000884 	.word	0x20000884
 8006f3c:	20000880 	.word	0x20000880
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4e:	4b4f      	ldr	r3, [pc, #316]	; (800708c <xTaskIncrementTick+0x148>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 808a 	bne.w	800706c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f58:	4b4d      	ldr	r3, [pc, #308]	; (8007090 <xTaskIncrementTick+0x14c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f60:	4a4b      	ldr	r2, [pc, #300]	; (8007090 <xTaskIncrementTick+0x14c>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d122      	bne.n	8006fb2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f6c:	4b49      	ldr	r3, [pc, #292]	; (8007094 <xTaskIncrementTick+0x150>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	b672      	cpsid	i
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	b662      	cpsie	i
 8006f8a:	603b      	str	r3, [r7, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xTaskIncrementTick+0x4a>
 8006f90:	4b40      	ldr	r3, [pc, #256]	; (8007094 <xTaskIncrementTick+0x150>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	4b40      	ldr	r3, [pc, #256]	; (8007098 <xTaskIncrementTick+0x154>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a3e      	ldr	r2, [pc, #248]	; (8007094 <xTaskIncrementTick+0x150>)
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	4a3e      	ldr	r2, [pc, #248]	; (8007098 <xTaskIncrementTick+0x154>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b3d      	ldr	r3, [pc, #244]	; (800709c <xTaskIncrementTick+0x158>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	4a3c      	ldr	r2, [pc, #240]	; (800709c <xTaskIncrementTick+0x158>)
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	f000 fab5 	bl	800751c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fb2:	4b3b      	ldr	r3, [pc, #236]	; (80070a0 <xTaskIncrementTick+0x15c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d348      	bcc.n	800704e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fbc:	4b35      	ldr	r3, [pc, #212]	; (8007094 <xTaskIncrementTick+0x150>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc6:	4b36      	ldr	r3, [pc, #216]	; (80070a0 <xTaskIncrementTick+0x15c>)
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fcc:	601a      	str	r2, [r3, #0]
					break;
 8006fce:	e03e      	b.n	800704e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd0:	4b30      	ldr	r3, [pc, #192]	; (8007094 <xTaskIncrementTick+0x150>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d203      	bcs.n	8006ff0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fe8:	4a2d      	ldr	r2, [pc, #180]	; (80070a0 <xTaskIncrementTick+0x15c>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fee:	e02e      	b.n	800704e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff f891 	bl	800611c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff f888 	bl	800611c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	2201      	movs	r2, #1
 8007012:	409a      	lsls	r2, r3
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <xTaskIncrementTick+0x160>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4313      	orrs	r3, r2
 800701a:	4a22      	ldr	r2, [pc, #136]	; (80070a4 <xTaskIncrementTick+0x160>)
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a1f      	ldr	r2, [pc, #124]	; (80070a8 <xTaskIncrementTick+0x164>)
 800702c:	441a      	add	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7ff f814 	bl	8006062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <xTaskIncrementTick+0x168>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	429a      	cmp	r2, r3
 8007046:	d3b9      	bcc.n	8006fbc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007048:	2301      	movs	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704c:	e7b6      	b.n	8006fbc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800704e:	4b17      	ldr	r3, [pc, #92]	; (80070ac <xTaskIncrementTick+0x168>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4914      	ldr	r1, [pc, #80]	; (80070a8 <xTaskIncrementTick+0x164>)
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d907      	bls.n	8007076 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007066:	2301      	movs	r3, #1
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	e004      	b.n	8007076 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800706c:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <xTaskIncrementTick+0x16c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	4a0f      	ldr	r2, [pc, #60]	; (80070b0 <xTaskIncrementTick+0x16c>)
 8007074:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <xTaskIncrementTick+0x170>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800707e:	2301      	movs	r3, #1
 8007080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007082:	697b      	ldr	r3, [r7, #20]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000898 	.word	0x20000898
 8007090:	20000874 	.word	0x20000874
 8007094:	20000828 	.word	0x20000828
 8007098:	2000082c 	.word	0x2000082c
 800709c:	20000888 	.word	0x20000888
 80070a0:	20000890 	.word	0x20000890
 80070a4:	20000878 	.word	0x20000878
 80070a8:	20000774 	.word	0x20000774
 80070ac:	20000770 	.word	0x20000770
 80070b0:	20000880 	.word	0x20000880
 80070b4:	20000884 	.word	0x20000884

080070b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070be:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <vTaskSwitchContext+0xb0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070c6:	4b29      	ldr	r3, [pc, #164]	; (800716c <vTaskSwitchContext+0xb4>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070cc:	e046      	b.n	800715c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <vTaskSwitchContext+0xb4>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d4:	4b26      	ldr	r3, [pc, #152]	; (8007170 <vTaskSwitchContext+0xb8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	f1c3 031f 	rsb	r3, r3, #31
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	4922      	ldr	r1, [pc, #136]	; (8007174 <vTaskSwitchContext+0xbc>)
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10c      	bne.n	8007118 <vTaskSwitchContext+0x60>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	b672      	cpsid	i
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	b662      	cpsie	i
 8007112:	607b      	str	r3, [r7, #4]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <vTaskSwitchContext+0x5e>
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4a14      	ldr	r2, [pc, #80]	; (8007174 <vTaskSwitchContext+0xbc>)
 8007124:	4413      	add	r3, r2
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3308      	adds	r3, #8
 800713a:	429a      	cmp	r2, r3
 800713c:	d104      	bne.n	8007148 <vTaskSwitchContext+0x90>
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <vTaskSwitchContext+0xc0>)
 8007150:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <vTaskSwitchContext+0xc0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	334c      	adds	r3, #76	; 0x4c
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <vTaskSwitchContext+0xc4>)
 800715a:	6013      	str	r3, [r2, #0]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20000898 	.word	0x20000898
 800716c:	20000884 	.word	0x20000884
 8007170:	20000878 	.word	0x20000878
 8007174:	20000774 	.word	0x20000774
 8007178:	20000770 	.word	0x20000770
 800717c:	20000010 	.word	0x20000010

08007180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <vTaskPlaceOnEventList+0x48>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3318      	adds	r3, #24
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fe ff79 	bl	80060aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071b8:	2101      	movs	r1, #1
 80071ba:	6838      	ldr	r0, [r7, #0]
 80071bc:	f000 fba8 	bl	8007910 <prvAddCurrentTaskToDelayedList>
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000770 	.word	0x20000770

080071cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	b672      	cpsid	i
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	b662      	cpsie	i
 80071f6:	60fb      	str	r3, [r7, #12]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3318      	adds	r3, #24
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe ff8b 	bl	800611c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007206:	4b1d      	ldr	r3, [pc, #116]	; (800727c <xTaskRemoveFromEventList+0xb0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d11c      	bne.n	8007248 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe ff82 	bl	800611c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	2201      	movs	r2, #1
 800721e:	409a      	lsls	r2, r3
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <xTaskRemoveFromEventList+0xb4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4313      	orrs	r3, r2
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <xTaskRemoveFromEventList+0xb4>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4a13      	ldr	r2, [pc, #76]	; (8007284 <xTaskRemoveFromEventList+0xb8>)
 8007238:	441a      	add	r2, r3
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	3304      	adds	r3, #4
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f7fe ff0e 	bl	8006062 <vListInsertEnd>
 8007246:	e005      	b.n	8007254 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3318      	adds	r3, #24
 800724c:	4619      	mov	r1, r3
 800724e:	480e      	ldr	r0, [pc, #56]	; (8007288 <xTaskRemoveFromEventList+0xbc>)
 8007250:	f7fe ff07 	bl	8006062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <xTaskRemoveFromEventList+0xc0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	429a      	cmp	r2, r3
 8007260:	d905      	bls.n	800726e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007262:	2301      	movs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <xTaskRemoveFromEventList+0xc4>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e001      	b.n	8007272 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007272:	697b      	ldr	r3, [r7, #20]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000898 	.word	0x20000898
 8007280:	20000878 	.word	0x20000878
 8007284:	20000774 	.word	0x20000774
 8007288:	20000830 	.word	0x20000830
 800728c:	20000770 	.word	0x20000770
 8007290:	20000884 	.word	0x20000884

08007294 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <vTaskInternalSetTimeOutState+0x24>)
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <vTaskInternalSetTimeOutState+0x28>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	605a      	str	r2, [r3, #4]
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000888 	.word	0x20000888
 80072bc:	20000874 	.word	0x20000874

080072c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	b672      	cpsid	i
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	b662      	cpsie	i
 80072e4:	613b      	str	r3, [r7, #16]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10c      	bne.n	800730a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	b672      	cpsid	i
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	b662      	cpsie	i
 8007304:	60fb      	str	r3, [r7, #12]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800730a:	f000 fc77 	bl	8007bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <xTaskCheckForTimeOut+0xc4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d102      	bne.n	800732e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007328:	2300      	movs	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	e023      	b.n	8007376 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <xTaskCheckForTimeOut+0xc8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d007      	beq.n	800734a <xTaskCheckForTimeOut+0x8a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	429a      	cmp	r2, r3
 8007342:	d302      	bcc.n	800734a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	e015      	b.n	8007376 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	429a      	cmp	r2, r3
 8007352:	d20b      	bcs.n	800736c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad2      	subs	r2, r2, r3
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff97 	bl	8007294 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	e004      	b.n	8007376 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007372:	2301      	movs	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007376:	f000 fc75 	bl	8007c64 <vPortExitCritical>

	return xReturn;
 800737a:	69fb      	ldr	r3, [r7, #28]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000874 	.word	0x20000874
 8007388:	20000888 	.word	0x20000888

0800738c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <vTaskMissedYield+0x14>)
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	bf00      	nop
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000884 	.word	0x20000884

080073a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073ac:	f000 f852 	bl	8007454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <prvIdleTask+0x28>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d9f9      	bls.n	80073ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <prvIdleTask+0x2c>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073c8:	e7f0      	b.n	80073ac <prvIdleTask+0x8>
 80073ca:	bf00      	nop
 80073cc:	20000774 	.word	0x20000774
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073da:	2300      	movs	r3, #0
 80073dc:	607b      	str	r3, [r7, #4]
 80073de:	e00c      	b.n	80073fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4a12      	ldr	r2, [pc, #72]	; (8007434 <prvInitialiseTaskLists+0x60>)
 80073ec:	4413      	add	r3, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fe0a 	bl	8006008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3301      	adds	r3, #1
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b06      	cmp	r3, #6
 80073fe:	d9ef      	bls.n	80073e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007400:	480d      	ldr	r0, [pc, #52]	; (8007438 <prvInitialiseTaskLists+0x64>)
 8007402:	f7fe fe01 	bl	8006008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007406:	480d      	ldr	r0, [pc, #52]	; (800743c <prvInitialiseTaskLists+0x68>)
 8007408:	f7fe fdfe 	bl	8006008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800740c:	480c      	ldr	r0, [pc, #48]	; (8007440 <prvInitialiseTaskLists+0x6c>)
 800740e:	f7fe fdfb 	bl	8006008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007412:	480c      	ldr	r0, [pc, #48]	; (8007444 <prvInitialiseTaskLists+0x70>)
 8007414:	f7fe fdf8 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007418:	480b      	ldr	r0, [pc, #44]	; (8007448 <prvInitialiseTaskLists+0x74>)
 800741a:	f7fe fdf5 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <prvInitialiseTaskLists+0x78>)
 8007420:	4a05      	ldr	r2, [pc, #20]	; (8007438 <prvInitialiseTaskLists+0x64>)
 8007422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <prvInitialiseTaskLists+0x7c>)
 8007426:	4a05      	ldr	r2, [pc, #20]	; (800743c <prvInitialiseTaskLists+0x68>)
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000774 	.word	0x20000774
 8007438:	20000800 	.word	0x20000800
 800743c:	20000814 	.word	0x20000814
 8007440:	20000830 	.word	0x20000830
 8007444:	20000844 	.word	0x20000844
 8007448:	2000085c 	.word	0x2000085c
 800744c:	20000828 	.word	0x20000828
 8007450:	2000082c 	.word	0x2000082c

08007454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800745a:	e019      	b.n	8007490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800745c:	f000 fbce 	bl	8007bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007460:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <prvCheckTasksWaitingTermination+0x50>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fe55 	bl	800611c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <prvCheckTasksWaitingTermination+0x54>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3b01      	subs	r3, #1
 8007478:	4a0b      	ldr	r2, [pc, #44]	; (80074a8 <prvCheckTasksWaitingTermination+0x54>)
 800747a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800747c:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <prvCheckTasksWaitingTermination+0x58>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3b01      	subs	r3, #1
 8007482:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <prvCheckTasksWaitingTermination+0x58>)
 8007484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007486:	f000 fbed 	bl	8007c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f810 	bl	80074b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007490:	4b06      	ldr	r3, [pc, #24]	; (80074ac <prvCheckTasksWaitingTermination+0x58>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e1      	bne.n	800745c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000844 	.word	0x20000844
 80074a8:	20000870 	.word	0x20000870
 80074ac:	20000858 	.word	0x20000858

080074b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	334c      	adds	r3, #76	; 0x4c
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 fd59 	bl	8008f74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fd45 	bl	8007f60 <vPortFree>
				vPortFree( pxTCB );
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fd42 	bl	8007f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074dc:	e01a      	b.n	8007514 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d103      	bne.n	80074f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fd39 	bl	8007f60 <vPortFree>
	}
 80074ee:	e011      	b.n	8007514 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d00c      	beq.n	8007514 <prvDeleteTCB+0x64>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	b672      	cpsid	i
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	b662      	cpsie	i
 800750e:	60fb      	str	r3, [r7, #12]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <prvDeleteTCB+0x62>
	}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007522:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <prvResetNextTaskUnblockTime+0x38>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <prvResetNextTaskUnblockTime+0x3c>)
 800752e:	f04f 32ff 	mov.w	r2, #4294967295
 8007532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007534:	e008      	b.n	8007548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <prvResetNextTaskUnblockTime+0x38>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4a04      	ldr	r2, [pc, #16]	; (8007558 <prvResetNextTaskUnblockTime+0x3c>)
 8007546:	6013      	str	r3, [r2, #0]
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	20000828 	.word	0x20000828
 8007558:	20000890 	.word	0x20000890

0800755c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <xTaskGetSchedulerState+0x34>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800756a:	2301      	movs	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	e008      	b.n	8007582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007570:	4b08      	ldr	r3, [pc, #32]	; (8007594 <xTaskGetSchedulerState+0x38>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d102      	bne.n	800757e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007578:	2302      	movs	r3, #2
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	e001      	b.n	8007582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007582:	687b      	ldr	r3, [r7, #4]
	}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000087c 	.word	0x2000087c
 8007594:	20000898 	.word	0x20000898

08007598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d069      	beq.n	8007682 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	4b36      	ldr	r3, [pc, #216]	; (800768c <xTaskPriorityInherit+0xf4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d259      	bcs.n	8007670 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	db06      	blt.n	80075d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c4:	4b31      	ldr	r3, [pc, #196]	; (800768c <xTaskPriorityInherit+0xf4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f1c3 0207 	rsb	r2, r3, #7
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6959      	ldr	r1, [r3, #20]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a2b      	ldr	r2, [pc, #172]	; (8007690 <xTaskPriorityInherit+0xf8>)
 80075e4:	4413      	add	r3, r2
 80075e6:	4299      	cmp	r1, r3
 80075e8:	d13a      	bne.n	8007660 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fd94 	bl	800611c <uxListRemove>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d115      	bne.n	8007626 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	4924      	ldr	r1, [pc, #144]	; (8007690 <xTaskPriorityInherit+0xf8>)
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskPriorityInherit+0x8e>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	2201      	movs	r2, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	43da      	mvns	r2, r3
 800761c:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <xTaskPriorityInherit+0xfc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4013      	ands	r3, r2
 8007622:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <xTaskPriorityInherit+0xfc>)
 8007624:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <xTaskPriorityInherit+0xf4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	2201      	movs	r2, #1
 8007636:	409a      	lsls	r2, r3
 8007638:	4b16      	ldr	r3, [pc, #88]	; (8007694 <xTaskPriorityInherit+0xfc>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4313      	orrs	r3, r2
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <xTaskPriorityInherit+0xfc>)
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4a10      	ldr	r2, [pc, #64]	; (8007690 <xTaskPriorityInherit+0xf8>)
 8007650:	441a      	add	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe fd02 	bl	8006062 <vListInsertEnd>
 800765e:	e004      	b.n	800766a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <xTaskPriorityInherit+0xf4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800766a:	2301      	movs	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e008      	b.n	8007682 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <xTaskPriorityInherit+0xf4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	429a      	cmp	r2, r3
 800767c:	d201      	bcs.n	8007682 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800767e:	2301      	movs	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007682:	68fb      	ldr	r3, [r7, #12]
	}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	20000770 	.word	0x20000770
 8007690:	20000774 	.word	0x20000774
 8007694:	20000878 	.word	0x20000878

08007698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d072      	beq.n	8007794 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ae:	4b3c      	ldr	r3, [pc, #240]	; (80077a0 <xTaskPriorityDisinherit+0x108>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d00c      	beq.n	80076d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10c      	bne.n	80076f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	b672      	cpsid	i
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	b662      	cpsie	i
 80076ee:	60bb      	str	r3, [r7, #8]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	1e5a      	subs	r2, r3, #1
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	429a      	cmp	r2, r3
 8007708:	d044      	beq.n	8007794 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d140      	bne.n	8007794 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	3304      	adds	r3, #4
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fd00 	bl	800611c <uxListRemove>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d115      	bne.n	800774e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007726:	491f      	ldr	r1, [pc, #124]	; (80077a4 <xTaskPriorityDisinherit+0x10c>)
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xTaskPriorityDisinherit+0xb6>
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	2201      	movs	r2, #1
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43da      	mvns	r2, r3
 8007744:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <xTaskPriorityDisinherit+0x110>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4013      	ands	r3, r2
 800774a:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <xTaskPriorityDisinherit+0x110>)
 800774c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	f1c3 0207 	rsb	r2, r3, #7
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	2201      	movs	r2, #1
 8007768:	409a      	lsls	r2, r3
 800776a:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <xTaskPriorityDisinherit+0x110>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4313      	orrs	r3, r2
 8007770:	4a0d      	ldr	r2, [pc, #52]	; (80077a8 <xTaskPriorityDisinherit+0x110>)
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <xTaskPriorityDisinherit+0x10c>)
 8007782:	441a      	add	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7fe fc69 	bl	8006062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007794:	697b      	ldr	r3, [r7, #20]
	}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000770 	.word	0x20000770
 80077a4:	20000774 	.word	0x20000774
 80077a8:	20000878 	.word	0x20000878

080077ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8087 	beq.w	80078d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10c      	bne.n	80077e8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	b672      	cpsid	i
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	b662      	cpsie	i
 80077e2:	60fb      	str	r3, [r7, #12]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d902      	bls.n	80077f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	e002      	b.n	80077fe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	429a      	cmp	r2, r3
 8007806:	d065      	beq.n	80078d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	429a      	cmp	r2, r3
 8007810:	d160      	bne.n	80078d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007812:	4b32      	ldr	r3, [pc, #200]	; (80078dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	429a      	cmp	r2, r3
 800781a:	d10c      	bne.n	8007836 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	b672      	cpsid	i
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	b662      	cpsie	i
 8007830:	60bb      	str	r3, [r7, #8]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	db04      	blt.n	8007854 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f1c3 0207 	rsb	r2, r3, #7
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	6959      	ldr	r1, [r3, #20]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007864:	4413      	add	r3, r2
 8007866:	4299      	cmp	r1, r3
 8007868:	d134      	bne.n	80078d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	3304      	adds	r3, #4
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fc54 	bl	800611c <uxListRemove>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d115      	bne.n	80078a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787e:	4918      	ldr	r1, [pc, #96]	; (80078e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	2201      	movs	r2, #1
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	43da      	mvns	r2, r3
 800789c:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4013      	ands	r3, r2
 80078a2:	4a10      	ldr	r2, [pc, #64]	; (80078e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80078a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	2201      	movs	r2, #1
 80078ac:	409a      	lsls	r2, r3
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80078c6:	441a      	add	r2, r3
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7fe fbc7 	bl	8006062 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078d4:	bf00      	nop
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000770 	.word	0x20000770
 80078e0:	20000774 	.word	0x20000774
 80078e4:	20000878 	.word	0x20000878

080078e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078ec:	4b07      	ldr	r3, [pc, #28]	; (800790c <pvTaskIncrementMutexHeldCount+0x24>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <pvTaskIncrementMutexHeldCount+0x24>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078fa:	3201      	adds	r2, #1
 80078fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <pvTaskIncrementMutexHeldCount+0x24>)
 8007900:	681b      	ldr	r3, [r3, #0]
	}
 8007902:	4618      	mov	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000770 	.word	0x20000770

08007910 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800791a:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007920:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fbf8 	bl	800611c <uxListRemove>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10b      	bne.n	800794a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	2201      	movs	r2, #1
 800793a:	fa02 f303 	lsl.w	r3, r2, r3
 800793e:	43da      	mvns	r2, r3
 8007940:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4013      	ands	r3, r2
 8007946:	4a20      	ldr	r2, [pc, #128]	; (80079c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007948:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d10a      	bne.n	8007968 <prvAddCurrentTaskToDelayedList+0x58>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	481a      	ldr	r0, [pc, #104]	; (80079cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007962:	f7fe fb7e 	bl	8006062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007966:	e026      	b.n	80079b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007970:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	429a      	cmp	r2, r3
 800797e:	d209      	bcs.n	8007994 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007980:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f7fe fb8c 	bl	80060aa <vListInsert>
}
 8007992:	e010      	b.n	80079b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007994:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3304      	adds	r3, #4
 800799e:	4619      	mov	r1, r3
 80079a0:	4610      	mov	r0, r2
 80079a2:	f7fe fb82 	bl	80060aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079a6:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d202      	bcs.n	80079b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079b0:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6013      	str	r3, [r2, #0]
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000874 	.word	0x20000874
 80079c4:	20000770 	.word	0x20000770
 80079c8:	20000878 	.word	0x20000878
 80079cc:	2000085c 	.word	0x2000085c
 80079d0:	2000082c 	.word	0x2000082c
 80079d4:	20000828 	.word	0x20000828
 80079d8:	20000890 	.word	0x20000890

080079dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3b04      	subs	r3, #4
 80079ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f023 0201 	bic.w	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a0c:	4a0c      	ldr	r2, [pc, #48]	; (8007a40 <pxPortInitialiseStack+0x64>)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3b14      	subs	r3, #20
 8007a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f06f 0202 	mvn.w	r2, #2
 8007a2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3b20      	subs	r3, #32
 8007a30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a32:	68fb      	ldr	r3, [r7, #12]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	08007a45 	.word	0x08007a45

08007a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <prvTaskExitError+0x5c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	d00c      	beq.n	8007a72 <prvTaskExitError+0x2e>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	b672      	cpsid	i
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	b662      	cpsie	i
 8007a6c:	60fb      	str	r3, [r7, #12]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <prvTaskExitError+0x2c>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	b672      	cpsid	i
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	b662      	cpsie	i
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a8a:	bf00      	nop
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0fc      	beq.n	8007a8c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	2000000c 	.word	0x2000000c
	...

08007ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <pxCurrentTCBConst2>)
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f380 8809 	msr	PSP, r0
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	4770      	bx	lr
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst2>:
 8007ad0:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <prvPortStartFirstTask+0x24>)
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f380 8808 	msr	MSP, r0
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8814 	msr	CONTROL, r0
 8007aea:	b662      	cpsie	i
 8007aec:	b661      	cpsie	f
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	df00      	svc	0
 8007af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007afa:	bf00      	nop
 8007afc:	e000ed08 	.word	0xe000ed08

08007b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b06:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <xPortStartScheduler+0xe4>)
 8007b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	; (8007be8 <xPortStartScheduler+0xe8>)
 8007b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b2e:	4b2f      	ldr	r3, [pc, #188]	; (8007bec <xPortStartScheduler+0xec>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b34:	e009      	b.n	8007b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b36:	4b2d      	ldr	r3, [pc, #180]	; (8007bec <xPortStartScheduler+0xec>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	4a2b      	ldr	r2, [pc, #172]	; (8007bec <xPortStartScheduler+0xec>)
 8007b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b80      	cmp	r3, #128	; 0x80
 8007b54:	d0ef      	beq.n	8007b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b56:	4b25      	ldr	r3, [pc, #148]	; (8007bec <xPortStartScheduler+0xec>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f1c3 0307 	rsb	r3, r3, #7
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d00c      	beq.n	8007b7c <xPortStartScheduler+0x7c>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	b672      	cpsid	i
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	b662      	cpsie	i
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b7c:	4b1b      	ldr	r3, [pc, #108]	; (8007bec <xPortStartScheduler+0xec>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <xPortStartScheduler+0xec>)
 8007b84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b86:	4b19      	ldr	r3, [pc, #100]	; (8007bec <xPortStartScheduler+0xec>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b8e:	4a17      	ldr	r2, [pc, #92]	; (8007bec <xPortStartScheduler+0xec>)
 8007b90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b9a:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <xPortStartScheduler+0xf0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <xPortStartScheduler+0xf0>)
 8007ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ba4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <xPortStartScheduler+0xf0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <xPortStartScheduler+0xf0>)
 8007bac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bb2:	f000 f8dd 	bl	8007d70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <xPortStartScheduler+0xf4>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bbc:	f000 f8fc 	bl	8007db8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <xPortStartScheduler+0xf8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <xPortStartScheduler+0xf8>)
 8007bc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bcc:	f7ff ff84 	bl	8007ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bd0:	f7ff fa72 	bl	80070b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007bd4:	f7ff ff36 	bl	8007a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	e000e400 	.word	0xe000e400
 8007be8:	2000089c 	.word	0x2000089c
 8007bec:	200008a0 	.word	0x200008a0
 8007bf0:	e000ed20 	.word	0xe000ed20
 8007bf4:	2000000c 	.word	0x2000000c
 8007bf8:	e000ef34 	.word	0xe000ef34

08007bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	607b      	str	r3, [r7, #4]
}
 8007c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <vPortEnterCritical+0x60>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	4a0e      	ldr	r2, [pc, #56]	; (8007c5c <vPortEnterCritical+0x60>)
 8007c22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <vPortEnterCritical+0x60>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d111      	bne.n	8007c50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <vPortEnterCritical+0x64>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00c      	beq.n	8007c50 <vPortEnterCritical+0x54>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	b672      	cpsid	i
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	b662      	cpsie	i
 8007c4a:	603b      	str	r3, [r7, #0]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <vPortEnterCritical+0x52>
	}
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	2000000c 	.word	0x2000000c
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <vPortExitCritical+0x54>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10c      	bne.n	8007c8c <vPortExitCritical+0x28>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	b672      	cpsid	i
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	b662      	cpsie	i
 8007c86:	607b      	str	r3, [r7, #4]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <vPortExitCritical+0x54>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <vPortExitCritical+0x54>)
 8007c94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c96:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <vPortExitCritical+0x54>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <vPortExitCritical+0x46>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ca8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	2000000c 	.word	0x2000000c
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cc0:	f3ef 8009 	mrs	r0, PSP
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <pxCurrentTCBConst>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	f01e 0f10 	tst.w	lr, #16
 8007cd0:	bf08      	it	eq
 8007cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cda:	6010      	str	r0, [r2, #0]
 8007cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f380 8811 	msr	BASEPRI, r0
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	f7ff f9e0 	bl	80070b8 <vTaskSwitchContext>
 8007cf8:	f04f 0000 	mov.w	r0, #0
 8007cfc:	f380 8811 	msr	BASEPRI, r0
 8007d00:	bc09      	pop	{r0, r3}
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	6808      	ldr	r0, [r1, #0]
 8007d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	f01e 0f10 	tst.w	lr, #16
 8007d0e:	bf08      	it	eq
 8007d10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d14:	f380 8809 	msr	PSP, r0
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop

08007d20 <pxCurrentTCBConst>:
 8007d20:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	b672      	cpsid	i
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	b662      	cpsie	i
 8007d42:	607b      	str	r3, [r7, #4]
}
 8007d44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d46:	f7ff f8fd 	bl	8006f44 <xTaskIncrementTick>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d50:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <SysTick_Handler+0x44>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f383 8811 	msr	BASEPRI, r3
}
 8007d62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <vPortSetupTimerInterrupt+0x34>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <vPortSetupTimerInterrupt+0x38>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <vPortSetupTimerInterrupt+0x3c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a0a      	ldr	r2, [pc, #40]	; (8007db0 <vPortSetupTimerInterrupt+0x40>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	099b      	lsrs	r3, r3, #6
 8007d8c:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <vPortSetupTimerInterrupt+0x44>)
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d92:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <vPortSetupTimerInterrupt+0x34>)
 8007d94:	2207      	movs	r2, #7
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	e000e010 	.word	0xe000e010
 8007da8:	e000e018 	.word	0xe000e018
 8007dac:	20000000 	.word	0x20000000
 8007db0:	10624dd3 	.word	0x10624dd3
 8007db4:	e000e014 	.word	0xe000e014

08007db8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007db8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007dc8 <vPortEnableVFP+0x10>
 8007dbc:	6801      	ldr	r1, [r0, #0]
 8007dbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dc2:	6001      	str	r1, [r0, #0]
 8007dc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dc6:	bf00      	nop
 8007dc8:	e000ed88 	.word	0xe000ed88

08007dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dd8:	f7ff f808 	bl	8006dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ddc:	4b5b      	ldr	r3, [pc, #364]	; (8007f4c <pvPortMalloc+0x180>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007de4:	f000 f91a 	bl	800801c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007de8:	4b59      	ldr	r3, [pc, #356]	; (8007f50 <pvPortMalloc+0x184>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f040 8092 	bne.w	8007f1a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01f      	beq.n	8007e3c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d016      	beq.n	8007e3c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f023 0307 	bic.w	r3, r3, #7
 8007e14:	3308      	adds	r3, #8
 8007e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f003 0307 	and.w	r3, r3, #7
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00c      	beq.n	8007e3c <pvPortMalloc+0x70>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	b672      	cpsid	i
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	b662      	cpsie	i
 8007e36:	617b      	str	r3, [r7, #20]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d06b      	beq.n	8007f1a <pvPortMalloc+0x14e>
 8007e42:	4b44      	ldr	r3, [pc, #272]	; (8007f54 <pvPortMalloc+0x188>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d866      	bhi.n	8007f1a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e4c:	4b42      	ldr	r3, [pc, #264]	; (8007f58 <pvPortMalloc+0x18c>)
 8007e4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e50:	4b41      	ldr	r3, [pc, #260]	; (8007f58 <pvPortMalloc+0x18c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e56:	e004      	b.n	8007e62 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d903      	bls.n	8007e74 <pvPortMalloc+0xa8>
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f1      	bne.n	8007e58 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e74:	4b35      	ldr	r3, [pc, #212]	; (8007f4c <pvPortMalloc+0x180>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d04d      	beq.n	8007f1a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2208      	movs	r2, #8
 8007e84:	4413      	add	r3, r2
 8007e86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	2308      	movs	r3, #8
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d921      	bls.n	8007ee4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <pvPortMalloc+0x100>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	b672      	cpsid	i
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	b662      	cpsie	i
 8007ec6:	613b      	str	r3, [r7, #16]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ede:	69b8      	ldr	r0, [r7, #24]
 8007ee0:	f000 f8fe 	bl	80080e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ee4:	4b1b      	ldr	r3, [pc, #108]	; (8007f54 <pvPortMalloc+0x188>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	4a19      	ldr	r2, [pc, #100]	; (8007f54 <pvPortMalloc+0x188>)
 8007ef0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ef2:	4b18      	ldr	r3, [pc, #96]	; (8007f54 <pvPortMalloc+0x188>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <pvPortMalloc+0x190>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d203      	bcs.n	8007f06 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <pvPortMalloc+0x188>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <pvPortMalloc+0x190>)
 8007f04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <pvPortMalloc+0x184>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f1a:	f7fe ff75 	bl	8006e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00c      	beq.n	8007f42 <pvPortMalloc+0x176>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	b672      	cpsid	i
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	b662      	cpsie	i
 8007f3c:	60fb      	str	r3, [r7, #12]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <pvPortMalloc+0x174>
	return pvReturn;
 8007f42:	69fb      	ldr	r3, [r7, #28]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3728      	adds	r7, #40	; 0x28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	200044ac 	.word	0x200044ac
 8007f50:	200044b8 	.word	0x200044b8
 8007f54:	200044b0 	.word	0x200044b0
 8007f58:	200044a4 	.word	0x200044a4
 8007f5c:	200044b4 	.word	0x200044b4

08007f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04c      	beq.n	800800c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f72:	2308      	movs	r3, #8
 8007f74:	425b      	negs	r3, r3
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	4413      	add	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	4b23      	ldr	r3, [pc, #140]	; (8008014 <vPortFree+0xb4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10c      	bne.n	8007fa8 <vPortFree+0x48>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	60fb      	str	r3, [r7, #12]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00c      	beq.n	8007fca <vPortFree+0x6a>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	b672      	cpsid	i
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	b662      	cpsie	i
 8007fc4:	60bb      	str	r3, [r7, #8]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <vPortFree+0xb4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d019      	beq.n	800800c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d115      	bne.n	800800c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <vPortFree+0xb4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	401a      	ands	r2, r3
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ff0:	f7fe fefc 	bl	8006dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <vPortFree+0xb8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	4a06      	ldr	r2, [pc, #24]	; (8008018 <vPortFree+0xb8>)
 8008000:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008002:	6938      	ldr	r0, [r7, #16]
 8008004:	f000 f86c 	bl	80080e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008008:	f7fe fefe 	bl	8006e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800800c:	bf00      	nop
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	200044b8 	.word	0x200044b8
 8008018:	200044b0 	.word	0x200044b0

0800801c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008022:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008026:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008028:	4b27      	ldr	r3, [pc, #156]	; (80080c8 <prvHeapInit+0xac>)
 800802a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3307      	adds	r3, #7
 800803a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	4a1f      	ldr	r2, [pc, #124]	; (80080c8 <prvHeapInit+0xac>)
 800804c:	4413      	add	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008054:	4a1d      	ldr	r2, [pc, #116]	; (80080cc <prvHeapInit+0xb0>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <prvHeapInit+0xb0>)
 800805c:	2200      	movs	r2, #0
 800805e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008068:	2208      	movs	r2, #8
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0307 	bic.w	r3, r3, #7
 8008076:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <prvHeapInit+0xb4>)
 800807c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800807e:	4b14      	ldr	r3, [pc, #80]	; (80080d0 <prvHeapInit+0xb4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <prvHeapInit+0xb4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800809c:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <prvHeapInit+0xb4>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <prvHeapInit+0xb8>)
 80080aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4a09      	ldr	r2, [pc, #36]	; (80080d8 <prvHeapInit+0xbc>)
 80080b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080b4:	4b09      	ldr	r3, [pc, #36]	; (80080dc <prvHeapInit+0xc0>)
 80080b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080ba:	601a      	str	r2, [r3, #0]
}
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200008a4 	.word	0x200008a4
 80080cc:	200044a4 	.word	0x200044a4
 80080d0:	200044ac 	.word	0x200044ac
 80080d4:	200044b4 	.word	0x200044b4
 80080d8:	200044b0 	.word	0x200044b0
 80080dc:	200044b8 	.word	0x200044b8

080080e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080e8:	4b28      	ldr	r3, [pc, #160]	; (800818c <prvInsertBlockIntoFreeList+0xac>)
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e002      	b.n	80080f4 <prvInsertBlockIntoFreeList+0x14>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d8f7      	bhi.n	80080ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4413      	add	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d108      	bne.n	8008122 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	441a      	add	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	441a      	add	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d118      	bne.n	8008168 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b15      	ldr	r3, [pc, #84]	; (8008190 <prvInsertBlockIntoFreeList+0xb0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d00d      	beq.n	800815e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e008      	b.n	8008170 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <prvInsertBlockIntoFreeList+0xb0>)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	e003      	b.n	8008170 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d002      	beq.n	800817e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	200044a4 	.word	0x200044a4
 8008190:	200044ac 	.word	0x200044ac

08008194 <__errno>:
 8008194:	4b01      	ldr	r3, [pc, #4]	; (800819c <__errno+0x8>)
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000010 	.word	0x20000010

080081a0 <std>:
 80081a0:	2300      	movs	r3, #0
 80081a2:	b510      	push	{r4, lr}
 80081a4:	4604      	mov	r4, r0
 80081a6:	e9c0 3300 	strd	r3, r3, [r0]
 80081aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ae:	6083      	str	r3, [r0, #8]
 80081b0:	8181      	strh	r1, [r0, #12]
 80081b2:	6643      	str	r3, [r0, #100]	; 0x64
 80081b4:	81c2      	strh	r2, [r0, #14]
 80081b6:	6183      	str	r3, [r0, #24]
 80081b8:	4619      	mov	r1, r3
 80081ba:	2208      	movs	r2, #8
 80081bc:	305c      	adds	r0, #92	; 0x5c
 80081be:	f000 f936 	bl	800842e <memset>
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <std+0x38>)
 80081c4:	6263      	str	r3, [r4, #36]	; 0x24
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <std+0x3c>)
 80081c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <std+0x40>)
 80081cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <std+0x44>)
 80081d0:	6224      	str	r4, [r4, #32]
 80081d2:	6323      	str	r3, [r4, #48]	; 0x30
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	bf00      	nop
 80081d8:	08009209 	.word	0x08009209
 80081dc:	0800922b 	.word	0x0800922b
 80081e0:	08009263 	.word	0x08009263
 80081e4:	08009287 	.word	0x08009287

080081e8 <_cleanup_r>:
 80081e8:	4901      	ldr	r1, [pc, #4]	; (80081f0 <_cleanup_r+0x8>)
 80081ea:	f000 b8cc 	b.w	8008386 <_fwalk_reent>
 80081ee:	bf00      	nop
 80081f0:	0800a259 	.word	0x0800a259

080081f4 <__sfmoreglue>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	2268      	movs	r2, #104	; 0x68
 80081f8:	1e4d      	subs	r5, r1, #1
 80081fa:	4355      	muls	r5, r2
 80081fc:	460e      	mov	r6, r1
 80081fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008202:	f000 f93d 	bl	8008480 <_malloc_r>
 8008206:	4604      	mov	r4, r0
 8008208:	b140      	cbz	r0, 800821c <__sfmoreglue+0x28>
 800820a:	2100      	movs	r1, #0
 800820c:	e9c0 1600 	strd	r1, r6, [r0]
 8008210:	300c      	adds	r0, #12
 8008212:	60a0      	str	r0, [r4, #8]
 8008214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008218:	f000 f909 	bl	800842e <memset>
 800821c:	4620      	mov	r0, r4
 800821e:	bd70      	pop	{r4, r5, r6, pc}

08008220 <__sfp_lock_acquire>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__sfp_lock_acquire+0x8>)
 8008222:	f000 b8f4 	b.w	800840e <__retarget_lock_acquire_recursive>
 8008226:	bf00      	nop
 8008228:	200044bd 	.word	0x200044bd

0800822c <__sfp_lock_release>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__sfp_lock_release+0x8>)
 800822e:	f000 b8ef 	b.w	8008410 <__retarget_lock_release_recursive>
 8008232:	bf00      	nop
 8008234:	200044bd 	.word	0x200044bd

08008238 <__sinit_lock_acquire>:
 8008238:	4801      	ldr	r0, [pc, #4]	; (8008240 <__sinit_lock_acquire+0x8>)
 800823a:	f000 b8e8 	b.w	800840e <__retarget_lock_acquire_recursive>
 800823e:	bf00      	nop
 8008240:	200044be 	.word	0x200044be

08008244 <__sinit_lock_release>:
 8008244:	4801      	ldr	r0, [pc, #4]	; (800824c <__sinit_lock_release+0x8>)
 8008246:	f000 b8e3 	b.w	8008410 <__retarget_lock_release_recursive>
 800824a:	bf00      	nop
 800824c:	200044be 	.word	0x200044be

08008250 <__sinit>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
 8008254:	f7ff fff0 	bl	8008238 <__sinit_lock_acquire>
 8008258:	69a3      	ldr	r3, [r4, #24]
 800825a:	b11b      	cbz	r3, 8008264 <__sinit+0x14>
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008260:	f7ff bff0 	b.w	8008244 <__sinit_lock_release>
 8008264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008268:	6523      	str	r3, [r4, #80]	; 0x50
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <__sinit+0x68>)
 800826c:	4a13      	ldr	r2, [pc, #76]	; (80082bc <__sinit+0x6c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	62a2      	str	r2, [r4, #40]	; 0x28
 8008272:	42a3      	cmp	r3, r4
 8008274:	bf04      	itt	eq
 8008276:	2301      	moveq	r3, #1
 8008278:	61a3      	streq	r3, [r4, #24]
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f820 	bl	80082c0 <__sfp>
 8008280:	6060      	str	r0, [r4, #4]
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f81c 	bl	80082c0 <__sfp>
 8008288:	60a0      	str	r0, [r4, #8]
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f818 	bl	80082c0 <__sfp>
 8008290:	2200      	movs	r2, #0
 8008292:	60e0      	str	r0, [r4, #12]
 8008294:	2104      	movs	r1, #4
 8008296:	6860      	ldr	r0, [r4, #4]
 8008298:	f7ff ff82 	bl	80081a0 <std>
 800829c:	68a0      	ldr	r0, [r4, #8]
 800829e:	2201      	movs	r2, #1
 80082a0:	2109      	movs	r1, #9
 80082a2:	f7ff ff7d 	bl	80081a0 <std>
 80082a6:	68e0      	ldr	r0, [r4, #12]
 80082a8:	2202      	movs	r2, #2
 80082aa:	2112      	movs	r1, #18
 80082ac:	f7ff ff78 	bl	80081a0 <std>
 80082b0:	2301      	movs	r3, #1
 80082b2:	61a3      	str	r3, [r4, #24]
 80082b4:	e7d2      	b.n	800825c <__sinit+0xc>
 80082b6:	bf00      	nop
 80082b8:	0800c370 	.word	0x0800c370
 80082bc:	080081e9 	.word	0x080081e9

080082c0 <__sfp>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	4607      	mov	r7, r0
 80082c4:	f7ff ffac 	bl	8008220 <__sfp_lock_acquire>
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <__sfp+0x84>)
 80082ca:	681e      	ldr	r6, [r3, #0]
 80082cc:	69b3      	ldr	r3, [r6, #24]
 80082ce:	b913      	cbnz	r3, 80082d6 <__sfp+0x16>
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7ff ffbd 	bl	8008250 <__sinit>
 80082d6:	3648      	adds	r6, #72	; 0x48
 80082d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082dc:	3b01      	subs	r3, #1
 80082de:	d503      	bpl.n	80082e8 <__sfp+0x28>
 80082e0:	6833      	ldr	r3, [r6, #0]
 80082e2:	b30b      	cbz	r3, 8008328 <__sfp+0x68>
 80082e4:	6836      	ldr	r6, [r6, #0]
 80082e6:	e7f7      	b.n	80082d8 <__sfp+0x18>
 80082e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082ec:	b9d5      	cbnz	r5, 8008324 <__sfp+0x64>
 80082ee:	4b16      	ldr	r3, [pc, #88]	; (8008348 <__sfp+0x88>)
 80082f0:	60e3      	str	r3, [r4, #12]
 80082f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082f6:	6665      	str	r5, [r4, #100]	; 0x64
 80082f8:	f000 f888 	bl	800840c <__retarget_lock_init_recursive>
 80082fc:	f7ff ff96 	bl	800822c <__sfp_lock_release>
 8008300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008308:	6025      	str	r5, [r4, #0]
 800830a:	61a5      	str	r5, [r4, #24]
 800830c:	2208      	movs	r2, #8
 800830e:	4629      	mov	r1, r5
 8008310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008314:	f000 f88b 	bl	800842e <memset>
 8008318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800831c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008320:	4620      	mov	r0, r4
 8008322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008324:	3468      	adds	r4, #104	; 0x68
 8008326:	e7d9      	b.n	80082dc <__sfp+0x1c>
 8008328:	2104      	movs	r1, #4
 800832a:	4638      	mov	r0, r7
 800832c:	f7ff ff62 	bl	80081f4 <__sfmoreglue>
 8008330:	4604      	mov	r4, r0
 8008332:	6030      	str	r0, [r6, #0]
 8008334:	2800      	cmp	r0, #0
 8008336:	d1d5      	bne.n	80082e4 <__sfp+0x24>
 8008338:	f7ff ff78 	bl	800822c <__sfp_lock_release>
 800833c:	230c      	movs	r3, #12
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	e7ee      	b.n	8008320 <__sfp+0x60>
 8008342:	bf00      	nop
 8008344:	0800c370 	.word	0x0800c370
 8008348:	ffff0001 	.word	0xffff0001

0800834c <_fwalk>:
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	460f      	mov	r7, r1
 8008352:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008356:	2600      	movs	r6, #0
 8008358:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800835c:	f1b8 0801 	subs.w	r8, r8, #1
 8008360:	d505      	bpl.n	800836e <_fwalk+0x22>
 8008362:	6824      	ldr	r4, [r4, #0]
 8008364:	2c00      	cmp	r4, #0
 8008366:	d1f7      	bne.n	8008358 <_fwalk+0xc>
 8008368:	4630      	mov	r0, r6
 800836a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d906      	bls.n	8008382 <_fwalk+0x36>
 8008374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008378:	3301      	adds	r3, #1
 800837a:	d002      	beq.n	8008382 <_fwalk+0x36>
 800837c:	4628      	mov	r0, r5
 800837e:	47b8      	blx	r7
 8008380:	4306      	orrs	r6, r0
 8008382:	3568      	adds	r5, #104	; 0x68
 8008384:	e7ea      	b.n	800835c <_fwalk+0x10>

08008386 <_fwalk_reent>:
 8008386:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800838a:	4606      	mov	r6, r0
 800838c:	4688      	mov	r8, r1
 800838e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008392:	2700      	movs	r7, #0
 8008394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008398:	f1b9 0901 	subs.w	r9, r9, #1
 800839c:	d505      	bpl.n	80083aa <_fwalk_reent+0x24>
 800839e:	6824      	ldr	r4, [r4, #0]
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	d1f7      	bne.n	8008394 <_fwalk_reent+0xe>
 80083a4:	4638      	mov	r0, r7
 80083a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d907      	bls.n	80083c0 <_fwalk_reent+0x3a>
 80083b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083b4:	3301      	adds	r3, #1
 80083b6:	d003      	beq.n	80083c0 <_fwalk_reent+0x3a>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4630      	mov	r0, r6
 80083bc:	47c0      	blx	r8
 80083be:	4307      	orrs	r7, r0
 80083c0:	3568      	adds	r5, #104	; 0x68
 80083c2:	e7e9      	b.n	8008398 <_fwalk_reent+0x12>

080083c4 <__libc_init_array>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4d0d      	ldr	r5, [pc, #52]	; (80083fc <__libc_init_array+0x38>)
 80083c8:	4c0d      	ldr	r4, [pc, #52]	; (8008400 <__libc_init_array+0x3c>)
 80083ca:	1b64      	subs	r4, r4, r5
 80083cc:	10a4      	asrs	r4, r4, #2
 80083ce:	2600      	movs	r6, #0
 80083d0:	42a6      	cmp	r6, r4
 80083d2:	d109      	bne.n	80083e8 <__libc_init_array+0x24>
 80083d4:	4d0b      	ldr	r5, [pc, #44]	; (8008404 <__libc_init_array+0x40>)
 80083d6:	4c0c      	ldr	r4, [pc, #48]	; (8008408 <__libc_init_array+0x44>)
 80083d8:	f003 fc18 	bl	800bc0c <_init>
 80083dc:	1b64      	subs	r4, r4, r5
 80083de:	10a4      	asrs	r4, r4, #2
 80083e0:	2600      	movs	r6, #0
 80083e2:	42a6      	cmp	r6, r4
 80083e4:	d105      	bne.n	80083f2 <__libc_init_array+0x2e>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ec:	4798      	blx	r3
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7ee      	b.n	80083d0 <__libc_init_array+0xc>
 80083f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f6:	4798      	blx	r3
 80083f8:	3601      	adds	r6, #1
 80083fa:	e7f2      	b.n	80083e2 <__libc_init_array+0x1e>
 80083fc:	0800c710 	.word	0x0800c710
 8008400:	0800c710 	.word	0x0800c710
 8008404:	0800c710 	.word	0x0800c710
 8008408:	0800c714 	.word	0x0800c714

0800840c <__retarget_lock_init_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_acquire_recursive>:
 800840e:	4770      	bx	lr

08008410 <__retarget_lock_release_recursive>:
 8008410:	4770      	bx	lr

08008412 <memcpy>:
 8008412:	440a      	add	r2, r1
 8008414:	4291      	cmp	r1, r2
 8008416:	f100 33ff 	add.w	r3, r0, #4294967295
 800841a:	d100      	bne.n	800841e <memcpy+0xc>
 800841c:	4770      	bx	lr
 800841e:	b510      	push	{r4, lr}
 8008420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008428:	4291      	cmp	r1, r2
 800842a:	d1f9      	bne.n	8008420 <memcpy+0xe>
 800842c:	bd10      	pop	{r4, pc}

0800842e <memset>:
 800842e:	4402      	add	r2, r0
 8008430:	4603      	mov	r3, r0
 8008432:	4293      	cmp	r3, r2
 8008434:	d100      	bne.n	8008438 <memset+0xa>
 8008436:	4770      	bx	lr
 8008438:	f803 1b01 	strb.w	r1, [r3], #1
 800843c:	e7f9      	b.n	8008432 <memset+0x4>
	...

08008440 <sbrk_aligned>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4e0e      	ldr	r6, [pc, #56]	; (800847c <sbrk_aligned+0x3c>)
 8008444:	460c      	mov	r4, r1
 8008446:	6831      	ldr	r1, [r6, #0]
 8008448:	4605      	mov	r5, r0
 800844a:	b911      	cbnz	r1, 8008452 <sbrk_aligned+0x12>
 800844c:	f000 fdee 	bl	800902c <_sbrk_r>
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 fde9 	bl	800902c <_sbrk_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d00a      	beq.n	8008474 <sbrk_aligned+0x34>
 800845e:	1cc4      	adds	r4, r0, #3
 8008460:	f024 0403 	bic.w	r4, r4, #3
 8008464:	42a0      	cmp	r0, r4
 8008466:	d007      	beq.n	8008478 <sbrk_aligned+0x38>
 8008468:	1a21      	subs	r1, r4, r0
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fdde 	bl	800902c <_sbrk_r>
 8008470:	3001      	adds	r0, #1
 8008472:	d101      	bne.n	8008478 <sbrk_aligned+0x38>
 8008474:	f04f 34ff 	mov.w	r4, #4294967295
 8008478:	4620      	mov	r0, r4
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	200044c4 	.word	0x200044c4

08008480 <_malloc_r>:
 8008480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008484:	1ccd      	adds	r5, r1, #3
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	2d00      	cmp	r5, #0
 8008494:	4607      	mov	r7, r0
 8008496:	db01      	blt.n	800849c <_malloc_r+0x1c>
 8008498:	42a9      	cmp	r1, r5
 800849a:	d905      	bls.n	80084a8 <_malloc_r+0x28>
 800849c:	230c      	movs	r3, #12
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	2600      	movs	r6, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a8:	4e2e      	ldr	r6, [pc, #184]	; (8008564 <_malloc_r+0xe4>)
 80084aa:	f001 ffa7 	bl	800a3fc <__malloc_lock>
 80084ae:	6833      	ldr	r3, [r6, #0]
 80084b0:	461c      	mov	r4, r3
 80084b2:	bb34      	cbnz	r4, 8008502 <_malloc_r+0x82>
 80084b4:	4629      	mov	r1, r5
 80084b6:	4638      	mov	r0, r7
 80084b8:	f7ff ffc2 	bl	8008440 <sbrk_aligned>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	4604      	mov	r4, r0
 80084c0:	d14d      	bne.n	800855e <_malloc_r+0xde>
 80084c2:	6834      	ldr	r4, [r6, #0]
 80084c4:	4626      	mov	r6, r4
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d140      	bne.n	800854c <_malloc_r+0xcc>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	4631      	mov	r1, r6
 80084ce:	4638      	mov	r0, r7
 80084d0:	eb04 0803 	add.w	r8, r4, r3
 80084d4:	f000 fdaa 	bl	800902c <_sbrk_r>
 80084d8:	4580      	cmp	r8, r0
 80084da:	d13a      	bne.n	8008552 <_malloc_r+0xd2>
 80084dc:	6821      	ldr	r1, [r4, #0]
 80084de:	3503      	adds	r5, #3
 80084e0:	1a6d      	subs	r5, r5, r1
 80084e2:	f025 0503 	bic.w	r5, r5, #3
 80084e6:	3508      	adds	r5, #8
 80084e8:	2d0c      	cmp	r5, #12
 80084ea:	bf38      	it	cc
 80084ec:	250c      	movcc	r5, #12
 80084ee:	4629      	mov	r1, r5
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff ffa5 	bl	8008440 <sbrk_aligned>
 80084f6:	3001      	adds	r0, #1
 80084f8:	d02b      	beq.n	8008552 <_malloc_r+0xd2>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	442b      	add	r3, r5
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	e00e      	b.n	8008520 <_malloc_r+0xa0>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	1b52      	subs	r2, r2, r5
 8008506:	d41e      	bmi.n	8008546 <_malloc_r+0xc6>
 8008508:	2a0b      	cmp	r2, #11
 800850a:	d916      	bls.n	800853a <_malloc_r+0xba>
 800850c:	1961      	adds	r1, r4, r5
 800850e:	42a3      	cmp	r3, r4
 8008510:	6025      	str	r5, [r4, #0]
 8008512:	bf18      	it	ne
 8008514:	6059      	strne	r1, [r3, #4]
 8008516:	6863      	ldr	r3, [r4, #4]
 8008518:	bf08      	it	eq
 800851a:	6031      	streq	r1, [r6, #0]
 800851c:	5162      	str	r2, [r4, r5]
 800851e:	604b      	str	r3, [r1, #4]
 8008520:	4638      	mov	r0, r7
 8008522:	f104 060b 	add.w	r6, r4, #11
 8008526:	f001 ff6f 	bl	800a408 <__malloc_unlock>
 800852a:	f026 0607 	bic.w	r6, r6, #7
 800852e:	1d23      	adds	r3, r4, #4
 8008530:	1af2      	subs	r2, r6, r3
 8008532:	d0b6      	beq.n	80084a2 <_malloc_r+0x22>
 8008534:	1b9b      	subs	r3, r3, r6
 8008536:	50a3      	str	r3, [r4, r2]
 8008538:	e7b3      	b.n	80084a2 <_malloc_r+0x22>
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	42a3      	cmp	r3, r4
 800853e:	bf0c      	ite	eq
 8008540:	6032      	streq	r2, [r6, #0]
 8008542:	605a      	strne	r2, [r3, #4]
 8008544:	e7ec      	b.n	8008520 <_malloc_r+0xa0>
 8008546:	4623      	mov	r3, r4
 8008548:	6864      	ldr	r4, [r4, #4]
 800854a:	e7b2      	b.n	80084b2 <_malloc_r+0x32>
 800854c:	4634      	mov	r4, r6
 800854e:	6876      	ldr	r6, [r6, #4]
 8008550:	e7b9      	b.n	80084c6 <_malloc_r+0x46>
 8008552:	230c      	movs	r3, #12
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	4638      	mov	r0, r7
 8008558:	f001 ff56 	bl	800a408 <__malloc_unlock>
 800855c:	e7a1      	b.n	80084a2 <_malloc_r+0x22>
 800855e:	6025      	str	r5, [r4, #0]
 8008560:	e7de      	b.n	8008520 <_malloc_r+0xa0>
 8008562:	bf00      	nop
 8008564:	200044c0 	.word	0x200044c0

08008568 <__cvt>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	ec55 4b10 	vmov	r4, r5, d0
 8008570:	2d00      	cmp	r5, #0
 8008572:	460e      	mov	r6, r1
 8008574:	4619      	mov	r1, r3
 8008576:	462b      	mov	r3, r5
 8008578:	bfbb      	ittet	lt
 800857a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800857e:	461d      	movlt	r5, r3
 8008580:	2300      	movge	r3, #0
 8008582:	232d      	movlt	r3, #45	; 0x2d
 8008584:	700b      	strb	r3, [r1, #0]
 8008586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008588:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800858c:	4691      	mov	r9, r2
 800858e:	f023 0820 	bic.w	r8, r3, #32
 8008592:	bfbc      	itt	lt
 8008594:	4622      	movlt	r2, r4
 8008596:	4614      	movlt	r4, r2
 8008598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800859c:	d005      	beq.n	80085aa <__cvt+0x42>
 800859e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085a2:	d100      	bne.n	80085a6 <__cvt+0x3e>
 80085a4:	3601      	adds	r6, #1
 80085a6:	2102      	movs	r1, #2
 80085a8:	e000      	b.n	80085ac <__cvt+0x44>
 80085aa:	2103      	movs	r1, #3
 80085ac:	ab03      	add	r3, sp, #12
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	ab02      	add	r3, sp, #8
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	ec45 4b10 	vmov	d0, r4, r5
 80085b8:	4653      	mov	r3, sl
 80085ba:	4632      	mov	r2, r6
 80085bc:	f000 ffd8 	bl	8009570 <_dtoa_r>
 80085c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085c4:	4607      	mov	r7, r0
 80085c6:	d102      	bne.n	80085ce <__cvt+0x66>
 80085c8:	f019 0f01 	tst.w	r9, #1
 80085cc:	d022      	beq.n	8008614 <__cvt+0xac>
 80085ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085d2:	eb07 0906 	add.w	r9, r7, r6
 80085d6:	d110      	bne.n	80085fa <__cvt+0x92>
 80085d8:	783b      	ldrb	r3, [r7, #0]
 80085da:	2b30      	cmp	r3, #48	; 0x30
 80085dc:	d10a      	bne.n	80085f4 <__cvt+0x8c>
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	4620      	mov	r0, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7f8 fa8f 	bl	8000b08 <__aeabi_dcmpeq>
 80085ea:	b918      	cbnz	r0, 80085f4 <__cvt+0x8c>
 80085ec:	f1c6 0601 	rsb	r6, r6, #1
 80085f0:	f8ca 6000 	str.w	r6, [sl]
 80085f4:	f8da 3000 	ldr.w	r3, [sl]
 80085f8:	4499      	add	r9, r3
 80085fa:	2200      	movs	r2, #0
 80085fc:	2300      	movs	r3, #0
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	f7f8 fa81 	bl	8000b08 <__aeabi_dcmpeq>
 8008606:	b108      	cbz	r0, 800860c <__cvt+0xa4>
 8008608:	f8cd 900c 	str.w	r9, [sp, #12]
 800860c:	2230      	movs	r2, #48	; 0x30
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	454b      	cmp	r3, r9
 8008612:	d307      	bcc.n	8008624 <__cvt+0xbc>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008618:	1bdb      	subs	r3, r3, r7
 800861a:	4638      	mov	r0, r7
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	b004      	add	sp, #16
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	1c59      	adds	r1, r3, #1
 8008626:	9103      	str	r1, [sp, #12]
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e7f0      	b.n	800860e <__cvt+0xa6>

0800862c <__exponent>:
 800862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862e:	4603      	mov	r3, r0
 8008630:	2900      	cmp	r1, #0
 8008632:	bfb8      	it	lt
 8008634:	4249      	neglt	r1, r1
 8008636:	f803 2b02 	strb.w	r2, [r3], #2
 800863a:	bfb4      	ite	lt
 800863c:	222d      	movlt	r2, #45	; 0x2d
 800863e:	222b      	movge	r2, #43	; 0x2b
 8008640:	2909      	cmp	r1, #9
 8008642:	7042      	strb	r2, [r0, #1]
 8008644:	dd2a      	ble.n	800869c <__exponent+0x70>
 8008646:	f10d 0407 	add.w	r4, sp, #7
 800864a:	46a4      	mov	ip, r4
 800864c:	270a      	movs	r7, #10
 800864e:	46a6      	mov	lr, r4
 8008650:	460a      	mov	r2, r1
 8008652:	fb91 f6f7 	sdiv	r6, r1, r7
 8008656:	fb07 1516 	mls	r5, r7, r6, r1
 800865a:	3530      	adds	r5, #48	; 0x30
 800865c:	2a63      	cmp	r2, #99	; 0x63
 800865e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008666:	4631      	mov	r1, r6
 8008668:	dcf1      	bgt.n	800864e <__exponent+0x22>
 800866a:	3130      	adds	r1, #48	; 0x30
 800866c:	f1ae 0502 	sub.w	r5, lr, #2
 8008670:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008674:	1c44      	adds	r4, r0, #1
 8008676:	4629      	mov	r1, r5
 8008678:	4561      	cmp	r1, ip
 800867a:	d30a      	bcc.n	8008692 <__exponent+0x66>
 800867c:	f10d 0209 	add.w	r2, sp, #9
 8008680:	eba2 020e 	sub.w	r2, r2, lr
 8008684:	4565      	cmp	r5, ip
 8008686:	bf88      	it	hi
 8008688:	2200      	movhi	r2, #0
 800868a:	4413      	add	r3, r2
 800868c:	1a18      	subs	r0, r3, r0
 800868e:	b003      	add	sp, #12
 8008690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008696:	f804 2f01 	strb.w	r2, [r4, #1]!
 800869a:	e7ed      	b.n	8008678 <__exponent+0x4c>
 800869c:	2330      	movs	r3, #48	; 0x30
 800869e:	3130      	adds	r1, #48	; 0x30
 80086a0:	7083      	strb	r3, [r0, #2]
 80086a2:	70c1      	strb	r1, [r0, #3]
 80086a4:	1d03      	adds	r3, r0, #4
 80086a6:	e7f1      	b.n	800868c <__exponent+0x60>

080086a8 <_printf_float>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	ed2d 8b02 	vpush	{d8}
 80086b0:	b08d      	sub	sp, #52	; 0x34
 80086b2:	460c      	mov	r4, r1
 80086b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086b8:	4616      	mov	r6, r2
 80086ba:	461f      	mov	r7, r3
 80086bc:	4605      	mov	r5, r0
 80086be:	f001 fe19 	bl	800a2f4 <_localeconv_r>
 80086c2:	f8d0 a000 	ldr.w	sl, [r0]
 80086c6:	4650      	mov	r0, sl
 80086c8:	f7f7 fda2 	bl	8000210 <strlen>
 80086cc:	2300      	movs	r3, #0
 80086ce:	930a      	str	r3, [sp, #40]	; 0x28
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	9305      	str	r3, [sp, #20]
 80086d4:	f8d8 3000 	ldr.w	r3, [r8]
 80086d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086dc:	3307      	adds	r3, #7
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	f103 0208 	add.w	r2, r3, #8
 80086e6:	f8c8 2000 	str.w	r2, [r8]
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008700:	ee08 0a10 	vmov	s16, r0
 8008704:	4b9f      	ldr	r3, [pc, #636]	; (8008984 <_printf_float+0x2dc>)
 8008706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	f7f8 fa2d 	bl	8000b6c <__aeabi_dcmpun>
 8008712:	bb88      	cbnz	r0, 8008778 <_printf_float+0xd0>
 8008714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008718:	4b9a      	ldr	r3, [pc, #616]	; (8008984 <_printf_float+0x2dc>)
 800871a:	f04f 32ff 	mov.w	r2, #4294967295
 800871e:	f7f8 fa07 	bl	8000b30 <__aeabi_dcmple>
 8008722:	bb48      	cbnz	r0, 8008778 <_printf_float+0xd0>
 8008724:	2200      	movs	r2, #0
 8008726:	2300      	movs	r3, #0
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f8 f9f6 	bl	8000b1c <__aeabi_dcmplt>
 8008730:	b110      	cbz	r0, 8008738 <_printf_float+0x90>
 8008732:	232d      	movs	r3, #45	; 0x2d
 8008734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008738:	4b93      	ldr	r3, [pc, #588]	; (8008988 <_printf_float+0x2e0>)
 800873a:	4894      	ldr	r0, [pc, #592]	; (800898c <_printf_float+0x2e4>)
 800873c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008740:	bf94      	ite	ls
 8008742:	4698      	movls	r8, r3
 8008744:	4680      	movhi	r8, r0
 8008746:	2303      	movs	r3, #3
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	9b05      	ldr	r3, [sp, #20]
 800874c:	f023 0204 	bic.w	r2, r3, #4
 8008750:	6022      	str	r2, [r4, #0]
 8008752:	f04f 0900 	mov.w	r9, #0
 8008756:	9700      	str	r7, [sp, #0]
 8008758:	4633      	mov	r3, r6
 800875a:	aa0b      	add	r2, sp, #44	; 0x2c
 800875c:	4621      	mov	r1, r4
 800875e:	4628      	mov	r0, r5
 8008760:	f000 f9d8 	bl	8008b14 <_printf_common>
 8008764:	3001      	adds	r0, #1
 8008766:	f040 8090 	bne.w	800888a <_printf_float+0x1e2>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	b00d      	add	sp, #52	; 0x34
 8008770:	ecbd 8b02 	vpop	{d8}
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9f4 	bl	8000b6c <__aeabi_dcmpun>
 8008784:	b140      	cbz	r0, 8008798 <_printf_float+0xf0>
 8008786:	464b      	mov	r3, r9
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfbc      	itt	lt
 800878c:	232d      	movlt	r3, #45	; 0x2d
 800878e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008792:	487f      	ldr	r0, [pc, #508]	; (8008990 <_printf_float+0x2e8>)
 8008794:	4b7f      	ldr	r3, [pc, #508]	; (8008994 <_printf_float+0x2ec>)
 8008796:	e7d1      	b.n	800873c <_printf_float+0x94>
 8008798:	6863      	ldr	r3, [r4, #4]
 800879a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800879e:	9206      	str	r2, [sp, #24]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	d13f      	bne.n	8008824 <_printf_float+0x17c>
 80087a4:	2306      	movs	r3, #6
 80087a6:	6063      	str	r3, [r4, #4]
 80087a8:	9b05      	ldr	r3, [sp, #20]
 80087aa:	6861      	ldr	r1, [r4, #4]
 80087ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087b0:	2300      	movs	r3, #0
 80087b2:	9303      	str	r3, [sp, #12]
 80087b4:	ab0a      	add	r3, sp, #40	; 0x28
 80087b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087ba:	ab09      	add	r3, sp, #36	; 0x24
 80087bc:	ec49 8b10 	vmov	d0, r8, r9
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fecd 	bl	8008568 <__cvt>
 80087ce:	9b06      	ldr	r3, [sp, #24]
 80087d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d2:	2b47      	cmp	r3, #71	; 0x47
 80087d4:	4680      	mov	r8, r0
 80087d6:	d108      	bne.n	80087ea <_printf_float+0x142>
 80087d8:	1cc8      	adds	r0, r1, #3
 80087da:	db02      	blt.n	80087e2 <_printf_float+0x13a>
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	4299      	cmp	r1, r3
 80087e0:	dd41      	ble.n	8008866 <_printf_float+0x1be>
 80087e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80087e6:	fa5f fb8b 	uxtb.w	fp, fp
 80087ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087ee:	d820      	bhi.n	8008832 <_printf_float+0x18a>
 80087f0:	3901      	subs	r1, #1
 80087f2:	465a      	mov	r2, fp
 80087f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087f8:	9109      	str	r1, [sp, #36]	; 0x24
 80087fa:	f7ff ff17 	bl	800862c <__exponent>
 80087fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008800:	1813      	adds	r3, r2, r0
 8008802:	2a01      	cmp	r2, #1
 8008804:	4681      	mov	r9, r0
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	dc02      	bgt.n	8008810 <_printf_float+0x168>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	07d2      	lsls	r2, r2, #31
 800880e:	d501      	bpl.n	8008814 <_printf_float+0x16c>
 8008810:	3301      	adds	r3, #1
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008818:	2b00      	cmp	r3, #0
 800881a:	d09c      	beq.n	8008756 <_printf_float+0xae>
 800881c:	232d      	movs	r3, #45	; 0x2d
 800881e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008822:	e798      	b.n	8008756 <_printf_float+0xae>
 8008824:	9a06      	ldr	r2, [sp, #24]
 8008826:	2a47      	cmp	r2, #71	; 0x47
 8008828:	d1be      	bne.n	80087a8 <_printf_float+0x100>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1bc      	bne.n	80087a8 <_printf_float+0x100>
 800882e:	2301      	movs	r3, #1
 8008830:	e7b9      	b.n	80087a6 <_printf_float+0xfe>
 8008832:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008836:	d118      	bne.n	800886a <_printf_float+0x1c2>
 8008838:	2900      	cmp	r1, #0
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	dd0b      	ble.n	8008856 <_printf_float+0x1ae>
 800883e:	6121      	str	r1, [r4, #16]
 8008840:	b913      	cbnz	r3, 8008848 <_printf_float+0x1a0>
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	07d0      	lsls	r0, r2, #31
 8008846:	d502      	bpl.n	800884e <_printf_float+0x1a6>
 8008848:	3301      	adds	r3, #1
 800884a:	440b      	add	r3, r1
 800884c:	6123      	str	r3, [r4, #16]
 800884e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	e7de      	b.n	8008814 <_printf_float+0x16c>
 8008856:	b913      	cbnz	r3, 800885e <_printf_float+0x1b6>
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	07d2      	lsls	r2, r2, #31
 800885c:	d501      	bpl.n	8008862 <_printf_float+0x1ba>
 800885e:	3302      	adds	r3, #2
 8008860:	e7f4      	b.n	800884c <_printf_float+0x1a4>
 8008862:	2301      	movs	r3, #1
 8008864:	e7f2      	b.n	800884c <_printf_float+0x1a4>
 8008866:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800886a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886c:	4299      	cmp	r1, r3
 800886e:	db05      	blt.n	800887c <_printf_float+0x1d4>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	6121      	str	r1, [r4, #16]
 8008874:	07d8      	lsls	r0, r3, #31
 8008876:	d5ea      	bpl.n	800884e <_printf_float+0x1a6>
 8008878:	1c4b      	adds	r3, r1, #1
 800887a:	e7e7      	b.n	800884c <_printf_float+0x1a4>
 800887c:	2900      	cmp	r1, #0
 800887e:	bfd4      	ite	le
 8008880:	f1c1 0202 	rsble	r2, r1, #2
 8008884:	2201      	movgt	r2, #1
 8008886:	4413      	add	r3, r2
 8008888:	e7e0      	b.n	800884c <_printf_float+0x1a4>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	055a      	lsls	r2, r3, #21
 800888e:	d407      	bmi.n	80088a0 <_printf_float+0x1f8>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	4642      	mov	r2, r8
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	d12c      	bne.n	80088f8 <_printf_float+0x250>
 800889e:	e764      	b.n	800876a <_printf_float+0xc2>
 80088a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088a4:	f240 80e0 	bls.w	8008a68 <_printf_float+0x3c0>
 80088a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ac:	2200      	movs	r2, #0
 80088ae:	2300      	movs	r3, #0
 80088b0:	f7f8 f92a 	bl	8000b08 <__aeabi_dcmpeq>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d034      	beq.n	8008922 <_printf_float+0x27a>
 80088b8:	4a37      	ldr	r2, [pc, #220]	; (8008998 <_printf_float+0x2f0>)
 80088ba:	2301      	movs	r3, #1
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	47b8      	blx	r7
 80088c2:	3001      	adds	r0, #1
 80088c4:	f43f af51 	beq.w	800876a <_printf_float+0xc2>
 80088c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088cc:	429a      	cmp	r2, r3
 80088ce:	db02      	blt.n	80088d6 <_printf_float+0x22e>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	07d8      	lsls	r0, r3, #31
 80088d4:	d510      	bpl.n	80088f8 <_printf_float+0x250>
 80088d6:	ee18 3a10 	vmov	r3, s16
 80088da:	4652      	mov	r2, sl
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af41 	beq.w	800876a <_printf_float+0xc2>
 80088e8:	f04f 0800 	mov.w	r8, #0
 80088ec:	f104 091a 	add.w	r9, r4, #26
 80088f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f2:	3b01      	subs	r3, #1
 80088f4:	4543      	cmp	r3, r8
 80088f6:	dc09      	bgt.n	800890c <_printf_float+0x264>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	079b      	lsls	r3, r3, #30
 80088fc:	f100 8105 	bmi.w	8008b0a <_printf_float+0x462>
 8008900:	68e0      	ldr	r0, [r4, #12]
 8008902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008904:	4298      	cmp	r0, r3
 8008906:	bfb8      	it	lt
 8008908:	4618      	movlt	r0, r3
 800890a:	e730      	b.n	800876e <_printf_float+0xc6>
 800890c:	2301      	movs	r3, #1
 800890e:	464a      	mov	r2, r9
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f af27 	beq.w	800876a <_printf_float+0xc2>
 800891c:	f108 0801 	add.w	r8, r8, #1
 8008920:	e7e6      	b.n	80088f0 <_printf_float+0x248>
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	dc39      	bgt.n	800899c <_printf_float+0x2f4>
 8008928:	4a1b      	ldr	r2, [pc, #108]	; (8008998 <_printf_float+0x2f0>)
 800892a:	2301      	movs	r3, #1
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f43f af19 	beq.w	800876a <_printf_float+0xc2>
 8008938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800893c:	4313      	orrs	r3, r2
 800893e:	d102      	bne.n	8008946 <_printf_float+0x29e>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	07d9      	lsls	r1, r3, #31
 8008944:	d5d8      	bpl.n	80088f8 <_printf_float+0x250>
 8008946:	ee18 3a10 	vmov	r3, s16
 800894a:	4652      	mov	r2, sl
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	f43f af09 	beq.w	800876a <_printf_float+0xc2>
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	f104 0a1a 	add.w	sl, r4, #26
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	425b      	negs	r3, r3
 8008964:	454b      	cmp	r3, r9
 8008966:	dc01      	bgt.n	800896c <_printf_float+0x2c4>
 8008968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896a:	e792      	b.n	8008892 <_printf_float+0x1ea>
 800896c:	2301      	movs	r3, #1
 800896e:	4652      	mov	r2, sl
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f aef7 	beq.w	800876a <_printf_float+0xc2>
 800897c:	f109 0901 	add.w	r9, r9, #1
 8008980:	e7ee      	b.n	8008960 <_printf_float+0x2b8>
 8008982:	bf00      	nop
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	0800c374 	.word	0x0800c374
 800898c:	0800c378 	.word	0x0800c378
 8008990:	0800c380 	.word	0x0800c380
 8008994:	0800c37c 	.word	0x0800c37c
 8008998:	0800c5a9 	.word	0x0800c5a9
 800899c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089a0:	429a      	cmp	r2, r3
 80089a2:	bfa8      	it	ge
 80089a4:	461a      	movge	r2, r3
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	4691      	mov	r9, r2
 80089aa:	dc37      	bgt.n	8008a1c <_printf_float+0x374>
 80089ac:	f04f 0b00 	mov.w	fp, #0
 80089b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b4:	f104 021a 	add.w	r2, r4, #26
 80089b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ba:	9305      	str	r3, [sp, #20]
 80089bc:	eba3 0309 	sub.w	r3, r3, r9
 80089c0:	455b      	cmp	r3, fp
 80089c2:	dc33      	bgt.n	8008a2c <_printf_float+0x384>
 80089c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c8:	429a      	cmp	r2, r3
 80089ca:	db3b      	blt.n	8008a44 <_printf_float+0x39c>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	07da      	lsls	r2, r3, #31
 80089d0:	d438      	bmi.n	8008a44 <_printf_float+0x39c>
 80089d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d4:	9a05      	ldr	r2, [sp, #20]
 80089d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d8:	1a9a      	subs	r2, r3, r2
 80089da:	eba3 0901 	sub.w	r9, r3, r1
 80089de:	4591      	cmp	r9, r2
 80089e0:	bfa8      	it	ge
 80089e2:	4691      	movge	r9, r2
 80089e4:	f1b9 0f00 	cmp.w	r9, #0
 80089e8:	dc35      	bgt.n	8008a56 <_printf_float+0x3ae>
 80089ea:	f04f 0800 	mov.w	r8, #0
 80089ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089f2:	f104 0a1a 	add.w	sl, r4, #26
 80089f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	eba3 0309 	sub.w	r3, r3, r9
 8008a00:	4543      	cmp	r3, r8
 8008a02:	f77f af79 	ble.w	80088f8 <_printf_float+0x250>
 8008a06:	2301      	movs	r3, #1
 8008a08:	4652      	mov	r2, sl
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	f43f aeaa 	beq.w	800876a <_printf_float+0xc2>
 8008a16:	f108 0801 	add.w	r8, r8, #1
 8008a1a:	e7ec      	b.n	80089f6 <_printf_float+0x34e>
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4642      	mov	r2, r8
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	d1c0      	bne.n	80089ac <_printf_float+0x304>
 8008a2a:	e69e      	b.n	800876a <_printf_float+0xc2>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	9205      	str	r2, [sp, #20]
 8008a34:	47b8      	blx	r7
 8008a36:	3001      	adds	r0, #1
 8008a38:	f43f ae97 	beq.w	800876a <_printf_float+0xc2>
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	f10b 0b01 	add.w	fp, fp, #1
 8008a42:	e7b9      	b.n	80089b8 <_printf_float+0x310>
 8008a44:	ee18 3a10 	vmov	r3, s16
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	d1be      	bne.n	80089d2 <_printf_float+0x32a>
 8008a54:	e689      	b.n	800876a <_printf_float+0xc2>
 8008a56:	9a05      	ldr	r2, [sp, #20]
 8008a58:	464b      	mov	r3, r9
 8008a5a:	4442      	add	r2, r8
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	d1c1      	bne.n	80089ea <_printf_float+0x342>
 8008a66:	e680      	b.n	800876a <_printf_float+0xc2>
 8008a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6a:	2a01      	cmp	r2, #1
 8008a6c:	dc01      	bgt.n	8008a72 <_printf_float+0x3ca>
 8008a6e:	07db      	lsls	r3, r3, #31
 8008a70:	d538      	bpl.n	8008ae4 <_printf_float+0x43c>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4642      	mov	r2, r8
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b8      	blx	r7
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	f43f ae74 	beq.w	800876a <_printf_float+0xc2>
 8008a82:	ee18 3a10 	vmov	r3, s16
 8008a86:	4652      	mov	r2, sl
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f43f ae6b 	beq.w	800876a <_printf_float+0xc2>
 8008a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f7f8 f834 	bl	8000b08 <__aeabi_dcmpeq>
 8008aa0:	b9d8      	cbnz	r0, 8008ada <_printf_float+0x432>
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa4:	f108 0201 	add.w	r2, r8, #1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d10e      	bne.n	8008ad2 <_printf_float+0x42a>
 8008ab4:	e659      	b.n	800876a <_printf_float+0xc2>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f ae52 	beq.w	800876a <_printf_float+0xc2>
 8008ac6:	f108 0801 	add.w	r8, r8, #1
 8008aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008acc:	3b01      	subs	r3, #1
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	dcf1      	bgt.n	8008ab6 <_printf_float+0x40e>
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ad8:	e6dc      	b.n	8008894 <_printf_float+0x1ec>
 8008ada:	f04f 0800 	mov.w	r8, #0
 8008ade:	f104 0a1a 	add.w	sl, r4, #26
 8008ae2:	e7f2      	b.n	8008aca <_printf_float+0x422>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4642      	mov	r2, r8
 8008ae8:	e7df      	b.n	8008aaa <_printf_float+0x402>
 8008aea:	2301      	movs	r3, #1
 8008aec:	464a      	mov	r2, r9
 8008aee:	4631      	mov	r1, r6
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b8      	blx	r7
 8008af4:	3001      	adds	r0, #1
 8008af6:	f43f ae38 	beq.w	800876a <_printf_float+0xc2>
 8008afa:	f108 0801 	add.w	r8, r8, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	4543      	cmp	r3, r8
 8008b06:	dcf0      	bgt.n	8008aea <_printf_float+0x442>
 8008b08:	e6fa      	b.n	8008900 <_printf_float+0x258>
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	f104 0919 	add.w	r9, r4, #25
 8008b12:	e7f4      	b.n	8008afe <_printf_float+0x456>

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4616      	mov	r6, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	4607      	mov	r7, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b10a      	cbz	r2, 8008b3a <_printf_common+0x26>
 8008b36:	3301      	adds	r3, #1
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	0699      	lsls	r1, r3, #26
 8008b3e:	bf42      	ittt	mi
 8008b40:	6833      	ldrmi	r3, [r6, #0]
 8008b42:	3302      	addmi	r3, #2
 8008b44:	6033      	strmi	r3, [r6, #0]
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	f015 0506 	ands.w	r5, r5, #6
 8008b4c:	d106      	bne.n	8008b5c <_printf_common+0x48>
 8008b4e:	f104 0a19 	add.w	sl, r4, #25
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc26      	bgt.n	8008baa <_printf_common+0x96>
 8008b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b60:	1e13      	subs	r3, r2, #0
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	0692      	lsls	r2, r2, #26
 8008b6a:	d42b      	bmi.n	8008bc4 <_printf_common+0xb0>
 8008b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d01e      	beq.n	8008bb8 <_printf_common+0xa4>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68e5      	ldr	r5, [r4, #12]
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	f003 0306 	and.w	r3, r3, #6
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	bf08      	it	eq
 8008b88:	1aad      	subeq	r5, r5, r2
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	bf0c      	ite	eq
 8008b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b94:	2500      	movne	r5, #0
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bfc4      	itt	gt
 8008b9a:	1a9b      	subgt	r3, r3, r2
 8008b9c:	18ed      	addgt	r5, r5, r3
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	341a      	adds	r4, #26
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d11a      	bne.n	8008bdc <_printf_common+0xc8>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e008      	b.n	8008bbc <_printf_common+0xa8>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4649      	mov	r1, r9
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d103      	bne.n	8008bc0 <_printf_common+0xac>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	e7c6      	b.n	8008b52 <_printf_common+0x3e>
 8008bc4:	18e1      	adds	r1, r4, r3
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	2030      	movs	r0, #48	; 0x30
 8008bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bce:	4422      	add	r2, r4
 8008bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7c7      	b.n	8008b6c <_printf_common+0x58>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4649      	mov	r1, r9
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa4>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d9      	b.n	8008ba2 <_printf_common+0x8e>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	7e0f      	ldrb	r7, [r1, #24]
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	469a      	mov	sl, r3
 8008c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c06:	d807      	bhi.n	8008c18 <_printf_i+0x28>
 8008c08:	2f62      	cmp	r7, #98	; 0x62
 8008c0a:	d80a      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f000 80d8 	beq.w	8008dc2 <_printf_i+0x1d2>
 8008c12:	2f58      	cmp	r7, #88	; 0x58
 8008c14:	f000 80a3 	beq.w	8008d5e <_printf_i+0x16e>
 8008c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c20:	e03a      	b.n	8008c98 <_printf_i+0xa8>
 8008c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c26:	2b15      	cmp	r3, #21
 8008c28:	d8f6      	bhi.n	8008c18 <_printf_i+0x28>
 8008c2a:	a101      	add	r1, pc, #4	; (adr r1, 8008c30 <_printf_i+0x40>)
 8008c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c19 	.word	0x08008c19
 8008c3c:	08008c19 	.word	0x08008c19
 8008c40:	08008c19 	.word	0x08008c19
 8008c44:	08008c19 	.word	0x08008c19
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c19 	.word	0x08008c19
 8008c50:	08008c19 	.word	0x08008c19
 8008c54:	08008c19 	.word	0x08008c19
 8008c58:	08008c19 	.word	0x08008c19
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008ccd 	.word	0x08008ccd
 8008c64:	08008d8b 	.word	0x08008d8b
 8008c68:	08008c19 	.word	0x08008c19
 8008c6c:	08008c19 	.word	0x08008c19
 8008c70:	08008dcb 	.word	0x08008dcb
 8008c74:	08008c19 	.word	0x08008c19
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c19 	.word	0x08008c19
 8008c80:	08008c19 	.word	0x08008c19
 8008c84:	08008d93 	.word	0x08008d93
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a3      	b.n	8008de4 <_printf_i+0x1f4>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	f101 0304 	add.w	r3, r1, #4
 8008ca6:	d50a      	bpl.n	8008cbe <_printf_i+0xce>
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	da03      	bge.n	8008cb8 <_printf_i+0xc8>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb8:	485e      	ldr	r0, [pc, #376]	; (8008e34 <_printf_i+0x244>)
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e019      	b.n	8008cf2 <_printf_i+0x102>
 8008cbe:	680e      	ldr	r6, [r1, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc6:	bf18      	it	ne
 8008cc8:	b236      	sxthne	r6, r6
 8008cca:	e7ef      	b.n	8008cac <_printf_i+0xbc>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0601      	lsls	r1, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xec>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xf2>
 8008cdc:	0646      	lsls	r6, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe8>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4854      	ldr	r0, [pc, #336]	; (8008e34 <_printf_i+0x244>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x118>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04d      	beq.n	8008da4 <_printf_i+0x1b4>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x11a>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x14c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x14c>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee2 	bl	8008b14 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14c      	bne.n	8008dee <_printf_i+0x1fe>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	4835      	ldr	r0, [pc, #212]	; (8008e34 <_printf_i+0x244>)
 8008d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d6c:	6029      	str	r1, [r5, #0]
 8008d6e:	061d      	lsls	r5, r3, #24
 8008d70:	d514      	bpl.n	8008d9c <_printf_i+0x1ac>
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	bf44      	itt	mi
 8008d76:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7a:	6023      	strmi	r3, [r4, #0]
 8008d7c:	b91e      	cbnz	r6, 8008d86 <_printf_i+0x196>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f023 0320 	bic.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2310      	movs	r3, #16
 8008d88:	e7b0      	b.n	8008cec <_printf_i+0xfc>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	2378      	movs	r3, #120	; 0x78
 8008d94:	4828      	ldr	r0, [pc, #160]	; (8008e38 <_printf_i+0x248>)
 8008d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9a:	e7e3      	b.n	8008d64 <_printf_i+0x174>
 8008d9c:	0659      	lsls	r1, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	e7e6      	b.n	8008d72 <_printf_i+0x182>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bb      	b.n	8008d20 <_printf_i+0x130>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1cc>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1d2>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c8>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7ba      	b.n	8008d40 <_printf_i+0x150>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa22 	bl	8000220 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1f2>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7a8      	b.n	8008d40 <_printf_i+0x150>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ab      	beq.n	8008d54 <_printf_i+0x164>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x23a>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a4      	b.n	8008d58 <_printf_i+0x168>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09b      	beq.n	8008d54 <_printf_i+0x164>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x21e>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x212>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x22e>
 8008e32:	bf00      	nop
 8008e34:	0800c384 	.word	0x0800c384
 8008e38:	0800c395 	.word	0x0800c395

08008e3c <iprintf>:
 8008e3c:	b40f      	push	{r0, r1, r2, r3}
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <iprintf+0x2c>)
 8008e40:	b513      	push	{r0, r1, r4, lr}
 8008e42:	681c      	ldr	r4, [r3, #0]
 8008e44:	b124      	cbz	r4, 8008e50 <iprintf+0x14>
 8008e46:	69a3      	ldr	r3, [r4, #24]
 8008e48:	b913      	cbnz	r3, 8008e50 <iprintf+0x14>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f7ff fa00 	bl	8008250 <__sinit>
 8008e50:	ab05      	add	r3, sp, #20
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	68a1      	ldr	r1, [r4, #8]
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f001 feeb 	bl	800ac34 <_vfiprintf_r>
 8008e5e:	b002      	add	sp, #8
 8008e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e64:	b004      	add	sp, #16
 8008e66:	4770      	bx	lr
 8008e68:	20000010 	.word	0x20000010

08008e6c <_puts_r>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	460e      	mov	r6, r1
 8008e70:	4605      	mov	r5, r0
 8008e72:	b118      	cbz	r0, 8008e7c <_puts_r+0x10>
 8008e74:	6983      	ldr	r3, [r0, #24]
 8008e76:	b90b      	cbnz	r3, 8008e7c <_puts_r+0x10>
 8008e78:	f7ff f9ea 	bl	8008250 <__sinit>
 8008e7c:	69ab      	ldr	r3, [r5, #24]
 8008e7e:	68ac      	ldr	r4, [r5, #8]
 8008e80:	b913      	cbnz	r3, 8008e88 <_puts_r+0x1c>
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7ff f9e4 	bl	8008250 <__sinit>
 8008e88:	4b2c      	ldr	r3, [pc, #176]	; (8008f3c <_puts_r+0xd0>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d120      	bne.n	8008ed0 <_puts_r+0x64>
 8008e8e:	686c      	ldr	r4, [r5, #4]
 8008e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e92:	07db      	lsls	r3, r3, #31
 8008e94:	d405      	bmi.n	8008ea2 <_puts_r+0x36>
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	0598      	lsls	r0, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_puts_r+0x36>
 8008e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9e:	f7ff fab6 	bl	800840e <__retarget_lock_acquire_recursive>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	0719      	lsls	r1, r3, #28
 8008ea6:	d51d      	bpl.n	8008ee4 <_puts_r+0x78>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	b1db      	cbz	r3, 8008ee4 <_puts_r+0x78>
 8008eac:	3e01      	subs	r6, #1
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	60a3      	str	r3, [r4, #8]
 8008eb8:	bb39      	cbnz	r1, 8008f0a <_puts_r+0x9e>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	da38      	bge.n	8008f30 <_puts_r+0xc4>
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	210a      	movs	r1, #10
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f9e4 	bl	8009290 <__swbuf_r>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d011      	beq.n	8008ef0 <_puts_r+0x84>
 8008ecc:	250a      	movs	r5, #10
 8008ece:	e011      	b.n	8008ef4 <_puts_r+0x88>
 8008ed0:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <_puts_r+0xd4>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d101      	bne.n	8008eda <_puts_r+0x6e>
 8008ed6:	68ac      	ldr	r4, [r5, #8]
 8008ed8:	e7da      	b.n	8008e90 <_puts_r+0x24>
 8008eda:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <_puts_r+0xd8>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	bf08      	it	eq
 8008ee0:	68ec      	ldreq	r4, [r5, #12]
 8008ee2:	e7d5      	b.n	8008e90 <_puts_r+0x24>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fa36 	bl	8009358 <__swsetup_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0dd      	beq.n	8008eac <_puts_r+0x40>
 8008ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef6:	07da      	lsls	r2, r3, #31
 8008ef8:	d405      	bmi.n	8008f06 <_puts_r+0x9a>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	059b      	lsls	r3, r3, #22
 8008efe:	d402      	bmi.n	8008f06 <_puts_r+0x9a>
 8008f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f02:	f7ff fa85 	bl	8008410 <__retarget_lock_release_recursive>
 8008f06:	4628      	mov	r0, r5
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da04      	bge.n	8008f18 <_puts_r+0xac>
 8008f0e:	69a2      	ldr	r2, [r4, #24]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	dc06      	bgt.n	8008f22 <_puts_r+0xb6>
 8008f14:	290a      	cmp	r1, #10
 8008f16:	d004      	beq.n	8008f22 <_puts_r+0xb6>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	6022      	str	r2, [r4, #0]
 8008f1e:	7019      	strb	r1, [r3, #0]
 8008f20:	e7c5      	b.n	8008eae <_puts_r+0x42>
 8008f22:	4622      	mov	r2, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 f9b3 	bl	8009290 <__swbuf_r>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d1bf      	bne.n	8008eae <_puts_r+0x42>
 8008f2e:	e7df      	b.n	8008ef0 <_puts_r+0x84>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	250a      	movs	r5, #10
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	6022      	str	r2, [r4, #0]
 8008f38:	701d      	strb	r5, [r3, #0]
 8008f3a:	e7db      	b.n	8008ef4 <_puts_r+0x88>
 8008f3c:	0800c330 	.word	0x0800c330
 8008f40:	0800c350 	.word	0x0800c350
 8008f44:	0800c310 	.word	0x0800c310

08008f48 <puts>:
 8008f48:	4b02      	ldr	r3, [pc, #8]	; (8008f54 <puts+0xc>)
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	6818      	ldr	r0, [r3, #0]
 8008f4e:	f7ff bf8d 	b.w	8008e6c <_puts_r>
 8008f52:	bf00      	nop
 8008f54:	20000010 	.word	0x20000010

08008f58 <cleanup_glue>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	6809      	ldr	r1, [r1, #0]
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b109      	cbz	r1, 8008f66 <cleanup_glue+0xe>
 8008f62:	f7ff fff9 	bl	8008f58 <cleanup_glue>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6e:	f001 bdeb 	b.w	800ab48 <_free_r>
	...

08008f74 <_reclaim_reent>:
 8008f74:	4b2c      	ldr	r3, [pc, #176]	; (8009028 <_reclaim_reent+0xb4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4283      	cmp	r3, r0
 8008f7a:	b570      	push	{r4, r5, r6, lr}
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	d051      	beq.n	8009024 <_reclaim_reent+0xb0>
 8008f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f82:	b143      	cbz	r3, 8008f96 <_reclaim_reent+0x22>
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d14a      	bne.n	8009020 <_reclaim_reent+0xac>
 8008f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f8c:	6819      	ldr	r1, [r3, #0]
 8008f8e:	b111      	cbz	r1, 8008f96 <_reclaim_reent+0x22>
 8008f90:	4620      	mov	r0, r4
 8008f92:	f001 fdd9 	bl	800ab48 <_free_r>
 8008f96:	6961      	ldr	r1, [r4, #20]
 8008f98:	b111      	cbz	r1, 8008fa0 <_reclaim_reent+0x2c>
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f001 fdd4 	bl	800ab48 <_free_r>
 8008fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008fa2:	b111      	cbz	r1, 8008faa <_reclaim_reent+0x36>
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f001 fdcf 	bl	800ab48 <_free_r>
 8008faa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008fac:	b111      	cbz	r1, 8008fb4 <_reclaim_reent+0x40>
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f001 fdca 	bl	800ab48 <_free_r>
 8008fb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008fb6:	b111      	cbz	r1, 8008fbe <_reclaim_reent+0x4a>
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f001 fdc5 	bl	800ab48 <_free_r>
 8008fbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008fc0:	b111      	cbz	r1, 8008fc8 <_reclaim_reent+0x54>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f001 fdc0 	bl	800ab48 <_free_r>
 8008fc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008fca:	b111      	cbz	r1, 8008fd2 <_reclaim_reent+0x5e>
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f001 fdbb 	bl	800ab48 <_free_r>
 8008fd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008fd4:	b111      	cbz	r1, 8008fdc <_reclaim_reent+0x68>
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f001 fdb6 	bl	800ab48 <_free_r>
 8008fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fde:	b111      	cbz	r1, 8008fe6 <_reclaim_reent+0x72>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f001 fdb1 	bl	800ab48 <_free_r>
 8008fe6:	69a3      	ldr	r3, [r4, #24]
 8008fe8:	b1e3      	cbz	r3, 8009024 <_reclaim_reent+0xb0>
 8008fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fec:	4620      	mov	r0, r4
 8008fee:	4798      	blx	r3
 8008ff0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ff2:	b1b9      	cbz	r1, 8009024 <_reclaim_reent+0xb0>
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ffa:	f7ff bfad 	b.w	8008f58 <cleanup_glue>
 8008ffe:	5949      	ldr	r1, [r1, r5]
 8009000:	b941      	cbnz	r1, 8009014 <_reclaim_reent+0xa0>
 8009002:	3504      	adds	r5, #4
 8009004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009006:	2d80      	cmp	r5, #128	; 0x80
 8009008:	68d9      	ldr	r1, [r3, #12]
 800900a:	d1f8      	bne.n	8008ffe <_reclaim_reent+0x8a>
 800900c:	4620      	mov	r0, r4
 800900e:	f001 fd9b 	bl	800ab48 <_free_r>
 8009012:	e7ba      	b.n	8008f8a <_reclaim_reent+0x16>
 8009014:	680e      	ldr	r6, [r1, #0]
 8009016:	4620      	mov	r0, r4
 8009018:	f001 fd96 	bl	800ab48 <_free_r>
 800901c:	4631      	mov	r1, r6
 800901e:	e7ef      	b.n	8009000 <_reclaim_reent+0x8c>
 8009020:	2500      	movs	r5, #0
 8009022:	e7ef      	b.n	8009004 <_reclaim_reent+0x90>
 8009024:	bd70      	pop	{r4, r5, r6, pc}
 8009026:	bf00      	nop
 8009028:	20000010 	.word	0x20000010

0800902c <_sbrk_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	; (8009048 <_sbrk_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f9 f8d8 	bl	80021ec <_sbrk>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_sbrk_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_sbrk_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	200044c8 	.word	0x200044c8

0800904c <iscanf>:
 800904c:	b40f      	push	{r0, r1, r2, r3}
 800904e:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <iscanf+0x2c>)
 8009050:	b513      	push	{r0, r1, r4, lr}
 8009052:	681c      	ldr	r4, [r3, #0]
 8009054:	b124      	cbz	r4, 8009060 <iscanf+0x14>
 8009056:	69a3      	ldr	r3, [r4, #24]
 8009058:	b913      	cbnz	r3, 8009060 <iscanf+0x14>
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff f8f8 	bl	8008250 <__sinit>
 8009060:	ab05      	add	r3, sp, #20
 8009062:	9a04      	ldr	r2, [sp, #16]
 8009064:	6861      	ldr	r1, [r4, #4]
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	4620      	mov	r0, r4
 800906a:	f002 f8b9 	bl	800b1e0 <_vfiscanf_r>
 800906e:	b002      	add	sp, #8
 8009070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009074:	b004      	add	sp, #16
 8009076:	4770      	bx	lr
 8009078:	20000010 	.word	0x20000010

0800907c <setvbuf>:
 800907c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009080:	461d      	mov	r5, r3
 8009082:	4b5d      	ldr	r3, [pc, #372]	; (80091f8 <setvbuf+0x17c>)
 8009084:	681f      	ldr	r7, [r3, #0]
 8009086:	4604      	mov	r4, r0
 8009088:	460e      	mov	r6, r1
 800908a:	4690      	mov	r8, r2
 800908c:	b127      	cbz	r7, 8009098 <setvbuf+0x1c>
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	b913      	cbnz	r3, 8009098 <setvbuf+0x1c>
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff f8dc 	bl	8008250 <__sinit>
 8009098:	4b58      	ldr	r3, [pc, #352]	; (80091fc <setvbuf+0x180>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d167      	bne.n	800916e <setvbuf+0xf2>
 800909e:	687c      	ldr	r4, [r7, #4]
 80090a0:	f1b8 0f02 	cmp.w	r8, #2
 80090a4:	d006      	beq.n	80090b4 <setvbuf+0x38>
 80090a6:	f1b8 0f01 	cmp.w	r8, #1
 80090aa:	f200 809f 	bhi.w	80091ec <setvbuf+0x170>
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	f2c0 809c 	blt.w	80091ec <setvbuf+0x170>
 80090b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b6:	07db      	lsls	r3, r3, #31
 80090b8:	d405      	bmi.n	80090c6 <setvbuf+0x4a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	0598      	lsls	r0, r3, #22
 80090be:	d402      	bmi.n	80090c6 <setvbuf+0x4a>
 80090c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c2:	f7ff f9a4 	bl	800840e <__retarget_lock_acquire_recursive>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4638      	mov	r0, r7
 80090ca:	f001 f8c5 	bl	800a258 <_fflush_r>
 80090ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d0:	b141      	cbz	r1, 80090e4 <setvbuf+0x68>
 80090d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d6:	4299      	cmp	r1, r3
 80090d8:	d002      	beq.n	80090e0 <setvbuf+0x64>
 80090da:	4638      	mov	r0, r7
 80090dc:	f001 fd34 	bl	800ab48 <_free_r>
 80090e0:	2300      	movs	r3, #0
 80090e2:	6363      	str	r3, [r4, #52]	; 0x34
 80090e4:	2300      	movs	r3, #0
 80090e6:	61a3      	str	r3, [r4, #24]
 80090e8:	6063      	str	r3, [r4, #4]
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	0619      	lsls	r1, r3, #24
 80090ee:	d503      	bpl.n	80090f8 <setvbuf+0x7c>
 80090f0:	6921      	ldr	r1, [r4, #16]
 80090f2:	4638      	mov	r0, r7
 80090f4:	f001 fd28 	bl	800ab48 <_free_r>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80090fe:	f023 0303 	bic.w	r3, r3, #3
 8009102:	f1b8 0f02 	cmp.w	r8, #2
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	d06c      	beq.n	80091e4 <setvbuf+0x168>
 800910a:	ab01      	add	r3, sp, #4
 800910c:	466a      	mov	r2, sp
 800910e:	4621      	mov	r1, r4
 8009110:	4638      	mov	r0, r7
 8009112:	f001 f905 	bl	800a320 <__swhatbuf_r>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	4318      	orrs	r0, r3
 800911a:	81a0      	strh	r0, [r4, #12]
 800911c:	2d00      	cmp	r5, #0
 800911e:	d130      	bne.n	8009182 <setvbuf+0x106>
 8009120:	9d00      	ldr	r5, [sp, #0]
 8009122:	4628      	mov	r0, r5
 8009124:	f001 f962 	bl	800a3ec <malloc>
 8009128:	4606      	mov	r6, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	d155      	bne.n	80091da <setvbuf+0x15e>
 800912e:	f8dd 9000 	ldr.w	r9, [sp]
 8009132:	45a9      	cmp	r9, r5
 8009134:	d14a      	bne.n	80091cc <setvbuf+0x150>
 8009136:	f04f 35ff 	mov.w	r5, #4294967295
 800913a:	2200      	movs	r2, #0
 800913c:	60a2      	str	r2, [r4, #8]
 800913e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	6122      	str	r2, [r4, #16]
 8009146:	2201      	movs	r2, #1
 8009148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914c:	6162      	str	r2, [r4, #20]
 800914e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009150:	f043 0302 	orr.w	r3, r3, #2
 8009154:	07d2      	lsls	r2, r2, #31
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	d405      	bmi.n	8009166 <setvbuf+0xea>
 800915a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800915e:	d102      	bne.n	8009166 <setvbuf+0xea>
 8009160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009162:	f7ff f955 	bl	8008410 <__retarget_lock_release_recursive>
 8009166:	4628      	mov	r0, r5
 8009168:	b003      	add	sp, #12
 800916a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800916e:	4b24      	ldr	r3, [pc, #144]	; (8009200 <setvbuf+0x184>)
 8009170:	429c      	cmp	r4, r3
 8009172:	d101      	bne.n	8009178 <setvbuf+0xfc>
 8009174:	68bc      	ldr	r4, [r7, #8]
 8009176:	e793      	b.n	80090a0 <setvbuf+0x24>
 8009178:	4b22      	ldr	r3, [pc, #136]	; (8009204 <setvbuf+0x188>)
 800917a:	429c      	cmp	r4, r3
 800917c:	bf08      	it	eq
 800917e:	68fc      	ldreq	r4, [r7, #12]
 8009180:	e78e      	b.n	80090a0 <setvbuf+0x24>
 8009182:	2e00      	cmp	r6, #0
 8009184:	d0cd      	beq.n	8009122 <setvbuf+0xa6>
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	b913      	cbnz	r3, 8009190 <setvbuf+0x114>
 800918a:	4638      	mov	r0, r7
 800918c:	f7ff f860 	bl	8008250 <__sinit>
 8009190:	f1b8 0f01 	cmp.w	r8, #1
 8009194:	bf08      	it	eq
 8009196:	89a3      	ldrheq	r3, [r4, #12]
 8009198:	6026      	str	r6, [r4, #0]
 800919a:	bf04      	itt	eq
 800919c:	f043 0301 	orreq.w	r3, r3, #1
 80091a0:	81a3      	strheq	r3, [r4, #12]
 80091a2:	89a2      	ldrh	r2, [r4, #12]
 80091a4:	f012 0308 	ands.w	r3, r2, #8
 80091a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80091ac:	d01c      	beq.n	80091e8 <setvbuf+0x16c>
 80091ae:	07d3      	lsls	r3, r2, #31
 80091b0:	bf41      	itttt	mi
 80091b2:	2300      	movmi	r3, #0
 80091b4:	426d      	negmi	r5, r5
 80091b6:	60a3      	strmi	r3, [r4, #8]
 80091b8:	61a5      	strmi	r5, [r4, #24]
 80091ba:	bf58      	it	pl
 80091bc:	60a5      	strpl	r5, [r4, #8]
 80091be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80091c0:	f015 0501 	ands.w	r5, r5, #1
 80091c4:	d115      	bne.n	80091f2 <setvbuf+0x176>
 80091c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80091ca:	e7c8      	b.n	800915e <setvbuf+0xe2>
 80091cc:	4648      	mov	r0, r9
 80091ce:	f001 f90d 	bl	800a3ec <malloc>
 80091d2:	4606      	mov	r6, r0
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d0ae      	beq.n	8009136 <setvbuf+0xba>
 80091d8:	464d      	mov	r5, r9
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	e7d0      	b.n	8009186 <setvbuf+0x10a>
 80091e4:	2500      	movs	r5, #0
 80091e6:	e7a8      	b.n	800913a <setvbuf+0xbe>
 80091e8:	60a3      	str	r3, [r4, #8]
 80091ea:	e7e8      	b.n	80091be <setvbuf+0x142>
 80091ec:	f04f 35ff 	mov.w	r5, #4294967295
 80091f0:	e7b9      	b.n	8009166 <setvbuf+0xea>
 80091f2:	2500      	movs	r5, #0
 80091f4:	e7b7      	b.n	8009166 <setvbuf+0xea>
 80091f6:	bf00      	nop
 80091f8:	20000010 	.word	0x20000010
 80091fc:	0800c330 	.word	0x0800c330
 8009200:	0800c350 	.word	0x0800c350
 8009204:	0800c310 	.word	0x0800c310

08009208 <__sread>:
 8009208:	b510      	push	{r4, lr}
 800920a:	460c      	mov	r4, r1
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	f002 f960 	bl	800b4d4 <_read_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	bfab      	itete	ge
 8009218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800921a:	89a3      	ldrhlt	r3, [r4, #12]
 800921c:	181b      	addge	r3, r3, r0
 800921e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009222:	bfac      	ite	ge
 8009224:	6563      	strge	r3, [r4, #84]	; 0x54
 8009226:	81a3      	strhlt	r3, [r4, #12]
 8009228:	bd10      	pop	{r4, pc}

0800922a <__swrite>:
 800922a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	461f      	mov	r7, r3
 8009230:	898b      	ldrh	r3, [r1, #12]
 8009232:	05db      	lsls	r3, r3, #23
 8009234:	4605      	mov	r5, r0
 8009236:	460c      	mov	r4, r1
 8009238:	4616      	mov	r6, r2
 800923a:	d505      	bpl.n	8009248 <__swrite+0x1e>
 800923c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009240:	2302      	movs	r3, #2
 8009242:	2200      	movs	r2, #0
 8009244:	f001 f85a 	bl	800a2fc <_lseek_r>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800924e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	4632      	mov	r2, r6
 8009256:	463b      	mov	r3, r7
 8009258:	4628      	mov	r0, r5
 800925a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800925e:	f000 b869 	b.w	8009334 <_write_r>

08009262 <__sseek>:
 8009262:	b510      	push	{r4, lr}
 8009264:	460c      	mov	r4, r1
 8009266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926a:	f001 f847 	bl	800a2fc <_lseek_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	bf15      	itete	ne
 8009274:	6560      	strne	r0, [r4, #84]	; 0x54
 8009276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800927a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800927e:	81a3      	strheq	r3, [r4, #12]
 8009280:	bf18      	it	ne
 8009282:	81a3      	strhne	r3, [r4, #12]
 8009284:	bd10      	pop	{r4, pc}

08009286 <__sclose>:
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	f000 b8d3 	b.w	8009434 <_close_r>
	...

08009290 <__swbuf_r>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	460e      	mov	r6, r1
 8009294:	4614      	mov	r4, r2
 8009296:	4605      	mov	r5, r0
 8009298:	b118      	cbz	r0, 80092a2 <__swbuf_r+0x12>
 800929a:	6983      	ldr	r3, [r0, #24]
 800929c:	b90b      	cbnz	r3, 80092a2 <__swbuf_r+0x12>
 800929e:	f7fe ffd7 	bl	8008250 <__sinit>
 80092a2:	4b21      	ldr	r3, [pc, #132]	; (8009328 <__swbuf_r+0x98>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	d12b      	bne.n	8009300 <__swbuf_r+0x70>
 80092a8:	686c      	ldr	r4, [r5, #4]
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	071a      	lsls	r2, r3, #28
 80092b2:	d52f      	bpl.n	8009314 <__swbuf_r+0x84>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b36b      	cbz	r3, 8009314 <__swbuf_r+0x84>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	6820      	ldr	r0, [r4, #0]
 80092bc:	1ac0      	subs	r0, r0, r3
 80092be:	6963      	ldr	r3, [r4, #20]
 80092c0:	b2f6      	uxtb	r6, r6
 80092c2:	4283      	cmp	r3, r0
 80092c4:	4637      	mov	r7, r6
 80092c6:	dc04      	bgt.n	80092d2 <__swbuf_r+0x42>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4628      	mov	r0, r5
 80092cc:	f000 ffc4 	bl	800a258 <_fflush_r>
 80092d0:	bb30      	cbnz	r0, 8009320 <__swbuf_r+0x90>
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	60a3      	str	r3, [r4, #8]
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	6022      	str	r2, [r4, #0]
 80092de:	701e      	strb	r6, [r3, #0]
 80092e0:	6963      	ldr	r3, [r4, #20]
 80092e2:	3001      	adds	r0, #1
 80092e4:	4283      	cmp	r3, r0
 80092e6:	d004      	beq.n	80092f2 <__swbuf_r+0x62>
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	07db      	lsls	r3, r3, #31
 80092ec:	d506      	bpl.n	80092fc <__swbuf_r+0x6c>
 80092ee:	2e0a      	cmp	r6, #10
 80092f0:	d104      	bne.n	80092fc <__swbuf_r+0x6c>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4628      	mov	r0, r5
 80092f6:	f000 ffaf 	bl	800a258 <_fflush_r>
 80092fa:	b988      	cbnz	r0, 8009320 <__swbuf_r+0x90>
 80092fc:	4638      	mov	r0, r7
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <__swbuf_r+0x9c>)
 8009302:	429c      	cmp	r4, r3
 8009304:	d101      	bne.n	800930a <__swbuf_r+0x7a>
 8009306:	68ac      	ldr	r4, [r5, #8]
 8009308:	e7cf      	b.n	80092aa <__swbuf_r+0x1a>
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <__swbuf_r+0xa0>)
 800930c:	429c      	cmp	r4, r3
 800930e:	bf08      	it	eq
 8009310:	68ec      	ldreq	r4, [r5, #12]
 8009312:	e7ca      	b.n	80092aa <__swbuf_r+0x1a>
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f000 f81e 	bl	8009358 <__swsetup_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	d0cb      	beq.n	80092b8 <__swbuf_r+0x28>
 8009320:	f04f 37ff 	mov.w	r7, #4294967295
 8009324:	e7ea      	b.n	80092fc <__swbuf_r+0x6c>
 8009326:	bf00      	nop
 8009328:	0800c330 	.word	0x0800c330
 800932c:	0800c350 	.word	0x0800c350
 8009330:	0800c310 	.word	0x0800c310

08009334 <_write_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d07      	ldr	r5, [pc, #28]	; (8009354 <_write_r+0x20>)
 8009338:	4604      	mov	r4, r0
 800933a:	4608      	mov	r0, r1
 800933c:	4611      	mov	r1, r2
 800933e:	2200      	movs	r2, #0
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7f8 ff01 	bl	800214a <_write>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_write_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_write_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	200044c8 	.word	0x200044c8

08009358 <__swsetup_r>:
 8009358:	4b32      	ldr	r3, [pc, #200]	; (8009424 <__swsetup_r+0xcc>)
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	b125      	cbz	r5, 800936e <__swsetup_r+0x16>
 8009364:	69ab      	ldr	r3, [r5, #24]
 8009366:	b913      	cbnz	r3, 800936e <__swsetup_r+0x16>
 8009368:	4628      	mov	r0, r5
 800936a:	f7fe ff71 	bl	8008250 <__sinit>
 800936e:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <__swsetup_r+0xd0>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d10f      	bne.n	8009394 <__swsetup_r+0x3c>
 8009374:	686c      	ldr	r4, [r5, #4]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800937c:	0719      	lsls	r1, r3, #28
 800937e:	d42c      	bmi.n	80093da <__swsetup_r+0x82>
 8009380:	06dd      	lsls	r5, r3, #27
 8009382:	d411      	bmi.n	80093a8 <__swsetup_r+0x50>
 8009384:	2309      	movs	r3, #9
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	e03e      	b.n	8009412 <__swsetup_r+0xba>
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <__swsetup_r+0xd4>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <__swsetup_r+0x46>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7eb      	b.n	8009376 <__swsetup_r+0x1e>
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <__swsetup_r+0xd8>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7e6      	b.n	8009376 <__swsetup_r+0x1e>
 80093a8:	0758      	lsls	r0, r3, #29
 80093aa:	d512      	bpl.n	80093d2 <__swsetup_r+0x7a>
 80093ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ae:	b141      	cbz	r1, 80093c2 <__swsetup_r+0x6a>
 80093b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b4:	4299      	cmp	r1, r3
 80093b6:	d002      	beq.n	80093be <__swsetup_r+0x66>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f001 fbc5 	bl	800ab48 <_free_r>
 80093be:	2300      	movs	r3, #0
 80093c0:	6363      	str	r3, [r4, #52]	; 0x34
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	2300      	movs	r3, #0
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f043 0308 	orr.w	r3, r3, #8
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	b94b      	cbnz	r3, 80093f2 <__swsetup_r+0x9a>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e8:	d003      	beq.n	80093f2 <__swsetup_r+0x9a>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f000 ffbd 	bl	800a36c <__smakebuf_r>
 80093f2:	89a0      	ldrh	r0, [r4, #12]
 80093f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f8:	f010 0301 	ands.w	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <__swsetup_r+0xbc>
 80093fe:	2300      	movs	r3, #0
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	6963      	ldr	r3, [r4, #20]
 8009404:	425b      	negs	r3, r3
 8009406:	61a3      	str	r3, [r4, #24]
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b943      	cbnz	r3, 800941e <__swsetup_r+0xc6>
 800940c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009410:	d1ba      	bne.n	8009388 <__swsetup_r+0x30>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	0781      	lsls	r1, r0, #30
 8009416:	bf58      	it	pl
 8009418:	6963      	ldrpl	r3, [r4, #20]
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	e7f4      	b.n	8009408 <__swsetup_r+0xb0>
 800941e:	2000      	movs	r0, #0
 8009420:	e7f7      	b.n	8009412 <__swsetup_r+0xba>
 8009422:	bf00      	nop
 8009424:	20000010 	.word	0x20000010
 8009428:	0800c330 	.word	0x0800c330
 800942c:	0800c350 	.word	0x0800c350
 8009430:	0800c310 	.word	0x0800c310

08009434 <_close_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d06      	ldr	r5, [pc, #24]	; (8009450 <_close_r+0x1c>)
 8009438:	2300      	movs	r3, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7f8 fe9f 	bl	8002182 <_close>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_close_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_close_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	200044c8 	.word	0x200044c8

08009454 <quorem>:
 8009454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009458:	6903      	ldr	r3, [r0, #16]
 800945a:	690c      	ldr	r4, [r1, #16]
 800945c:	42a3      	cmp	r3, r4
 800945e:	4607      	mov	r7, r0
 8009460:	f2c0 8081 	blt.w	8009566 <quorem+0x112>
 8009464:	3c01      	subs	r4, #1
 8009466:	f101 0814 	add.w	r8, r1, #20
 800946a:	f100 0514 	add.w	r5, r0, #20
 800946e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800947c:	3301      	adds	r3, #1
 800947e:	429a      	cmp	r2, r3
 8009480:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009488:	fbb2 f6f3 	udiv	r6, r2, r3
 800948c:	d331      	bcc.n	80094f2 <quorem+0x9e>
 800948e:	f04f 0e00 	mov.w	lr, #0
 8009492:	4640      	mov	r0, r8
 8009494:	46ac      	mov	ip, r5
 8009496:	46f2      	mov	sl, lr
 8009498:	f850 2b04 	ldr.w	r2, [r0], #4
 800949c:	b293      	uxth	r3, r2
 800949e:	fb06 e303 	mla	r3, r6, r3, lr
 80094a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	ebaa 0303 	sub.w	r3, sl, r3
 80094ac:	f8dc a000 	ldr.w	sl, [ip]
 80094b0:	0c12      	lsrs	r2, r2, #16
 80094b2:	fa13 f38a 	uxtah	r3, r3, sl
 80094b6:	fb06 e202 	mla	r2, r6, r2, lr
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	9b00      	ldr	r3, [sp, #0]
 80094be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094c2:	b292      	uxth	r2, r2
 80094c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80094d0:	4581      	cmp	r9, r0
 80094d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094d6:	f84c 3b04 	str.w	r3, [ip], #4
 80094da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094de:	d2db      	bcs.n	8009498 <quorem+0x44>
 80094e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80094e4:	b92b      	cbnz	r3, 80094f2 <quorem+0x9e>
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	3b04      	subs	r3, #4
 80094ea:	429d      	cmp	r5, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	d32e      	bcc.n	800954e <quorem+0xfa>
 80094f0:	613c      	str	r4, [r7, #16]
 80094f2:	4638      	mov	r0, r7
 80094f4:	f001 fa10 	bl	800a918 <__mcmp>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	db24      	blt.n	8009546 <quorem+0xf2>
 80094fc:	3601      	adds	r6, #1
 80094fe:	4628      	mov	r0, r5
 8009500:	f04f 0c00 	mov.w	ip, #0
 8009504:	f858 2b04 	ldr.w	r2, [r8], #4
 8009508:	f8d0 e000 	ldr.w	lr, [r0]
 800950c:	b293      	uxth	r3, r2
 800950e:	ebac 0303 	sub.w	r3, ip, r3
 8009512:	0c12      	lsrs	r2, r2, #16
 8009514:	fa13 f38e 	uxtah	r3, r3, lr
 8009518:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800951c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009520:	b29b      	uxth	r3, r3
 8009522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009526:	45c1      	cmp	r9, r8
 8009528:	f840 3b04 	str.w	r3, [r0], #4
 800952c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009530:	d2e8      	bcs.n	8009504 <quorem+0xb0>
 8009532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800953a:	b922      	cbnz	r2, 8009546 <quorem+0xf2>
 800953c:	3b04      	subs	r3, #4
 800953e:	429d      	cmp	r5, r3
 8009540:	461a      	mov	r2, r3
 8009542:	d30a      	bcc.n	800955a <quorem+0x106>
 8009544:	613c      	str	r4, [r7, #16]
 8009546:	4630      	mov	r0, r6
 8009548:	b003      	add	sp, #12
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	3b04      	subs	r3, #4
 8009552:	2a00      	cmp	r2, #0
 8009554:	d1cc      	bne.n	80094f0 <quorem+0x9c>
 8009556:	3c01      	subs	r4, #1
 8009558:	e7c7      	b.n	80094ea <quorem+0x96>
 800955a:	6812      	ldr	r2, [r2, #0]
 800955c:	3b04      	subs	r3, #4
 800955e:	2a00      	cmp	r2, #0
 8009560:	d1f0      	bne.n	8009544 <quorem+0xf0>
 8009562:	3c01      	subs	r4, #1
 8009564:	e7eb      	b.n	800953e <quorem+0xea>
 8009566:	2000      	movs	r0, #0
 8009568:	e7ee      	b.n	8009548 <quorem+0xf4>
 800956a:	0000      	movs	r0, r0
 800956c:	0000      	movs	r0, r0
	...

08009570 <_dtoa_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	ed2d 8b04 	vpush	{d8-d9}
 8009578:	ec57 6b10 	vmov	r6, r7, d0
 800957c:	b093      	sub	sp, #76	; 0x4c
 800957e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009580:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009584:	9106      	str	r1, [sp, #24]
 8009586:	ee10 aa10 	vmov	sl, s0
 800958a:	4604      	mov	r4, r0
 800958c:	9209      	str	r2, [sp, #36]	; 0x24
 800958e:	930c      	str	r3, [sp, #48]	; 0x30
 8009590:	46bb      	mov	fp, r7
 8009592:	b975      	cbnz	r5, 80095b2 <_dtoa_r+0x42>
 8009594:	2010      	movs	r0, #16
 8009596:	f000 ff29 	bl	800a3ec <malloc>
 800959a:	4602      	mov	r2, r0
 800959c:	6260      	str	r0, [r4, #36]	; 0x24
 800959e:	b920      	cbnz	r0, 80095aa <_dtoa_r+0x3a>
 80095a0:	4ba7      	ldr	r3, [pc, #668]	; (8009840 <_dtoa_r+0x2d0>)
 80095a2:	21ea      	movs	r1, #234	; 0xea
 80095a4:	48a7      	ldr	r0, [pc, #668]	; (8009844 <_dtoa_r+0x2d4>)
 80095a6:	f002 fa3d 	bl	800ba24 <__assert_func>
 80095aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095ae:	6005      	str	r5, [r0, #0]
 80095b0:	60c5      	str	r5, [r0, #12]
 80095b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b4:	6819      	ldr	r1, [r3, #0]
 80095b6:	b151      	cbz	r1, 80095ce <_dtoa_r+0x5e>
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	604a      	str	r2, [r1, #4]
 80095bc:	2301      	movs	r3, #1
 80095be:	4093      	lsls	r3, r2
 80095c0:	608b      	str	r3, [r1, #8]
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 ff66 	bl	800a494 <_Bfree>
 80095c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	1e3b      	subs	r3, r7, #0
 80095d0:	bfaa      	itet	ge
 80095d2:	2300      	movge	r3, #0
 80095d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80095d8:	f8c8 3000 	strge.w	r3, [r8]
 80095dc:	4b9a      	ldr	r3, [pc, #616]	; (8009848 <_dtoa_r+0x2d8>)
 80095de:	bfbc      	itt	lt
 80095e0:	2201      	movlt	r2, #1
 80095e2:	f8c8 2000 	strlt.w	r2, [r8]
 80095e6:	ea33 030b 	bics.w	r3, r3, fp
 80095ea:	d11b      	bne.n	8009624 <_dtoa_r+0xb4>
 80095ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f8:	4333      	orrs	r3, r6
 80095fa:	f000 8592 	beq.w	800a122 <_dtoa_r+0xbb2>
 80095fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009600:	b963      	cbnz	r3, 800961c <_dtoa_r+0xac>
 8009602:	4b92      	ldr	r3, [pc, #584]	; (800984c <_dtoa_r+0x2dc>)
 8009604:	e022      	b.n	800964c <_dtoa_r+0xdc>
 8009606:	4b92      	ldr	r3, [pc, #584]	; (8009850 <_dtoa_r+0x2e0>)
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	3308      	adds	r3, #8
 800960c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	b013      	add	sp, #76	; 0x4c
 8009614:	ecbd 8b04 	vpop	{d8-d9}
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4b8b      	ldr	r3, [pc, #556]	; (800984c <_dtoa_r+0x2dc>)
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	3303      	adds	r3, #3
 8009622:	e7f3      	b.n	800960c <_dtoa_r+0x9c>
 8009624:	2200      	movs	r2, #0
 8009626:	2300      	movs	r3, #0
 8009628:	4650      	mov	r0, sl
 800962a:	4659      	mov	r1, fp
 800962c:	f7f7 fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 8009630:	ec4b ab19 	vmov	d9, sl, fp
 8009634:	4680      	mov	r8, r0
 8009636:	b158      	cbz	r0, 8009650 <_dtoa_r+0xe0>
 8009638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800963a:	2301      	movs	r3, #1
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 856b 	beq.w	800a11c <_dtoa_r+0xbac>
 8009646:	4883      	ldr	r0, [pc, #524]	; (8009854 <_dtoa_r+0x2e4>)
 8009648:	6018      	str	r0, [r3, #0]
 800964a:	1e43      	subs	r3, r0, #1
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	e7df      	b.n	8009610 <_dtoa_r+0xa0>
 8009650:	ec4b ab10 	vmov	d0, sl, fp
 8009654:	aa10      	add	r2, sp, #64	; 0x40
 8009656:	a911      	add	r1, sp, #68	; 0x44
 8009658:	4620      	mov	r0, r4
 800965a:	f001 fa03 	bl	800aa64 <__d2b>
 800965e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009662:	ee08 0a10 	vmov	s16, r0
 8009666:	2d00      	cmp	r5, #0
 8009668:	f000 8084 	beq.w	8009774 <_dtoa_r+0x204>
 800966c:	ee19 3a90 	vmov	r3, s19
 8009670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009674:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009678:	4656      	mov	r6, sl
 800967a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800967e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009682:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009686:	4b74      	ldr	r3, [pc, #464]	; (8009858 <_dtoa_r+0x2e8>)
 8009688:	2200      	movs	r2, #0
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fe1b 	bl	80002c8 <__aeabi_dsub>
 8009692:	a365      	add	r3, pc, #404	; (adr r3, 8009828 <_dtoa_r+0x2b8>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 ffce 	bl	8000638 <__aeabi_dmul>
 800969c:	a364      	add	r3, pc, #400	; (adr r3, 8009830 <_dtoa_r+0x2c0>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f6 fe13 	bl	80002cc <__adddf3>
 80096a6:	4606      	mov	r6, r0
 80096a8:	4628      	mov	r0, r5
 80096aa:	460f      	mov	r7, r1
 80096ac:	f7f6 ff5a 	bl	8000564 <__aeabi_i2d>
 80096b0:	a361      	add	r3, pc, #388	; (adr r3, 8009838 <_dtoa_r+0x2c8>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 ffbf 	bl	8000638 <__aeabi_dmul>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4630      	mov	r0, r6
 80096c0:	4639      	mov	r1, r7
 80096c2:	f7f6 fe03 	bl	80002cc <__adddf3>
 80096c6:	4606      	mov	r6, r0
 80096c8:	460f      	mov	r7, r1
 80096ca:	f7f7 fa65 	bl	8000b98 <__aeabi_d2iz>
 80096ce:	2200      	movs	r2, #0
 80096d0:	9000      	str	r0, [sp, #0]
 80096d2:	2300      	movs	r3, #0
 80096d4:	4630      	mov	r0, r6
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f7 fa20 	bl	8000b1c <__aeabi_dcmplt>
 80096dc:	b150      	cbz	r0, 80096f4 <_dtoa_r+0x184>
 80096de:	9800      	ldr	r0, [sp, #0]
 80096e0:	f7f6 ff40 	bl	8000564 <__aeabi_i2d>
 80096e4:	4632      	mov	r2, r6
 80096e6:	463b      	mov	r3, r7
 80096e8:	f7f7 fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80096ec:	b910      	cbnz	r0, 80096f4 <_dtoa_r+0x184>
 80096ee:	9b00      	ldr	r3, [sp, #0]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	2b16      	cmp	r3, #22
 80096f8:	d85a      	bhi.n	80097b0 <_dtoa_r+0x240>
 80096fa:	9a00      	ldr	r2, [sp, #0]
 80096fc:	4b57      	ldr	r3, [pc, #348]	; (800985c <_dtoa_r+0x2ec>)
 80096fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	ec51 0b19 	vmov	r0, r1, d9
 800970a:	f7f7 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800970e:	2800      	cmp	r0, #0
 8009710:	d050      	beq.n	80097b4 <_dtoa_r+0x244>
 8009712:	9b00      	ldr	r3, [sp, #0]
 8009714:	3b01      	subs	r3, #1
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	2300      	movs	r3, #0
 800971a:	930b      	str	r3, [sp, #44]	; 0x2c
 800971c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800971e:	1b5d      	subs	r5, r3, r5
 8009720:	1e6b      	subs	r3, r5, #1
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	bf45      	ittet	mi
 8009726:	f1c5 0301 	rsbmi	r3, r5, #1
 800972a:	9304      	strmi	r3, [sp, #16]
 800972c:	2300      	movpl	r3, #0
 800972e:	2300      	movmi	r3, #0
 8009730:	bf4c      	ite	mi
 8009732:	9305      	strmi	r3, [sp, #20]
 8009734:	9304      	strpl	r3, [sp, #16]
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	db3d      	blt.n	80097b8 <_dtoa_r+0x248>
 800973c:	9b05      	ldr	r3, [sp, #20]
 800973e:	9a00      	ldr	r2, [sp, #0]
 8009740:	920a      	str	r2, [sp, #40]	; 0x28
 8009742:	4413      	add	r3, r2
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	2300      	movs	r3, #0
 8009748:	9307      	str	r3, [sp, #28]
 800974a:	9b06      	ldr	r3, [sp, #24]
 800974c:	2b09      	cmp	r3, #9
 800974e:	f200 8089 	bhi.w	8009864 <_dtoa_r+0x2f4>
 8009752:	2b05      	cmp	r3, #5
 8009754:	bfc4      	itt	gt
 8009756:	3b04      	subgt	r3, #4
 8009758:	9306      	strgt	r3, [sp, #24]
 800975a:	9b06      	ldr	r3, [sp, #24]
 800975c:	f1a3 0302 	sub.w	r3, r3, #2
 8009760:	bfcc      	ite	gt
 8009762:	2500      	movgt	r5, #0
 8009764:	2501      	movle	r5, #1
 8009766:	2b03      	cmp	r3, #3
 8009768:	f200 8087 	bhi.w	800987a <_dtoa_r+0x30a>
 800976c:	e8df f003 	tbb	[pc, r3]
 8009770:	59383a2d 	.word	0x59383a2d
 8009774:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009778:	441d      	add	r5, r3
 800977a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800977e:	2b20      	cmp	r3, #32
 8009780:	bfc1      	itttt	gt
 8009782:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009786:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800978a:	fa0b f303 	lslgt.w	r3, fp, r3
 800978e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009792:	bfda      	itte	le
 8009794:	f1c3 0320 	rsble	r3, r3, #32
 8009798:	fa06 f003 	lslle.w	r0, r6, r3
 800979c:	4318      	orrgt	r0, r3
 800979e:	f7f6 fed1 	bl	8000544 <__aeabi_ui2d>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4606      	mov	r6, r0
 80097a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097aa:	3d01      	subs	r5, #1
 80097ac:	930e      	str	r3, [sp, #56]	; 0x38
 80097ae:	e76a      	b.n	8009686 <_dtoa_r+0x116>
 80097b0:	2301      	movs	r3, #1
 80097b2:	e7b2      	b.n	800971a <_dtoa_r+0x1aa>
 80097b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80097b6:	e7b1      	b.n	800971c <_dtoa_r+0x1ac>
 80097b8:	9b04      	ldr	r3, [sp, #16]
 80097ba:	9a00      	ldr	r2, [sp, #0]
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	4253      	negs	r3, r2
 80097c2:	9307      	str	r3, [sp, #28]
 80097c4:	2300      	movs	r3, #0
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	e7bf      	b.n	800974a <_dtoa_r+0x1da>
 80097ca:	2300      	movs	r3, #0
 80097cc:	9308      	str	r3, [sp, #32]
 80097ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dc55      	bgt.n	8009880 <_dtoa_r+0x310>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097da:	461a      	mov	r2, r3
 80097dc:	9209      	str	r2, [sp, #36]	; 0x24
 80097de:	e00c      	b.n	80097fa <_dtoa_r+0x28a>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e7f3      	b.n	80097cc <_dtoa_r+0x25c>
 80097e4:	2300      	movs	r3, #0
 80097e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	9b00      	ldr	r3, [sp, #0]
 80097ec:	4413      	add	r3, r2
 80097ee:	9302      	str	r3, [sp, #8]
 80097f0:	3301      	adds	r3, #1
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	9303      	str	r3, [sp, #12]
 80097f6:	bfb8      	it	lt
 80097f8:	2301      	movlt	r3, #1
 80097fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097fc:	2200      	movs	r2, #0
 80097fe:	6042      	str	r2, [r0, #4]
 8009800:	2204      	movs	r2, #4
 8009802:	f102 0614 	add.w	r6, r2, #20
 8009806:	429e      	cmp	r6, r3
 8009808:	6841      	ldr	r1, [r0, #4]
 800980a:	d93d      	bls.n	8009888 <_dtoa_r+0x318>
 800980c:	4620      	mov	r0, r4
 800980e:	f000 fe01 	bl	800a414 <_Balloc>
 8009812:	9001      	str	r0, [sp, #4]
 8009814:	2800      	cmp	r0, #0
 8009816:	d13b      	bne.n	8009890 <_dtoa_r+0x320>
 8009818:	4b11      	ldr	r3, [pc, #68]	; (8009860 <_dtoa_r+0x2f0>)
 800981a:	4602      	mov	r2, r0
 800981c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009820:	e6c0      	b.n	80095a4 <_dtoa_r+0x34>
 8009822:	2301      	movs	r3, #1
 8009824:	e7df      	b.n	80097e6 <_dtoa_r+0x276>
 8009826:	bf00      	nop
 8009828:	636f4361 	.word	0x636f4361
 800982c:	3fd287a7 	.word	0x3fd287a7
 8009830:	8b60c8b3 	.word	0x8b60c8b3
 8009834:	3fc68a28 	.word	0x3fc68a28
 8009838:	509f79fb 	.word	0x509f79fb
 800983c:	3fd34413 	.word	0x3fd34413
 8009840:	0800c3b3 	.word	0x0800c3b3
 8009844:	0800c3ca 	.word	0x0800c3ca
 8009848:	7ff00000 	.word	0x7ff00000
 800984c:	0800c3af 	.word	0x0800c3af
 8009850:	0800c3a6 	.word	0x0800c3a6
 8009854:	0800c5aa 	.word	0x0800c5aa
 8009858:	3ff80000 	.word	0x3ff80000
 800985c:	0800c4c0 	.word	0x0800c4c0
 8009860:	0800c425 	.word	0x0800c425
 8009864:	2501      	movs	r5, #1
 8009866:	2300      	movs	r3, #0
 8009868:	9306      	str	r3, [sp, #24]
 800986a:	9508      	str	r5, [sp, #32]
 800986c:	f04f 33ff 	mov.w	r3, #4294967295
 8009870:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009874:	2200      	movs	r2, #0
 8009876:	2312      	movs	r3, #18
 8009878:	e7b0      	b.n	80097dc <_dtoa_r+0x26c>
 800987a:	2301      	movs	r3, #1
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	e7f5      	b.n	800986c <_dtoa_r+0x2fc>
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009886:	e7b8      	b.n	80097fa <_dtoa_r+0x28a>
 8009888:	3101      	adds	r1, #1
 800988a:	6041      	str	r1, [r0, #4]
 800988c:	0052      	lsls	r2, r2, #1
 800988e:	e7b8      	b.n	8009802 <_dtoa_r+0x292>
 8009890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009892:	9a01      	ldr	r2, [sp, #4]
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	2b0e      	cmp	r3, #14
 800989a:	f200 809d 	bhi.w	80099d8 <_dtoa_r+0x468>
 800989e:	2d00      	cmp	r5, #0
 80098a0:	f000 809a 	beq.w	80099d8 <_dtoa_r+0x468>
 80098a4:	9b00      	ldr	r3, [sp, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dd32      	ble.n	8009910 <_dtoa_r+0x3a0>
 80098aa:	4ab7      	ldr	r2, [pc, #732]	; (8009b88 <_dtoa_r+0x618>)
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098b8:	9b00      	ldr	r3, [sp, #0]
 80098ba:	05d8      	lsls	r0, r3, #23
 80098bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80098c0:	d516      	bpl.n	80098f0 <_dtoa_r+0x380>
 80098c2:	4bb2      	ldr	r3, [pc, #712]	; (8009b8c <_dtoa_r+0x61c>)
 80098c4:	ec51 0b19 	vmov	r0, r1, d9
 80098c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098cc:	f7f6 ffde 	bl	800088c <__aeabi_ddiv>
 80098d0:	f007 070f 	and.w	r7, r7, #15
 80098d4:	4682      	mov	sl, r0
 80098d6:	468b      	mov	fp, r1
 80098d8:	2503      	movs	r5, #3
 80098da:	4eac      	ldr	r6, [pc, #688]	; (8009b8c <_dtoa_r+0x61c>)
 80098dc:	b957      	cbnz	r7, 80098f4 <_dtoa_r+0x384>
 80098de:	4642      	mov	r2, r8
 80098e0:	464b      	mov	r3, r9
 80098e2:	4650      	mov	r0, sl
 80098e4:	4659      	mov	r1, fp
 80098e6:	f7f6 ffd1 	bl	800088c <__aeabi_ddiv>
 80098ea:	4682      	mov	sl, r0
 80098ec:	468b      	mov	fp, r1
 80098ee:	e028      	b.n	8009942 <_dtoa_r+0x3d2>
 80098f0:	2502      	movs	r5, #2
 80098f2:	e7f2      	b.n	80098da <_dtoa_r+0x36a>
 80098f4:	07f9      	lsls	r1, r7, #31
 80098f6:	d508      	bpl.n	800990a <_dtoa_r+0x39a>
 80098f8:	4640      	mov	r0, r8
 80098fa:	4649      	mov	r1, r9
 80098fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009900:	f7f6 fe9a 	bl	8000638 <__aeabi_dmul>
 8009904:	3501      	adds	r5, #1
 8009906:	4680      	mov	r8, r0
 8009908:	4689      	mov	r9, r1
 800990a:	107f      	asrs	r7, r7, #1
 800990c:	3608      	adds	r6, #8
 800990e:	e7e5      	b.n	80098dc <_dtoa_r+0x36c>
 8009910:	f000 809b 	beq.w	8009a4a <_dtoa_r+0x4da>
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	4f9d      	ldr	r7, [pc, #628]	; (8009b8c <_dtoa_r+0x61c>)
 8009918:	425e      	negs	r6, r3
 800991a:	4b9b      	ldr	r3, [pc, #620]	; (8009b88 <_dtoa_r+0x618>)
 800991c:	f006 020f 	and.w	r2, r6, #15
 8009920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	ec51 0b19 	vmov	r0, r1, d9
 800992c:	f7f6 fe84 	bl	8000638 <__aeabi_dmul>
 8009930:	1136      	asrs	r6, r6, #4
 8009932:	4682      	mov	sl, r0
 8009934:	468b      	mov	fp, r1
 8009936:	2300      	movs	r3, #0
 8009938:	2502      	movs	r5, #2
 800993a:	2e00      	cmp	r6, #0
 800993c:	d17a      	bne.n	8009a34 <_dtoa_r+0x4c4>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1d3      	bne.n	80098ea <_dtoa_r+0x37a>
 8009942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8082 	beq.w	8009a4e <_dtoa_r+0x4de>
 800994a:	4b91      	ldr	r3, [pc, #580]	; (8009b90 <_dtoa_r+0x620>)
 800994c:	2200      	movs	r2, #0
 800994e:	4650      	mov	r0, sl
 8009950:	4659      	mov	r1, fp
 8009952:	f7f7 f8e3 	bl	8000b1c <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	d079      	beq.n	8009a4e <_dtoa_r+0x4de>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d076      	beq.n	8009a4e <_dtoa_r+0x4de>
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd36      	ble.n	80099d4 <_dtoa_r+0x464>
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	4650      	mov	r0, sl
 800996a:	4659      	mov	r1, fp
 800996c:	1e5f      	subs	r7, r3, #1
 800996e:	2200      	movs	r2, #0
 8009970:	4b88      	ldr	r3, [pc, #544]	; (8009b94 <_dtoa_r+0x624>)
 8009972:	f7f6 fe61 	bl	8000638 <__aeabi_dmul>
 8009976:	9e02      	ldr	r6, [sp, #8]
 8009978:	4682      	mov	sl, r0
 800997a:	468b      	mov	fp, r1
 800997c:	3501      	adds	r5, #1
 800997e:	4628      	mov	r0, r5
 8009980:	f7f6 fdf0 	bl	8000564 <__aeabi_i2d>
 8009984:	4652      	mov	r2, sl
 8009986:	465b      	mov	r3, fp
 8009988:	f7f6 fe56 	bl	8000638 <__aeabi_dmul>
 800998c:	4b82      	ldr	r3, [pc, #520]	; (8009b98 <_dtoa_r+0x628>)
 800998e:	2200      	movs	r2, #0
 8009990:	f7f6 fc9c 	bl	80002cc <__adddf3>
 8009994:	46d0      	mov	r8, sl
 8009996:	46d9      	mov	r9, fp
 8009998:	4682      	mov	sl, r0
 800999a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800999e:	2e00      	cmp	r6, #0
 80099a0:	d158      	bne.n	8009a54 <_dtoa_r+0x4e4>
 80099a2:	4b7e      	ldr	r3, [pc, #504]	; (8009b9c <_dtoa_r+0x62c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	4640      	mov	r0, r8
 80099a8:	4649      	mov	r1, r9
 80099aa:	f7f6 fc8d 	bl	80002c8 <__aeabi_dsub>
 80099ae:	4652      	mov	r2, sl
 80099b0:	465b      	mov	r3, fp
 80099b2:	4680      	mov	r8, r0
 80099b4:	4689      	mov	r9, r1
 80099b6:	f7f7 f8cf 	bl	8000b58 <__aeabi_dcmpgt>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f040 8295 	bne.w	8009eea <_dtoa_r+0x97a>
 80099c0:	4652      	mov	r2, sl
 80099c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099c6:	4640      	mov	r0, r8
 80099c8:	4649      	mov	r1, r9
 80099ca:	f7f7 f8a7 	bl	8000b1c <__aeabi_dcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f040 8289 	bne.w	8009ee6 <_dtoa_r+0x976>
 80099d4:	ec5b ab19 	vmov	sl, fp, d9
 80099d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f2c0 8148 	blt.w	8009c70 <_dtoa_r+0x700>
 80099e0:	9a00      	ldr	r2, [sp, #0]
 80099e2:	2a0e      	cmp	r2, #14
 80099e4:	f300 8144 	bgt.w	8009c70 <_dtoa_r+0x700>
 80099e8:	4b67      	ldr	r3, [pc, #412]	; (8009b88 <_dtoa_r+0x618>)
 80099ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f280 80d5 	bge.w	8009ba4 <_dtoa_r+0x634>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f300 80d1 	bgt.w	8009ba4 <_dtoa_r+0x634>
 8009a02:	f040 826f 	bne.w	8009ee4 <_dtoa_r+0x974>
 8009a06:	4b65      	ldr	r3, [pc, #404]	; (8009b9c <_dtoa_r+0x62c>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fe13 	bl	8000638 <__aeabi_dmul>
 8009a12:	4652      	mov	r2, sl
 8009a14:	465b      	mov	r3, fp
 8009a16:	f7f7 f895 	bl	8000b44 <__aeabi_dcmpge>
 8009a1a:	9e03      	ldr	r6, [sp, #12]
 8009a1c:	4637      	mov	r7, r6
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f040 8245 	bne.w	8009eae <_dtoa_r+0x93e>
 8009a24:	9d01      	ldr	r5, [sp, #4]
 8009a26:	2331      	movs	r3, #49	; 0x31
 8009a28:	f805 3b01 	strb.w	r3, [r5], #1
 8009a2c:	9b00      	ldr	r3, [sp, #0]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	e240      	b.n	8009eb6 <_dtoa_r+0x946>
 8009a34:	07f2      	lsls	r2, r6, #31
 8009a36:	d505      	bpl.n	8009a44 <_dtoa_r+0x4d4>
 8009a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	3501      	adds	r5, #1
 8009a42:	2301      	movs	r3, #1
 8009a44:	1076      	asrs	r6, r6, #1
 8009a46:	3708      	adds	r7, #8
 8009a48:	e777      	b.n	800993a <_dtoa_r+0x3ca>
 8009a4a:	2502      	movs	r5, #2
 8009a4c:	e779      	b.n	8009942 <_dtoa_r+0x3d2>
 8009a4e:	9f00      	ldr	r7, [sp, #0]
 8009a50:	9e03      	ldr	r6, [sp, #12]
 8009a52:	e794      	b.n	800997e <_dtoa_r+0x40e>
 8009a54:	9901      	ldr	r1, [sp, #4]
 8009a56:	4b4c      	ldr	r3, [pc, #304]	; (8009b88 <_dtoa_r+0x618>)
 8009a58:	4431      	add	r1, r6
 8009a5a:	910d      	str	r1, [sp, #52]	; 0x34
 8009a5c:	9908      	ldr	r1, [sp, #32]
 8009a5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d043      	beq.n	8009af2 <_dtoa_r+0x582>
 8009a6a:	494d      	ldr	r1, [pc, #308]	; (8009ba0 <_dtoa_r+0x630>)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f6 ff0d 	bl	800088c <__aeabi_ddiv>
 8009a72:	4652      	mov	r2, sl
 8009a74:	465b      	mov	r3, fp
 8009a76:	f7f6 fc27 	bl	80002c8 <__aeabi_dsub>
 8009a7a:	9d01      	ldr	r5, [sp, #4]
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	468b      	mov	fp, r1
 8009a80:	4649      	mov	r1, r9
 8009a82:	4640      	mov	r0, r8
 8009a84:	f7f7 f888 	bl	8000b98 <__aeabi_d2iz>
 8009a88:	4606      	mov	r6, r0
 8009a8a:	f7f6 fd6b 	bl	8000564 <__aeabi_i2d>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4640      	mov	r0, r8
 8009a94:	4649      	mov	r1, r9
 8009a96:	f7f6 fc17 	bl	80002c8 <__aeabi_dsub>
 8009a9a:	3630      	adds	r6, #48	; 0x30
 8009a9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	4680      	mov	r8, r0
 8009aa6:	4689      	mov	r9, r1
 8009aa8:	f7f7 f838 	bl	8000b1c <__aeabi_dcmplt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d163      	bne.n	8009b78 <_dtoa_r+0x608>
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	4936      	ldr	r1, [pc, #216]	; (8009b90 <_dtoa_r+0x620>)
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f7f6 fc06 	bl	80002c8 <__aeabi_dsub>
 8009abc:	4652      	mov	r2, sl
 8009abe:	465b      	mov	r3, fp
 8009ac0:	f7f7 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	f040 80b5 	bne.w	8009c34 <_dtoa_r+0x6c4>
 8009aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009acc:	429d      	cmp	r5, r3
 8009ace:	d081      	beq.n	80099d4 <_dtoa_r+0x464>
 8009ad0:	4b30      	ldr	r3, [pc, #192]	; (8009b94 <_dtoa_r+0x624>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4650      	mov	r0, sl
 8009ad6:	4659      	mov	r1, fp
 8009ad8:	f7f6 fdae 	bl	8000638 <__aeabi_dmul>
 8009adc:	4b2d      	ldr	r3, [pc, #180]	; (8009b94 <_dtoa_r+0x624>)
 8009ade:	4682      	mov	sl, r0
 8009ae0:	468b      	mov	fp, r1
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f7f6 fda6 	bl	8000638 <__aeabi_dmul>
 8009aec:	4680      	mov	r8, r0
 8009aee:	4689      	mov	r9, r1
 8009af0:	e7c6      	b.n	8009a80 <_dtoa_r+0x510>
 8009af2:	4650      	mov	r0, sl
 8009af4:	4659      	mov	r1, fp
 8009af6:	f7f6 fd9f 	bl	8000638 <__aeabi_dmul>
 8009afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009afc:	9d01      	ldr	r5, [sp, #4]
 8009afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b00:	4682      	mov	sl, r0
 8009b02:	468b      	mov	fp, r1
 8009b04:	4649      	mov	r1, r9
 8009b06:	4640      	mov	r0, r8
 8009b08:	f7f7 f846 	bl	8000b98 <__aeabi_d2iz>
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	f7f6 fd29 	bl	8000564 <__aeabi_i2d>
 8009b12:	3630      	adds	r6, #48	; 0x30
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4640      	mov	r0, r8
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	f7f6 fbd4 	bl	80002c8 <__aeabi_dsub>
 8009b20:	f805 6b01 	strb.w	r6, [r5], #1
 8009b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b26:	429d      	cmp	r5, r3
 8009b28:	4680      	mov	r8, r0
 8009b2a:	4689      	mov	r9, r1
 8009b2c:	f04f 0200 	mov.w	r2, #0
 8009b30:	d124      	bne.n	8009b7c <_dtoa_r+0x60c>
 8009b32:	4b1b      	ldr	r3, [pc, #108]	; (8009ba0 <_dtoa_r+0x630>)
 8009b34:	4650      	mov	r0, sl
 8009b36:	4659      	mov	r1, fp
 8009b38:	f7f6 fbc8 	bl	80002cc <__adddf3>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4640      	mov	r0, r8
 8009b42:	4649      	mov	r1, r9
 8009b44:	f7f7 f808 	bl	8000b58 <__aeabi_dcmpgt>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d173      	bne.n	8009c34 <_dtoa_r+0x6c4>
 8009b4c:	4652      	mov	r2, sl
 8009b4e:	465b      	mov	r3, fp
 8009b50:	4913      	ldr	r1, [pc, #76]	; (8009ba0 <_dtoa_r+0x630>)
 8009b52:	2000      	movs	r0, #0
 8009b54:	f7f6 fbb8 	bl	80002c8 <__aeabi_dsub>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 ffdc 	bl	8000b1c <__aeabi_dcmplt>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f43f af35 	beq.w	80099d4 <_dtoa_r+0x464>
 8009b6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b6c:	1e6b      	subs	r3, r5, #1
 8009b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b74:	2b30      	cmp	r3, #48	; 0x30
 8009b76:	d0f8      	beq.n	8009b6a <_dtoa_r+0x5fa>
 8009b78:	9700      	str	r7, [sp, #0]
 8009b7a:	e049      	b.n	8009c10 <_dtoa_r+0x6a0>
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <_dtoa_r+0x624>)
 8009b7e:	f7f6 fd5b 	bl	8000638 <__aeabi_dmul>
 8009b82:	4680      	mov	r8, r0
 8009b84:	4689      	mov	r9, r1
 8009b86:	e7bd      	b.n	8009b04 <_dtoa_r+0x594>
 8009b88:	0800c4c0 	.word	0x0800c4c0
 8009b8c:	0800c498 	.word	0x0800c498
 8009b90:	3ff00000 	.word	0x3ff00000
 8009b94:	40240000 	.word	0x40240000
 8009b98:	401c0000 	.word	0x401c0000
 8009b9c:	40140000 	.word	0x40140000
 8009ba0:	3fe00000 	.word	0x3fe00000
 8009ba4:	9d01      	ldr	r5, [sp, #4]
 8009ba6:	4656      	mov	r6, sl
 8009ba8:	465f      	mov	r7, fp
 8009baa:	4642      	mov	r2, r8
 8009bac:	464b      	mov	r3, r9
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fe6b 	bl	800088c <__aeabi_ddiv>
 8009bb6:	f7f6 ffef 	bl	8000b98 <__aeabi_d2iz>
 8009bba:	4682      	mov	sl, r0
 8009bbc:	f7f6 fcd2 	bl	8000564 <__aeabi_i2d>
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	f7f6 fd38 	bl	8000638 <__aeabi_dmul>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4639      	mov	r1, r7
 8009bd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009bd4:	f7f6 fb78 	bl	80002c8 <__aeabi_dsub>
 8009bd8:	f805 6b01 	strb.w	r6, [r5], #1
 8009bdc:	9e01      	ldr	r6, [sp, #4]
 8009bde:	9f03      	ldr	r7, [sp, #12]
 8009be0:	1bae      	subs	r6, r5, r6
 8009be2:	42b7      	cmp	r7, r6
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	d135      	bne.n	8009c56 <_dtoa_r+0x6e6>
 8009bea:	f7f6 fb6f 	bl	80002cc <__adddf3>
 8009bee:	4642      	mov	r2, r8
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	f7f6 ffaf 	bl	8000b58 <__aeabi_dcmpgt>
 8009bfa:	b9d0      	cbnz	r0, 8009c32 <_dtoa_r+0x6c2>
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	464b      	mov	r3, r9
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 ff80 	bl	8000b08 <__aeabi_dcmpeq>
 8009c08:	b110      	cbz	r0, 8009c10 <_dtoa_r+0x6a0>
 8009c0a:	f01a 0f01 	tst.w	sl, #1
 8009c0e:	d110      	bne.n	8009c32 <_dtoa_r+0x6c2>
 8009c10:	4620      	mov	r0, r4
 8009c12:	ee18 1a10 	vmov	r1, s16
 8009c16:	f000 fc3d 	bl	800a494 <_Bfree>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9800      	ldr	r0, [sp, #0]
 8009c1e:	702b      	strb	r3, [r5, #0]
 8009c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c22:	3001      	adds	r0, #1
 8009c24:	6018      	str	r0, [r3, #0]
 8009c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f43f acf1 	beq.w	8009610 <_dtoa_r+0xa0>
 8009c2e:	601d      	str	r5, [r3, #0]
 8009c30:	e4ee      	b.n	8009610 <_dtoa_r+0xa0>
 8009c32:	9f00      	ldr	r7, [sp, #0]
 8009c34:	462b      	mov	r3, r5
 8009c36:	461d      	mov	r5, r3
 8009c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c3c:	2a39      	cmp	r2, #57	; 0x39
 8009c3e:	d106      	bne.n	8009c4e <_dtoa_r+0x6de>
 8009c40:	9a01      	ldr	r2, [sp, #4]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d1f7      	bne.n	8009c36 <_dtoa_r+0x6c6>
 8009c46:	9901      	ldr	r1, [sp, #4]
 8009c48:	2230      	movs	r2, #48	; 0x30
 8009c4a:	3701      	adds	r7, #1
 8009c4c:	700a      	strb	r2, [r1, #0]
 8009c4e:	781a      	ldrb	r2, [r3, #0]
 8009c50:	3201      	adds	r2, #1
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	e790      	b.n	8009b78 <_dtoa_r+0x608>
 8009c56:	4ba6      	ldr	r3, [pc, #664]	; (8009ef0 <_dtoa_r+0x980>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fced 	bl	8000638 <__aeabi_dmul>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2300      	movs	r3, #0
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	f7f6 ff4f 	bl	8000b08 <__aeabi_dcmpeq>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d09d      	beq.n	8009baa <_dtoa_r+0x63a>
 8009c6e:	e7cf      	b.n	8009c10 <_dtoa_r+0x6a0>
 8009c70:	9a08      	ldr	r2, [sp, #32]
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	f000 80d7 	beq.w	8009e26 <_dtoa_r+0x8b6>
 8009c78:	9a06      	ldr	r2, [sp, #24]
 8009c7a:	2a01      	cmp	r2, #1
 8009c7c:	f300 80ba 	bgt.w	8009df4 <_dtoa_r+0x884>
 8009c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	f000 80b2 	beq.w	8009dec <_dtoa_r+0x87c>
 8009c88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c8c:	9e07      	ldr	r6, [sp, #28]
 8009c8e:	9d04      	ldr	r5, [sp, #16]
 8009c90:	9a04      	ldr	r2, [sp, #16]
 8009c92:	441a      	add	r2, r3
 8009c94:	9204      	str	r2, [sp, #16]
 8009c96:	9a05      	ldr	r2, [sp, #20]
 8009c98:	2101      	movs	r1, #1
 8009c9a:	441a      	add	r2, r3
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	9205      	str	r2, [sp, #20]
 8009ca0:	f000 fcb0 	bl	800a604 <__i2b>
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	2d00      	cmp	r5, #0
 8009ca8:	dd0c      	ble.n	8009cc4 <_dtoa_r+0x754>
 8009caa:	9b05      	ldr	r3, [sp, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd09      	ble.n	8009cc4 <_dtoa_r+0x754>
 8009cb0:	42ab      	cmp	r3, r5
 8009cb2:	9a04      	ldr	r2, [sp, #16]
 8009cb4:	bfa8      	it	ge
 8009cb6:	462b      	movge	r3, r5
 8009cb8:	1ad2      	subs	r2, r2, r3
 8009cba:	9204      	str	r2, [sp, #16]
 8009cbc:	9a05      	ldr	r2, [sp, #20]
 8009cbe:	1aed      	subs	r5, r5, r3
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	9b07      	ldr	r3, [sp, #28]
 8009cc6:	b31b      	cbz	r3, 8009d10 <_dtoa_r+0x7a0>
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 80af 	beq.w	8009e2e <_dtoa_r+0x8be>
 8009cd0:	2e00      	cmp	r6, #0
 8009cd2:	dd13      	ble.n	8009cfc <_dtoa_r+0x78c>
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fd53 	bl	800a784 <__pow5mult>
 8009cde:	ee18 2a10 	vmov	r2, s16
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 fca2 	bl	800a630 <__multiply>
 8009cec:	ee18 1a10 	vmov	r1, s16
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 fbce 	bl	800a494 <_Bfree>
 8009cf8:	ee08 8a10 	vmov	s16, r8
 8009cfc:	9b07      	ldr	r3, [sp, #28]
 8009cfe:	1b9a      	subs	r2, r3, r6
 8009d00:	d006      	beq.n	8009d10 <_dtoa_r+0x7a0>
 8009d02:	ee18 1a10 	vmov	r1, s16
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 fd3c 	bl	800a784 <__pow5mult>
 8009d0c:	ee08 0a10 	vmov	s16, r0
 8009d10:	2101      	movs	r1, #1
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fc76 	bl	800a604 <__i2b>
 8009d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	f340 8088 	ble.w	8009e32 <_dtoa_r+0x8c2>
 8009d22:	461a      	mov	r2, r3
 8009d24:	4601      	mov	r1, r0
 8009d26:	4620      	mov	r0, r4
 8009d28:	f000 fd2c 	bl	800a784 <__pow5mult>
 8009d2c:	9b06      	ldr	r3, [sp, #24]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	4606      	mov	r6, r0
 8009d32:	f340 8081 	ble.w	8009e38 <_dtoa_r+0x8c8>
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	6933      	ldr	r3, [r6, #16]
 8009d3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d40:	6918      	ldr	r0, [r3, #16]
 8009d42:	f000 fc0f 	bl	800a564 <__hi0bits>
 8009d46:	f1c0 0020 	rsb	r0, r0, #32
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	4418      	add	r0, r3
 8009d4e:	f010 001f 	ands.w	r0, r0, #31
 8009d52:	f000 8092 	beq.w	8009e7a <_dtoa_r+0x90a>
 8009d56:	f1c0 0320 	rsb	r3, r0, #32
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	f340 808a 	ble.w	8009e74 <_dtoa_r+0x904>
 8009d60:	f1c0 001c 	rsb	r0, r0, #28
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	4403      	add	r3, r0
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	9b05      	ldr	r3, [sp, #20]
 8009d6c:	4403      	add	r3, r0
 8009d6e:	4405      	add	r5, r0
 8009d70:	9305      	str	r3, [sp, #20]
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dd07      	ble.n	8009d88 <_dtoa_r+0x818>
 8009d78:	ee18 1a10 	vmov	r1, s16
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 fd5a 	bl	800a838 <__lshift>
 8009d84:	ee08 0a10 	vmov	s16, r0
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd05      	ble.n	8009d9a <_dtoa_r+0x82a>
 8009d8e:	4631      	mov	r1, r6
 8009d90:	461a      	mov	r2, r3
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 fd50 	bl	800a838 <__lshift>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d06e      	beq.n	8009e7e <_dtoa_r+0x90e>
 8009da0:	ee18 0a10 	vmov	r0, s16
 8009da4:	4631      	mov	r1, r6
 8009da6:	f000 fdb7 	bl	800a918 <__mcmp>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	da67      	bge.n	8009e7e <_dtoa_r+0x90e>
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	ee18 1a10 	vmov	r1, s16
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	220a      	movs	r2, #10
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f000 fb8b 	bl	800a4d8 <__multadd>
 8009dc2:	9b08      	ldr	r3, [sp, #32]
 8009dc4:	ee08 0a10 	vmov	s16, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 81b1 	beq.w	800a130 <_dtoa_r+0xbc0>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	220a      	movs	r2, #10
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fb7f 	bl	800a4d8 <__multadd>
 8009dda:	9b02      	ldr	r3, [sp, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	4607      	mov	r7, r0
 8009de0:	f300 808e 	bgt.w	8009f00 <_dtoa_r+0x990>
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	dc51      	bgt.n	8009e8e <_dtoa_r+0x91e>
 8009dea:	e089      	b.n	8009f00 <_dtoa_r+0x990>
 8009dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009df2:	e74b      	b.n	8009c8c <_dtoa_r+0x71c>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	1e5e      	subs	r6, r3, #1
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	42b3      	cmp	r3, r6
 8009dfc:	bfbf      	itttt	lt
 8009dfe:	9b07      	ldrlt	r3, [sp, #28]
 8009e00:	9607      	strlt	r6, [sp, #28]
 8009e02:	1af2      	sublt	r2, r6, r3
 8009e04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e06:	bfb6      	itet	lt
 8009e08:	189b      	addlt	r3, r3, r2
 8009e0a:	1b9e      	subge	r6, r3, r6
 8009e0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e0e:	9b03      	ldr	r3, [sp, #12]
 8009e10:	bfb8      	it	lt
 8009e12:	2600      	movlt	r6, #0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	bfb7      	itett	lt
 8009e18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e20:	1a9d      	sublt	r5, r3, r2
 8009e22:	2300      	movlt	r3, #0
 8009e24:	e734      	b.n	8009c90 <_dtoa_r+0x720>
 8009e26:	9e07      	ldr	r6, [sp, #28]
 8009e28:	9d04      	ldr	r5, [sp, #16]
 8009e2a:	9f08      	ldr	r7, [sp, #32]
 8009e2c:	e73b      	b.n	8009ca6 <_dtoa_r+0x736>
 8009e2e:	9a07      	ldr	r2, [sp, #28]
 8009e30:	e767      	b.n	8009d02 <_dtoa_r+0x792>
 8009e32:	9b06      	ldr	r3, [sp, #24]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	dc18      	bgt.n	8009e6a <_dtoa_r+0x8fa>
 8009e38:	f1ba 0f00 	cmp.w	sl, #0
 8009e3c:	d115      	bne.n	8009e6a <_dtoa_r+0x8fa>
 8009e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e42:	b993      	cbnz	r3, 8009e6a <_dtoa_r+0x8fa>
 8009e44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e48:	0d1b      	lsrs	r3, r3, #20
 8009e4a:	051b      	lsls	r3, r3, #20
 8009e4c:	b183      	cbz	r3, 8009e70 <_dtoa_r+0x900>
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	3301      	adds	r3, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	9b05      	ldr	r3, [sp, #20]
 8009e56:	3301      	adds	r3, #1
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	f04f 0801 	mov.w	r8, #1
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f47f af6a 	bne.w	8009d3a <_dtoa_r+0x7ca>
 8009e66:	2001      	movs	r0, #1
 8009e68:	e76f      	b.n	8009d4a <_dtoa_r+0x7da>
 8009e6a:	f04f 0800 	mov.w	r8, #0
 8009e6e:	e7f6      	b.n	8009e5e <_dtoa_r+0x8ee>
 8009e70:	4698      	mov	r8, r3
 8009e72:	e7f4      	b.n	8009e5e <_dtoa_r+0x8ee>
 8009e74:	f43f af7d 	beq.w	8009d72 <_dtoa_r+0x802>
 8009e78:	4618      	mov	r0, r3
 8009e7a:	301c      	adds	r0, #28
 8009e7c:	e772      	b.n	8009d64 <_dtoa_r+0x7f4>
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	dc37      	bgt.n	8009ef4 <_dtoa_r+0x984>
 8009e84:	9b06      	ldr	r3, [sp, #24]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	dd34      	ble.n	8009ef4 <_dtoa_r+0x984>
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	9302      	str	r3, [sp, #8]
 8009e8e:	9b02      	ldr	r3, [sp, #8]
 8009e90:	b96b      	cbnz	r3, 8009eae <_dtoa_r+0x93e>
 8009e92:	4631      	mov	r1, r6
 8009e94:	2205      	movs	r2, #5
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 fb1e 	bl	800a4d8 <__multadd>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	ee18 0a10 	vmov	r0, s16
 8009ea4:	f000 fd38 	bl	800a918 <__mcmp>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	f73f adbb 	bgt.w	8009a24 <_dtoa_r+0x4b4>
 8009eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb0:	9d01      	ldr	r5, [sp, #4]
 8009eb2:	43db      	mvns	r3, r3
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	f04f 0800 	mov.w	r8, #0
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 fae9 	bl	800a494 <_Bfree>
 8009ec2:	2f00      	cmp	r7, #0
 8009ec4:	f43f aea4 	beq.w	8009c10 <_dtoa_r+0x6a0>
 8009ec8:	f1b8 0f00 	cmp.w	r8, #0
 8009ecc:	d005      	beq.n	8009eda <_dtoa_r+0x96a>
 8009ece:	45b8      	cmp	r8, r7
 8009ed0:	d003      	beq.n	8009eda <_dtoa_r+0x96a>
 8009ed2:	4641      	mov	r1, r8
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 fadd 	bl	800a494 <_Bfree>
 8009eda:	4639      	mov	r1, r7
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 fad9 	bl	800a494 <_Bfree>
 8009ee2:	e695      	b.n	8009c10 <_dtoa_r+0x6a0>
 8009ee4:	2600      	movs	r6, #0
 8009ee6:	4637      	mov	r7, r6
 8009ee8:	e7e1      	b.n	8009eae <_dtoa_r+0x93e>
 8009eea:	9700      	str	r7, [sp, #0]
 8009eec:	4637      	mov	r7, r6
 8009eee:	e599      	b.n	8009a24 <_dtoa_r+0x4b4>
 8009ef0:	40240000 	.word	0x40240000
 8009ef4:	9b08      	ldr	r3, [sp, #32]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 80ca 	beq.w	800a090 <_dtoa_r+0xb20>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	9302      	str	r3, [sp, #8]
 8009f00:	2d00      	cmp	r5, #0
 8009f02:	dd05      	ble.n	8009f10 <_dtoa_r+0x9a0>
 8009f04:	4639      	mov	r1, r7
 8009f06:	462a      	mov	r2, r5
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fc95 	bl	800a838 <__lshift>
 8009f0e:	4607      	mov	r7, r0
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	d05b      	beq.n	8009fce <_dtoa_r+0xa5e>
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fa7b 	bl	800a414 <_Balloc>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b928      	cbnz	r0, 8009f2e <_dtoa_r+0x9be>
 8009f22:	4b87      	ldr	r3, [pc, #540]	; (800a140 <_dtoa_r+0xbd0>)
 8009f24:	4602      	mov	r2, r0
 8009f26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f2a:	f7ff bb3b 	b.w	80095a4 <_dtoa_r+0x34>
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	3202      	adds	r2, #2
 8009f32:	0092      	lsls	r2, r2, #2
 8009f34:	f107 010c 	add.w	r1, r7, #12
 8009f38:	300c      	adds	r0, #12
 8009f3a:	f7fe fa6a 	bl	8008412 <memcpy>
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4629      	mov	r1, r5
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fc78 	bl	800a838 <__lshift>
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	f103 0901 	add.w	r9, r3, #1
 8009f4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	9305      	str	r3, [sp, #20]
 8009f56:	f00a 0301 	and.w	r3, sl, #1
 8009f5a:	46b8      	mov	r8, r7
 8009f5c:	9304      	str	r3, [sp, #16]
 8009f5e:	4607      	mov	r7, r0
 8009f60:	4631      	mov	r1, r6
 8009f62:	ee18 0a10 	vmov	r0, s16
 8009f66:	f7ff fa75 	bl	8009454 <quorem>
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	9002      	str	r0, [sp, #8]
 8009f6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f72:	ee18 0a10 	vmov	r0, s16
 8009f76:	f000 fccf 	bl	800a918 <__mcmp>
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	9003      	str	r0, [sp, #12]
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fce5 	bl	800a950 <__mdiff>
 8009f86:	68c2      	ldr	r2, [r0, #12]
 8009f88:	f109 3bff 	add.w	fp, r9, #4294967295
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	bb02      	cbnz	r2, 8009fd2 <_dtoa_r+0xa62>
 8009f90:	4601      	mov	r1, r0
 8009f92:	ee18 0a10 	vmov	r0, s16
 8009f96:	f000 fcbf 	bl	800a918 <__mcmp>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	9207      	str	r2, [sp, #28]
 8009fa2:	f000 fa77 	bl	800a494 <_Bfree>
 8009fa6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009faa:	ea43 0102 	orr.w	r1, r3, r2
 8009fae:	9b04      	ldr	r3, [sp, #16]
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	464d      	mov	r5, r9
 8009fb4:	d10f      	bne.n	8009fd6 <_dtoa_r+0xa66>
 8009fb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009fba:	d02a      	beq.n	800a012 <_dtoa_r+0xaa2>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dd02      	ble.n	8009fc8 <_dtoa_r+0xa58>
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009fc8:	f88b a000 	strb.w	sl, [fp]
 8009fcc:	e775      	b.n	8009eba <_dtoa_r+0x94a>
 8009fce:	4638      	mov	r0, r7
 8009fd0:	e7ba      	b.n	8009f48 <_dtoa_r+0x9d8>
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	e7e2      	b.n	8009f9c <_dtoa_r+0xa2c>
 8009fd6:	9b03      	ldr	r3, [sp, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	db04      	blt.n	8009fe6 <_dtoa_r+0xa76>
 8009fdc:	9906      	ldr	r1, [sp, #24]
 8009fde:	430b      	orrs	r3, r1
 8009fe0:	9904      	ldr	r1, [sp, #16]
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	d122      	bne.n	800a02c <_dtoa_r+0xabc>
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	ddee      	ble.n	8009fc8 <_dtoa_r+0xa58>
 8009fea:	ee18 1a10 	vmov	r1, s16
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fc21 	bl	800a838 <__lshift>
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	ee08 0a10 	vmov	s16, r0
 8009ffc:	f000 fc8c 	bl	800a918 <__mcmp>
 800a000:	2800      	cmp	r0, #0
 800a002:	dc03      	bgt.n	800a00c <_dtoa_r+0xa9c>
 800a004:	d1e0      	bne.n	8009fc8 <_dtoa_r+0xa58>
 800a006:	f01a 0f01 	tst.w	sl, #1
 800a00a:	d0dd      	beq.n	8009fc8 <_dtoa_r+0xa58>
 800a00c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a010:	d1d7      	bne.n	8009fc2 <_dtoa_r+0xa52>
 800a012:	2339      	movs	r3, #57	; 0x39
 800a014:	f88b 3000 	strb.w	r3, [fp]
 800a018:	462b      	mov	r3, r5
 800a01a:	461d      	mov	r5, r3
 800a01c:	3b01      	subs	r3, #1
 800a01e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a022:	2a39      	cmp	r2, #57	; 0x39
 800a024:	d071      	beq.n	800a10a <_dtoa_r+0xb9a>
 800a026:	3201      	adds	r2, #1
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e746      	b.n	8009eba <_dtoa_r+0x94a>
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	dd07      	ble.n	800a040 <_dtoa_r+0xad0>
 800a030:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a034:	d0ed      	beq.n	800a012 <_dtoa_r+0xaa2>
 800a036:	f10a 0301 	add.w	r3, sl, #1
 800a03a:	f88b 3000 	strb.w	r3, [fp]
 800a03e:	e73c      	b.n	8009eba <_dtoa_r+0x94a>
 800a040:	9b05      	ldr	r3, [sp, #20]
 800a042:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a046:	4599      	cmp	r9, r3
 800a048:	d047      	beq.n	800a0da <_dtoa_r+0xb6a>
 800a04a:	ee18 1a10 	vmov	r1, s16
 800a04e:	2300      	movs	r3, #0
 800a050:	220a      	movs	r2, #10
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fa40 	bl	800a4d8 <__multadd>
 800a058:	45b8      	cmp	r8, r7
 800a05a:	ee08 0a10 	vmov	s16, r0
 800a05e:	f04f 0300 	mov.w	r3, #0
 800a062:	f04f 020a 	mov.w	r2, #10
 800a066:	4641      	mov	r1, r8
 800a068:	4620      	mov	r0, r4
 800a06a:	d106      	bne.n	800a07a <_dtoa_r+0xb0a>
 800a06c:	f000 fa34 	bl	800a4d8 <__multadd>
 800a070:	4680      	mov	r8, r0
 800a072:	4607      	mov	r7, r0
 800a074:	f109 0901 	add.w	r9, r9, #1
 800a078:	e772      	b.n	8009f60 <_dtoa_r+0x9f0>
 800a07a:	f000 fa2d 	bl	800a4d8 <__multadd>
 800a07e:	4639      	mov	r1, r7
 800a080:	4680      	mov	r8, r0
 800a082:	2300      	movs	r3, #0
 800a084:	220a      	movs	r2, #10
 800a086:	4620      	mov	r0, r4
 800a088:	f000 fa26 	bl	800a4d8 <__multadd>
 800a08c:	4607      	mov	r7, r0
 800a08e:	e7f1      	b.n	800a074 <_dtoa_r+0xb04>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	9302      	str	r3, [sp, #8]
 800a094:	9d01      	ldr	r5, [sp, #4]
 800a096:	ee18 0a10 	vmov	r0, s16
 800a09a:	4631      	mov	r1, r6
 800a09c:	f7ff f9da 	bl	8009454 <quorem>
 800a0a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	f805 ab01 	strb.w	sl, [r5], #1
 800a0aa:	1aea      	subs	r2, r5, r3
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	dd09      	ble.n	800a0c6 <_dtoa_r+0xb56>
 800a0b2:	ee18 1a10 	vmov	r1, s16
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fa0c 	bl	800a4d8 <__multadd>
 800a0c0:	ee08 0a10 	vmov	s16, r0
 800a0c4:	e7e7      	b.n	800a096 <_dtoa_r+0xb26>
 800a0c6:	9b02      	ldr	r3, [sp, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfc8      	it	gt
 800a0cc:	461d      	movgt	r5, r3
 800a0ce:	9b01      	ldr	r3, [sp, #4]
 800a0d0:	bfd8      	it	le
 800a0d2:	2501      	movle	r5, #1
 800a0d4:	441d      	add	r5, r3
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	ee18 1a10 	vmov	r1, s16
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f000 fba9 	bl	800a838 <__lshift>
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	ee08 0a10 	vmov	s16, r0
 800a0ec:	f000 fc14 	bl	800a918 <__mcmp>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dc91      	bgt.n	800a018 <_dtoa_r+0xaa8>
 800a0f4:	d102      	bne.n	800a0fc <_dtoa_r+0xb8c>
 800a0f6:	f01a 0f01 	tst.w	sl, #1
 800a0fa:	d18d      	bne.n	800a018 <_dtoa_r+0xaa8>
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	461d      	mov	r5, r3
 800a100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a104:	2a30      	cmp	r2, #48	; 0x30
 800a106:	d0fa      	beq.n	800a0fe <_dtoa_r+0xb8e>
 800a108:	e6d7      	b.n	8009eba <_dtoa_r+0x94a>
 800a10a:	9a01      	ldr	r2, [sp, #4]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d184      	bne.n	800a01a <_dtoa_r+0xaaa>
 800a110:	9b00      	ldr	r3, [sp, #0]
 800a112:	3301      	adds	r3, #1
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	2331      	movs	r3, #49	; 0x31
 800a118:	7013      	strb	r3, [r2, #0]
 800a11a:	e6ce      	b.n	8009eba <_dtoa_r+0x94a>
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <_dtoa_r+0xbd4>)
 800a11e:	f7ff ba95 	b.w	800964c <_dtoa_r+0xdc>
 800a122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a124:	2b00      	cmp	r3, #0
 800a126:	f47f aa6e 	bne.w	8009606 <_dtoa_r+0x96>
 800a12a:	4b07      	ldr	r3, [pc, #28]	; (800a148 <_dtoa_r+0xbd8>)
 800a12c:	f7ff ba8e 	b.w	800964c <_dtoa_r+0xdc>
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	dcae      	bgt.n	800a094 <_dtoa_r+0xb24>
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	2b02      	cmp	r3, #2
 800a13a:	f73f aea8 	bgt.w	8009e8e <_dtoa_r+0x91e>
 800a13e:	e7a9      	b.n	800a094 <_dtoa_r+0xb24>
 800a140:	0800c425 	.word	0x0800c425
 800a144:	0800c5a9 	.word	0x0800c5a9
 800a148:	0800c3a6 	.word	0x0800c3a6

0800a14c <__sflush_r>:
 800a14c:	898a      	ldrh	r2, [r1, #12]
 800a14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a152:	4605      	mov	r5, r0
 800a154:	0710      	lsls	r0, r2, #28
 800a156:	460c      	mov	r4, r1
 800a158:	d458      	bmi.n	800a20c <__sflush_r+0xc0>
 800a15a:	684b      	ldr	r3, [r1, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dc05      	bgt.n	800a16c <__sflush_r+0x20>
 800a160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a162:	2b00      	cmp	r3, #0
 800a164:	dc02      	bgt.n	800a16c <__sflush_r+0x20>
 800a166:	2000      	movs	r0, #0
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a16e:	2e00      	cmp	r6, #0
 800a170:	d0f9      	beq.n	800a166 <__sflush_r+0x1a>
 800a172:	2300      	movs	r3, #0
 800a174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a178:	682f      	ldr	r7, [r5, #0]
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	d032      	beq.n	800a1e4 <__sflush_r+0x98>
 800a17e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	075a      	lsls	r2, r3, #29
 800a184:	d505      	bpl.n	800a192 <__sflush_r+0x46>
 800a186:	6863      	ldr	r3, [r4, #4]
 800a188:	1ac0      	subs	r0, r0, r3
 800a18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a18c:	b10b      	cbz	r3, 800a192 <__sflush_r+0x46>
 800a18e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a190:	1ac0      	subs	r0, r0, r3
 800a192:	2300      	movs	r3, #0
 800a194:	4602      	mov	r2, r0
 800a196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a198:	6a21      	ldr	r1, [r4, #32]
 800a19a:	4628      	mov	r0, r5
 800a19c:	47b0      	blx	r6
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	d106      	bne.n	800a1b2 <__sflush_r+0x66>
 800a1a4:	6829      	ldr	r1, [r5, #0]
 800a1a6:	291d      	cmp	r1, #29
 800a1a8:	d82c      	bhi.n	800a204 <__sflush_r+0xb8>
 800a1aa:	4a2a      	ldr	r2, [pc, #168]	; (800a254 <__sflush_r+0x108>)
 800a1ac:	40ca      	lsrs	r2, r1
 800a1ae:	07d6      	lsls	r6, r2, #31
 800a1b0:	d528      	bpl.n	800a204 <__sflush_r+0xb8>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	6062      	str	r2, [r4, #4]
 800a1b6:	04d9      	lsls	r1, r3, #19
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	6022      	str	r2, [r4, #0]
 800a1bc:	d504      	bpl.n	800a1c8 <__sflush_r+0x7c>
 800a1be:	1c42      	adds	r2, r0, #1
 800a1c0:	d101      	bne.n	800a1c6 <__sflush_r+0x7a>
 800a1c2:	682b      	ldr	r3, [r5, #0]
 800a1c4:	b903      	cbnz	r3, 800a1c8 <__sflush_r+0x7c>
 800a1c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ca:	602f      	str	r7, [r5, #0]
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d0ca      	beq.n	800a166 <__sflush_r+0x1a>
 800a1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	d002      	beq.n	800a1de <__sflush_r+0x92>
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f000 fcb5 	bl	800ab48 <_free_r>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a1e2:	e7c1      	b.n	800a168 <__sflush_r+0x1c>
 800a1e4:	6a21      	ldr	r1, [r4, #32]
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b0      	blx	r6
 800a1ec:	1c41      	adds	r1, r0, #1
 800a1ee:	d1c7      	bne.n	800a180 <__sflush_r+0x34>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0c4      	beq.n	800a180 <__sflush_r+0x34>
 800a1f6:	2b1d      	cmp	r3, #29
 800a1f8:	d001      	beq.n	800a1fe <__sflush_r+0xb2>
 800a1fa:	2b16      	cmp	r3, #22
 800a1fc:	d101      	bne.n	800a202 <__sflush_r+0xb6>
 800a1fe:	602f      	str	r7, [r5, #0]
 800a200:	e7b1      	b.n	800a166 <__sflush_r+0x1a>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	e7ad      	b.n	800a168 <__sflush_r+0x1c>
 800a20c:	690f      	ldr	r7, [r1, #16]
 800a20e:	2f00      	cmp	r7, #0
 800a210:	d0a9      	beq.n	800a166 <__sflush_r+0x1a>
 800a212:	0793      	lsls	r3, r2, #30
 800a214:	680e      	ldr	r6, [r1, #0]
 800a216:	bf08      	it	eq
 800a218:	694b      	ldreq	r3, [r1, #20]
 800a21a:	600f      	str	r7, [r1, #0]
 800a21c:	bf18      	it	ne
 800a21e:	2300      	movne	r3, #0
 800a220:	eba6 0807 	sub.w	r8, r6, r7
 800a224:	608b      	str	r3, [r1, #8]
 800a226:	f1b8 0f00 	cmp.w	r8, #0
 800a22a:	dd9c      	ble.n	800a166 <__sflush_r+0x1a>
 800a22c:	6a21      	ldr	r1, [r4, #32]
 800a22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a230:	4643      	mov	r3, r8
 800a232:	463a      	mov	r2, r7
 800a234:	4628      	mov	r0, r5
 800a236:	47b0      	blx	r6
 800a238:	2800      	cmp	r0, #0
 800a23a:	dc06      	bgt.n	800a24a <__sflush_r+0xfe>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a242:	81a3      	strh	r3, [r4, #12]
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	e78e      	b.n	800a168 <__sflush_r+0x1c>
 800a24a:	4407      	add	r7, r0
 800a24c:	eba8 0800 	sub.w	r8, r8, r0
 800a250:	e7e9      	b.n	800a226 <__sflush_r+0xda>
 800a252:	bf00      	nop
 800a254:	20400001 	.word	0x20400001

0800a258 <_fflush_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	690b      	ldr	r3, [r1, #16]
 800a25c:	4605      	mov	r5, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	b913      	cbnz	r3, 800a268 <_fflush_r+0x10>
 800a262:	2500      	movs	r5, #0
 800a264:	4628      	mov	r0, r5
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	b118      	cbz	r0, 800a272 <_fflush_r+0x1a>
 800a26a:	6983      	ldr	r3, [r0, #24]
 800a26c:	b90b      	cbnz	r3, 800a272 <_fflush_r+0x1a>
 800a26e:	f7fd ffef 	bl	8008250 <__sinit>
 800a272:	4b14      	ldr	r3, [pc, #80]	; (800a2c4 <_fflush_r+0x6c>)
 800a274:	429c      	cmp	r4, r3
 800a276:	d11b      	bne.n	800a2b0 <_fflush_r+0x58>
 800a278:	686c      	ldr	r4, [r5, #4]
 800a27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0ef      	beq.n	800a262 <_fflush_r+0xa>
 800a282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a284:	07d0      	lsls	r0, r2, #31
 800a286:	d404      	bmi.n	800a292 <_fflush_r+0x3a>
 800a288:	0599      	lsls	r1, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_fflush_r+0x3a>
 800a28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a28e:	f7fe f8be 	bl	800840e <__retarget_lock_acquire_recursive>
 800a292:	4628      	mov	r0, r5
 800a294:	4621      	mov	r1, r4
 800a296:	f7ff ff59 	bl	800a14c <__sflush_r>
 800a29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a29c:	07da      	lsls	r2, r3, #31
 800a29e:	4605      	mov	r5, r0
 800a2a0:	d4e0      	bmi.n	800a264 <_fflush_r+0xc>
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	059b      	lsls	r3, r3, #22
 800a2a6:	d4dd      	bmi.n	800a264 <_fflush_r+0xc>
 800a2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2aa:	f7fe f8b1 	bl	8008410 <__retarget_lock_release_recursive>
 800a2ae:	e7d9      	b.n	800a264 <_fflush_r+0xc>
 800a2b0:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <_fflush_r+0x70>)
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d101      	bne.n	800a2ba <_fflush_r+0x62>
 800a2b6:	68ac      	ldr	r4, [r5, #8]
 800a2b8:	e7df      	b.n	800a27a <_fflush_r+0x22>
 800a2ba:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <_fflush_r+0x74>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	bf08      	it	eq
 800a2c0:	68ec      	ldreq	r4, [r5, #12]
 800a2c2:	e7da      	b.n	800a27a <_fflush_r+0x22>
 800a2c4:	0800c330 	.word	0x0800c330
 800a2c8:	0800c350 	.word	0x0800c350
 800a2cc:	0800c310 	.word	0x0800c310

0800a2d0 <fflush>:
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	b920      	cbnz	r0, 800a2de <fflush+0xe>
 800a2d4:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <fflush+0x18>)
 800a2d6:	4905      	ldr	r1, [pc, #20]	; (800a2ec <fflush+0x1c>)
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	f7fe b854 	b.w	8008386 <_fwalk_reent>
 800a2de:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <fflush+0x20>)
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfb9 	b.w	800a258 <_fflush_r>
 800a2e6:	bf00      	nop
 800a2e8:	0800c370 	.word	0x0800c370
 800a2ec:	0800a259 	.word	0x0800a259
 800a2f0:	20000010 	.word	0x20000010

0800a2f4 <_localeconv_r>:
 800a2f4:	4800      	ldr	r0, [pc, #0]	; (800a2f8 <_localeconv_r+0x4>)
 800a2f6:	4770      	bx	lr
 800a2f8:	20000164 	.word	0x20000164

0800a2fc <_lseek_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	; (800a31c <_lseek_r+0x20>)
 800a300:	4604      	mov	r4, r0
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	2200      	movs	r2, #0
 800a308:	602a      	str	r2, [r5, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f7f7 ff60 	bl	80021d0 <_lseek>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_lseek_r+0x1e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_lseek_r+0x1e>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	200044c8 	.word	0x200044c8

0800a320 <__swhatbuf_r>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	460e      	mov	r6, r1
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	2900      	cmp	r1, #0
 800a32a:	b096      	sub	sp, #88	; 0x58
 800a32c:	4614      	mov	r4, r2
 800a32e:	461d      	mov	r5, r3
 800a330:	da08      	bge.n	800a344 <__swhatbuf_r+0x24>
 800a332:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	602a      	str	r2, [r5, #0]
 800a33a:	061a      	lsls	r2, r3, #24
 800a33c:	d410      	bmi.n	800a360 <__swhatbuf_r+0x40>
 800a33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a342:	e00e      	b.n	800a362 <__swhatbuf_r+0x42>
 800a344:	466a      	mov	r2, sp
 800a346:	f001 fb9d 	bl	800ba84 <_fstat_r>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	dbf1      	blt.n	800a332 <__swhatbuf_r+0x12>
 800a34e:	9a01      	ldr	r2, [sp, #4]
 800a350:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a354:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a358:	425a      	negs	r2, r3
 800a35a:	415a      	adcs	r2, r3
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	e7ee      	b.n	800a33e <__swhatbuf_r+0x1e>
 800a360:	2340      	movs	r3, #64	; 0x40
 800a362:	2000      	movs	r0, #0
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	b016      	add	sp, #88	; 0x58
 800a368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a36c <__smakebuf_r>:
 800a36c:	898b      	ldrh	r3, [r1, #12]
 800a36e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a370:	079d      	lsls	r5, r3, #30
 800a372:	4606      	mov	r6, r0
 800a374:	460c      	mov	r4, r1
 800a376:	d507      	bpl.n	800a388 <__smakebuf_r+0x1c>
 800a378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	6123      	str	r3, [r4, #16]
 800a380:	2301      	movs	r3, #1
 800a382:	6163      	str	r3, [r4, #20]
 800a384:	b002      	add	sp, #8
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	ab01      	add	r3, sp, #4
 800a38a:	466a      	mov	r2, sp
 800a38c:	f7ff ffc8 	bl	800a320 <__swhatbuf_r>
 800a390:	9900      	ldr	r1, [sp, #0]
 800a392:	4605      	mov	r5, r0
 800a394:	4630      	mov	r0, r6
 800a396:	f7fe f873 	bl	8008480 <_malloc_r>
 800a39a:	b948      	cbnz	r0, 800a3b0 <__smakebuf_r+0x44>
 800a39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a0:	059a      	lsls	r2, r3, #22
 800a3a2:	d4ef      	bmi.n	800a384 <__smakebuf_r+0x18>
 800a3a4:	f023 0303 	bic.w	r3, r3, #3
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	e7e3      	b.n	800a378 <__smakebuf_r+0xc>
 800a3b0:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <__smakebuf_r+0x7c>)
 800a3b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	6020      	str	r0, [r4, #0]
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	6163      	str	r3, [r4, #20]
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	6120      	str	r0, [r4, #16]
 800a3c6:	b15b      	cbz	r3, 800a3e0 <__smakebuf_r+0x74>
 800a3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f001 fb6b 	bl	800baa8 <_isatty_r>
 800a3d2:	b128      	cbz	r0, 800a3e0 <__smakebuf_r+0x74>
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f023 0303 	bic.w	r3, r3, #3
 800a3da:	f043 0301 	orr.w	r3, r3, #1
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	89a0      	ldrh	r0, [r4, #12]
 800a3e2:	4305      	orrs	r5, r0
 800a3e4:	81a5      	strh	r5, [r4, #12]
 800a3e6:	e7cd      	b.n	800a384 <__smakebuf_r+0x18>
 800a3e8:	080081e9 	.word	0x080081e9

0800a3ec <malloc>:
 800a3ec:	4b02      	ldr	r3, [pc, #8]	; (800a3f8 <malloc+0xc>)
 800a3ee:	4601      	mov	r1, r0
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	f7fe b845 	b.w	8008480 <_malloc_r>
 800a3f6:	bf00      	nop
 800a3f8:	20000010 	.word	0x20000010

0800a3fc <__malloc_lock>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	; (800a404 <__malloc_lock+0x8>)
 800a3fe:	f7fe b806 	b.w	800840e <__retarget_lock_acquire_recursive>
 800a402:	bf00      	nop
 800a404:	200044bc 	.word	0x200044bc

0800a408 <__malloc_unlock>:
 800a408:	4801      	ldr	r0, [pc, #4]	; (800a410 <__malloc_unlock+0x8>)
 800a40a:	f7fe b801 	b.w	8008410 <__retarget_lock_release_recursive>
 800a40e:	bf00      	nop
 800a410:	200044bc 	.word	0x200044bc

0800a414 <_Balloc>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	b976      	cbnz	r6, 800a43c <_Balloc+0x28>
 800a41e:	2010      	movs	r0, #16
 800a420:	f7ff ffe4 	bl	800a3ec <malloc>
 800a424:	4602      	mov	r2, r0
 800a426:	6260      	str	r0, [r4, #36]	; 0x24
 800a428:	b920      	cbnz	r0, 800a434 <_Balloc+0x20>
 800a42a:	4b18      	ldr	r3, [pc, #96]	; (800a48c <_Balloc+0x78>)
 800a42c:	4818      	ldr	r0, [pc, #96]	; (800a490 <_Balloc+0x7c>)
 800a42e:	2166      	movs	r1, #102	; 0x66
 800a430:	f001 faf8 	bl	800ba24 <__assert_func>
 800a434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a438:	6006      	str	r6, [r0, #0]
 800a43a:	60c6      	str	r6, [r0, #12]
 800a43c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a43e:	68f3      	ldr	r3, [r6, #12]
 800a440:	b183      	cbz	r3, 800a464 <_Balloc+0x50>
 800a442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a44a:	b9b8      	cbnz	r0, 800a47c <_Balloc+0x68>
 800a44c:	2101      	movs	r1, #1
 800a44e:	fa01 f605 	lsl.w	r6, r1, r5
 800a452:	1d72      	adds	r2, r6, #5
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fb60 	bl	800ab1c <_calloc_r>
 800a45c:	b160      	cbz	r0, 800a478 <_Balloc+0x64>
 800a45e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a462:	e00e      	b.n	800a482 <_Balloc+0x6e>
 800a464:	2221      	movs	r2, #33	; 0x21
 800a466:	2104      	movs	r1, #4
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fb57 	bl	800ab1c <_calloc_r>
 800a46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a470:	60f0      	str	r0, [r6, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e4      	bne.n	800a442 <_Balloc+0x2e>
 800a478:	2000      	movs	r0, #0
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	6802      	ldr	r2, [r0, #0]
 800a47e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a482:	2300      	movs	r3, #0
 800a484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a488:	e7f7      	b.n	800a47a <_Balloc+0x66>
 800a48a:	bf00      	nop
 800a48c:	0800c3b3 	.word	0x0800c3b3
 800a490:	0800c436 	.word	0x0800c436

0800a494 <_Bfree>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a498:	4605      	mov	r5, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b976      	cbnz	r6, 800a4bc <_Bfree+0x28>
 800a49e:	2010      	movs	r0, #16
 800a4a0:	f7ff ffa4 	bl	800a3ec <malloc>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	6268      	str	r0, [r5, #36]	; 0x24
 800a4a8:	b920      	cbnz	r0, 800a4b4 <_Bfree+0x20>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <_Bfree+0x3c>)
 800a4ac:	4809      	ldr	r0, [pc, #36]	; (800a4d4 <_Bfree+0x40>)
 800a4ae:	218a      	movs	r1, #138	; 0x8a
 800a4b0:	f001 fab8 	bl	800ba24 <__assert_func>
 800a4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b8:	6006      	str	r6, [r0, #0]
 800a4ba:	60c6      	str	r6, [r0, #12]
 800a4bc:	b13c      	cbz	r4, 800a4ce <_Bfree+0x3a>
 800a4be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4c0:	6862      	ldr	r2, [r4, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c8:	6021      	str	r1, [r4, #0]
 800a4ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	0800c3b3 	.word	0x0800c3b3
 800a4d4:	0800c436 	.word	0x0800c436

0800a4d8 <__multadd>:
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4dc:	690d      	ldr	r5, [r1, #16]
 800a4de:	4607      	mov	r7, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	461e      	mov	r6, r3
 800a4e4:	f101 0c14 	add.w	ip, r1, #20
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	fb02 6101 	mla	r1, r2, r1, r6
 800a4f4:	0c1e      	lsrs	r6, r3, #16
 800a4f6:	0c0b      	lsrs	r3, r1, #16
 800a4f8:	fb02 3306 	mla	r3, r2, r6, r3
 800a4fc:	b289      	uxth	r1, r1
 800a4fe:	3001      	adds	r0, #1
 800a500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a504:	4285      	cmp	r5, r0
 800a506:	f84c 1b04 	str.w	r1, [ip], #4
 800a50a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a50e:	dcec      	bgt.n	800a4ea <__multadd+0x12>
 800a510:	b30e      	cbz	r6, 800a556 <__multadd+0x7e>
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	42ab      	cmp	r3, r5
 800a516:	dc19      	bgt.n	800a54c <__multadd+0x74>
 800a518:	6861      	ldr	r1, [r4, #4]
 800a51a:	4638      	mov	r0, r7
 800a51c:	3101      	adds	r1, #1
 800a51e:	f7ff ff79 	bl	800a414 <_Balloc>
 800a522:	4680      	mov	r8, r0
 800a524:	b928      	cbnz	r0, 800a532 <__multadd+0x5a>
 800a526:	4602      	mov	r2, r0
 800a528:	4b0c      	ldr	r3, [pc, #48]	; (800a55c <__multadd+0x84>)
 800a52a:	480d      	ldr	r0, [pc, #52]	; (800a560 <__multadd+0x88>)
 800a52c:	21b5      	movs	r1, #181	; 0xb5
 800a52e:	f001 fa79 	bl	800ba24 <__assert_func>
 800a532:	6922      	ldr	r2, [r4, #16]
 800a534:	3202      	adds	r2, #2
 800a536:	f104 010c 	add.w	r1, r4, #12
 800a53a:	0092      	lsls	r2, r2, #2
 800a53c:	300c      	adds	r0, #12
 800a53e:	f7fd ff68 	bl	8008412 <memcpy>
 800a542:	4621      	mov	r1, r4
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff ffa5 	bl	800a494 <_Bfree>
 800a54a:	4644      	mov	r4, r8
 800a54c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a550:	3501      	adds	r5, #1
 800a552:	615e      	str	r6, [r3, #20]
 800a554:	6125      	str	r5, [r4, #16]
 800a556:	4620      	mov	r0, r4
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	0800c425 	.word	0x0800c425
 800a560:	0800c436 	.word	0x0800c436

0800a564 <__hi0bits>:
 800a564:	0c03      	lsrs	r3, r0, #16
 800a566:	041b      	lsls	r3, r3, #16
 800a568:	b9d3      	cbnz	r3, 800a5a0 <__hi0bits+0x3c>
 800a56a:	0400      	lsls	r0, r0, #16
 800a56c:	2310      	movs	r3, #16
 800a56e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a572:	bf04      	itt	eq
 800a574:	0200      	lsleq	r0, r0, #8
 800a576:	3308      	addeq	r3, #8
 800a578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a57c:	bf04      	itt	eq
 800a57e:	0100      	lsleq	r0, r0, #4
 800a580:	3304      	addeq	r3, #4
 800a582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a586:	bf04      	itt	eq
 800a588:	0080      	lsleq	r0, r0, #2
 800a58a:	3302      	addeq	r3, #2
 800a58c:	2800      	cmp	r0, #0
 800a58e:	db05      	blt.n	800a59c <__hi0bits+0x38>
 800a590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a594:	f103 0301 	add.w	r3, r3, #1
 800a598:	bf08      	it	eq
 800a59a:	2320      	moveq	r3, #32
 800a59c:	4618      	mov	r0, r3
 800a59e:	4770      	bx	lr
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e7e4      	b.n	800a56e <__hi0bits+0xa>

0800a5a4 <__lo0bits>:
 800a5a4:	6803      	ldr	r3, [r0, #0]
 800a5a6:	f013 0207 	ands.w	r2, r3, #7
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	d00b      	beq.n	800a5c6 <__lo0bits+0x22>
 800a5ae:	07da      	lsls	r2, r3, #31
 800a5b0:	d423      	bmi.n	800a5fa <__lo0bits+0x56>
 800a5b2:	0798      	lsls	r0, r3, #30
 800a5b4:	bf49      	itett	mi
 800a5b6:	085b      	lsrmi	r3, r3, #1
 800a5b8:	089b      	lsrpl	r3, r3, #2
 800a5ba:	2001      	movmi	r0, #1
 800a5bc:	600b      	strmi	r3, [r1, #0]
 800a5be:	bf5c      	itt	pl
 800a5c0:	600b      	strpl	r3, [r1, #0]
 800a5c2:	2002      	movpl	r0, #2
 800a5c4:	4770      	bx	lr
 800a5c6:	b298      	uxth	r0, r3
 800a5c8:	b9a8      	cbnz	r0, 800a5f6 <__lo0bits+0x52>
 800a5ca:	0c1b      	lsrs	r3, r3, #16
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	b90a      	cbnz	r2, 800a5d6 <__lo0bits+0x32>
 800a5d2:	3008      	adds	r0, #8
 800a5d4:	0a1b      	lsrs	r3, r3, #8
 800a5d6:	071a      	lsls	r2, r3, #28
 800a5d8:	bf04      	itt	eq
 800a5da:	091b      	lsreq	r3, r3, #4
 800a5dc:	3004      	addeq	r0, #4
 800a5de:	079a      	lsls	r2, r3, #30
 800a5e0:	bf04      	itt	eq
 800a5e2:	089b      	lsreq	r3, r3, #2
 800a5e4:	3002      	addeq	r0, #2
 800a5e6:	07da      	lsls	r2, r3, #31
 800a5e8:	d403      	bmi.n	800a5f2 <__lo0bits+0x4e>
 800a5ea:	085b      	lsrs	r3, r3, #1
 800a5ec:	f100 0001 	add.w	r0, r0, #1
 800a5f0:	d005      	beq.n	800a5fe <__lo0bits+0x5a>
 800a5f2:	600b      	str	r3, [r1, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	e7e9      	b.n	800a5ce <__lo0bits+0x2a>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	4770      	bx	lr
 800a5fe:	2020      	movs	r0, #32
 800a600:	4770      	bx	lr
	...

0800a604 <__i2b>:
 800a604:	b510      	push	{r4, lr}
 800a606:	460c      	mov	r4, r1
 800a608:	2101      	movs	r1, #1
 800a60a:	f7ff ff03 	bl	800a414 <_Balloc>
 800a60e:	4602      	mov	r2, r0
 800a610:	b928      	cbnz	r0, 800a61e <__i2b+0x1a>
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <__i2b+0x24>)
 800a614:	4805      	ldr	r0, [pc, #20]	; (800a62c <__i2b+0x28>)
 800a616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a61a:	f001 fa03 	bl	800ba24 <__assert_func>
 800a61e:	2301      	movs	r3, #1
 800a620:	6144      	str	r4, [r0, #20]
 800a622:	6103      	str	r3, [r0, #16]
 800a624:	bd10      	pop	{r4, pc}
 800a626:	bf00      	nop
 800a628:	0800c425 	.word	0x0800c425
 800a62c:	0800c436 	.word	0x0800c436

0800a630 <__multiply>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	4691      	mov	r9, r2
 800a636:	690a      	ldr	r2, [r1, #16]
 800a638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	bfb8      	it	lt
 800a640:	460b      	movlt	r3, r1
 800a642:	460c      	mov	r4, r1
 800a644:	bfbc      	itt	lt
 800a646:	464c      	movlt	r4, r9
 800a648:	4699      	movlt	r9, r3
 800a64a:	6927      	ldr	r7, [r4, #16]
 800a64c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a650:	68a3      	ldr	r3, [r4, #8]
 800a652:	6861      	ldr	r1, [r4, #4]
 800a654:	eb07 060a 	add.w	r6, r7, sl
 800a658:	42b3      	cmp	r3, r6
 800a65a:	b085      	sub	sp, #20
 800a65c:	bfb8      	it	lt
 800a65e:	3101      	addlt	r1, #1
 800a660:	f7ff fed8 	bl	800a414 <_Balloc>
 800a664:	b930      	cbnz	r0, 800a674 <__multiply+0x44>
 800a666:	4602      	mov	r2, r0
 800a668:	4b44      	ldr	r3, [pc, #272]	; (800a77c <__multiply+0x14c>)
 800a66a:	4845      	ldr	r0, [pc, #276]	; (800a780 <__multiply+0x150>)
 800a66c:	f240 115d 	movw	r1, #349	; 0x15d
 800a670:	f001 f9d8 	bl	800ba24 <__assert_func>
 800a674:	f100 0514 	add.w	r5, r0, #20
 800a678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a67c:	462b      	mov	r3, r5
 800a67e:	2200      	movs	r2, #0
 800a680:	4543      	cmp	r3, r8
 800a682:	d321      	bcc.n	800a6c8 <__multiply+0x98>
 800a684:	f104 0314 	add.w	r3, r4, #20
 800a688:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a68c:	f109 0314 	add.w	r3, r9, #20
 800a690:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a694:	9202      	str	r2, [sp, #8]
 800a696:	1b3a      	subs	r2, r7, r4
 800a698:	3a15      	subs	r2, #21
 800a69a:	f022 0203 	bic.w	r2, r2, #3
 800a69e:	3204      	adds	r2, #4
 800a6a0:	f104 0115 	add.w	r1, r4, #21
 800a6a4:	428f      	cmp	r7, r1
 800a6a6:	bf38      	it	cc
 800a6a8:	2204      	movcc	r2, #4
 800a6aa:	9201      	str	r2, [sp, #4]
 800a6ac:	9a02      	ldr	r2, [sp, #8]
 800a6ae:	9303      	str	r3, [sp, #12]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d80c      	bhi.n	800a6ce <__multiply+0x9e>
 800a6b4:	2e00      	cmp	r6, #0
 800a6b6:	dd03      	ble.n	800a6c0 <__multiply+0x90>
 800a6b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d05a      	beq.n	800a776 <__multiply+0x146>
 800a6c0:	6106      	str	r6, [r0, #16]
 800a6c2:	b005      	add	sp, #20
 800a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c8:	f843 2b04 	str.w	r2, [r3], #4
 800a6cc:	e7d8      	b.n	800a680 <__multiply+0x50>
 800a6ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6d2:	f1ba 0f00 	cmp.w	sl, #0
 800a6d6:	d024      	beq.n	800a722 <__multiply+0xf2>
 800a6d8:	f104 0e14 	add.w	lr, r4, #20
 800a6dc:	46a9      	mov	r9, r5
 800a6de:	f04f 0c00 	mov.w	ip, #0
 800a6e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6e6:	f8d9 1000 	ldr.w	r1, [r9]
 800a6ea:	fa1f fb82 	uxth.w	fp, r2
 800a6ee:	b289      	uxth	r1, r1
 800a6f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6f8:	f8d9 2000 	ldr.w	r2, [r9]
 800a6fc:	4461      	add	r1, ip
 800a6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a702:	fb0a c20b 	mla	r2, sl, fp, ip
 800a706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a70a:	b289      	uxth	r1, r1
 800a70c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a710:	4577      	cmp	r7, lr
 800a712:	f849 1b04 	str.w	r1, [r9], #4
 800a716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a71a:	d8e2      	bhi.n	800a6e2 <__multiply+0xb2>
 800a71c:	9a01      	ldr	r2, [sp, #4]
 800a71e:	f845 c002 	str.w	ip, [r5, r2]
 800a722:	9a03      	ldr	r2, [sp, #12]
 800a724:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a728:	3304      	adds	r3, #4
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	d020      	beq.n	800a772 <__multiply+0x142>
 800a730:	6829      	ldr	r1, [r5, #0]
 800a732:	f104 0c14 	add.w	ip, r4, #20
 800a736:	46ae      	mov	lr, r5
 800a738:	f04f 0a00 	mov.w	sl, #0
 800a73c:	f8bc b000 	ldrh.w	fp, [ip]
 800a740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a744:	fb09 220b 	mla	r2, r9, fp, r2
 800a748:	4492      	add	sl, r2
 800a74a:	b289      	uxth	r1, r1
 800a74c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a750:	f84e 1b04 	str.w	r1, [lr], #4
 800a754:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a758:	f8be 1000 	ldrh.w	r1, [lr]
 800a75c:	0c12      	lsrs	r2, r2, #16
 800a75e:	fb09 1102 	mla	r1, r9, r2, r1
 800a762:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a766:	4567      	cmp	r7, ip
 800a768:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a76c:	d8e6      	bhi.n	800a73c <__multiply+0x10c>
 800a76e:	9a01      	ldr	r2, [sp, #4]
 800a770:	50a9      	str	r1, [r5, r2]
 800a772:	3504      	adds	r5, #4
 800a774:	e79a      	b.n	800a6ac <__multiply+0x7c>
 800a776:	3e01      	subs	r6, #1
 800a778:	e79c      	b.n	800a6b4 <__multiply+0x84>
 800a77a:	bf00      	nop
 800a77c:	0800c425 	.word	0x0800c425
 800a780:	0800c436 	.word	0x0800c436

0800a784 <__pow5mult>:
 800a784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a788:	4615      	mov	r5, r2
 800a78a:	f012 0203 	ands.w	r2, r2, #3
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	d007      	beq.n	800a7a4 <__pow5mult+0x20>
 800a794:	4c25      	ldr	r4, [pc, #148]	; (800a82c <__pow5mult+0xa8>)
 800a796:	3a01      	subs	r2, #1
 800a798:	2300      	movs	r3, #0
 800a79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a79e:	f7ff fe9b 	bl	800a4d8 <__multadd>
 800a7a2:	4607      	mov	r7, r0
 800a7a4:	10ad      	asrs	r5, r5, #2
 800a7a6:	d03d      	beq.n	800a824 <__pow5mult+0xa0>
 800a7a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7aa:	b97c      	cbnz	r4, 800a7cc <__pow5mult+0x48>
 800a7ac:	2010      	movs	r0, #16
 800a7ae:	f7ff fe1d 	bl	800a3ec <malloc>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	6270      	str	r0, [r6, #36]	; 0x24
 800a7b6:	b928      	cbnz	r0, 800a7c4 <__pow5mult+0x40>
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <__pow5mult+0xac>)
 800a7ba:	481e      	ldr	r0, [pc, #120]	; (800a834 <__pow5mult+0xb0>)
 800a7bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7c0:	f001 f930 	bl	800ba24 <__assert_func>
 800a7c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7c8:	6004      	str	r4, [r0, #0]
 800a7ca:	60c4      	str	r4, [r0, #12]
 800a7cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7d4:	b94c      	cbnz	r4, 800a7ea <__pow5mult+0x66>
 800a7d6:	f240 2171 	movw	r1, #625	; 0x271
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7ff ff12 	bl	800a604 <__i2b>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	f04f 0900 	mov.w	r9, #0
 800a7ee:	07eb      	lsls	r3, r5, #31
 800a7f0:	d50a      	bpl.n	800a808 <__pow5mult+0x84>
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff ff1a 	bl	800a630 <__multiply>
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4680      	mov	r8, r0
 800a800:	4630      	mov	r0, r6
 800a802:	f7ff fe47 	bl	800a494 <_Bfree>
 800a806:	4647      	mov	r7, r8
 800a808:	106d      	asrs	r5, r5, #1
 800a80a:	d00b      	beq.n	800a824 <__pow5mult+0xa0>
 800a80c:	6820      	ldr	r0, [r4, #0]
 800a80e:	b938      	cbnz	r0, 800a820 <__pow5mult+0x9c>
 800a810:	4622      	mov	r2, r4
 800a812:	4621      	mov	r1, r4
 800a814:	4630      	mov	r0, r6
 800a816:	f7ff ff0b 	bl	800a630 <__multiply>
 800a81a:	6020      	str	r0, [r4, #0]
 800a81c:	f8c0 9000 	str.w	r9, [r0]
 800a820:	4604      	mov	r4, r0
 800a822:	e7e4      	b.n	800a7ee <__pow5mult+0x6a>
 800a824:	4638      	mov	r0, r7
 800a826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a82a:	bf00      	nop
 800a82c:	0800c588 	.word	0x0800c588
 800a830:	0800c3b3 	.word	0x0800c3b3
 800a834:	0800c436 	.word	0x0800c436

0800a838 <__lshift>:
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	460c      	mov	r4, r1
 800a83e:	6849      	ldr	r1, [r1, #4]
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a846:	68a3      	ldr	r3, [r4, #8]
 800a848:	4607      	mov	r7, r0
 800a84a:	4691      	mov	r9, r2
 800a84c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a850:	f108 0601 	add.w	r6, r8, #1
 800a854:	42b3      	cmp	r3, r6
 800a856:	db0b      	blt.n	800a870 <__lshift+0x38>
 800a858:	4638      	mov	r0, r7
 800a85a:	f7ff fddb 	bl	800a414 <_Balloc>
 800a85e:	4605      	mov	r5, r0
 800a860:	b948      	cbnz	r0, 800a876 <__lshift+0x3e>
 800a862:	4602      	mov	r2, r0
 800a864:	4b2a      	ldr	r3, [pc, #168]	; (800a910 <__lshift+0xd8>)
 800a866:	482b      	ldr	r0, [pc, #172]	; (800a914 <__lshift+0xdc>)
 800a868:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a86c:	f001 f8da 	bl	800ba24 <__assert_func>
 800a870:	3101      	adds	r1, #1
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	e7ee      	b.n	800a854 <__lshift+0x1c>
 800a876:	2300      	movs	r3, #0
 800a878:	f100 0114 	add.w	r1, r0, #20
 800a87c:	f100 0210 	add.w	r2, r0, #16
 800a880:	4618      	mov	r0, r3
 800a882:	4553      	cmp	r3, sl
 800a884:	db37      	blt.n	800a8f6 <__lshift+0xbe>
 800a886:	6920      	ldr	r0, [r4, #16]
 800a888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a88c:	f104 0314 	add.w	r3, r4, #20
 800a890:	f019 091f 	ands.w	r9, r9, #31
 800a894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a898:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a89c:	d02f      	beq.n	800a8fe <__lshift+0xc6>
 800a89e:	f1c9 0e20 	rsb	lr, r9, #32
 800a8a2:	468a      	mov	sl, r1
 800a8a4:	f04f 0c00 	mov.w	ip, #0
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	fa02 f209 	lsl.w	r2, r2, r9
 800a8ae:	ea42 020c 	orr.w	r2, r2, ip
 800a8b2:	f84a 2b04 	str.w	r2, [sl], #4
 800a8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ba:	4298      	cmp	r0, r3
 800a8bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8c0:	d8f2      	bhi.n	800a8a8 <__lshift+0x70>
 800a8c2:	1b03      	subs	r3, r0, r4
 800a8c4:	3b15      	subs	r3, #21
 800a8c6:	f023 0303 	bic.w	r3, r3, #3
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	f104 0215 	add.w	r2, r4, #21
 800a8d0:	4290      	cmp	r0, r2
 800a8d2:	bf38      	it	cc
 800a8d4:	2304      	movcc	r3, #4
 800a8d6:	f841 c003 	str.w	ip, [r1, r3]
 800a8da:	f1bc 0f00 	cmp.w	ip, #0
 800a8de:	d001      	beq.n	800a8e4 <__lshift+0xac>
 800a8e0:	f108 0602 	add.w	r6, r8, #2
 800a8e4:	3e01      	subs	r6, #1
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	612e      	str	r6, [r5, #16]
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	f7ff fdd2 	bl	800a494 <_Bfree>
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	e7c1      	b.n	800a882 <__lshift+0x4a>
 800a8fe:	3904      	subs	r1, #4
 800a900:	f853 2b04 	ldr.w	r2, [r3], #4
 800a904:	f841 2f04 	str.w	r2, [r1, #4]!
 800a908:	4298      	cmp	r0, r3
 800a90a:	d8f9      	bhi.n	800a900 <__lshift+0xc8>
 800a90c:	e7ea      	b.n	800a8e4 <__lshift+0xac>
 800a90e:	bf00      	nop
 800a910:	0800c425 	.word	0x0800c425
 800a914:	0800c436 	.word	0x0800c436

0800a918 <__mcmp>:
 800a918:	b530      	push	{r4, r5, lr}
 800a91a:	6902      	ldr	r2, [r0, #16]
 800a91c:	690c      	ldr	r4, [r1, #16]
 800a91e:	1b12      	subs	r2, r2, r4
 800a920:	d10e      	bne.n	800a940 <__mcmp+0x28>
 800a922:	f100 0314 	add.w	r3, r0, #20
 800a926:	3114      	adds	r1, #20
 800a928:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a92c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a930:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a934:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a938:	42a5      	cmp	r5, r4
 800a93a:	d003      	beq.n	800a944 <__mcmp+0x2c>
 800a93c:	d305      	bcc.n	800a94a <__mcmp+0x32>
 800a93e:	2201      	movs	r2, #1
 800a940:	4610      	mov	r0, r2
 800a942:	bd30      	pop	{r4, r5, pc}
 800a944:	4283      	cmp	r3, r0
 800a946:	d3f3      	bcc.n	800a930 <__mcmp+0x18>
 800a948:	e7fa      	b.n	800a940 <__mcmp+0x28>
 800a94a:	f04f 32ff 	mov.w	r2, #4294967295
 800a94e:	e7f7      	b.n	800a940 <__mcmp+0x28>

0800a950 <__mdiff>:
 800a950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	460c      	mov	r4, r1
 800a956:	4606      	mov	r6, r0
 800a958:	4611      	mov	r1, r2
 800a95a:	4620      	mov	r0, r4
 800a95c:	4690      	mov	r8, r2
 800a95e:	f7ff ffdb 	bl	800a918 <__mcmp>
 800a962:	1e05      	subs	r5, r0, #0
 800a964:	d110      	bne.n	800a988 <__mdiff+0x38>
 800a966:	4629      	mov	r1, r5
 800a968:	4630      	mov	r0, r6
 800a96a:	f7ff fd53 	bl	800a414 <_Balloc>
 800a96e:	b930      	cbnz	r0, 800a97e <__mdiff+0x2e>
 800a970:	4b3a      	ldr	r3, [pc, #232]	; (800aa5c <__mdiff+0x10c>)
 800a972:	4602      	mov	r2, r0
 800a974:	f240 2132 	movw	r1, #562	; 0x232
 800a978:	4839      	ldr	r0, [pc, #228]	; (800aa60 <__mdiff+0x110>)
 800a97a:	f001 f853 	bl	800ba24 <__assert_func>
 800a97e:	2301      	movs	r3, #1
 800a980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	bfa4      	itt	ge
 800a98a:	4643      	movge	r3, r8
 800a98c:	46a0      	movge	r8, r4
 800a98e:	4630      	mov	r0, r6
 800a990:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a994:	bfa6      	itte	ge
 800a996:	461c      	movge	r4, r3
 800a998:	2500      	movge	r5, #0
 800a99a:	2501      	movlt	r5, #1
 800a99c:	f7ff fd3a 	bl	800a414 <_Balloc>
 800a9a0:	b920      	cbnz	r0, 800a9ac <__mdiff+0x5c>
 800a9a2:	4b2e      	ldr	r3, [pc, #184]	; (800aa5c <__mdiff+0x10c>)
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9aa:	e7e5      	b.n	800a978 <__mdiff+0x28>
 800a9ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9b0:	6926      	ldr	r6, [r4, #16]
 800a9b2:	60c5      	str	r5, [r0, #12]
 800a9b4:	f104 0914 	add.w	r9, r4, #20
 800a9b8:	f108 0514 	add.w	r5, r8, #20
 800a9bc:	f100 0e14 	add.w	lr, r0, #20
 800a9c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9c8:	f108 0210 	add.w	r2, r8, #16
 800a9cc:	46f2      	mov	sl, lr
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9d8:	fa1f f883 	uxth.w	r8, r3
 800a9dc:	fa11 f18b 	uxtah	r1, r1, fp
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	eba1 0808 	sub.w	r8, r1, r8
 800a9e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9ee:	fa1f f888 	uxth.w	r8, r8
 800a9f2:	1419      	asrs	r1, r3, #16
 800a9f4:	454e      	cmp	r6, r9
 800a9f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9fa:	f84a 3b04 	str.w	r3, [sl], #4
 800a9fe:	d8e7      	bhi.n	800a9d0 <__mdiff+0x80>
 800aa00:	1b33      	subs	r3, r6, r4
 800aa02:	3b15      	subs	r3, #21
 800aa04:	f023 0303 	bic.w	r3, r3, #3
 800aa08:	3304      	adds	r3, #4
 800aa0a:	3415      	adds	r4, #21
 800aa0c:	42a6      	cmp	r6, r4
 800aa0e:	bf38      	it	cc
 800aa10:	2304      	movcc	r3, #4
 800aa12:	441d      	add	r5, r3
 800aa14:	4473      	add	r3, lr
 800aa16:	469e      	mov	lr, r3
 800aa18:	462e      	mov	r6, r5
 800aa1a:	4566      	cmp	r6, ip
 800aa1c:	d30e      	bcc.n	800aa3c <__mdiff+0xec>
 800aa1e:	f10c 0203 	add.w	r2, ip, #3
 800aa22:	1b52      	subs	r2, r2, r5
 800aa24:	f022 0203 	bic.w	r2, r2, #3
 800aa28:	3d03      	subs	r5, #3
 800aa2a:	45ac      	cmp	ip, r5
 800aa2c:	bf38      	it	cc
 800aa2e:	2200      	movcc	r2, #0
 800aa30:	441a      	add	r2, r3
 800aa32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa36:	b17b      	cbz	r3, 800aa58 <__mdiff+0x108>
 800aa38:	6107      	str	r7, [r0, #16]
 800aa3a:	e7a3      	b.n	800a984 <__mdiff+0x34>
 800aa3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa40:	fa11 f288 	uxtah	r2, r1, r8
 800aa44:	1414      	asrs	r4, r2, #16
 800aa46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa4a:	b292      	uxth	r2, r2
 800aa4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa50:	f84e 2b04 	str.w	r2, [lr], #4
 800aa54:	1421      	asrs	r1, r4, #16
 800aa56:	e7e0      	b.n	800aa1a <__mdiff+0xca>
 800aa58:	3f01      	subs	r7, #1
 800aa5a:	e7ea      	b.n	800aa32 <__mdiff+0xe2>
 800aa5c:	0800c425 	.word	0x0800c425
 800aa60:	0800c436 	.word	0x0800c436

0800aa64 <__d2b>:
 800aa64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	4689      	mov	r9, r1
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	ec57 6b10 	vmov	r6, r7, d0
 800aa70:	4690      	mov	r8, r2
 800aa72:	f7ff fccf 	bl	800a414 <_Balloc>
 800aa76:	4604      	mov	r4, r0
 800aa78:	b930      	cbnz	r0, 800aa88 <__d2b+0x24>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <__d2b+0xb0>)
 800aa7e:	4826      	ldr	r0, [pc, #152]	; (800ab18 <__d2b+0xb4>)
 800aa80:	f240 310a 	movw	r1, #778	; 0x30a
 800aa84:	f000 ffce 	bl	800ba24 <__assert_func>
 800aa88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa90:	bb35      	cbnz	r5, 800aae0 <__d2b+0x7c>
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	d028      	beq.n	800aaea <__d2b+0x86>
 800aa98:	4668      	mov	r0, sp
 800aa9a:	9600      	str	r6, [sp, #0]
 800aa9c:	f7ff fd82 	bl	800a5a4 <__lo0bits>
 800aaa0:	9900      	ldr	r1, [sp, #0]
 800aaa2:	b300      	cbz	r0, 800aae6 <__d2b+0x82>
 800aaa4:	9a01      	ldr	r2, [sp, #4]
 800aaa6:	f1c0 0320 	rsb	r3, r0, #32
 800aaaa:	fa02 f303 	lsl.w	r3, r2, r3
 800aaae:	430b      	orrs	r3, r1
 800aab0:	40c2      	lsrs	r2, r0
 800aab2:	6163      	str	r3, [r4, #20]
 800aab4:	9201      	str	r2, [sp, #4]
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	61a3      	str	r3, [r4, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	bf14      	ite	ne
 800aabe:	2202      	movne	r2, #2
 800aac0:	2201      	moveq	r2, #1
 800aac2:	6122      	str	r2, [r4, #16]
 800aac4:	b1d5      	cbz	r5, 800aafc <__d2b+0x98>
 800aac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aaca:	4405      	add	r5, r0
 800aacc:	f8c9 5000 	str.w	r5, [r9]
 800aad0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aad4:	f8c8 0000 	str.w	r0, [r8]
 800aad8:	4620      	mov	r0, r4
 800aada:	b003      	add	sp, #12
 800aadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aae4:	e7d5      	b.n	800aa92 <__d2b+0x2e>
 800aae6:	6161      	str	r1, [r4, #20]
 800aae8:	e7e5      	b.n	800aab6 <__d2b+0x52>
 800aaea:	a801      	add	r0, sp, #4
 800aaec:	f7ff fd5a 	bl	800a5a4 <__lo0bits>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	6163      	str	r3, [r4, #20]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	6122      	str	r2, [r4, #16]
 800aaf8:	3020      	adds	r0, #32
 800aafa:	e7e3      	b.n	800aac4 <__d2b+0x60>
 800aafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab04:	f8c9 0000 	str.w	r0, [r9]
 800ab08:	6918      	ldr	r0, [r3, #16]
 800ab0a:	f7ff fd2b 	bl	800a564 <__hi0bits>
 800ab0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab12:	e7df      	b.n	800aad4 <__d2b+0x70>
 800ab14:	0800c425 	.word	0x0800c425
 800ab18:	0800c436 	.word	0x0800c436

0800ab1c <_calloc_r>:
 800ab1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab1e:	fba1 2402 	umull	r2, r4, r1, r2
 800ab22:	b94c      	cbnz	r4, 800ab38 <_calloc_r+0x1c>
 800ab24:	4611      	mov	r1, r2
 800ab26:	9201      	str	r2, [sp, #4]
 800ab28:	f7fd fcaa 	bl	8008480 <_malloc_r>
 800ab2c:	9a01      	ldr	r2, [sp, #4]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	b930      	cbnz	r0, 800ab40 <_calloc_r+0x24>
 800ab32:	4628      	mov	r0, r5
 800ab34:	b003      	add	sp, #12
 800ab36:	bd30      	pop	{r4, r5, pc}
 800ab38:	220c      	movs	r2, #12
 800ab3a:	6002      	str	r2, [r0, #0]
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	e7f8      	b.n	800ab32 <_calloc_r+0x16>
 800ab40:	4621      	mov	r1, r4
 800ab42:	f7fd fc74 	bl	800842e <memset>
 800ab46:	e7f4      	b.n	800ab32 <_calloc_r+0x16>

0800ab48 <_free_r>:
 800ab48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab4a:	2900      	cmp	r1, #0
 800ab4c:	d044      	beq.n	800abd8 <_free_r+0x90>
 800ab4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab52:	9001      	str	r0, [sp, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f1a1 0404 	sub.w	r4, r1, #4
 800ab5a:	bfb8      	it	lt
 800ab5c:	18e4      	addlt	r4, r4, r3
 800ab5e:	f7ff fc4d 	bl	800a3fc <__malloc_lock>
 800ab62:	4a1e      	ldr	r2, [pc, #120]	; (800abdc <_free_r+0x94>)
 800ab64:	9801      	ldr	r0, [sp, #4]
 800ab66:	6813      	ldr	r3, [r2, #0]
 800ab68:	b933      	cbnz	r3, 800ab78 <_free_r+0x30>
 800ab6a:	6063      	str	r3, [r4, #4]
 800ab6c:	6014      	str	r4, [r2, #0]
 800ab6e:	b003      	add	sp, #12
 800ab70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab74:	f7ff bc48 	b.w	800a408 <__malloc_unlock>
 800ab78:	42a3      	cmp	r3, r4
 800ab7a:	d908      	bls.n	800ab8e <_free_r+0x46>
 800ab7c:	6825      	ldr	r5, [r4, #0]
 800ab7e:	1961      	adds	r1, r4, r5
 800ab80:	428b      	cmp	r3, r1
 800ab82:	bf01      	itttt	eq
 800ab84:	6819      	ldreq	r1, [r3, #0]
 800ab86:	685b      	ldreq	r3, [r3, #4]
 800ab88:	1949      	addeq	r1, r1, r5
 800ab8a:	6021      	streq	r1, [r4, #0]
 800ab8c:	e7ed      	b.n	800ab6a <_free_r+0x22>
 800ab8e:	461a      	mov	r2, r3
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	b10b      	cbz	r3, 800ab98 <_free_r+0x50>
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	d9fa      	bls.n	800ab8e <_free_r+0x46>
 800ab98:	6811      	ldr	r1, [r2, #0]
 800ab9a:	1855      	adds	r5, r2, r1
 800ab9c:	42a5      	cmp	r5, r4
 800ab9e:	d10b      	bne.n	800abb8 <_free_r+0x70>
 800aba0:	6824      	ldr	r4, [r4, #0]
 800aba2:	4421      	add	r1, r4
 800aba4:	1854      	adds	r4, r2, r1
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	6011      	str	r1, [r2, #0]
 800abaa:	d1e0      	bne.n	800ab6e <_free_r+0x26>
 800abac:	681c      	ldr	r4, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	6053      	str	r3, [r2, #4]
 800abb2:	4421      	add	r1, r4
 800abb4:	6011      	str	r1, [r2, #0]
 800abb6:	e7da      	b.n	800ab6e <_free_r+0x26>
 800abb8:	d902      	bls.n	800abc0 <_free_r+0x78>
 800abba:	230c      	movs	r3, #12
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	e7d6      	b.n	800ab6e <_free_r+0x26>
 800abc0:	6825      	ldr	r5, [r4, #0]
 800abc2:	1961      	adds	r1, r4, r5
 800abc4:	428b      	cmp	r3, r1
 800abc6:	bf04      	itt	eq
 800abc8:	6819      	ldreq	r1, [r3, #0]
 800abca:	685b      	ldreq	r3, [r3, #4]
 800abcc:	6063      	str	r3, [r4, #4]
 800abce:	bf04      	itt	eq
 800abd0:	1949      	addeq	r1, r1, r5
 800abd2:	6021      	streq	r1, [r4, #0]
 800abd4:	6054      	str	r4, [r2, #4]
 800abd6:	e7ca      	b.n	800ab6e <_free_r+0x26>
 800abd8:	b003      	add	sp, #12
 800abda:	bd30      	pop	{r4, r5, pc}
 800abdc:	200044c0 	.word	0x200044c0

0800abe0 <__sfputc_r>:
 800abe0:	6893      	ldr	r3, [r2, #8]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	b410      	push	{r4}
 800abe8:	6093      	str	r3, [r2, #8]
 800abea:	da08      	bge.n	800abfe <__sfputc_r+0x1e>
 800abec:	6994      	ldr	r4, [r2, #24]
 800abee:	42a3      	cmp	r3, r4
 800abf0:	db01      	blt.n	800abf6 <__sfputc_r+0x16>
 800abf2:	290a      	cmp	r1, #10
 800abf4:	d103      	bne.n	800abfe <__sfputc_r+0x1e>
 800abf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abfa:	f7fe bb49 	b.w	8009290 <__swbuf_r>
 800abfe:	6813      	ldr	r3, [r2, #0]
 800ac00:	1c58      	adds	r0, r3, #1
 800ac02:	6010      	str	r0, [r2, #0]
 800ac04:	7019      	strb	r1, [r3, #0]
 800ac06:	4608      	mov	r0, r1
 800ac08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <__sfputs_r>:
 800ac0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac10:	4606      	mov	r6, r0
 800ac12:	460f      	mov	r7, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	18d5      	adds	r5, r2, r3
 800ac18:	42ac      	cmp	r4, r5
 800ac1a:	d101      	bne.n	800ac20 <__sfputs_r+0x12>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e007      	b.n	800ac30 <__sfputs_r+0x22>
 800ac20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac24:	463a      	mov	r2, r7
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7ff ffda 	bl	800abe0 <__sfputc_r>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d1f3      	bne.n	800ac18 <__sfputs_r+0xa>
 800ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac34 <_vfiprintf_r>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	460d      	mov	r5, r1
 800ac3a:	b09d      	sub	sp, #116	; 0x74
 800ac3c:	4614      	mov	r4, r2
 800ac3e:	4698      	mov	r8, r3
 800ac40:	4606      	mov	r6, r0
 800ac42:	b118      	cbz	r0, 800ac4c <_vfiprintf_r+0x18>
 800ac44:	6983      	ldr	r3, [r0, #24]
 800ac46:	b90b      	cbnz	r3, 800ac4c <_vfiprintf_r+0x18>
 800ac48:	f7fd fb02 	bl	8008250 <__sinit>
 800ac4c:	4b89      	ldr	r3, [pc, #548]	; (800ae74 <_vfiprintf_r+0x240>)
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	d11b      	bne.n	800ac8a <_vfiprintf_r+0x56>
 800ac52:	6875      	ldr	r5, [r6, #4]
 800ac54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac56:	07d9      	lsls	r1, r3, #31
 800ac58:	d405      	bmi.n	800ac66 <_vfiprintf_r+0x32>
 800ac5a:	89ab      	ldrh	r3, [r5, #12]
 800ac5c:	059a      	lsls	r2, r3, #22
 800ac5e:	d402      	bmi.n	800ac66 <_vfiprintf_r+0x32>
 800ac60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac62:	f7fd fbd4 	bl	800840e <__retarget_lock_acquire_recursive>
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	071b      	lsls	r3, r3, #28
 800ac6a:	d501      	bpl.n	800ac70 <_vfiprintf_r+0x3c>
 800ac6c:	692b      	ldr	r3, [r5, #16]
 800ac6e:	b9eb      	cbnz	r3, 800acac <_vfiprintf_r+0x78>
 800ac70:	4629      	mov	r1, r5
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7fe fb70 	bl	8009358 <__swsetup_r>
 800ac78:	b1c0      	cbz	r0, 800acac <_vfiprintf_r+0x78>
 800ac7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac7c:	07dc      	lsls	r4, r3, #31
 800ac7e:	d50e      	bpl.n	800ac9e <_vfiprintf_r+0x6a>
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	b01d      	add	sp, #116	; 0x74
 800ac86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac8a:	4b7b      	ldr	r3, [pc, #492]	; (800ae78 <_vfiprintf_r+0x244>)
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	d101      	bne.n	800ac94 <_vfiprintf_r+0x60>
 800ac90:	68b5      	ldr	r5, [r6, #8]
 800ac92:	e7df      	b.n	800ac54 <_vfiprintf_r+0x20>
 800ac94:	4b79      	ldr	r3, [pc, #484]	; (800ae7c <_vfiprintf_r+0x248>)
 800ac96:	429d      	cmp	r5, r3
 800ac98:	bf08      	it	eq
 800ac9a:	68f5      	ldreq	r5, [r6, #12]
 800ac9c:	e7da      	b.n	800ac54 <_vfiprintf_r+0x20>
 800ac9e:	89ab      	ldrh	r3, [r5, #12]
 800aca0:	0598      	lsls	r0, r3, #22
 800aca2:	d4ed      	bmi.n	800ac80 <_vfiprintf_r+0x4c>
 800aca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aca6:	f7fd fbb3 	bl	8008410 <__retarget_lock_release_recursive>
 800acaa:	e7e9      	b.n	800ac80 <_vfiprintf_r+0x4c>
 800acac:	2300      	movs	r3, #0
 800acae:	9309      	str	r3, [sp, #36]	; 0x24
 800acb0:	2320      	movs	r3, #32
 800acb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800acba:	2330      	movs	r3, #48	; 0x30
 800acbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae80 <_vfiprintf_r+0x24c>
 800acc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acc4:	f04f 0901 	mov.w	r9, #1
 800acc8:	4623      	mov	r3, r4
 800acca:	469a      	mov	sl, r3
 800accc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acd0:	b10a      	cbz	r2, 800acd6 <_vfiprintf_r+0xa2>
 800acd2:	2a25      	cmp	r2, #37	; 0x25
 800acd4:	d1f9      	bne.n	800acca <_vfiprintf_r+0x96>
 800acd6:	ebba 0b04 	subs.w	fp, sl, r4
 800acda:	d00b      	beq.n	800acf4 <_vfiprintf_r+0xc0>
 800acdc:	465b      	mov	r3, fp
 800acde:	4622      	mov	r2, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	4630      	mov	r0, r6
 800ace4:	f7ff ff93 	bl	800ac0e <__sfputs_r>
 800ace8:	3001      	adds	r0, #1
 800acea:	f000 80aa 	beq.w	800ae42 <_vfiprintf_r+0x20e>
 800acee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf0:	445a      	add	r2, fp
 800acf2:	9209      	str	r2, [sp, #36]	; 0x24
 800acf4:	f89a 3000 	ldrb.w	r3, [sl]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80a2 	beq.w	800ae42 <_vfiprintf_r+0x20e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	f04f 32ff 	mov.w	r2, #4294967295
 800ad04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad08:	f10a 0a01 	add.w	sl, sl, #1
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	9307      	str	r3, [sp, #28]
 800ad10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad14:	931a      	str	r3, [sp, #104]	; 0x68
 800ad16:	4654      	mov	r4, sl
 800ad18:	2205      	movs	r2, #5
 800ad1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1e:	4858      	ldr	r0, [pc, #352]	; (800ae80 <_vfiprintf_r+0x24c>)
 800ad20:	f7f5 fa7e 	bl	8000220 <memchr>
 800ad24:	9a04      	ldr	r2, [sp, #16]
 800ad26:	b9d8      	cbnz	r0, 800ad60 <_vfiprintf_r+0x12c>
 800ad28:	06d1      	lsls	r1, r2, #27
 800ad2a:	bf44      	itt	mi
 800ad2c:	2320      	movmi	r3, #32
 800ad2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad32:	0713      	lsls	r3, r2, #28
 800ad34:	bf44      	itt	mi
 800ad36:	232b      	movmi	r3, #43	; 0x2b
 800ad38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad40:	2b2a      	cmp	r3, #42	; 0x2a
 800ad42:	d015      	beq.n	800ad70 <_vfiprintf_r+0x13c>
 800ad44:	9a07      	ldr	r2, [sp, #28]
 800ad46:	4654      	mov	r4, sl
 800ad48:	2000      	movs	r0, #0
 800ad4a:	f04f 0c0a 	mov.w	ip, #10
 800ad4e:	4621      	mov	r1, r4
 800ad50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad54:	3b30      	subs	r3, #48	; 0x30
 800ad56:	2b09      	cmp	r3, #9
 800ad58:	d94e      	bls.n	800adf8 <_vfiprintf_r+0x1c4>
 800ad5a:	b1b0      	cbz	r0, 800ad8a <_vfiprintf_r+0x156>
 800ad5c:	9207      	str	r2, [sp, #28]
 800ad5e:	e014      	b.n	800ad8a <_vfiprintf_r+0x156>
 800ad60:	eba0 0308 	sub.w	r3, r0, r8
 800ad64:	fa09 f303 	lsl.w	r3, r9, r3
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	46a2      	mov	sl, r4
 800ad6e:	e7d2      	b.n	800ad16 <_vfiprintf_r+0xe2>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	1d19      	adds	r1, r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	9103      	str	r1, [sp, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfbb      	ittet	lt
 800ad7c:	425b      	neglt	r3, r3
 800ad7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad82:	9307      	strge	r3, [sp, #28]
 800ad84:	9307      	strlt	r3, [sp, #28]
 800ad86:	bfb8      	it	lt
 800ad88:	9204      	strlt	r2, [sp, #16]
 800ad8a:	7823      	ldrb	r3, [r4, #0]
 800ad8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad8e:	d10c      	bne.n	800adaa <_vfiprintf_r+0x176>
 800ad90:	7863      	ldrb	r3, [r4, #1]
 800ad92:	2b2a      	cmp	r3, #42	; 0x2a
 800ad94:	d135      	bne.n	800ae02 <_vfiprintf_r+0x1ce>
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	9203      	str	r2, [sp, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfb8      	it	lt
 800ada2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ada6:	3402      	adds	r4, #2
 800ada8:	9305      	str	r3, [sp, #20]
 800adaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae90 <_vfiprintf_r+0x25c>
 800adae:	7821      	ldrb	r1, [r4, #0]
 800adb0:	2203      	movs	r2, #3
 800adb2:	4650      	mov	r0, sl
 800adb4:	f7f5 fa34 	bl	8000220 <memchr>
 800adb8:	b140      	cbz	r0, 800adcc <_vfiprintf_r+0x198>
 800adba:	2340      	movs	r3, #64	; 0x40
 800adbc:	eba0 000a 	sub.w	r0, r0, sl
 800adc0:	fa03 f000 	lsl.w	r0, r3, r0
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	4303      	orrs	r3, r0
 800adc8:	3401      	adds	r4, #1
 800adca:	9304      	str	r3, [sp, #16]
 800adcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add0:	482c      	ldr	r0, [pc, #176]	; (800ae84 <_vfiprintf_r+0x250>)
 800add2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800add6:	2206      	movs	r2, #6
 800add8:	f7f5 fa22 	bl	8000220 <memchr>
 800addc:	2800      	cmp	r0, #0
 800adde:	d03f      	beq.n	800ae60 <_vfiprintf_r+0x22c>
 800ade0:	4b29      	ldr	r3, [pc, #164]	; (800ae88 <_vfiprintf_r+0x254>)
 800ade2:	bb1b      	cbnz	r3, 800ae2c <_vfiprintf_r+0x1f8>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	3307      	adds	r3, #7
 800ade8:	f023 0307 	bic.w	r3, r3, #7
 800adec:	3308      	adds	r3, #8
 800adee:	9303      	str	r3, [sp, #12]
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	443b      	add	r3, r7
 800adf4:	9309      	str	r3, [sp, #36]	; 0x24
 800adf6:	e767      	b.n	800acc8 <_vfiprintf_r+0x94>
 800adf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800adfc:	460c      	mov	r4, r1
 800adfe:	2001      	movs	r0, #1
 800ae00:	e7a5      	b.n	800ad4e <_vfiprintf_r+0x11a>
 800ae02:	2300      	movs	r3, #0
 800ae04:	3401      	adds	r4, #1
 800ae06:	9305      	str	r3, [sp, #20]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f04f 0c0a 	mov.w	ip, #10
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae14:	3a30      	subs	r2, #48	; 0x30
 800ae16:	2a09      	cmp	r2, #9
 800ae18:	d903      	bls.n	800ae22 <_vfiprintf_r+0x1ee>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0c5      	beq.n	800adaa <_vfiprintf_r+0x176>
 800ae1e:	9105      	str	r1, [sp, #20]
 800ae20:	e7c3      	b.n	800adaa <_vfiprintf_r+0x176>
 800ae22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae26:	4604      	mov	r4, r0
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e7f0      	b.n	800ae0e <_vfiprintf_r+0x1da>
 800ae2c:	ab03      	add	r3, sp, #12
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	462a      	mov	r2, r5
 800ae32:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <_vfiprintf_r+0x258>)
 800ae34:	a904      	add	r1, sp, #16
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7fd fc36 	bl	80086a8 <_printf_float>
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	1c78      	adds	r0, r7, #1
 800ae40:	d1d6      	bne.n	800adf0 <_vfiprintf_r+0x1bc>
 800ae42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae44:	07d9      	lsls	r1, r3, #31
 800ae46:	d405      	bmi.n	800ae54 <_vfiprintf_r+0x220>
 800ae48:	89ab      	ldrh	r3, [r5, #12]
 800ae4a:	059a      	lsls	r2, r3, #22
 800ae4c:	d402      	bmi.n	800ae54 <_vfiprintf_r+0x220>
 800ae4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae50:	f7fd fade 	bl	8008410 <__retarget_lock_release_recursive>
 800ae54:	89ab      	ldrh	r3, [r5, #12]
 800ae56:	065b      	lsls	r3, r3, #25
 800ae58:	f53f af12 	bmi.w	800ac80 <_vfiprintf_r+0x4c>
 800ae5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae5e:	e711      	b.n	800ac84 <_vfiprintf_r+0x50>
 800ae60:	ab03      	add	r3, sp, #12
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	462a      	mov	r2, r5
 800ae66:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <_vfiprintf_r+0x258>)
 800ae68:	a904      	add	r1, sp, #16
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7fd fec0 	bl	8008bf0 <_printf_i>
 800ae70:	e7e4      	b.n	800ae3c <_vfiprintf_r+0x208>
 800ae72:	bf00      	nop
 800ae74:	0800c330 	.word	0x0800c330
 800ae78:	0800c350 	.word	0x0800c350
 800ae7c:	0800c310 	.word	0x0800c310
 800ae80:	0800c594 	.word	0x0800c594
 800ae84:	0800c59e 	.word	0x0800c59e
 800ae88:	080086a9 	.word	0x080086a9
 800ae8c:	0800ac0f 	.word	0x0800ac0f
 800ae90:	0800c59a 	.word	0x0800c59a

0800ae94 <__svfiscanf_r>:
 800ae94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae98:	461d      	mov	r5, r3
 800ae9a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ae9c:	07df      	lsls	r7, r3, #31
 800ae9e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aea2:	4606      	mov	r6, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	4692      	mov	sl, r2
 800aea8:	d405      	bmi.n	800aeb6 <__svfiscanf_r+0x22>
 800aeaa:	898b      	ldrh	r3, [r1, #12]
 800aeac:	0598      	lsls	r0, r3, #22
 800aeae:	d402      	bmi.n	800aeb6 <__svfiscanf_r+0x22>
 800aeb0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800aeb2:	f7fd faac 	bl	800840e <__retarget_lock_acquire_recursive>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800aebc:	4ba6      	ldr	r3, [pc, #664]	; (800b158 <__svfiscanf_r+0x2c4>)
 800aebe:	93a0      	str	r3, [sp, #640]	; 0x280
 800aec0:	f10d 0804 	add.w	r8, sp, #4
 800aec4:	4ba5      	ldr	r3, [pc, #660]	; (800b15c <__svfiscanf_r+0x2c8>)
 800aec6:	4fa6      	ldr	r7, [pc, #664]	; (800b160 <__svfiscanf_r+0x2cc>)
 800aec8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b164 <__svfiscanf_r+0x2d0>
 800aecc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aed0:	93a1      	str	r3, [sp, #644]	; 0x284
 800aed2:	9500      	str	r5, [sp, #0]
 800aed4:	f89a 3000 	ldrb.w	r3, [sl]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 8173 	beq.w	800b1c4 <__svfiscanf_r+0x330>
 800aede:	5dd9      	ldrb	r1, [r3, r7]
 800aee0:	f011 0108 	ands.w	r1, r1, #8
 800aee4:	f10a 0501 	add.w	r5, sl, #1
 800aee8:	d019      	beq.n	800af1e <__svfiscanf_r+0x8a>
 800aeea:	6863      	ldr	r3, [r4, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dd0f      	ble.n	800af10 <__svfiscanf_r+0x7c>
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	781a      	ldrb	r2, [r3, #0]
 800aef4:	5cba      	ldrb	r2, [r7, r2]
 800aef6:	0711      	lsls	r1, r2, #28
 800aef8:	d401      	bmi.n	800aefe <__svfiscanf_r+0x6a>
 800aefa:	46aa      	mov	sl, r5
 800aefc:	e7ea      	b.n	800aed4 <__svfiscanf_r+0x40>
 800aefe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af00:	3201      	adds	r2, #1
 800af02:	9245      	str	r2, [sp, #276]	; 0x114
 800af04:	6862      	ldr	r2, [r4, #4]
 800af06:	3301      	adds	r3, #1
 800af08:	3a01      	subs	r2, #1
 800af0a:	6062      	str	r2, [r4, #4]
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	e7ec      	b.n	800aeea <__svfiscanf_r+0x56>
 800af10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af12:	4621      	mov	r1, r4
 800af14:	4630      	mov	r0, r6
 800af16:	4798      	blx	r3
 800af18:	2800      	cmp	r0, #0
 800af1a:	d0e9      	beq.n	800aef0 <__svfiscanf_r+0x5c>
 800af1c:	e7ed      	b.n	800aefa <__svfiscanf_r+0x66>
 800af1e:	2b25      	cmp	r3, #37	; 0x25
 800af20:	d012      	beq.n	800af48 <__svfiscanf_r+0xb4>
 800af22:	469a      	mov	sl, r3
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f340 8095 	ble.w	800b056 <__svfiscanf_r+0x1c2>
 800af2c:	6822      	ldr	r2, [r4, #0]
 800af2e:	7813      	ldrb	r3, [r2, #0]
 800af30:	4553      	cmp	r3, sl
 800af32:	f040 8147 	bne.w	800b1c4 <__svfiscanf_r+0x330>
 800af36:	6863      	ldr	r3, [r4, #4]
 800af38:	3b01      	subs	r3, #1
 800af3a:	6063      	str	r3, [r4, #4]
 800af3c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af3e:	3201      	adds	r2, #1
 800af40:	3301      	adds	r3, #1
 800af42:	6022      	str	r2, [r4, #0]
 800af44:	9345      	str	r3, [sp, #276]	; 0x114
 800af46:	e7d8      	b.n	800aefa <__svfiscanf_r+0x66>
 800af48:	9141      	str	r1, [sp, #260]	; 0x104
 800af4a:	9143      	str	r1, [sp, #268]	; 0x10c
 800af4c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800af50:	2b2a      	cmp	r3, #42	; 0x2a
 800af52:	bf02      	ittt	eq
 800af54:	2310      	moveq	r3, #16
 800af56:	9341      	streq	r3, [sp, #260]	; 0x104
 800af58:	f10a 0502 	addeq.w	r5, sl, #2
 800af5c:	220a      	movs	r2, #10
 800af5e:	46aa      	mov	sl, r5
 800af60:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800af64:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800af68:	2b09      	cmp	r3, #9
 800af6a:	d91e      	bls.n	800afaa <__svfiscanf_r+0x116>
 800af6c:	487d      	ldr	r0, [pc, #500]	; (800b164 <__svfiscanf_r+0x2d0>)
 800af6e:	2203      	movs	r2, #3
 800af70:	f7f5 f956 	bl	8000220 <memchr>
 800af74:	b140      	cbz	r0, 800af88 <__svfiscanf_r+0xf4>
 800af76:	2301      	movs	r3, #1
 800af78:	eba0 0009 	sub.w	r0, r0, r9
 800af7c:	fa03 f000 	lsl.w	r0, r3, r0
 800af80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af82:	4318      	orrs	r0, r3
 800af84:	9041      	str	r0, [sp, #260]	; 0x104
 800af86:	4655      	mov	r5, sl
 800af88:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af8c:	2b78      	cmp	r3, #120	; 0x78
 800af8e:	d807      	bhi.n	800afa0 <__svfiscanf_r+0x10c>
 800af90:	2b57      	cmp	r3, #87	; 0x57
 800af92:	d811      	bhi.n	800afb8 <__svfiscanf_r+0x124>
 800af94:	2b25      	cmp	r3, #37	; 0x25
 800af96:	d0c4      	beq.n	800af22 <__svfiscanf_r+0x8e>
 800af98:	d858      	bhi.n	800b04c <__svfiscanf_r+0x1b8>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 80c8 	beq.w	800b130 <__svfiscanf_r+0x29c>
 800afa0:	2303      	movs	r3, #3
 800afa2:	9347      	str	r3, [sp, #284]	; 0x11c
 800afa4:	230a      	movs	r3, #10
 800afa6:	9342      	str	r3, [sp, #264]	; 0x108
 800afa8:	e07c      	b.n	800b0a4 <__svfiscanf_r+0x210>
 800afaa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800afac:	fb02 1103 	mla	r1, r2, r3, r1
 800afb0:	3930      	subs	r1, #48	; 0x30
 800afb2:	9143      	str	r1, [sp, #268]	; 0x10c
 800afb4:	4655      	mov	r5, sl
 800afb6:	e7d2      	b.n	800af5e <__svfiscanf_r+0xca>
 800afb8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800afbc:	2a20      	cmp	r2, #32
 800afbe:	d8ef      	bhi.n	800afa0 <__svfiscanf_r+0x10c>
 800afc0:	a101      	add	r1, pc, #4	; (adr r1, 800afc8 <__svfiscanf_r+0x134>)
 800afc2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800b08f 	.word	0x0800b08f
 800afcc:	0800afa1 	.word	0x0800afa1
 800afd0:	0800afa1 	.word	0x0800afa1
 800afd4:	0800b0ed 	.word	0x0800b0ed
 800afd8:	0800afa1 	.word	0x0800afa1
 800afdc:	0800afa1 	.word	0x0800afa1
 800afe0:	0800afa1 	.word	0x0800afa1
 800afe4:	0800afa1 	.word	0x0800afa1
 800afe8:	0800afa1 	.word	0x0800afa1
 800afec:	0800afa1 	.word	0x0800afa1
 800aff0:	0800afa1 	.word	0x0800afa1
 800aff4:	0800b103 	.word	0x0800b103
 800aff8:	0800b0d9 	.word	0x0800b0d9
 800affc:	0800b053 	.word	0x0800b053
 800b000:	0800b053 	.word	0x0800b053
 800b004:	0800b053 	.word	0x0800b053
 800b008:	0800afa1 	.word	0x0800afa1
 800b00c:	0800b0dd 	.word	0x0800b0dd
 800b010:	0800afa1 	.word	0x0800afa1
 800b014:	0800afa1 	.word	0x0800afa1
 800b018:	0800afa1 	.word	0x0800afa1
 800b01c:	0800afa1 	.word	0x0800afa1
 800b020:	0800b113 	.word	0x0800b113
 800b024:	0800b0e5 	.word	0x0800b0e5
 800b028:	0800b087 	.word	0x0800b087
 800b02c:	0800afa1 	.word	0x0800afa1
 800b030:	0800afa1 	.word	0x0800afa1
 800b034:	0800b10f 	.word	0x0800b10f
 800b038:	0800afa1 	.word	0x0800afa1
 800b03c:	0800b0d9 	.word	0x0800b0d9
 800b040:	0800afa1 	.word	0x0800afa1
 800b044:	0800afa1 	.word	0x0800afa1
 800b048:	0800b08f 	.word	0x0800b08f
 800b04c:	3b45      	subs	r3, #69	; 0x45
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d8a6      	bhi.n	800afa0 <__svfiscanf_r+0x10c>
 800b052:	2305      	movs	r3, #5
 800b054:	e025      	b.n	800b0a2 <__svfiscanf_r+0x20e>
 800b056:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b058:	4621      	mov	r1, r4
 800b05a:	4630      	mov	r0, r6
 800b05c:	4798      	blx	r3
 800b05e:	2800      	cmp	r0, #0
 800b060:	f43f af64 	beq.w	800af2c <__svfiscanf_r+0x98>
 800b064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b066:	07da      	lsls	r2, r3, #31
 800b068:	f140 80a4 	bpl.w	800b1b4 <__svfiscanf_r+0x320>
 800b06c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b06e:	2800      	cmp	r0, #0
 800b070:	d067      	beq.n	800b142 <__svfiscanf_r+0x2ae>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b078:	bf18      	it	ne
 800b07a:	f04f 30ff 	movne.w	r0, #4294967295
 800b07e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b086:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b088:	f042 0220 	orr.w	r2, r2, #32
 800b08c:	9241      	str	r2, [sp, #260]	; 0x104
 800b08e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b094:	9241      	str	r2, [sp, #260]	; 0x104
 800b096:	2210      	movs	r2, #16
 800b098:	2b6f      	cmp	r3, #111	; 0x6f
 800b09a:	9242      	str	r2, [sp, #264]	; 0x108
 800b09c:	bf34      	ite	cc
 800b09e:	2303      	movcc	r3, #3
 800b0a0:	2304      	movcs	r3, #4
 800b0a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b0a4:	6863      	ldr	r3, [r4, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd4e      	ble.n	800b148 <__svfiscanf_r+0x2b4>
 800b0aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0ac:	065b      	lsls	r3, r3, #25
 800b0ae:	d404      	bmi.n	800b0ba <__svfiscanf_r+0x226>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	5cba      	ldrb	r2, [r7, r2]
 800b0b6:	0710      	lsls	r0, r2, #28
 800b0b8:	d456      	bmi.n	800b168 <__svfiscanf_r+0x2d4>
 800b0ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	dc65      	bgt.n	800b18c <__svfiscanf_r+0x2f8>
 800b0c0:	466b      	mov	r3, sp
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	a941      	add	r1, sp, #260	; 0x104
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f000 f8b2 	bl	800b230 <_scanf_chars>
 800b0cc:	2801      	cmp	r0, #1
 800b0ce:	d079      	beq.n	800b1c4 <__svfiscanf_r+0x330>
 800b0d0:	2802      	cmp	r0, #2
 800b0d2:	f47f af12 	bne.w	800aefa <__svfiscanf_r+0x66>
 800b0d6:	e7c5      	b.n	800b064 <__svfiscanf_r+0x1d0>
 800b0d8:	220a      	movs	r2, #10
 800b0da:	e7dd      	b.n	800b098 <__svfiscanf_r+0x204>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9342      	str	r3, [sp, #264]	; 0x108
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e7de      	b.n	800b0a2 <__svfiscanf_r+0x20e>
 800b0e4:	2308      	movs	r3, #8
 800b0e6:	9342      	str	r3, [sp, #264]	; 0x108
 800b0e8:	2304      	movs	r3, #4
 800b0ea:	e7da      	b.n	800b0a2 <__svfiscanf_r+0x20e>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	f000 fa96 	bl	800b620 <__sccl>
 800b0f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fa:	9341      	str	r3, [sp, #260]	; 0x104
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	2301      	movs	r3, #1
 800b100:	e7cf      	b.n	800b0a2 <__svfiscanf_r+0x20e>
 800b102:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b108:	9341      	str	r3, [sp, #260]	; 0x104
 800b10a:	2300      	movs	r3, #0
 800b10c:	e7c9      	b.n	800b0a2 <__svfiscanf_r+0x20e>
 800b10e:	2302      	movs	r3, #2
 800b110:	e7c7      	b.n	800b0a2 <__svfiscanf_r+0x20e>
 800b112:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b114:	06c3      	lsls	r3, r0, #27
 800b116:	f53f aef0 	bmi.w	800aefa <__svfiscanf_r+0x66>
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b11e:	1d19      	adds	r1, r3, #4
 800b120:	9100      	str	r1, [sp, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f010 0f01 	tst.w	r0, #1
 800b128:	bf14      	ite	ne
 800b12a:	801a      	strhne	r2, [r3, #0]
 800b12c:	601a      	streq	r2, [r3, #0]
 800b12e:	e6e4      	b.n	800aefa <__svfiscanf_r+0x66>
 800b130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b132:	07d8      	lsls	r0, r3, #31
 800b134:	d405      	bmi.n	800b142 <__svfiscanf_r+0x2ae>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	0599      	lsls	r1, r3, #22
 800b13a:	d402      	bmi.n	800b142 <__svfiscanf_r+0x2ae>
 800b13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13e:	f7fd f967 	bl	8008410 <__retarget_lock_release_recursive>
 800b142:	f04f 30ff 	mov.w	r0, #4294967295
 800b146:	e79a      	b.n	800b07e <__svfiscanf_r+0x1ea>
 800b148:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b14a:	4621      	mov	r1, r4
 800b14c:	4630      	mov	r0, r6
 800b14e:	4798      	blx	r3
 800b150:	2800      	cmp	r0, #0
 800b152:	d0aa      	beq.n	800b0aa <__svfiscanf_r+0x216>
 800b154:	e786      	b.n	800b064 <__svfiscanf_r+0x1d0>
 800b156:	bf00      	nop
 800b158:	0800b8f5 	.word	0x0800b8f5
 800b15c:	0800b50d 	.word	0x0800b50d
 800b160:	0800c5fd 	.word	0x0800c5fd
 800b164:	0800c59a 	.word	0x0800c59a
 800b168:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b16a:	3201      	adds	r2, #1
 800b16c:	9245      	str	r2, [sp, #276]	; 0x114
 800b16e:	6862      	ldr	r2, [r4, #4]
 800b170:	3a01      	subs	r2, #1
 800b172:	2a00      	cmp	r2, #0
 800b174:	6062      	str	r2, [r4, #4]
 800b176:	dd02      	ble.n	800b17e <__svfiscanf_r+0x2ea>
 800b178:	3301      	adds	r3, #1
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	e798      	b.n	800b0b0 <__svfiscanf_r+0x21c>
 800b17e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b180:	4621      	mov	r1, r4
 800b182:	4630      	mov	r0, r6
 800b184:	4798      	blx	r3
 800b186:	2800      	cmp	r0, #0
 800b188:	d092      	beq.n	800b0b0 <__svfiscanf_r+0x21c>
 800b18a:	e76b      	b.n	800b064 <__svfiscanf_r+0x1d0>
 800b18c:	2b04      	cmp	r3, #4
 800b18e:	dc06      	bgt.n	800b19e <__svfiscanf_r+0x30a>
 800b190:	466b      	mov	r3, sp
 800b192:	4622      	mov	r2, r4
 800b194:	a941      	add	r1, sp, #260	; 0x104
 800b196:	4630      	mov	r0, r6
 800b198:	f000 f8a4 	bl	800b2e4 <_scanf_i>
 800b19c:	e796      	b.n	800b0cc <__svfiscanf_r+0x238>
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <__svfiscanf_r+0x348>)
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f43f aeaa 	beq.w	800aefa <__svfiscanf_r+0x66>
 800b1a6:	466b      	mov	r3, sp
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	a941      	add	r1, sp, #260	; 0x104
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f3af 8000 	nop.w
 800b1b2:	e78b      	b.n	800b0cc <__svfiscanf_r+0x238>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	0599      	lsls	r1, r3, #22
 800b1b8:	f53f af58 	bmi.w	800b06c <__svfiscanf_r+0x1d8>
 800b1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1be:	f7fd f927 	bl	8008410 <__retarget_lock_release_recursive>
 800b1c2:	e753      	b.n	800b06c <__svfiscanf_r+0x1d8>
 800b1c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c6:	07da      	lsls	r2, r3, #31
 800b1c8:	d405      	bmi.n	800b1d6 <__svfiscanf_r+0x342>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	059b      	lsls	r3, r3, #22
 800b1ce:	d402      	bmi.n	800b1d6 <__svfiscanf_r+0x342>
 800b1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1d2:	f7fd f91d 	bl	8008410 <__retarget_lock_release_recursive>
 800b1d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1d8:	e751      	b.n	800b07e <__svfiscanf_r+0x1ea>
 800b1da:	bf00      	nop
 800b1dc:	00000000 	.word	0x00000000

0800b1e0 <_vfiscanf_r>:
 800b1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	b138      	cbz	r0, 800b1f8 <_vfiscanf_r+0x18>
 800b1e8:	6981      	ldr	r1, [r0, #24]
 800b1ea:	b929      	cbnz	r1, 800b1f8 <_vfiscanf_r+0x18>
 800b1ec:	e9cd 2300 	strd	r2, r3, [sp]
 800b1f0:	f7fd f82e 	bl	8008250 <__sinit>
 800b1f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1f8:	490a      	ldr	r1, [pc, #40]	; (800b224 <_vfiscanf_r+0x44>)
 800b1fa:	428c      	cmp	r4, r1
 800b1fc:	d107      	bne.n	800b20e <_vfiscanf_r+0x2e>
 800b1fe:	686c      	ldr	r4, [r5, #4]
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	b003      	add	sp, #12
 800b206:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b20a:	f7ff be43 	b.w	800ae94 <__svfiscanf_r>
 800b20e:	4906      	ldr	r1, [pc, #24]	; (800b228 <_vfiscanf_r+0x48>)
 800b210:	428c      	cmp	r4, r1
 800b212:	d101      	bne.n	800b218 <_vfiscanf_r+0x38>
 800b214:	68ac      	ldr	r4, [r5, #8]
 800b216:	e7f3      	b.n	800b200 <_vfiscanf_r+0x20>
 800b218:	4904      	ldr	r1, [pc, #16]	; (800b22c <_vfiscanf_r+0x4c>)
 800b21a:	428c      	cmp	r4, r1
 800b21c:	bf08      	it	eq
 800b21e:	68ec      	ldreq	r4, [r5, #12]
 800b220:	e7ee      	b.n	800b200 <_vfiscanf_r+0x20>
 800b222:	bf00      	nop
 800b224:	0800c330 	.word	0x0800c330
 800b228:	0800c350 	.word	0x0800c350
 800b22c:	0800c310 	.word	0x0800c310

0800b230 <_scanf_chars>:
 800b230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b234:	4615      	mov	r5, r2
 800b236:	688a      	ldr	r2, [r1, #8]
 800b238:	4680      	mov	r8, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	b932      	cbnz	r2, 800b24c <_scanf_chars+0x1c>
 800b23e:	698a      	ldr	r2, [r1, #24]
 800b240:	2a00      	cmp	r2, #0
 800b242:	bf0c      	ite	eq
 800b244:	2201      	moveq	r2, #1
 800b246:	f04f 32ff 	movne.w	r2, #4294967295
 800b24a:	608a      	str	r2, [r1, #8]
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b2e0 <_scanf_chars+0xb0>
 800b252:	06d1      	lsls	r1, r2, #27
 800b254:	bf5f      	itttt	pl
 800b256:	681a      	ldrpl	r2, [r3, #0]
 800b258:	1d11      	addpl	r1, r2, #4
 800b25a:	6019      	strpl	r1, [r3, #0]
 800b25c:	6816      	ldrpl	r6, [r2, #0]
 800b25e:	2700      	movs	r7, #0
 800b260:	69a0      	ldr	r0, [r4, #24]
 800b262:	b188      	cbz	r0, 800b288 <_scanf_chars+0x58>
 800b264:	2801      	cmp	r0, #1
 800b266:	d107      	bne.n	800b278 <_scanf_chars+0x48>
 800b268:	682a      	ldr	r2, [r5, #0]
 800b26a:	7811      	ldrb	r1, [r2, #0]
 800b26c:	6962      	ldr	r2, [r4, #20]
 800b26e:	5c52      	ldrb	r2, [r2, r1]
 800b270:	b952      	cbnz	r2, 800b288 <_scanf_chars+0x58>
 800b272:	2f00      	cmp	r7, #0
 800b274:	d031      	beq.n	800b2da <_scanf_chars+0xaa>
 800b276:	e022      	b.n	800b2be <_scanf_chars+0x8e>
 800b278:	2802      	cmp	r0, #2
 800b27a:	d120      	bne.n	800b2be <_scanf_chars+0x8e>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b284:	071b      	lsls	r3, r3, #28
 800b286:	d41a      	bmi.n	800b2be <_scanf_chars+0x8e>
 800b288:	6823      	ldr	r3, [r4, #0]
 800b28a:	06da      	lsls	r2, r3, #27
 800b28c:	bf5e      	ittt	pl
 800b28e:	682b      	ldrpl	r3, [r5, #0]
 800b290:	781b      	ldrbpl	r3, [r3, #0]
 800b292:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b296:	682a      	ldr	r2, [r5, #0]
 800b298:	686b      	ldr	r3, [r5, #4]
 800b29a:	3201      	adds	r2, #1
 800b29c:	602a      	str	r2, [r5, #0]
 800b29e:	68a2      	ldr	r2, [r4, #8]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	3a01      	subs	r2, #1
 800b2a4:	606b      	str	r3, [r5, #4]
 800b2a6:	3701      	adds	r7, #1
 800b2a8:	60a2      	str	r2, [r4, #8]
 800b2aa:	b142      	cbz	r2, 800b2be <_scanf_chars+0x8e>
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dcd7      	bgt.n	800b260 <_scanf_chars+0x30>
 800b2b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	4798      	blx	r3
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d0d0      	beq.n	800b260 <_scanf_chars+0x30>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	f013 0310 	ands.w	r3, r3, #16
 800b2c4:	d105      	bne.n	800b2d2 <_scanf_chars+0xa2>
 800b2c6:	68e2      	ldr	r2, [r4, #12]
 800b2c8:	3201      	adds	r2, #1
 800b2ca:	60e2      	str	r2, [r4, #12]
 800b2cc:	69a2      	ldr	r2, [r4, #24]
 800b2ce:	b102      	cbz	r2, 800b2d2 <_scanf_chars+0xa2>
 800b2d0:	7033      	strb	r3, [r6, #0]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	443b      	add	r3, r7
 800b2d6:	6123      	str	r3, [r4, #16]
 800b2d8:	2000      	movs	r0, #0
 800b2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800c5fd 	.word	0x0800c5fd

0800b2e4 <_scanf_i>:
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4698      	mov	r8, r3
 800b2ea:	4b76      	ldr	r3, [pc, #472]	; (800b4c4 <_scanf_i+0x1e0>)
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	4682      	mov	sl, r0
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	ab03      	add	r3, sp, #12
 800b2fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b2fe:	4b72      	ldr	r3, [pc, #456]	; (800b4c8 <_scanf_i+0x1e4>)
 800b300:	69a1      	ldr	r1, [r4, #24]
 800b302:	4a72      	ldr	r2, [pc, #456]	; (800b4cc <_scanf_i+0x1e8>)
 800b304:	2903      	cmp	r1, #3
 800b306:	bf18      	it	ne
 800b308:	461a      	movne	r2, r3
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	9201      	str	r2, [sp, #4]
 800b30e:	1e5a      	subs	r2, r3, #1
 800b310:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b314:	bf88      	it	hi
 800b316:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b31a:	4627      	mov	r7, r4
 800b31c:	bf82      	ittt	hi
 800b31e:	eb03 0905 	addhi.w	r9, r3, r5
 800b322:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b326:	60a3      	strhi	r3, [r4, #8]
 800b328:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b32c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b330:	bf98      	it	ls
 800b332:	f04f 0900 	movls.w	r9, #0
 800b336:	6023      	str	r3, [r4, #0]
 800b338:	463d      	mov	r5, r7
 800b33a:	f04f 0b00 	mov.w	fp, #0
 800b33e:	6831      	ldr	r1, [r6, #0]
 800b340:	ab03      	add	r3, sp, #12
 800b342:	7809      	ldrb	r1, [r1, #0]
 800b344:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b348:	2202      	movs	r2, #2
 800b34a:	f7f4 ff69 	bl	8000220 <memchr>
 800b34e:	b328      	cbz	r0, 800b39c <_scanf_i+0xb8>
 800b350:	f1bb 0f01 	cmp.w	fp, #1
 800b354:	d159      	bne.n	800b40a <_scanf_i+0x126>
 800b356:	6862      	ldr	r2, [r4, #4]
 800b358:	b92a      	cbnz	r2, 800b366 <_scanf_i+0x82>
 800b35a:	6822      	ldr	r2, [r4, #0]
 800b35c:	2308      	movs	r3, #8
 800b35e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b362:	6063      	str	r3, [r4, #4]
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	6822      	ldr	r2, [r4, #0]
 800b368:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	68a2      	ldr	r2, [r4, #8]
 800b370:	1e51      	subs	r1, r2, #1
 800b372:	60a1      	str	r1, [r4, #8]
 800b374:	b192      	cbz	r2, 800b39c <_scanf_i+0xb8>
 800b376:	6832      	ldr	r2, [r6, #0]
 800b378:	1c51      	adds	r1, r2, #1
 800b37a:	6031      	str	r1, [r6, #0]
 800b37c:	7812      	ldrb	r2, [r2, #0]
 800b37e:	f805 2b01 	strb.w	r2, [r5], #1
 800b382:	6872      	ldr	r2, [r6, #4]
 800b384:	3a01      	subs	r2, #1
 800b386:	2a00      	cmp	r2, #0
 800b388:	6072      	str	r2, [r6, #4]
 800b38a:	dc07      	bgt.n	800b39c <_scanf_i+0xb8>
 800b38c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b390:	4631      	mov	r1, r6
 800b392:	4650      	mov	r0, sl
 800b394:	4790      	blx	r2
 800b396:	2800      	cmp	r0, #0
 800b398:	f040 8085 	bne.w	800b4a6 <_scanf_i+0x1c2>
 800b39c:	f10b 0b01 	add.w	fp, fp, #1
 800b3a0:	f1bb 0f03 	cmp.w	fp, #3
 800b3a4:	d1cb      	bne.n	800b33e <_scanf_i+0x5a>
 800b3a6:	6863      	ldr	r3, [r4, #4]
 800b3a8:	b90b      	cbnz	r3, 800b3ae <_scanf_i+0xca>
 800b3aa:	230a      	movs	r3, #10
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	6863      	ldr	r3, [r4, #4]
 800b3b0:	4947      	ldr	r1, [pc, #284]	; (800b4d0 <_scanf_i+0x1ec>)
 800b3b2:	6960      	ldr	r0, [r4, #20]
 800b3b4:	1ac9      	subs	r1, r1, r3
 800b3b6:	f000 f933 	bl	800b620 <__sccl>
 800b3ba:	f04f 0b00 	mov.w	fp, #0
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d03d      	beq.n	800b442 <_scanf_i+0x15e>
 800b3c6:	6831      	ldr	r1, [r6, #0]
 800b3c8:	6960      	ldr	r0, [r4, #20]
 800b3ca:	f891 c000 	ldrb.w	ip, [r1]
 800b3ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d035      	beq.n	800b442 <_scanf_i+0x15e>
 800b3d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b3da:	d124      	bne.n	800b426 <_scanf_i+0x142>
 800b3dc:	0510      	lsls	r0, r2, #20
 800b3de:	d522      	bpl.n	800b426 <_scanf_i+0x142>
 800b3e0:	f10b 0b01 	add.w	fp, fp, #1
 800b3e4:	f1b9 0f00 	cmp.w	r9, #0
 800b3e8:	d003      	beq.n	800b3f2 <_scanf_i+0x10e>
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3f0:	60a3      	str	r3, [r4, #8]
 800b3f2:	6873      	ldr	r3, [r6, #4]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	6073      	str	r3, [r6, #4]
 800b3fa:	dd1b      	ble.n	800b434 <_scanf_i+0x150>
 800b3fc:	6833      	ldr	r3, [r6, #0]
 800b3fe:	3301      	adds	r3, #1
 800b400:	6033      	str	r3, [r6, #0]
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	3b01      	subs	r3, #1
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	e7d9      	b.n	800b3be <_scanf_i+0xda>
 800b40a:	f1bb 0f02 	cmp.w	fp, #2
 800b40e:	d1ae      	bne.n	800b36e <_scanf_i+0x8a>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b416:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b41a:	d1bf      	bne.n	800b39c <_scanf_i+0xb8>
 800b41c:	2310      	movs	r3, #16
 800b41e:	6063      	str	r3, [r4, #4]
 800b420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b424:	e7a2      	b.n	800b36c <_scanf_i+0x88>
 800b426:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	780b      	ldrb	r3, [r1, #0]
 800b42e:	f805 3b01 	strb.w	r3, [r5], #1
 800b432:	e7de      	b.n	800b3f2 <_scanf_i+0x10e>
 800b434:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b438:	4631      	mov	r1, r6
 800b43a:	4650      	mov	r0, sl
 800b43c:	4798      	blx	r3
 800b43e:	2800      	cmp	r0, #0
 800b440:	d0df      	beq.n	800b402 <_scanf_i+0x11e>
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	05db      	lsls	r3, r3, #23
 800b446:	d50d      	bpl.n	800b464 <_scanf_i+0x180>
 800b448:	42bd      	cmp	r5, r7
 800b44a:	d909      	bls.n	800b460 <_scanf_i+0x17c>
 800b44c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b454:	4632      	mov	r2, r6
 800b456:	4650      	mov	r0, sl
 800b458:	4798      	blx	r3
 800b45a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b45e:	464d      	mov	r5, r9
 800b460:	42bd      	cmp	r5, r7
 800b462:	d02d      	beq.n	800b4c0 <_scanf_i+0x1dc>
 800b464:	6822      	ldr	r2, [r4, #0]
 800b466:	f012 0210 	ands.w	r2, r2, #16
 800b46a:	d113      	bne.n	800b494 <_scanf_i+0x1b0>
 800b46c:	702a      	strb	r2, [r5, #0]
 800b46e:	6863      	ldr	r3, [r4, #4]
 800b470:	9e01      	ldr	r6, [sp, #4]
 800b472:	4639      	mov	r1, r7
 800b474:	4650      	mov	r0, sl
 800b476:	47b0      	blx	r6
 800b478:	6821      	ldr	r1, [r4, #0]
 800b47a:	f8d8 3000 	ldr.w	r3, [r8]
 800b47e:	f011 0f20 	tst.w	r1, #32
 800b482:	d013      	beq.n	800b4ac <_scanf_i+0x1c8>
 800b484:	1d1a      	adds	r2, r3, #4
 800b486:	f8c8 2000 	str.w	r2, [r8]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6018      	str	r0, [r3, #0]
 800b48e:	68e3      	ldr	r3, [r4, #12]
 800b490:	3301      	adds	r3, #1
 800b492:	60e3      	str	r3, [r4, #12]
 800b494:	1bed      	subs	r5, r5, r7
 800b496:	44ab      	add	fp, r5
 800b498:	6925      	ldr	r5, [r4, #16]
 800b49a:	445d      	add	r5, fp
 800b49c:	6125      	str	r5, [r4, #16]
 800b49e:	2000      	movs	r0, #0
 800b4a0:	b007      	add	sp, #28
 800b4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a6:	f04f 0b00 	mov.w	fp, #0
 800b4aa:	e7ca      	b.n	800b442 <_scanf_i+0x15e>
 800b4ac:	1d1a      	adds	r2, r3, #4
 800b4ae:	f8c8 2000 	str.w	r2, [r8]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f011 0f01 	tst.w	r1, #1
 800b4b8:	bf14      	ite	ne
 800b4ba:	8018      	strhne	r0, [r3, #0]
 800b4bc:	6018      	streq	r0, [r3, #0]
 800b4be:	e7e6      	b.n	800b48e <_scanf_i+0x1aa>
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	e7ed      	b.n	800b4a0 <_scanf_i+0x1bc>
 800b4c4:	0800c2ec 	.word	0x0800c2ec
 800b4c8:	0800b87d 	.word	0x0800b87d
 800b4cc:	0800b795 	.word	0x0800b795
 800b4d0:	0800c5be 	.word	0x0800c5be

0800b4d4 <_read_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d07      	ldr	r5, [pc, #28]	; (800b4f4 <_read_r+0x20>)
 800b4d8:	4604      	mov	r4, r0
 800b4da:	4608      	mov	r0, r1
 800b4dc:	4611      	mov	r1, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	602a      	str	r2, [r5, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f7f6 fe14 	bl	8002110 <_read>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_read_r+0x1e>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_read_r+0x1e>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	200044c8 	.word	0x200044c8

0800b4f8 <lflush>:
 800b4f8:	8983      	ldrh	r3, [r0, #12]
 800b4fa:	f003 0309 	and.w	r3, r3, #9
 800b4fe:	2b09      	cmp	r3, #9
 800b500:	d101      	bne.n	800b506 <lflush+0xe>
 800b502:	f7fe bee5 	b.w	800a2d0 <fflush>
 800b506:	2000      	movs	r0, #0
 800b508:	4770      	bx	lr
	...

0800b50c <__srefill_r>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	4605      	mov	r5, r0
 800b512:	b118      	cbz	r0, 800b51c <__srefill_r+0x10>
 800b514:	6983      	ldr	r3, [r0, #24]
 800b516:	b90b      	cbnz	r3, 800b51c <__srefill_r+0x10>
 800b518:	f7fc fe9a 	bl	8008250 <__sinit>
 800b51c:	4b3b      	ldr	r3, [pc, #236]	; (800b60c <__srefill_r+0x100>)
 800b51e:	429c      	cmp	r4, r3
 800b520:	d10a      	bne.n	800b538 <__srefill_r+0x2c>
 800b522:	686c      	ldr	r4, [r5, #4]
 800b524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b528:	2300      	movs	r3, #0
 800b52a:	6063      	str	r3, [r4, #4]
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	069e      	lsls	r6, r3, #26
 800b530:	d50c      	bpl.n	800b54c <__srefill_r+0x40>
 800b532:	f04f 30ff 	mov.w	r0, #4294967295
 800b536:	e066      	b.n	800b606 <__srefill_r+0xfa>
 800b538:	4b35      	ldr	r3, [pc, #212]	; (800b610 <__srefill_r+0x104>)
 800b53a:	429c      	cmp	r4, r3
 800b53c:	d101      	bne.n	800b542 <__srefill_r+0x36>
 800b53e:	68ac      	ldr	r4, [r5, #8]
 800b540:	e7f0      	b.n	800b524 <__srefill_r+0x18>
 800b542:	4b34      	ldr	r3, [pc, #208]	; (800b614 <__srefill_r+0x108>)
 800b544:	429c      	cmp	r4, r3
 800b546:	bf08      	it	eq
 800b548:	68ec      	ldreq	r4, [r5, #12]
 800b54a:	e7eb      	b.n	800b524 <__srefill_r+0x18>
 800b54c:	0758      	lsls	r0, r3, #29
 800b54e:	d448      	bmi.n	800b5e2 <__srefill_r+0xd6>
 800b550:	06d9      	lsls	r1, r3, #27
 800b552:	d405      	bmi.n	800b560 <__srefill_r+0x54>
 800b554:	2309      	movs	r3, #9
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	e7e8      	b.n	800b532 <__srefill_r+0x26>
 800b560:	071a      	lsls	r2, r3, #28
 800b562:	d50b      	bpl.n	800b57c <__srefill_r+0x70>
 800b564:	4621      	mov	r1, r4
 800b566:	4628      	mov	r0, r5
 800b568:	f7fe fe76 	bl	800a258 <_fflush_r>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d1e0      	bne.n	800b532 <__srefill_r+0x26>
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	60a0      	str	r0, [r4, #8]
 800b574:	f023 0308 	bic.w	r3, r3, #8
 800b578:	81a3      	strh	r3, [r4, #12]
 800b57a:	61a0      	str	r0, [r4, #24]
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f043 0304 	orr.w	r3, r3, #4
 800b582:	81a3      	strh	r3, [r4, #12]
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	b91b      	cbnz	r3, 800b590 <__srefill_r+0x84>
 800b588:	4621      	mov	r1, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	f7fe feee 	bl	800a36c <__smakebuf_r>
 800b590:	89a6      	ldrh	r6, [r4, #12]
 800b592:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b596:	07b3      	lsls	r3, r6, #30
 800b598:	d00f      	beq.n	800b5ba <__srefill_r+0xae>
 800b59a:	2301      	movs	r3, #1
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <__srefill_r+0x10c>)
 800b5a0:	491e      	ldr	r1, [pc, #120]	; (800b61c <__srefill_r+0x110>)
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	f006 0609 	and.w	r6, r6, #9
 800b5a8:	f7fc fed0 	bl	800834c <_fwalk>
 800b5ac:	2e09      	cmp	r6, #9
 800b5ae:	81a7      	strh	r7, [r4, #12]
 800b5b0:	d103      	bne.n	800b5ba <__srefill_r+0xae>
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f7fe fdc9 	bl	800a14c <__sflush_r>
 800b5ba:	6922      	ldr	r2, [r4, #16]
 800b5bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5be:	6963      	ldr	r3, [r4, #20]
 800b5c0:	6a21      	ldr	r1, [r4, #32]
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b0      	blx	r6
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	6060      	str	r0, [r4, #4]
 800b5cc:	dc1c      	bgt.n	800b608 <__srefill_r+0xfc>
 800b5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d2:	bf17      	itett	ne
 800b5d4:	2200      	movne	r2, #0
 800b5d6:	f043 0320 	orreq.w	r3, r3, #32
 800b5da:	6062      	strne	r2, [r4, #4]
 800b5dc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b5e0:	e7bc      	b.n	800b55c <__srefill_r+0x50>
 800b5e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5e4:	2900      	cmp	r1, #0
 800b5e6:	d0cd      	beq.n	800b584 <__srefill_r+0x78>
 800b5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	d002      	beq.n	800b5f6 <__srefill_r+0xea>
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f7ff faa9 	bl	800ab48 <_free_r>
 800b5f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5f8:	6063      	str	r3, [r4, #4]
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0c0      	beq.n	800b584 <__srefill_r+0x78>
 800b602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b608:	2000      	movs	r0, #0
 800b60a:	e7fc      	b.n	800b606 <__srefill_r+0xfa>
 800b60c:	0800c330 	.word	0x0800c330
 800b610:	0800c350 	.word	0x0800c350
 800b614:	0800c310 	.word	0x0800c310
 800b618:	0800c370 	.word	0x0800c370
 800b61c:	0800b4f9 	.word	0x0800b4f9

0800b620 <__sccl>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	780b      	ldrb	r3, [r1, #0]
 800b624:	4604      	mov	r4, r0
 800b626:	2b5e      	cmp	r3, #94	; 0x5e
 800b628:	bf0b      	itete	eq
 800b62a:	784b      	ldrbeq	r3, [r1, #1]
 800b62c:	1c48      	addne	r0, r1, #1
 800b62e:	1c88      	addeq	r0, r1, #2
 800b630:	2200      	movne	r2, #0
 800b632:	bf08      	it	eq
 800b634:	2201      	moveq	r2, #1
 800b636:	1e61      	subs	r1, r4, #1
 800b638:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b63c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b640:	42a9      	cmp	r1, r5
 800b642:	d1fb      	bne.n	800b63c <__sccl+0x1c>
 800b644:	b90b      	cbnz	r3, 800b64a <__sccl+0x2a>
 800b646:	3801      	subs	r0, #1
 800b648:	bd70      	pop	{r4, r5, r6, pc}
 800b64a:	f082 0201 	eor.w	r2, r2, #1
 800b64e:	54e2      	strb	r2, [r4, r3]
 800b650:	4605      	mov	r5, r0
 800b652:	4628      	mov	r0, r5
 800b654:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b658:	292d      	cmp	r1, #45	; 0x2d
 800b65a:	d006      	beq.n	800b66a <__sccl+0x4a>
 800b65c:	295d      	cmp	r1, #93	; 0x5d
 800b65e:	d0f3      	beq.n	800b648 <__sccl+0x28>
 800b660:	b909      	cbnz	r1, 800b666 <__sccl+0x46>
 800b662:	4628      	mov	r0, r5
 800b664:	e7f0      	b.n	800b648 <__sccl+0x28>
 800b666:	460b      	mov	r3, r1
 800b668:	e7f1      	b.n	800b64e <__sccl+0x2e>
 800b66a:	786e      	ldrb	r6, [r5, #1]
 800b66c:	2e5d      	cmp	r6, #93	; 0x5d
 800b66e:	d0fa      	beq.n	800b666 <__sccl+0x46>
 800b670:	42b3      	cmp	r3, r6
 800b672:	dcf8      	bgt.n	800b666 <__sccl+0x46>
 800b674:	3502      	adds	r5, #2
 800b676:	4619      	mov	r1, r3
 800b678:	3101      	adds	r1, #1
 800b67a:	428e      	cmp	r6, r1
 800b67c:	5462      	strb	r2, [r4, r1]
 800b67e:	dcfb      	bgt.n	800b678 <__sccl+0x58>
 800b680:	1af1      	subs	r1, r6, r3
 800b682:	3901      	subs	r1, #1
 800b684:	1c58      	adds	r0, r3, #1
 800b686:	42b3      	cmp	r3, r6
 800b688:	bfa8      	it	ge
 800b68a:	2100      	movge	r1, #0
 800b68c:	1843      	adds	r3, r0, r1
 800b68e:	e7e0      	b.n	800b652 <__sccl+0x32>

0800b690 <_strtol_l.constprop.0>:
 800b690:	2b01      	cmp	r3, #1
 800b692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b696:	d001      	beq.n	800b69c <_strtol_l.constprop.0+0xc>
 800b698:	2b24      	cmp	r3, #36	; 0x24
 800b69a:	d906      	bls.n	800b6aa <_strtol_l.constprop.0+0x1a>
 800b69c:	f7fc fd7a 	bl	8008194 <__errno>
 800b6a0:	2316      	movs	r3, #22
 800b6a2:	6003      	str	r3, [r0, #0]
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b790 <_strtol_l.constprop.0+0x100>
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	462e      	mov	r6, r5
 800b6b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b6ba:	f017 0708 	ands.w	r7, r7, #8
 800b6be:	d1f7      	bne.n	800b6b0 <_strtol_l.constprop.0+0x20>
 800b6c0:	2c2d      	cmp	r4, #45	; 0x2d
 800b6c2:	d132      	bne.n	800b72a <_strtol_l.constprop.0+0x9a>
 800b6c4:	782c      	ldrb	r4, [r5, #0]
 800b6c6:	2701      	movs	r7, #1
 800b6c8:	1cb5      	adds	r5, r6, #2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d05b      	beq.n	800b786 <_strtol_l.constprop.0+0xf6>
 800b6ce:	2b10      	cmp	r3, #16
 800b6d0:	d109      	bne.n	800b6e6 <_strtol_l.constprop.0+0x56>
 800b6d2:	2c30      	cmp	r4, #48	; 0x30
 800b6d4:	d107      	bne.n	800b6e6 <_strtol_l.constprop.0+0x56>
 800b6d6:	782c      	ldrb	r4, [r5, #0]
 800b6d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b6dc:	2c58      	cmp	r4, #88	; 0x58
 800b6de:	d14d      	bne.n	800b77c <_strtol_l.constprop.0+0xec>
 800b6e0:	786c      	ldrb	r4, [r5, #1]
 800b6e2:	2310      	movs	r3, #16
 800b6e4:	3502      	adds	r5, #2
 800b6e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b6ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ee:	f04f 0c00 	mov.w	ip, #0
 800b6f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b6f6:	4666      	mov	r6, ip
 800b6f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b6fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b700:	f1be 0f09 	cmp.w	lr, #9
 800b704:	d816      	bhi.n	800b734 <_strtol_l.constprop.0+0xa4>
 800b706:	4674      	mov	r4, lr
 800b708:	42a3      	cmp	r3, r4
 800b70a:	dd24      	ble.n	800b756 <_strtol_l.constprop.0+0xc6>
 800b70c:	f1bc 0f00 	cmp.w	ip, #0
 800b710:	db1e      	blt.n	800b750 <_strtol_l.constprop.0+0xc0>
 800b712:	45b1      	cmp	r9, r6
 800b714:	d31c      	bcc.n	800b750 <_strtol_l.constprop.0+0xc0>
 800b716:	d101      	bne.n	800b71c <_strtol_l.constprop.0+0x8c>
 800b718:	45a2      	cmp	sl, r4
 800b71a:	db19      	blt.n	800b750 <_strtol_l.constprop.0+0xc0>
 800b71c:	fb06 4603 	mla	r6, r6, r3, r4
 800b720:	f04f 0c01 	mov.w	ip, #1
 800b724:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b728:	e7e8      	b.n	800b6fc <_strtol_l.constprop.0+0x6c>
 800b72a:	2c2b      	cmp	r4, #43	; 0x2b
 800b72c:	bf04      	itt	eq
 800b72e:	782c      	ldrbeq	r4, [r5, #0]
 800b730:	1cb5      	addeq	r5, r6, #2
 800b732:	e7ca      	b.n	800b6ca <_strtol_l.constprop.0+0x3a>
 800b734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b738:	f1be 0f19 	cmp.w	lr, #25
 800b73c:	d801      	bhi.n	800b742 <_strtol_l.constprop.0+0xb2>
 800b73e:	3c37      	subs	r4, #55	; 0x37
 800b740:	e7e2      	b.n	800b708 <_strtol_l.constprop.0+0x78>
 800b742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b746:	f1be 0f19 	cmp.w	lr, #25
 800b74a:	d804      	bhi.n	800b756 <_strtol_l.constprop.0+0xc6>
 800b74c:	3c57      	subs	r4, #87	; 0x57
 800b74e:	e7db      	b.n	800b708 <_strtol_l.constprop.0+0x78>
 800b750:	f04f 3cff 	mov.w	ip, #4294967295
 800b754:	e7e6      	b.n	800b724 <_strtol_l.constprop.0+0x94>
 800b756:	f1bc 0f00 	cmp.w	ip, #0
 800b75a:	da05      	bge.n	800b768 <_strtol_l.constprop.0+0xd8>
 800b75c:	2322      	movs	r3, #34	; 0x22
 800b75e:	6003      	str	r3, [r0, #0]
 800b760:	4646      	mov	r6, r8
 800b762:	b942      	cbnz	r2, 800b776 <_strtol_l.constprop.0+0xe6>
 800b764:	4630      	mov	r0, r6
 800b766:	e79e      	b.n	800b6a6 <_strtol_l.constprop.0+0x16>
 800b768:	b107      	cbz	r7, 800b76c <_strtol_l.constprop.0+0xdc>
 800b76a:	4276      	negs	r6, r6
 800b76c:	2a00      	cmp	r2, #0
 800b76e:	d0f9      	beq.n	800b764 <_strtol_l.constprop.0+0xd4>
 800b770:	f1bc 0f00 	cmp.w	ip, #0
 800b774:	d000      	beq.n	800b778 <_strtol_l.constprop.0+0xe8>
 800b776:	1e69      	subs	r1, r5, #1
 800b778:	6011      	str	r1, [r2, #0]
 800b77a:	e7f3      	b.n	800b764 <_strtol_l.constprop.0+0xd4>
 800b77c:	2430      	movs	r4, #48	; 0x30
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1b1      	bne.n	800b6e6 <_strtol_l.constprop.0+0x56>
 800b782:	2308      	movs	r3, #8
 800b784:	e7af      	b.n	800b6e6 <_strtol_l.constprop.0+0x56>
 800b786:	2c30      	cmp	r4, #48	; 0x30
 800b788:	d0a5      	beq.n	800b6d6 <_strtol_l.constprop.0+0x46>
 800b78a:	230a      	movs	r3, #10
 800b78c:	e7ab      	b.n	800b6e6 <_strtol_l.constprop.0+0x56>
 800b78e:	bf00      	nop
 800b790:	0800c5fd 	.word	0x0800c5fd

0800b794 <_strtol_r>:
 800b794:	f7ff bf7c 	b.w	800b690 <_strtol_l.constprop.0>

0800b798 <_strtoul_l.constprop.0>:
 800b798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b79c:	4f36      	ldr	r7, [pc, #216]	; (800b878 <_strtoul_l.constprop.0+0xe0>)
 800b79e:	4686      	mov	lr, r0
 800b7a0:	460d      	mov	r5, r1
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7a8:	5de6      	ldrb	r6, [r4, r7]
 800b7aa:	f016 0608 	ands.w	r6, r6, #8
 800b7ae:	d1f8      	bne.n	800b7a2 <_strtoul_l.constprop.0+0xa>
 800b7b0:	2c2d      	cmp	r4, #45	; 0x2d
 800b7b2:	d12f      	bne.n	800b814 <_strtoul_l.constprop.0+0x7c>
 800b7b4:	782c      	ldrb	r4, [r5, #0]
 800b7b6:	2601      	movs	r6, #1
 800b7b8:	1c85      	adds	r5, r0, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d057      	beq.n	800b86e <_strtoul_l.constprop.0+0xd6>
 800b7be:	2b10      	cmp	r3, #16
 800b7c0:	d109      	bne.n	800b7d6 <_strtoul_l.constprop.0+0x3e>
 800b7c2:	2c30      	cmp	r4, #48	; 0x30
 800b7c4:	d107      	bne.n	800b7d6 <_strtoul_l.constprop.0+0x3e>
 800b7c6:	7828      	ldrb	r0, [r5, #0]
 800b7c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b7cc:	2858      	cmp	r0, #88	; 0x58
 800b7ce:	d149      	bne.n	800b864 <_strtoul_l.constprop.0+0xcc>
 800b7d0:	786c      	ldrb	r4, [r5, #1]
 800b7d2:	2310      	movs	r3, #16
 800b7d4:	3502      	adds	r5, #2
 800b7d6:	f04f 38ff 	mov.w	r8, #4294967295
 800b7da:	2700      	movs	r7, #0
 800b7dc:	fbb8 f8f3 	udiv	r8, r8, r3
 800b7e0:	fb03 f908 	mul.w	r9, r3, r8
 800b7e4:	ea6f 0909 	mvn.w	r9, r9
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b7ee:	f1bc 0f09 	cmp.w	ip, #9
 800b7f2:	d814      	bhi.n	800b81e <_strtoul_l.constprop.0+0x86>
 800b7f4:	4664      	mov	r4, ip
 800b7f6:	42a3      	cmp	r3, r4
 800b7f8:	dd22      	ble.n	800b840 <_strtoul_l.constprop.0+0xa8>
 800b7fa:	2f00      	cmp	r7, #0
 800b7fc:	db1d      	blt.n	800b83a <_strtoul_l.constprop.0+0xa2>
 800b7fe:	4580      	cmp	r8, r0
 800b800:	d31b      	bcc.n	800b83a <_strtoul_l.constprop.0+0xa2>
 800b802:	d101      	bne.n	800b808 <_strtoul_l.constprop.0+0x70>
 800b804:	45a1      	cmp	r9, r4
 800b806:	db18      	blt.n	800b83a <_strtoul_l.constprop.0+0xa2>
 800b808:	fb00 4003 	mla	r0, r0, r3, r4
 800b80c:	2701      	movs	r7, #1
 800b80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b812:	e7ea      	b.n	800b7ea <_strtoul_l.constprop.0+0x52>
 800b814:	2c2b      	cmp	r4, #43	; 0x2b
 800b816:	bf04      	itt	eq
 800b818:	782c      	ldrbeq	r4, [r5, #0]
 800b81a:	1c85      	addeq	r5, r0, #2
 800b81c:	e7cd      	b.n	800b7ba <_strtoul_l.constprop.0+0x22>
 800b81e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b822:	f1bc 0f19 	cmp.w	ip, #25
 800b826:	d801      	bhi.n	800b82c <_strtoul_l.constprop.0+0x94>
 800b828:	3c37      	subs	r4, #55	; 0x37
 800b82a:	e7e4      	b.n	800b7f6 <_strtoul_l.constprop.0+0x5e>
 800b82c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b830:	f1bc 0f19 	cmp.w	ip, #25
 800b834:	d804      	bhi.n	800b840 <_strtoul_l.constprop.0+0xa8>
 800b836:	3c57      	subs	r4, #87	; 0x57
 800b838:	e7dd      	b.n	800b7f6 <_strtoul_l.constprop.0+0x5e>
 800b83a:	f04f 37ff 	mov.w	r7, #4294967295
 800b83e:	e7e6      	b.n	800b80e <_strtoul_l.constprop.0+0x76>
 800b840:	2f00      	cmp	r7, #0
 800b842:	da07      	bge.n	800b854 <_strtoul_l.constprop.0+0xbc>
 800b844:	2322      	movs	r3, #34	; 0x22
 800b846:	f8ce 3000 	str.w	r3, [lr]
 800b84a:	f04f 30ff 	mov.w	r0, #4294967295
 800b84e:	b932      	cbnz	r2, 800b85e <_strtoul_l.constprop.0+0xc6>
 800b850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b854:	b106      	cbz	r6, 800b858 <_strtoul_l.constprop.0+0xc0>
 800b856:	4240      	negs	r0, r0
 800b858:	2a00      	cmp	r2, #0
 800b85a:	d0f9      	beq.n	800b850 <_strtoul_l.constprop.0+0xb8>
 800b85c:	b107      	cbz	r7, 800b860 <_strtoul_l.constprop.0+0xc8>
 800b85e:	1e69      	subs	r1, r5, #1
 800b860:	6011      	str	r1, [r2, #0]
 800b862:	e7f5      	b.n	800b850 <_strtoul_l.constprop.0+0xb8>
 800b864:	2430      	movs	r4, #48	; 0x30
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1b5      	bne.n	800b7d6 <_strtoul_l.constprop.0+0x3e>
 800b86a:	2308      	movs	r3, #8
 800b86c:	e7b3      	b.n	800b7d6 <_strtoul_l.constprop.0+0x3e>
 800b86e:	2c30      	cmp	r4, #48	; 0x30
 800b870:	d0a9      	beq.n	800b7c6 <_strtoul_l.constprop.0+0x2e>
 800b872:	230a      	movs	r3, #10
 800b874:	e7af      	b.n	800b7d6 <_strtoul_l.constprop.0+0x3e>
 800b876:	bf00      	nop
 800b878:	0800c5fd 	.word	0x0800c5fd

0800b87c <_strtoul_r>:
 800b87c:	f7ff bf8c 	b.w	800b798 <_strtoul_l.constprop.0>

0800b880 <__submore>:
 800b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b88c:	4299      	cmp	r1, r3
 800b88e:	d11d      	bne.n	800b8cc <__submore+0x4c>
 800b890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b894:	f7fc fdf4 	bl	8008480 <_malloc_r>
 800b898:	b918      	cbnz	r0, 800b8a2 <__submore+0x22>
 800b89a:	f04f 30ff 	mov.w	r0, #4294967295
 800b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8a6:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b8ac:	6360      	str	r0, [r4, #52]	; 0x34
 800b8ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b8b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b8b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b8ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b8be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b8c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b8c6:	6020      	str	r0, [r4, #0]
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	e7e8      	b.n	800b89e <__submore+0x1e>
 800b8cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b8ce:	0077      	lsls	r7, r6, #1
 800b8d0:	463a      	mov	r2, r7
 800b8d2:	f000 f90b 	bl	800baec <_realloc_r>
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d0de      	beq.n	800b89a <__submore+0x1a>
 800b8dc:	eb00 0806 	add.w	r8, r0, r6
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4632      	mov	r2, r6
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	f7fc fd94 	bl	8008412 <memcpy>
 800b8ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b8ee:	f8c4 8000 	str.w	r8, [r4]
 800b8f2:	e7e9      	b.n	800b8c8 <__submore+0x48>

0800b8f4 <_ungetc_r>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	4614      	mov	r4, r2
 800b8f8:	1c4a      	adds	r2, r1, #1
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460d      	mov	r5, r1
 800b8fe:	d103      	bne.n	800b908 <_ungetc_r+0x14>
 800b900:	f04f 35ff 	mov.w	r5, #4294967295
 800b904:	4628      	mov	r0, r5
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	b118      	cbz	r0, 800b912 <_ungetc_r+0x1e>
 800b90a:	6983      	ldr	r3, [r0, #24]
 800b90c:	b90b      	cbnz	r3, 800b912 <_ungetc_r+0x1e>
 800b90e:	f7fc fc9f 	bl	8008250 <__sinit>
 800b912:	4b41      	ldr	r3, [pc, #260]	; (800ba18 <_ungetc_r+0x124>)
 800b914:	429c      	cmp	r4, r3
 800b916:	d11d      	bne.n	800b954 <_ungetc_r+0x60>
 800b918:	6874      	ldr	r4, [r6, #4]
 800b91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b91c:	07db      	lsls	r3, r3, #31
 800b91e:	d405      	bmi.n	800b92c <_ungetc_r+0x38>
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	0598      	lsls	r0, r3, #22
 800b924:	d402      	bmi.n	800b92c <_ungetc_r+0x38>
 800b926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b928:	f7fc fd71 	bl	800840e <__retarget_lock_acquire_recursive>
 800b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b930:	f023 0320 	bic.w	r3, r3, #32
 800b934:	0759      	lsls	r1, r3, #29
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	b29a      	uxth	r2, r3
 800b93a:	d42d      	bmi.n	800b998 <_ungetc_r+0xa4>
 800b93c:	06d3      	lsls	r3, r2, #27
 800b93e:	d413      	bmi.n	800b968 <_ungetc_r+0x74>
 800b940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b942:	07dd      	lsls	r5, r3, #31
 800b944:	d4dc      	bmi.n	800b900 <_ungetc_r+0xc>
 800b946:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b94a:	d1d9      	bne.n	800b900 <_ungetc_r+0xc>
 800b94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b94e:	f7fc fd5f 	bl	8008410 <__retarget_lock_release_recursive>
 800b952:	e7d5      	b.n	800b900 <_ungetc_r+0xc>
 800b954:	4b31      	ldr	r3, [pc, #196]	; (800ba1c <_ungetc_r+0x128>)
 800b956:	429c      	cmp	r4, r3
 800b958:	d101      	bne.n	800b95e <_ungetc_r+0x6a>
 800b95a:	68b4      	ldr	r4, [r6, #8]
 800b95c:	e7dd      	b.n	800b91a <_ungetc_r+0x26>
 800b95e:	4b30      	ldr	r3, [pc, #192]	; (800ba20 <_ungetc_r+0x12c>)
 800b960:	429c      	cmp	r4, r3
 800b962:	bf08      	it	eq
 800b964:	68f4      	ldreq	r4, [r6, #12]
 800b966:	e7d8      	b.n	800b91a <_ungetc_r+0x26>
 800b968:	0710      	lsls	r0, r2, #28
 800b96a:	d511      	bpl.n	800b990 <_ungetc_r+0x9c>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4630      	mov	r0, r6
 800b970:	f7fe fc72 	bl	800a258 <_fflush_r>
 800b974:	b130      	cbz	r0, 800b984 <_ungetc_r+0x90>
 800b976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b978:	07d9      	lsls	r1, r3, #31
 800b97a:	d4c1      	bmi.n	800b900 <_ungetc_r+0xc>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b982:	e7e2      	b.n	800b94a <_ungetc_r+0x56>
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	60a0      	str	r0, [r4, #8]
 800b988:	f023 0308 	bic.w	r3, r3, #8
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	61a0      	str	r0, [r4, #24]
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f043 0304 	orr.w	r3, r3, #4
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b99a:	6862      	ldr	r2, [r4, #4]
 800b99c:	b2ed      	uxtb	r5, r5
 800b99e:	b1d3      	cbz	r3, 800b9d6 <_ungetc_r+0xe2>
 800b9a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	dc05      	bgt.n	800b9b2 <_ungetc_r+0xbe>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff ff69 	bl	800b880 <__submore>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d1e1      	bne.n	800b976 <_ungetc_r+0x82>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	1e5a      	subs	r2, r3, #1
 800b9b6:	6022      	str	r2, [r4, #0]
 800b9b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c4:	07da      	lsls	r2, r3, #31
 800b9c6:	d49d      	bmi.n	800b904 <_ungetc_r+0x10>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	059b      	lsls	r3, r3, #22
 800b9cc:	d49a      	bmi.n	800b904 <_ungetc_r+0x10>
 800b9ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d0:	f7fc fd1e 	bl	8008410 <__retarget_lock_release_recursive>
 800b9d4:	e796      	b.n	800b904 <_ungetc_r+0x10>
 800b9d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b9d8:	6920      	ldr	r0, [r4, #16]
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	f001 0101 	and.w	r1, r1, #1
 800b9e0:	b160      	cbz	r0, 800b9fc <_ungetc_r+0x108>
 800b9e2:	4298      	cmp	r0, r3
 800b9e4:	d20a      	bcs.n	800b9fc <_ungetc_r+0x108>
 800b9e6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800b9ea:	42a8      	cmp	r0, r5
 800b9ec:	d106      	bne.n	800b9fc <_ungetc_r+0x108>
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	3201      	adds	r2, #1
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	6062      	str	r2, [r4, #4]
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	d184      	bne.n	800b904 <_ungetc_r+0x10>
 800b9fa:	e7e5      	b.n	800b9c8 <_ungetc_r+0xd4>
 800b9fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba04:	6363      	str	r3, [r4, #52]	; 0x34
 800ba06:	2303      	movs	r3, #3
 800ba08:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba0a:	4623      	mov	r3, r4
 800ba0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	2301      	movs	r3, #1
 800ba14:	6063      	str	r3, [r4, #4]
 800ba16:	e7ee      	b.n	800b9f6 <_ungetc_r+0x102>
 800ba18:	0800c330 	.word	0x0800c330
 800ba1c:	0800c350 	.word	0x0800c350
 800ba20:	0800c310 	.word	0x0800c310

0800ba24 <__assert_func>:
 800ba24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba26:	4614      	mov	r4, r2
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <__assert_func+0x2c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4605      	mov	r5, r0
 800ba30:	68d8      	ldr	r0, [r3, #12]
 800ba32:	b14c      	cbz	r4, 800ba48 <__assert_func+0x24>
 800ba34:	4b07      	ldr	r3, [pc, #28]	; (800ba54 <__assert_func+0x30>)
 800ba36:	9100      	str	r1, [sp, #0]
 800ba38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba3c:	4906      	ldr	r1, [pc, #24]	; (800ba58 <__assert_func+0x34>)
 800ba3e:	462b      	mov	r3, r5
 800ba40:	f000 f80e 	bl	800ba60 <fiprintf>
 800ba44:	f000 f88e 	bl	800bb64 <abort>
 800ba48:	4b04      	ldr	r3, [pc, #16]	; (800ba5c <__assert_func+0x38>)
 800ba4a:	461c      	mov	r4, r3
 800ba4c:	e7f3      	b.n	800ba36 <__assert_func+0x12>
 800ba4e:	bf00      	nop
 800ba50:	20000010 	.word	0x20000010
 800ba54:	0800c5c0 	.word	0x0800c5c0
 800ba58:	0800c5cd 	.word	0x0800c5cd
 800ba5c:	0800c5fb 	.word	0x0800c5fb

0800ba60 <fiprintf>:
 800ba60:	b40e      	push	{r1, r2, r3}
 800ba62:	b503      	push	{r0, r1, lr}
 800ba64:	4601      	mov	r1, r0
 800ba66:	ab03      	add	r3, sp, #12
 800ba68:	4805      	ldr	r0, [pc, #20]	; (800ba80 <fiprintf+0x20>)
 800ba6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6e:	6800      	ldr	r0, [r0, #0]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	f7ff f8df 	bl	800ac34 <_vfiprintf_r>
 800ba76:	b002      	add	sp, #8
 800ba78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba7c:	b003      	add	sp, #12
 800ba7e:	4770      	bx	lr
 800ba80:	20000010 	.word	0x20000010

0800ba84 <_fstat_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	; (800baa4 <_fstat_r+0x20>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f7f6 fb82 	bl	800219a <_fstat>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d102      	bne.n	800baa0 <_fstat_r+0x1c>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	b103      	cbz	r3, 800baa0 <_fstat_r+0x1c>
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	200044c8 	.word	0x200044c8

0800baa8 <_isatty_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d06      	ldr	r5, [pc, #24]	; (800bac4 <_isatty_r+0x1c>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f7f6 fb81 	bl	80021ba <_isatty>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_isatty_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_isatty_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	200044c8 	.word	0x200044c8

0800bac8 <__ascii_mbtowc>:
 800bac8:	b082      	sub	sp, #8
 800baca:	b901      	cbnz	r1, 800bace <__ascii_mbtowc+0x6>
 800bacc:	a901      	add	r1, sp, #4
 800bace:	b142      	cbz	r2, 800bae2 <__ascii_mbtowc+0x1a>
 800bad0:	b14b      	cbz	r3, 800bae6 <__ascii_mbtowc+0x1e>
 800bad2:	7813      	ldrb	r3, [r2, #0]
 800bad4:	600b      	str	r3, [r1, #0]
 800bad6:	7812      	ldrb	r2, [r2, #0]
 800bad8:	1e10      	subs	r0, r2, #0
 800bada:	bf18      	it	ne
 800badc:	2001      	movne	r0, #1
 800bade:	b002      	add	sp, #8
 800bae0:	4770      	bx	lr
 800bae2:	4610      	mov	r0, r2
 800bae4:	e7fb      	b.n	800bade <__ascii_mbtowc+0x16>
 800bae6:	f06f 0001 	mvn.w	r0, #1
 800baea:	e7f8      	b.n	800bade <__ascii_mbtowc+0x16>

0800baec <_realloc_r>:
 800baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf0:	4680      	mov	r8, r0
 800baf2:	4614      	mov	r4, r2
 800baf4:	460e      	mov	r6, r1
 800baf6:	b921      	cbnz	r1, 800bb02 <_realloc_r+0x16>
 800baf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bafc:	4611      	mov	r1, r2
 800bafe:	f7fc bcbf 	b.w	8008480 <_malloc_r>
 800bb02:	b92a      	cbnz	r2, 800bb10 <_realloc_r+0x24>
 800bb04:	f7ff f820 	bl	800ab48 <_free_r>
 800bb08:	4625      	mov	r5, r4
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb10:	f000 f82f 	bl	800bb72 <_malloc_usable_size_r>
 800bb14:	4284      	cmp	r4, r0
 800bb16:	4607      	mov	r7, r0
 800bb18:	d802      	bhi.n	800bb20 <_realloc_r+0x34>
 800bb1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb1e:	d812      	bhi.n	800bb46 <_realloc_r+0x5a>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7fc fcac 	bl	8008480 <_malloc_r>
 800bb28:	4605      	mov	r5, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d0ed      	beq.n	800bb0a <_realloc_r+0x1e>
 800bb2e:	42bc      	cmp	r4, r7
 800bb30:	4622      	mov	r2, r4
 800bb32:	4631      	mov	r1, r6
 800bb34:	bf28      	it	cs
 800bb36:	463a      	movcs	r2, r7
 800bb38:	f7fc fc6b 	bl	8008412 <memcpy>
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7ff f802 	bl	800ab48 <_free_r>
 800bb44:	e7e1      	b.n	800bb0a <_realloc_r+0x1e>
 800bb46:	4635      	mov	r5, r6
 800bb48:	e7df      	b.n	800bb0a <_realloc_r+0x1e>

0800bb4a <__ascii_wctomb>:
 800bb4a:	b149      	cbz	r1, 800bb60 <__ascii_wctomb+0x16>
 800bb4c:	2aff      	cmp	r2, #255	; 0xff
 800bb4e:	bf85      	ittet	hi
 800bb50:	238a      	movhi	r3, #138	; 0x8a
 800bb52:	6003      	strhi	r3, [r0, #0]
 800bb54:	700a      	strbls	r2, [r1, #0]
 800bb56:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb5a:	bf98      	it	ls
 800bb5c:	2001      	movls	r0, #1
 800bb5e:	4770      	bx	lr
 800bb60:	4608      	mov	r0, r1
 800bb62:	4770      	bx	lr

0800bb64 <abort>:
 800bb64:	b508      	push	{r3, lr}
 800bb66:	2006      	movs	r0, #6
 800bb68:	f000 f834 	bl	800bbd4 <raise>
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	f7f6 fac5 	bl	80020fc <_exit>

0800bb72 <_malloc_usable_size_r>:
 800bb72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb76:	1f18      	subs	r0, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bfbc      	itt	lt
 800bb7c:	580b      	ldrlt	r3, [r1, r0]
 800bb7e:	18c0      	addlt	r0, r0, r3
 800bb80:	4770      	bx	lr

0800bb82 <_raise_r>:
 800bb82:	291f      	cmp	r1, #31
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4604      	mov	r4, r0
 800bb88:	460d      	mov	r5, r1
 800bb8a:	d904      	bls.n	800bb96 <_raise_r+0x14>
 800bb8c:	2316      	movs	r3, #22
 800bb8e:	6003      	str	r3, [r0, #0]
 800bb90:	f04f 30ff 	mov.w	r0, #4294967295
 800bb94:	bd38      	pop	{r3, r4, r5, pc}
 800bb96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb98:	b112      	cbz	r2, 800bba0 <_raise_r+0x1e>
 800bb9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb9e:	b94b      	cbnz	r3, 800bbb4 <_raise_r+0x32>
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 f831 	bl	800bc08 <_getpid_r>
 800bba6:	462a      	mov	r2, r5
 800bba8:	4601      	mov	r1, r0
 800bbaa:	4620      	mov	r0, r4
 800bbac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbb0:	f000 b818 	b.w	800bbe4 <_kill_r>
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d00a      	beq.n	800bbce <_raise_r+0x4c>
 800bbb8:	1c59      	adds	r1, r3, #1
 800bbba:	d103      	bne.n	800bbc4 <_raise_r+0x42>
 800bbbc:	2316      	movs	r3, #22
 800bbbe:	6003      	str	r3, [r0, #0]
 800bbc0:	2001      	movs	r0, #1
 800bbc2:	e7e7      	b.n	800bb94 <_raise_r+0x12>
 800bbc4:	2400      	movs	r4, #0
 800bbc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbca:	4628      	mov	r0, r5
 800bbcc:	4798      	blx	r3
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e7e0      	b.n	800bb94 <_raise_r+0x12>
	...

0800bbd4 <raise>:
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <raise+0xc>)
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	f7ff bfd2 	b.w	800bb82 <_raise_r>
 800bbde:	bf00      	nop
 800bbe0:	20000010 	.word	0x20000010

0800bbe4 <_kill_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d07      	ldr	r5, [pc, #28]	; (800bc04 <_kill_r+0x20>)
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	4611      	mov	r1, r2
 800bbf0:	602b      	str	r3, [r5, #0]
 800bbf2:	f7f6 fa73 	bl	80020dc <_kill>
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	d102      	bne.n	800bc00 <_kill_r+0x1c>
 800bbfa:	682b      	ldr	r3, [r5, #0]
 800bbfc:	b103      	cbz	r3, 800bc00 <_kill_r+0x1c>
 800bbfe:	6023      	str	r3, [r4, #0]
 800bc00:	bd38      	pop	{r3, r4, r5, pc}
 800bc02:	bf00      	nop
 800bc04:	200044c8 	.word	0x200044c8

0800bc08 <_getpid_r>:
 800bc08:	f7f6 ba60 	b.w	80020cc <_getpid>

0800bc0c <_init>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	bf00      	nop
 800bc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc12:	bc08      	pop	{r3}
 800bc14:	469e      	mov	lr, r3
 800bc16:	4770      	bx	lr

0800bc18 <_fini>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	bf00      	nop
 800bc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1e:	bc08      	pop	{r3}
 800bc20:	469e      	mov	lr, r3
 800bc22:	4770      	bx	lr
