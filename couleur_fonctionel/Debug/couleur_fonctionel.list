
couleur_fonctionel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  08009658  08009658  00019658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f68  08009f68  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f70  08009f70  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001dc  0800a154  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800a154  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223a  00000000  00000000  00031fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00034fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271e2  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010df1  00000000  00000000  0005cef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2743  00000000  00000000  0006dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f34  00000000  00000000  00160478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800963c 	.word	0x0800963c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800963c 	.word	0x0800963c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <colorSetOutputFreqScaling>:
// ----- Global Fonctions -----


// --- fonctions de gestion du hardware ---

static void colorSetOutputFreqScaling(h_color_sensor_t * h_color_sensor){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	switch(h_color_sensor->ouput_scale){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d836      	bhi.n	8000fac <colorSetOutputFreqScaling+0x80>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <colorSetOutputFreqScaling+0x18>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f97 	.word	0x08000f97
 8000f48:	08000f81 	.word	0x08000f81
 8000f4c:	08000f6b 	.word	0x08000f6b
 8000f50:	08000f55 	.word	0x08000f55
	case 4:
		// 100%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f5a:	f000 fd26 	bl	80019aa <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f64:	f000 fd21 	bl	80019aa <GPIO_write>
		break;
 8000f68:	e020      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 3:
		// 20%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f70:	f000 fd1b 	bl	80019aa <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f7a:	f000 fd16 	bl	80019aa <GPIO_write>
		break;
 8000f7e:	e015      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 2:
		// 2%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f86:	f000 fd10 	bl	80019aa <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f90:	f000 fd0b 	bl	80019aa <GPIO_write>
		break;
 8000f94:	e00a      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 1:
		// Power_down
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f9c:	f000 fd05 	bl	80019aa <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000fa6:	f000 fd00 	bl	80019aa <GPIO_write>
		break;
 8000faa:	bf00      	nop
	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021800 	.word	0x40021800

08000fbc <colorSetPhotodiodeType>:

void colorSetPhotodiodeType(h_color_sensor_t * h_color_sensor,color_sensor_color_t color){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	h_color_sensor->color=color;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	701a      	strb	r2, [r3, #0]
	switch(color){
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d842      	bhi.n	800105c <colorSetPhotodiodeType+0xa0>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <colorSetPhotodiodeType+0x20>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001025 	.word	0x08001025
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08000fed 	.word	0x08000fed
	case GREEN:
		//GREEN
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481c      	ldr	r0, [pc, #112]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8000ff2:	f000 fcda 	bl	80019aa <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8000ffc:	f000 fcd5 	bl	80019aa <GPIO_write>
		printf("\n--- photosensor set vert ---\r\n\n");
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <colorSetPhotodiodeType+0xb0>)
 8001002:	f005 fb6d 	bl	80066e0 <puts>
		break;
 8001006:	e029      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case CLEAR:
		//clear
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800100e:	f000 fccc 	bl	80019aa <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 8001012:	2200      	movs	r2, #0
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001018:	f000 fcc7 	bl	80019aa <GPIO_write>
		printf("\n--- photosensor set clear ---\r\n\n");
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <colorSetPhotodiodeType+0xb4>)
 800101e:	f005 fb5f 	bl	80066e0 <puts>
		break;
 8001022:	e01b      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case BLUE:
		//BLUE
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800102a:	f000 fcbe 	bl	80019aa <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 800102e:	2201      	movs	r2, #1
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001034:	f000 fcb9 	bl	80019aa <GPIO_write>
		printf("\n--- photosensor set blue ---\r\n\n");
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <colorSetPhotodiodeType+0xb8>)
 800103a:	f005 fb51 	bl	80066e0 <puts>
		break;
 800103e:	e00d      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case RED:
		//RED
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8001046:	f000 fcb0 	bl	80019aa <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 800104a:	2200      	movs	r2, #0
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001050:	f000 fcab 	bl	80019aa <GPIO_write>
		printf("\n--- photosensor set rouge ---\r\n\n");
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <colorSetPhotodiodeType+0xbc>)
 8001056:	f005 fb43 	bl	80066e0 <puts>
		break;
 800105a:	bf00      	nop
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020400 	.word	0x40020400
 8001068:	40021800 	.word	0x40021800
 800106c:	08009658 	.word	0x08009658
 8001070:	08009678 	.word	0x08009678
 8001074:	0800969c 	.word	0x0800969c
 8001078:	080096bc 	.word	0x080096bc

0800107c <colorSensorInit>:

void colorSensorInit(h_color_sensor_t *h_color_sensor, color_sensor_color_t color, color_sensor_output_scale_t output_scale, color_sensor_state_t state){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	460b      	mov	r3, r1
 8001090:	70bb      	strb	r3, [r7, #2]
 8001092:	4613      	mov	r3, r2
 8001094:	707b      	strb	r3, [r7, #1]
	h_color_sensor->color=color;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	701a      	strb	r2, [r3, #0]
	h_color_sensor->ouput_scale=output_scale;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	78ba      	ldrb	r2, [r7, #2]
 80010a0:	705a      	strb	r2, [r3, #1]
	h_color_sensor->sensor_state=state;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	787a      	ldrb	r2, [r7, #1]
 80010a6:	709a      	strb	r2, [r3, #2]
	h_color_sensor->frequence=0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
	h_color_sensor->blue_color=0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
	h_color_sensor->green_color=0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	h_color_sensor->red_color=0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
	h_color_sensor->green_transformation.green_coef_dir=1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_min_freq=1;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	835a      	strh	r2, [r3, #26]
	h_color_sensor->green_transformation.green_ord_origin=1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	831a      	strh	r2, [r3, #24]
	h_color_sensor->red_transformation.red_coef_dir=1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_min_freq=1;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	841a      	strh	r2, [r3, #32]
	h_color_sensor->red_transformation.red_ord_origin=1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	83da      	strh	r2, [r3, #30]
	h_color_sensor->calib_state=WAINTING_FOR_CALIB;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	751a      	strb	r2, [r3, #20]
	colorSetOutputFreqScaling(h_color_sensor);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff1e 	bl	8000f2c <colorSetOutputFreqScaling>
	colorSetPhotodiodeType(h_color_sensor,color);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff61 	bl	8000fbc <colorSetPhotodiodeType>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <colorDisable>:
uint32_t colorGetGreenValue(h_color_sensor_t * h_color_sensor){
	printf("sensor_value : %ld\r\n",h_color_sensor->frequence);
	return h_color_sensor->green_color;
}

void colorDisable(h_color_sensor_t * h_color_sensor){
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b095      	sub	sp, #84	; 0x54
 8001108:	af12      	add	r7, sp, #72	; 0x48
 800110a:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <colorDisable+0x50>)
 8001112:	f000 fc4a 	bl	80019aa <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_DISABLE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,STOP,TIM_CHANNEL_1);
 800111c:	4e0e      	ldr	r6, [pc, #56]	; (8001158 <colorDisable+0x54>)
 800111e:	2300      	movs	r3, #0
 8001120:	9311      	str	r3, [sp, #68]	; 0x44
 8001122:	2300      	movs	r3, #0
 8001124:	9310      	str	r3, [sp, #64]	; 0x40
 8001126:	2301      	movs	r3, #1
 8001128:	930f      	str	r3, [sp, #60]	; 0x3c
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001140:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001144:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001148:	f000 fbbd 	bl	80018c6 <timer_handle>
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	40020800 	.word	0x40020800
 8001158:	20000354 	.word	0x20000354

0800115c <colorEnable>:

void colorEnable(h_color_sensor_t * h_color_sensor){
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b095      	sub	sp, #84	; 0x54
 8001160:	af12      	add	r7, sp, #72	; 0x48
 8001162:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <colorEnable+0x50>)
 800116a:	f000 fc1e 	bl	80019aa <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_ENABLE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,START,TIM_CHANNEL_1);
 8001174:	4e0e      	ldr	r6, [pc, #56]	; (80011b0 <colorEnable+0x54>)
 8001176:	2300      	movs	r3, #0
 8001178:	9311      	str	r3, [sp, #68]	; 0x44
 800117a:	2301      	movs	r3, #1
 800117c:	9310      	str	r3, [sp, #64]	; 0x40
 800117e:	2301      	movs	r3, #1
 8001180:	930f      	str	r3, [sp, #60]	; 0x3c
 8001182:	466d      	mov	r5, sp
 8001184:	f106 0410 	add.w	r4, r6, #16
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001198:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800119c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a0:	f000 fb91 	bl	80018c6 <timer_handle>
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ac:	40020800 	.word	0x40020800
 80011b0:	20000354 	.word	0x20000354

080011b4 <colorHandleCalibrationSensor>:


// --- fonctions de calibration ---

uint32_t colorHandleCalibrationSensor(h_color_sensor_t * h_color_sensor,h_calib_buffer_structure_t * h_calib_buffer_struct){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	calibration_flag=1;
 80011be:	4b84      	ldr	r3, [pc, #528]	; (80013d0 <colorHandleCalibrationSensor+0x21c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
	printf("calibration flag : %d\r\n",calibration_flag);
 80011c4:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <colorHandleCalibrationSensor+0x21c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4882      	ldr	r0, [pc, #520]	; (80013d4 <colorHandleCalibrationSensor+0x220>)
 80011cc:	f005 fa02 	bl	80065d4 <iprintf>
	char entree[2];
	h_color_sensor->calib_state=CALIB_VERT_CANETTE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	751a      	strb	r2, [r3, #20]
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80011d6:	e08b      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>
		//printf("entré dans while\r\n");
		switch(h_color_sensor->calib_state){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7d1b      	ldrb	r3, [r3, #20]
 80011dc:	3b01      	subs	r3, #1
 80011de:	2b03      	cmp	r3, #3
 80011e0:	f200 8085 	bhi.w	80012ee <colorHandleCalibrationSensor+0x13a>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <colorHandleCalibrationSensor+0x38>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	080011fd 	.word	0x080011fd
 80011f0:	08001235 	.word	0x08001235
 80011f4:	08001273 	.word	0x08001273
 80011f8:	080012b1 	.word	0x080012b1
		case CALIB_VERT_CANETTE:
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 80011fc:	2104      	movs	r1, #4
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fedc 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 8001204:	4874      	ldr	r0, [pc, #464]	; (80013d8 <colorHandleCalibrationSensor+0x224>)
 8001206:	f005 fa6b 	bl	80066e0 <puts>
			scanf( "%s",entree);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4872      	ldr	r0, [pc, #456]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 8001212:	f005 fa6d 	bl	80066f0 <iscanf>
			h_calib_buffer_struct->calib_value_vert_canette=0;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	801a      	strh	r2, [r3, #0]
			colorEnable(h_color_sensor);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff9d 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_vert_canette==0){
 8001222:	bf00      	nop
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0fb      	beq.n	8001224 <colorHandleCalibrationSensor+0x70>
				//Wait for calib completed
			}
			h_color_sensor->calib_state=CALIB_VERT_VIDE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2202      	movs	r2, #2
 8001230:	751a      	strb	r2, [r3, #20]
			break;
 8001232:	e05d      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		case CALIB_VERT_VIDE:
			printf("calib_vert_vide\r\n");
 8001234:	486a      	ldr	r0, [pc, #424]	; (80013e0 <colorHandleCalibrationSensor+0x22c>)
 8001236:	f005 fa53 	bl	80066e0 <puts>
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 800123a:	2104      	movs	r1, #4
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff febd 	bl	8000fbc <colorSetPhotodiodeType>
			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when the green can is removed\r\n");
 8001242:	4868      	ldr	r0, [pc, #416]	; (80013e4 <colorHandleCalibrationSensor+0x230>)
 8001244:	f005 fa4c 	bl	80066e0 <puts>
			scanf("%s",entree);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	4863      	ldr	r0, [pc, #396]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 8001250:	f005 fa4e 	bl	80066f0 <iscanf>
			h_calib_buffer_struct->calib_value_vert_vide=0;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	805a      	strh	r2, [r3, #2]
			colorEnable(h_color_sensor);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff7e 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_vert_vide==0){
 8001260:	bf00      	nop
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	885b      	ldrh	r3, [r3, #2]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0fb      	beq.n	8001262 <colorHandleCalibrationSensor+0xae>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_CANETTE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	751a      	strb	r2, [r3, #20]
			break;
 8001270:	e03e      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		case CALIB_ROUGE_CANETTE:
			printf("calib_rouge_canette\r\n");
 8001272:	485d      	ldr	r0, [pc, #372]	; (80013e8 <colorHandleCalibrationSensor+0x234>)
 8001274:	f005 fa34 	bl	80066e0 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 8001278:	2101      	movs	r1, #1
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fe9e 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a red can is captured\r\n");
 8001280:	485a      	ldr	r0, [pc, #360]	; (80013ec <colorHandleCalibrationSensor+0x238>)
 8001282:	f005 fa2d 	bl	80066e0 <puts>
			scanf("%s",entree);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4853      	ldr	r0, [pc, #332]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 800128e:	f005 fa2f 	bl	80066f0 <iscanf>
			h_calib_buffer_struct->calib_value_rouge_canette=0;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	809a      	strh	r2, [r3, #4]
			colorEnable(h_color_sensor);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff5f 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_rouge_canette==0){
 800129e:	bf00      	nop
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0fb      	beq.n	80012a0 <colorHandleCalibrationSensor+0xec>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_VIDE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2204      	movs	r2, #4
 80012ac:	751a      	strb	r2, [r3, #20]
			break;
 80012ae:	e01f      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		case CALIB_ROUGE_VIDE:
			printf("calib_rouge_vide\r\n");
 80012b0:	484f      	ldr	r0, [pc, #316]	; (80013f0 <colorHandleCalibrationSensor+0x23c>)
 80012b2:	f005 fa15 	bl	80066e0 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 80012b6:	2101      	movs	r1, #1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fe7f 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 80012be:	4846      	ldr	r0, [pc, #280]	; (80013d8 <colorHandleCalibrationSensor+0x224>)
 80012c0:	f005 fa0e 	bl	80066e0 <puts>
			scanf("%s",entree);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4844      	ldr	r0, [pc, #272]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 80012cc:	f005 fa10 	bl	80066f0 <iscanf>
			h_calib_buffer_struct->calib_value_rouge_vide=0;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	80da      	strh	r2, [r3, #6]
			colorEnable(h_color_sensor);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff40 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_rouge_vide==0){
 80012dc:	bf00      	nop
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	88db      	ldrh	r3, [r3, #6]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0fb      	beq.n	80012de <colorHandleCalibrationSensor+0x12a>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_DONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2205      	movs	r2, #5
 80012ea:	751a      	strb	r2, [r3, #20]
			break;
 80012ec:	e000      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		default:
			break;
 80012ee:	bf00      	nop
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7d1b      	ldrb	r3, [r3, #20]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	f47f af6f 	bne.w	80011d8 <colorHandleCalibrationSensor+0x24>
		}
	}
	printf("calib_verte_canette : %u\r\n",h_calib_buffer_struct->calib_value_vert_canette);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	483c      	ldr	r0, [pc, #240]	; (80013f4 <colorHandleCalibrationSensor+0x240>)
 8001302:	f005 f967 	bl	80065d4 <iprintf>
	printf("calib_verte_vide : %u\r\n\n",h_calib_buffer_struct->calib_value_vert_vide);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	885b      	ldrh	r3, [r3, #2]
 800130a:	4619      	mov	r1, r3
 800130c:	483a      	ldr	r0, [pc, #232]	; (80013f8 <colorHandleCalibrationSensor+0x244>)
 800130e:	f005 f961 	bl	80065d4 <iprintf>
	printf("calib_rouge_canette : %u\r\n",h_calib_buffer_struct->calib_value_rouge_canette);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	4619      	mov	r1, r3
 8001318:	4838      	ldr	r0, [pc, #224]	; (80013fc <colorHandleCalibrationSensor+0x248>)
 800131a:	f005 f95b 	bl	80065d4 <iprintf>
	printf("calib_rouge_vide : %u\r\n\n",h_calib_buffer_struct->calib_value_rouge_vide);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	4619      	mov	r1, r3
 8001324:	4836      	ldr	r0, [pc, #216]	; (8001400 <colorHandleCalibrationSensor+0x24c>)
 8001326:	f005 f955 	bl	80065d4 <iprintf>

	//computation of the transformation coefficient
	h_color_sensor->green_transformation.green_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_calib_buffer_struct->calib_value_vert_vide)-(h_calib_buffer_struct->calib_value_vert_canette)));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	885b      	ldrh	r3, [r3, #2]
 800132e:	461a      	mov	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f242 7210 	movw	r2, #10000	; 0x2710
 800133a:	fb92 f3f3 	sdiv	r3, r2, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->green_transformation.green_coef_dir)*(h_calib_buffer_struct->calib_value_vert_vide)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8ada      	ldrh	r2, [r3, #22]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	885b      	ldrh	r3, [r3, #2]
 800134c:	fb12 f303 	smulbb	r3, r2, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	831a      	strh	r2, [r3, #24]
	printf("coef dir vert : %u\r\nord origin vert : %u\r\nmin freq vert : %u\r\n\n",h_color_sensor->green_transformation.green_coef_dir,h_color_sensor->green_transformation.green_ord_origin,h_color_sensor->green_transformation.green_min_freq);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8adb      	ldrh	r3, [r3, #22]
 8001362:	4619      	mov	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	8b1b      	ldrh	r3, [r3, #24]
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8b5b      	ldrh	r3, [r3, #26]
 800136e:	4825      	ldr	r0, [pc, #148]	; (8001404 <colorHandleCalibrationSensor+0x250>)
 8001370:	f005 f930 	bl	80065d4 <iprintf>

	h_color_sensor->red_transformation.red_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_calib_buffer_struct->calib_value_rouge_vide)-(h_calib_buffer_struct->calib_value_rouge_canette)));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	88db      	ldrh	r3, [r3, #6]
 8001378:	461a      	mov	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f242 7210 	movw	r2, #10000	; 0x2710
 8001384:	fb92 f3f3 	sdiv	r3, r2, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->red_transformation.red_coef_dir)*(h_calib_buffer_struct->calib_value_rouge_vide)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8b9a      	ldrh	r2, [r3, #28]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	88db      	ldrh	r3, [r3, #6]
 8001396:	fb12 f303 	smulbb	r3, r2, r3
 800139a:	b29a      	uxth	r2, r3
 800139c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	83da      	strh	r2, [r3, #30]
	printf("coef dir rouge : %u\r\nord origin rouge : %u\r\nmin freq rouge : %u\r\n\n",h_color_sensor->red_transformation.red_coef_dir,h_color_sensor->red_transformation.red_ord_origin,h_color_sensor->red_transformation.red_min_freq);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8b9b      	ldrh	r3, [r3, #28]
 80013ac:	4619      	mov	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8bdb      	ldrh	r3, [r3, #30]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8c1b      	ldrh	r3, [r3, #32]
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <colorHandleCalibrationSensor+0x254>)
 80013ba:	f005 f90b 	bl	80065d4 <iprintf>


	// flag to say hey calibration finished
	calibration_flag=0;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <colorHandleCalibrationSensor+0x21c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002d4 	.word	0x200002d4
 80013d4:	080096f8 	.word	0x080096f8
 80013d8:	08009710 	.word	0x08009710
 80013dc:	0800973c 	.word	0x0800973c
 80013e0:	08009740 	.word	0x08009740
 80013e4:	08009754 	.word	0x08009754
 80013e8:	08009780 	.word	0x08009780
 80013ec:	08009798 	.word	0x08009798
 80013f0:	080097c0 	.word	0x080097c0
 80013f4:	080097d4 	.word	0x080097d4
 80013f8:	080097f0 	.word	0x080097f0
 80013fc:	0800980c 	.word	0x0800980c
 8001400:	08009828 	.word	0x08009828
 8001404:	08009844 	.word	0x08009844
 8001408:	08009884 	.word	0x08009884

0800140c <colorSensorHandleInputCapture_IT>:


// --- fonction de gestion du retour capteur ---

void colorSensorHandleInputCapture_IT(h_color_sensor_t * h_color_sensor,TIM_TypeDef *TIM,h_calib_buffer_structure_t * h_calib_buffer_struct){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	//printf("entré dans tim2 IT\r\n");
	if(tour==0){
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <colorSensorHandleInputCapture_IT+0x24>
		temps1=TIM->CNT;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	461a      	mov	r2, r3
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <colorSensorHandleInputCapture_IT+0xb8>)
 8001428:	601a      	str	r2, [r3, #0]
		tour=0;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
	}
	if(tour==1){
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <colorSensorHandleInputCapture_IT+0x3c>
		temps2=TIM->CNT;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	461a      	mov	r2, r3
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 8001440:	601a      	str	r2, [r3, #0]
		tour=1;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
	}
	tour=1-tour;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1c3 0301 	rsb	r3, r3, #1
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001452:	6013      	str	r3, [r2, #0]
	freq=abs(temps2-temps1);
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <colorSensorHandleInputCapture_IT+0xb8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	bfb8      	it	lt
 8001462:	425b      	neglt	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 8001468:	601a      	str	r2, [r3, #0]
	h_color_sensor->frequence=freq;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
		}
		printf("fin affichage\r\n");
		u=0;
	}*/

	if((calibration_flag==1)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <colorSensorHandleInputCapture_IT+0xc4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10d      	bne.n	8001496 <colorSensorHandleInputCapture_IT+0x8a>
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001482:	4293      	cmp	r3, r2
 8001484:	d807      	bhi.n	8001496 <colorSensorHandleInputCapture_IT+0x8a>
		colorHandleCalibrationValues(h_color_sensor,freq,h_calib_buffer_struct);
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f820 	bl	80014d4 <colorHandleCalibrationValues>
	}
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
		// Analyse des valeur pour prise de decision sur la couleur
		colorHandleRawValues(h_color_sensor, freq);
	}
}
 8001494:	e00f      	b.n	80014b6 <colorSensorHandleInputCapture_IT+0xaa>
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <colorSensorHandleInputCapture_IT+0xc4>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10b      	bne.n	80014b6 <colorSensorHandleInputCapture_IT+0xaa>
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d805      	bhi.n	80014b6 <colorSensorHandleInputCapture_IT+0xaa>
		colorHandleRawValues(h_color_sensor, freq);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f8cf 	bl	8001654 <colorHandleRawValues>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000204 	.word	0x20000204
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	20000200 	.word	0x20000200
 80014cc:	200001f8 	.word	0x200001f8
 80014d0:	200002d4 	.word	0x200002d4

080014d4 <colorHandleCalibrationValues>:

static int colorHandleCalibrationValues(h_color_sensor_t * h_color_sensor, uint32_t frequence,h_calib_buffer_structure_t * h_calib_buffer_struct){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	calib_tab[u]=freq;
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <colorHandleCalibrationValues+0x14c>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	494e      	ldr	r1, [pc, #312]	; (8001624 <colorHandleCalibrationValues+0x150>)
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u++;
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a49      	ldr	r2, [pc, #292]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014f6:	6013      	str	r3, [r2, #0]
	if(u==CALIBRATION_NB_VALUES){
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b1e      	cmp	r3, #30
 80014fe:	f040 8088 	bne.w	8001612 <colorHandleCalibrationValues+0x13e>
		colorDisable(h_color_sensor);
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff fdfe 	bl	8001104 <colorDisable>
		uint32_t res=0;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
		for(int i=0;i<30;i++){
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e012      	b.n	8001538 <colorHandleCalibrationValues+0x64>
			res=res+calib_tab[i];
 8001512:	4a44      	ldr	r2, [pc, #272]	; (8001624 <colorHandleCalibrationValues+0x150>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4413      	add	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
			printf("calib values[%d] : %ld\r\n",i,calib_tab[i]);
 8001520:	4a40      	ldr	r2, [pc, #256]	; (8001624 <colorHandleCalibrationValues+0x150>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	461a      	mov	r2, r3
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	483e      	ldr	r0, [pc, #248]	; (8001628 <colorHandleCalibrationValues+0x154>)
 800152e:	f005 f851 	bl	80065d4 <iprintf>
		for(int i=0;i<30;i++){
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b1d      	cmp	r3, #29
 800153c:	dde9      	ble.n	8001512 <colorHandleCalibrationValues+0x3e>
		}
		switch(h_color_sensor->calib_state){
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	7d1b      	ldrb	r3, [r3, #20]
 8001542:	3b01      	subs	r3, #1
 8001544:	2b03      	cmp	r3, #3
 8001546:	d85b      	bhi.n	8001600 <colorHandleCalibrationValues+0x12c>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <colorHandleCalibrationValues+0x7c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	0800158d 	.word	0x0800158d
 8001558:	080015b1 	.word	0x080015b1
 800155c:	080015dd 	.word	0x080015dd
		case CALIB_VERT_CANETTE:
			h_calib_buffer_struct->calib_value_vert_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4a32      	ldr	r2, [pc, #200]	; (800162c <colorHandleCalibrationValues+0x158>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	801a      	strh	r2, [r3, #0]
			h_color_sensor->green_transformation.green_min_freq=h_calib_buffer_struct->calib_value_vert_canette;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	835a      	strh	r2, [r3, #26]
			printf("Struct calib : champ vert_canette remplie\r\n");
 8001578:	482d      	ldr	r0, [pc, #180]	; (8001630 <colorHandleCalibrationValues+0x15c>)
 800157a:	f005 f8b1 	bl	80066e0 <puts>
			printf("Calib_value_vert_canette : %u\r\n\n",h_calib_buffer_struct->calib_value_vert_canette);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	482b      	ldr	r0, [pc, #172]	; (8001634 <colorHandleCalibrationValues+0x160>)
 8001586:	f005 f825 	bl	80065d4 <iprintf>
			break;
 800158a:	e03d      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		case CALIB_VERT_VIDE:
			h_calib_buffer_struct->calib_value_vert_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4a27      	ldr	r2, [pc, #156]	; (800162c <colorHandleCalibrationValues+0x158>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	805a      	strh	r2, [r3, #2]
			printf("Struct calib : champ vert_vide remplie\r\n");
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <colorHandleCalibrationValues+0x164>)
 800159e:	f005 f89f 	bl	80066e0 <puts>
			printf("Calib_value_vert_vide : %u\r\n\n",h_calib_buffer_struct->calib_value_vert_vide);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	885b      	ldrh	r3, [r3, #2]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4824      	ldr	r0, [pc, #144]	; (800163c <colorHandleCalibrationValues+0x168>)
 80015aa:	f005 f813 	bl	80065d4 <iprintf>
			break;
 80015ae:	e02b      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		case CALIB_ROUGE_CANETTE:
			h_calib_buffer_struct->calib_value_rouge_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <colorHandleCalibrationValues+0x158>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	809a      	strh	r2, [r3, #4]
			h_color_sensor->red_transformation.red_min_freq=h_calib_buffer_struct->calib_value_rouge_canette;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	889a      	ldrh	r2, [r3, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	841a      	strh	r2, [r3, #32]
			printf("Struct calib : champ rouge_canette remplie\r\n");
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <colorHandleCalibrationValues+0x16c>)
 80015ca:	f005 f889 	bl	80066e0 <puts>
			printf("Calib_value_rouge_canette : %u\r\n\n",h_calib_buffer_struct->calib_value_rouge_canette);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	4619      	mov	r1, r3
 80015d4:	481b      	ldr	r0, [pc, #108]	; (8001644 <colorHandleCalibrationValues+0x170>)
 80015d6:	f004 fffd 	bl	80065d4 <iprintf>
			break;
 80015da:	e015      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		case CALIB_ROUGE_VIDE:
			h_calib_buffer_struct->calib_value_rouge_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <colorHandleCalibrationValues+0x158>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	80da      	strh	r2, [r3, #6]
			printf("Struct calib : champ rouge_vide remplie\r\n");
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <colorHandleCalibrationValues+0x174>)
 80015ee:	f005 f877 	bl	80066e0 <puts>
			printf("Calib_value_vert_canette : %u\r\n",h_calib_buffer_struct->calib_value_rouge_vide);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	88db      	ldrh	r3, [r3, #6]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <colorHandleCalibrationValues+0x178>)
 80015fa:	f004 ffeb 	bl	80065d4 <iprintf>
			break;
 80015fe:	e003      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		default:
			printf("bug dans la calibration\r\n\n");
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <colorHandleCalibrationValues+0x17c>)
 8001602:	f005 f86d 	bl	80066e0 <puts>
			break;
 8001606:	bf00      	nop
		}
		u=0;
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <colorHandleCalibrationValues+0x148>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
		return 1;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <colorHandleCalibrationValues+0x140>
	}
	return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000350 	.word	0x20000350
 8001620:	200001f8 	.word	0x200001f8
 8001624:	200002d8 	.word	0x200002d8
 8001628:	080098c8 	.word	0x080098c8
 800162c:	88888889 	.word	0x88888889
 8001630:	080098e4 	.word	0x080098e4
 8001634:	08009910 	.word	0x08009910
 8001638:	08009934 	.word	0x08009934
 800163c:	0800995c 	.word	0x0800995c
 8001640:	0800997c 	.word	0x0800997c
 8001644:	080099a8 	.word	0x080099a8
 8001648:	080099cc 	.word	0x080099cc
 800164c:	080099f8 	.word	0x080099f8
 8001650:	08009a18 	.word	0x08009a18

08001654 <colorHandleRawValues>:

static int colorHandleRawValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	//printf("entre dans color_handle\r\n");
	if(raw_values_compteur<((NB_MEASURE_WANTED/2)-1)){
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d81d      	bhi.n	80016a2 <colorHandleRawValues+0x4e>
		//printf("raw_values_compteur<(NB_MEASURE_WANTED/2)-1\r\n");
		//green_scaling

		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001666:	4b74      	ldr	r3, [pc, #464]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	4a73      	ldr	r2, [pc, #460]	; (800183c <colorHandleRawValues+0x1e8>)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	8adb      	ldrh	r3, [r3, #22]
 8001678:	461a      	mov	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	8b12      	ldrh	r2, [r2, #24]
 8001684:	4610      	mov	r0, r2
 8001686:	4a6c      	ldr	r2, [pc, #432]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	4611      	mov	r1, r2
 800168c:	4403      	add	r3, r0
 800168e:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <colorHandleRawValues+0x1ec>)
 8001690:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <colorHandleRawValues+0x1e4>)
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e0c5      	b.n	800182e <colorHandleRawValues+0x1da>
	}


	else if(raw_values_compteur==((NB_MEASURE_WANTED/2)-1)){
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <colorHandleRawValues+0x1e4>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b09      	cmp	r3, #9
 80016a8:	d127      	bne.n	80016fa <colorHandleRawValues+0xa6>
		//printf("raw_values_compteur==(NB_MEASURE_WANTED/2)-1\r\n");
		//red scaling

		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <colorHandleRawValues+0x1e4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4a62      	ldr	r2, [pc, #392]	; (800183c <colorHandleRawValues+0x1e8>)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8adb      	ldrh	r3, [r3, #22]
 80016bc:	461a      	mov	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	8b12      	ldrh	r2, [r2, #24]
 80016c8:	4610      	mov	r0, r2
 80016ca:	4a5b      	ldr	r2, [pc, #364]	; (8001838 <colorHandleRawValues+0x1e4>)
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4403      	add	r3, r0
 80016d2:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <colorHandleRawValues+0x1ec>)
 80016d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 80016d8:	4b57      	ldr	r3, [pc, #348]	; (8001838 <colorHandleRawValues+0x1e4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <colorHandleRawValues+0x1e4>)
 80016e2:	701a      	strb	r2, [r3, #0]

		// color change
		colorDisable(h_color_sensor);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fd0d 	bl	8001104 <colorDisable>
		colorSetPhotodiodeType(h_color_sensor,RED);
 80016ea:	2101      	movs	r1, #1
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fc65 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(h_color_sensor);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fd32 	bl	800115c <colorEnable>
 80016f8:	e099      	b.n	800182e <colorHandleRawValues+0x1da>
	}

	else if((raw_values_compteur>((NB_MEASURE_WANTED/2)-1))&&(raw_values_compteur<NB_MEASURE_WANTED)){
 80016fa:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <colorHandleRawValues+0x1e4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b09      	cmp	r3, #9
 8001700:	d921      	bls.n	8001746 <colorHandleRawValues+0xf2>
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b13      	cmp	r3, #19
 8001708:	d81d      	bhi.n	8001746 <colorHandleRawValues+0xf2>
		//printf("raw_values_compteur>(NB_MEASURE_WANTED/2)-1\r\n");
		//red scaling

		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <colorHandleRawValues+0x1e4>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4a4a      	ldr	r2, [pc, #296]	; (800183c <colorHandleRawValues+0x1e8>)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->red_transformation.red_coef_dir)*frequence)+(h_color_sensor->red_transformation.red_ord_origin);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8b9b      	ldrh	r3, [r3, #28]
 800171c:	461a      	mov	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	8bd2      	ldrh	r2, [r2, #30]
 8001728:	4610      	mov	r0, r2
 800172a:	4a43      	ldr	r2, [pc, #268]	; (8001838 <colorHandleRawValues+0x1e4>)
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4611      	mov	r1, r2
 8001730:	4403      	add	r3, r0
 8001732:	4a43      	ldr	r2, [pc, #268]	; (8001840 <colorHandleRawValues+0x1ec>)
 8001734:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 8001738:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <colorHandleRawValues+0x1e4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e073      	b.n	800182e <colorHandleRawValues+0x1da>
	}


	else if(raw_values_compteur==NB_MEASURE_WANTED){
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <colorHandleRawValues+0x1e4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b14      	cmp	r3, #20
 800174c:	d16f      	bne.n	800182e <colorHandleRawValues+0x1da>
		//printf("raw_value_compteur==NB_measure_wanted\r\n");
		// Pret a faire la moyenne du tableau pour plus de fiabilité
		colorDisable(h_color_sensor);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fcd8 	bl	8001104 <colorDisable>
		uint32_t green_mean=0;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
		uint32_t red_mean=0;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]

		// green values mean sans valeur erronées
		//printf("calcul moyenne vert\r\n");
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 800175c:	2302      	movs	r3, #2
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e009      	b.n	8001776 <colorHandleRawValues+0x122>
			green_mean=green_mean+color_scaled_values[i];
 8001762:	4a37      	ldr	r2, [pc, #220]	; (8001840 <colorHandleRawValues+0x1ec>)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b09      	cmp	r3, #9
 800177a:	ddf2      	ble.n	8001762 <colorHandleRawValues+0x10e>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne verte : %ld\r\n",i,color_scaled_values[i]);
			printf("green mean : %ld\r\n",green_mean);*/
		}
		green_color_value=floor(green_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fedf 	bl	8000544 <__aeabi_ui2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff fa2b 	bl	8000be8 <__aeabi_d2uiz>
 8001792:	4603      	mov	r3, r0
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <colorHandleRawValues+0x1f0>)
 8001796:	6013      	str	r3, [r2, #0]
		h_color_sensor->green_color=green_color_value;
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <colorHandleRawValues+0x1f0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
		//printf("green color value : %ld\r\n",green_color_value);


		//red values mean
		//printf("calcul moyenne rouge\r\n");
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017a0:	230c      	movs	r3, #12
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e009      	b.n	80017ba <colorHandleRawValues+0x166>
			red_mean=red_mean+color_scaled_values[i];
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <colorHandleRawValues+0x1ec>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4413      	add	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3301      	adds	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b13      	cmp	r3, #19
 80017be:	ddf2      	ble.n	80017a6 <colorHandleRawValues+0x152>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne rouge : %ld\r\n",i,color_scaled_values[i]);
			printf("red mean : %ld\r\n",red_mean);*/
		}
		red_color_value=floor(red_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe febd 	bl	8000544 <__aeabi_ui2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fa09 	bl	8000be8 <__aeabi_d2uiz>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <colorHandleRawValues+0x1f4>)
 80017da:	6013      	str	r3, [r2, #0]
		h_color_sensor->red_color=red_color_value;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <colorHandleRawValues+0x1f4>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]

		//--debug
		//printf("red color value : %ld\r\n",red_color_value);

		raw_values_compteur=0;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <colorHandleRawValues+0x1e4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]

		//Affichage tableau
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e010      	b.n	8001812 <colorHandleRawValues+0x1be>
			printf("color_raw_values[%d] : %ld\t->\t color_scaled_value[%d] : %ld\r\n",i,color_raw_values[i],i,color_scaled_values[i]);
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <colorHandleRawValues+0x1e8>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017f8:	4911      	ldr	r1, [pc, #68]	; (8001840 <colorHandleRawValues+0x1ec>)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <colorHandleRawValues+0x1f8>)
 8001808:	f004 fee4 	bl	80065d4 <iprintf>
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b13      	cmp	r3, #19
 8001816:	ddeb      	ble.n	80017f0 <colorHandleRawValues+0x19c>
		}
		colorAnalyse(h_color_sensor,green_color_value,red_color_value);
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <colorHandleRawValues+0x1f0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <colorHandleRawValues+0x1f4>)
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f816 	bl	8001854 <colorAnalyse>
		printf("waiting for button press : \r\n");
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <colorHandleRawValues+0x1fc>)
 800182a:	f004 ff59 	bl	80066e0 <puts>
	}

	return 0; // fonctionnement normal
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002c8 	.word	0x200002c8
 800183c:	20000268 	.word	0x20000268
 8001840:	20000208 	.word	0x20000208
 8001844:	200002cc 	.word	0x200002cc
 8001848:	200002d0 	.word	0x200002d0
 800184c:	08009a34 	.word	0x08009a34
 8001850:	08009a74 	.word	0x08009a74

08001854 <colorAnalyse>:


// --- fonction d'analyse et de prise de décision ---

static void colorAnalyse(h_color_sensor_t * h_color_sensor, color_t green, color_t red){
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	printf("green : %ld \r\n",green);
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	480f      	ldr	r0, [pc, #60]	; (80018a0 <colorAnalyse+0x4c>)
 8001864:	f004 feb6 	bl	80065d4 <iprintf>
	printf("red : %ld \r\n",red);
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <colorAnalyse+0x50>)
 800186c:	f004 feb2 	bl	80065d4 <iprintf>
	if(green<red){
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d203      	bcs.n	8001880 <colorAnalyse+0x2c>
		printf("c'est vert\r\n");
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <colorAnalyse+0x54>)
 800187a:	f004 ff31 	bl	80066e0 <puts>
		colorDoMeasureAgain(h_color_sensor);
	}
	else {
		printf("c'est rouge\r\n");
	}
}
 800187e:	e00a      	b.n	8001896 <colorAnalyse+0x42>
	else if(green==red){
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d103      	bne.n	8001890 <colorAnalyse+0x3c>
		colorDoMeasureAgain(h_color_sensor);
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f811 	bl	80018b0 <colorDoMeasureAgain>
}
 800188e:	e002      	b.n	8001896 <colorAnalyse+0x42>
		printf("c'est rouge\r\n");
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <colorAnalyse+0x58>)
 8001892:	f004 ff25 	bl	80066e0 <puts>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	08009a94 	.word	0x08009a94
 80018a4:	08009aa4 	.word	0x08009aa4
 80018a8:	08009ab4 	.word	0x08009ab4
 80018ac:	08009ac0 	.word	0x08009ac0

080018b0 <colorDoMeasureAgain>:

static void colorDoMeasureAgain(h_color_sensor_t * h_color_sensor){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	colorEnable(h_color_sensor);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fc4f 	bl	800115c <colorEnable>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <timer_handle>:
 * tim_mode_t mode : htim configuration accirding to what is in .ioc file (INPUT_CAPTURE_IT, BASE_IT, PWM)
 * tim_status_t status : same but START,STOP
 * uint32_t channel ; the output channel of htim
 * @return none
 */
void timer_handle(TIM_HandleTypeDef htim, tim_mode_t mode, tim_status_t status,uint32_t channel){
 80018c6:	b084      	sub	sp, #16
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	f107 0c08 	add.w	ip, r7, #8
 80018d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(status==START){
 80018d4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11b      	bne.n	8001914 <timer_handle+0x4e>
		switch(mode){
 80018dc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d00c      	beq.n	80018fe <timer_handle+0x38>
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	dc53      	bgt.n	8001990 <timer_handle+0xca>
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <timer_handle+0x2c>
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d00c      	beq.n	800190a <timer_handle+0x44>
			break;
		case BASE_IT:
			HAL_TIM_Base_Start_IT(&htim);
			break;
		default :
			break;
 80018f0:	e04e      	b.n	8001990 <timer_handle+0xca>
			HAL_TIM_IC_Start_IT(&htim, channel);
 80018f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80018f4:	f107 0008 	add.w	r0, r7, #8
 80018f8:	f002 fc3a 	bl	8004170 <HAL_TIM_IC_Start_IT>
			break;
 80018fc:	e04f      	b.n	800199e <timer_handle+0xd8>
			HAL_TIM_PWM_Start(&htim,channel);
 80018fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001900:	f107 0008 	add.w	r0, r7, #8
 8001904:	f002 fa58 	bl	8003db8 <HAL_TIM_PWM_Start>
			break;
 8001908:	e049      	b.n	800199e <timer_handle+0xd8>
			HAL_TIM_Base_Start_IT(&htim);
 800190a:	f107 0008 	add.w	r0, r7, #8
 800190e:	f002 f94b 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
			break;
 8001912:	e044      	b.n	800199e <timer_handle+0xd8>
		}
	}
	else if (status==STOP){
 8001914:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11b      	bne.n	8001954 <timer_handle+0x8e>
		switch(mode){
 800191c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001920:	2b03      	cmp	r3, #3
 8001922:	d00c      	beq.n	800193e <timer_handle+0x78>
 8001924:	2b03      	cmp	r3, #3
 8001926:	dc35      	bgt.n	8001994 <timer_handle+0xce>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d002      	beq.n	8001932 <timer_handle+0x6c>
 800192c:	2b02      	cmp	r3, #2
 800192e:	d00c      	beq.n	800194a <timer_handle+0x84>
			break;
		case BASE_IT:
			HAL_TIM_Base_Stop_IT(&htim);
			break;
		default :
			break;
 8001930:	e030      	b.n	8001994 <timer_handle+0xce>
			HAL_TIM_IC_Stop_IT(&htim, channel);
 8001932:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001934:	f107 0008 	add.w	r0, r7, #8
 8001938:	f002 fd6a 	bl	8004410 <HAL_TIM_IC_Stop_IT>
			break;
 800193c:	e02f      	b.n	800199e <timer_handle+0xd8>
			HAL_TIM_PWM_Stop(&htim,channel);
 800193e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001940:	f107 0008 	add.w	r0, r7, #8
 8001944:	f002 fb32 	bl	8003fac <HAL_TIM_PWM_Stop>
			break;
 8001948:	e029      	b.n	800199e <timer_handle+0xd8>
			HAL_TIM_Base_Stop_IT(&htim);
 800194a:	f107 0008 	add.w	r0, r7, #8
 800194e:	f002 f9a3 	bl	8003c98 <HAL_TIM_Base_Stop_IT>
			break;
 8001952:	e024      	b.n	800199e <timer_handle+0xd8>
		}
	}
	else if (status==INIT){
 8001954:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001958:	2b02      	cmp	r3, #2
 800195a:	d11d      	bne.n	8001998 <timer_handle+0xd2>
		switch(mode){
 800195c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001960:	2b03      	cmp	r3, #3
 8001962:	d00b      	beq.n	800197c <timer_handle+0xb6>
 8001964:	2b03      	cmp	r3, #3
 8001966:	dc19      	bgt.n	800199c <timer_handle+0xd6>
 8001968:	2b01      	cmp	r3, #1
 800196a:	d002      	beq.n	8001972 <timer_handle+0xac>
 800196c:	2b02      	cmp	r3, #2
 800196e:	d00a      	beq.n	8001986 <timer_handle+0xc0>
			break;
		case BASE_IT:
			HAL_TIM_Base_Init(&htim);
			break;
		default :
			break;
 8001970:	e014      	b.n	800199c <timer_handle+0xd6>
			HAL_TIM_IC_Init(&htim);
 8001972:	f107 0008 	add.w	r0, r7, #8
 8001976:	f002 fb99 	bl	80040ac <HAL_TIM_IC_Init>
			break;
 800197a:	e010      	b.n	800199e <timer_handle+0xd8>
			HAL_TIM_PWM_Init(&htim);
 800197c:	f107 0008 	add.w	r0, r7, #8
 8001980:	f002 f9b9 	bl	8003cf6 <HAL_TIM_PWM_Init>
			break;
 8001984:	e00b      	b.n	800199e <timer_handle+0xd8>
			HAL_TIM_Base_Init(&htim);
 8001986:	f107 0008 	add.w	r0, r7, #8
 800198a:	f002 f8b5 	bl	8003af8 <HAL_TIM_Base_Init>
			break;
 800198e:	e006      	b.n	800199e <timer_handle+0xd8>
			break;
 8001990:	bf00      	nop
 8001992:	e004      	b.n	800199e <timer_handle+0xd8>
			break;
 8001994:	bf00      	nop
 8001996:	e002      	b.n	800199e <timer_handle+0xd8>
		}
	}
 8001998:	bf00      	nop
 800199a:	e000      	b.n	800199e <timer_handle+0xd8>
			break;
 800199c:	bf00      	nop
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b004      	add	sp, #16
 80019a8:	4770      	bx	lr

080019aa <GPIO_write>:
 * uint16_t gpio_pin : The pin of the GPIO you want to deal with
 * GPIO_PinState gpio_PinState : the state you want your GPIO to have (1 or 0)
 *
 * @return 0 if fail else 1
 */
void GPIO_write(GPIO_TypeDef * gpio_port,uint16_t gpio_pin,GPIO_PinState gpio_PinState ){
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(gpio_port,gpio_pin,gpio_PinState);
 80019ba:	787a      	ldrb	r2, [r7, #1]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 ff9d 	bl	8002900 <HAL_GPIO_WritePin>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==button_Pin){
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e0:	d109      	bne.n	80019f6 <HAL_GPIO_EXTI_Callback+0x26>
		printf("----- appui bouton -----\r\n");
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <HAL_GPIO_EXTI_Callback+0x30>)
 80019e4:	f004 fe7c 	bl	80066e0 <puts>
		colorSetPhotodiodeType(&color_sensor1, GREEN);
 80019e8:	2104      	movs	r1, #4
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x34>)
 80019ec:	f7ff fae6 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(&color_sensor1);
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x34>)
 80019f2:	f7ff fbb3 	bl	800115c <colorEnable>
	}
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	08009ad0 	.word	0x08009ad0
 8001a04:	20000428 	.word	0x20000428

08001a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0c:	f000 fc5d 	bl	80022ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a10:	f000 f82e 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a14:	f000 f93c 	bl	8001c90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a18:	f000 f898 	bl	8001b4c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001a1c:	f000 f908 	bl	8001c30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //desactive the internal buffering for scanf, that is set by default in syscalls.c
  setvbuf(stdin, NULL, _IONBF, 0);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <main+0x50>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6858      	ldr	r0, [r3, #4]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2202      	movs	r2, #2
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f004 fe78 	bl	8006720 <setvbuf>

	printf("---- color sensor ----\r\n");
 8001a30:	480a      	ldr	r0, [pc, #40]	; (8001a5c <main+0x54>)
 8001a32:	f004 fe55 	bl	80066e0 <puts>
  color_sensor_init(&color_sensor1,GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
  printf("color sensor initialized\r\nwaiting for button press : \r\n");*/


  	// ----- test 3 : Fonction de calibration -----
  	printf("--- calibration lancée ---\r\n");
 8001a36:	480a      	ldr	r0, [pc, #40]	; (8001a60 <main+0x58>)
 8001a38:	f004 fe52 	bl	80066e0 <puts>
  	colorSensorInit(&color_sensor1, GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2204      	movs	r2, #4
 8001a40:	2104      	movs	r1, #4
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <main+0x5c>)
 8001a44:	f7ff fb1a 	bl	800107c <colorSensorInit>
  	colorHandleCalibrationSensor(&color_sensor1,&color_sensor1_buffer_calibration);
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <main+0x60>)
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <main+0x5c>)
 8001a4c:	f7ff fbb2 	bl	80011b4 <colorHandleCalibrationSensor>
  	printf("waiting for button press to measure : \r\n");
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <main+0x64>)
 8001a52:	f004 fe45 	bl	80066e0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001a56:	e7fe      	b.n	8001a56 <main+0x4e>
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	08009aec 	.word	0x08009aec
 8001a60:	08009b04 	.word	0x08009b04
 8001a64:	20000428 	.word	0x20000428
 8001a68:	2000044c 	.word	0x2000044c
 8001a6c:	08009b24 	.word	0x08009b24

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	2230      	movs	r2, #48	; 0x30
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 f936 	bl	8005cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <SystemClock_Config+0xd4>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <SystemClock_Config+0xd4>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <SystemClock_Config+0xd4>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <SystemClock_Config+0xd8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <SystemClock_Config+0xd8>)
 8001ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <SystemClock_Config+0xd8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ad8:	2319      	movs	r3, #25
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001adc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 ff88 	bl	8002a04 <HAL_RCC_OscConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001afa:	f000 f9a9 	bl	8001e50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001afe:	f000 ff31 	bl	8002964 <HAL_PWREx_EnableOverDrive>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b08:	f000 f9a2 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2106      	movs	r1, #6
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 fa0e 	bl	8002f4c <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b36:	f000 f98b 	bl	8001e50 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3750      	adds	r7, #80	; 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000

08001b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	; 0x30
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001b82:	2263      	movs	r2, #99	; 0x63
 8001b84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001b8e:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <MX_TIM2_Init+0xe0>)
 8001b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9e:	4822      	ldr	r0, [pc, #136]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001ba0:	f001 ffaa 	bl	8003af8 <HAL_TIM_Base_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001baa:	f000 f951 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481b      	ldr	r0, [pc, #108]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001bbc:	f002 fea2 	bl	8004904 <HAL_TIM_ConfigClockSource>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bc6:	f000 f943 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bca:	4817      	ldr	r0, [pc, #92]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001bcc:	f002 fa6e 	bl	80040ac <HAL_TIM_IC_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bd6:	f000 f93b 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	480f      	ldr	r0, [pc, #60]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001bea:	f003 fa11 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001bf4:	f000 f92c 	bl	8001e50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_TIM2_Init+0xdc>)
 8001c10:	f002 fddb 	bl	80047ca <HAL_TIM_IC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001c1a:	f000 f919 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3730      	adds	r7, #48	; 0x30
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000354 	.word	0x20000354
 8001c2c:	000f4240 	.word	0x000f4240

08001c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <MX_USART1_UART_Init+0x5c>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_USART1_UART_Init+0x58>)
 8001c74:	f003 fa78 	bl	8005168 <HAL_UART_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c7e:	f000 f8e7 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003a0 	.word	0x200003a0
 8001c8c:	40011000 	.word	0x40011000

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a40      	ldr	r2, [pc, #256]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a2e      	ldr	r2, [pc, #184]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <MX_GPIO_Init+0x14c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(color_S2_GPIO_Port, color_S2_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2110      	movs	r1, #16
 8001d3a:	4829      	ldr	r0, [pc, #164]	; (8001de0 <MX_GPIO_Init+0x150>)
 8001d3c:	f000 fde0 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, color_enable_Pin|color_S0_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	21c0      	movs	r1, #192	; 0xc0
 8001d44:	4827      	ldr	r0, [pc, #156]	; (8001de4 <MX_GPIO_Init+0x154>)
 8001d46:	f000 fddb 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, color_S3_Pin|color_S1_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	21c0      	movs	r1, #192	; 0xc0
 8001d4e:	4826      	ldr	r0, [pc, #152]	; (8001de8 <MX_GPIO_Init+0x158>)
 8001d50:	f000 fdd6 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : color_S2_Pin */
  GPIO_InitStruct.Pin = color_S2_Pin;
 8001d54:	2310      	movs	r3, #16
 8001d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(color_S2_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481d      	ldr	r0, [pc, #116]	; (8001de0 <MX_GPIO_Init+0x150>)
 8001d6c:	f000 fc1c 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4619      	mov	r1, r3
 8001d86:	4819      	ldr	r0, [pc, #100]	; (8001dec <MX_GPIO_Init+0x15c>)
 8001d88:	f000 fc0e 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : color_enable_Pin color_S0_Pin */
  GPIO_InitStruct.Pin = color_enable_Pin|color_S0_Pin;
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4810      	ldr	r0, [pc, #64]	; (8001de4 <MX_GPIO_Init+0x154>)
 8001da4:	f000 fc00 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : color_S3_Pin color_S1_Pin */
  GPIO_InitStruct.Pin = color_S3_Pin|color_S1_Pin;
 8001da8:	23c0      	movs	r3, #192	; 0xc0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <MX_GPIO_Init+0x158>)
 8001dc0:	f000 fbf2 	bl	80025a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2028      	movs	r0, #40	; 0x28
 8001dca:	f000 fbb6 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dce:	2028      	movs	r0, #40	; 0x28
 8001dd0:	f000 fbcf 	bl	8002572 <HAL_NVIC_EnableIRQ>

}
 8001dd4:	bf00      	nop
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40022000 	.word	0x40022000

08001df0 <__io_putchar>:

/* USER CODE BEGIN 4 */

//--_ Redirection du printf
int __io_putchar(int ch){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001df8:	1d39      	adds	r1, r7, #4
 8001dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <__io_putchar+0x20>)
 8001e02:	f003 f9ff 	bl	8005204 <HAL_UART_Transmit>
	return ch;
 8001e06:	687b      	ldr	r3, [r7, #4]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200003a0 	.word	0x200003a0

08001e14 <__io_getchar>:


// --- redirection du scanf
int __io_getchar(void){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <__io_getchar+0x38>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e26:	1df9      	adds	r1, r7, #7
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <__io_getchar+0x38>)
 8001e30:	f003 fa6b 	bl	800530a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e34:	1df9      	adds	r1, r7, #7
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <__io_getchar+0x38>)
 8001e3e:	f003 f9e1 	bl	8005204 <HAL_UART_Transmit>
  return ch;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200003a0 	.word	0x200003a0

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	; 0x44
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d130      	bne.n	8001f28 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_TIM_Base_MspInit+0x8c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_TIM_Base_MspInit+0x8c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_TIM_Base_MspInit+0x8c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_TIM_Base_MspInit+0x8c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_TIM_Base_MspInit+0x8c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_TIM_Base_MspInit+0x8c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = color_input_freq_Pin;
 8001ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(color_input_freq_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4808      	ldr	r0, [pc, #32]	; (8001f34 <HAL_TIM_Base_MspInit+0x90>)
 8001f14:	f000 fb48 	bl	80025a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	201c      	movs	r0, #28
 8001f1e:	f000 fb0c 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f22:	201c      	movs	r0, #28
 8001f24:	f000 fb25 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0ac      	sub	sp, #176	; 0xb0
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	2284      	movs	r2, #132	; 0x84
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fec9 	bl	8005cf0 <memset>
  if(huart->Instance==USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_UART_MspInit+0xf4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d15c      	bne.n	8002022 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f68:	2340      	movs	r3, #64	; 0x40
 8001f6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 f9cf 	bl	8003318 <HAL_RCCEx_PeriphCLKConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f80:	f7ff ff66 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4810      	ldr	r0, [pc, #64]	; (8002034 <HAL_UART_MspInit+0xfc>)
 8001ff2:	f000 fad9 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002010:	2307      	movs	r3, #7
 8002012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800201a:	4619      	mov	r1, r3
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <HAL_UART_MspInit+0x100>)
 800201e:	f000 fac3 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	37b0      	adds	r7, #176	; 0xb0
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40011000 	.word	0x40011000
 8002030:	40023800 	.word	0x40023800
 8002034:	40020400 	.word	0x40020400
 8002038:	40020000 	.word	0x40020000

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f95c 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	colorSensorHandleInputCapture_IT(&color_sensor1, TIM2,&color_sensor1_buffer_calibration);
 8002094:	4a05      	ldr	r2, [pc, #20]	; (80020ac <TIM2_IRQHandler+0x1c>)
 8002096:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <TIM2_IRQHandler+0x20>)
 800209c:	f7ff f9b6 	bl	800140c <colorSensorHandleInputCapture_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <TIM2_IRQHandler+0x24>)
 80020a2:	f002 fa73 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000044c 	.word	0x2000044c
 80020b0:	20000428 	.word	0x20000428
 80020b4:	20000354 	.word	0x20000354

080020b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80020bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020c0:	f000 fc38 	bl	8002934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e2:	f003 fddb 	bl	8005c9c <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
	return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800210a:	e7fe      	b.n	800210a <_exit+0x12>

0800210c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e00a      	b.n	8002134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211e:	f7ff fe79 	bl	8001e14 <__io_getchar>
 8002122:	4601      	mov	r1, r0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf0      	blt.n	800211e <_read+0x12>
	}

return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e009      	b.n	800216c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	60ba      	str	r2, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fe45 	bl	8001df0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf1      	blt.n	8002158 <_write+0x12>
	}
	return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_close>:

int _close(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
	return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a6:	605a      	str	r2, [r3, #4]
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_isatty>:

int _isatty(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return 1;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f003 fd40 	bl	8005c9c <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20050000 	.word	0x20050000
 8002248:	00000400 	.word	0x00000400
 800224c:	20000454 	.word	0x20000454
 8002250:	20000470 	.word	0x20000470

08002254 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a2:	f7ff ffd7 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f003 fcff 	bl	8005ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7ff fbad 	bl	8001a08 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022bc:	08009f78 	.word	0x08009f78
  ldr r2, =_sbss
 80022c0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022c4:	2000046c 	.word	0x2000046c

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>

080022ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ce:	2003      	movs	r0, #3
 80022d0:	f000 f928 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d4:	200f      	movs	r0, #15
 80022d6:	f000 f805 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022da:	f7ff fdbf 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f943 	bl	800258e <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f000 f90b 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000000 	.word	0x20000000
 800233c:	20000008 	.word	0x20000008
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008
 8002368:	20000458 	.word	0x20000458

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000458 	.word	0x20000458

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x40>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00
 80023c8:	05fa0000 	.word	0x05fa0000

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	; (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e175      	b.n	80028b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	f040 8164 	bne.w	80028ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d005      	beq.n	80025fe <HAL_GPIO_Init+0x56>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d130      	bne.n	8002660 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 0201 	and.w	r2, r3, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d017      	beq.n	800269c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d123      	bne.n	80026f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80be 	beq.w	80028ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800274a:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <HAL_GPIO_Init+0x328>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_GPIO_Init+0x32c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d037      	beq.n	80027e6 <HAL_GPIO_Init+0x23e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <HAL_GPIO_Init+0x330>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d031      	beq.n	80027e2 <HAL_GPIO_Init+0x23a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a56      	ldr	r2, [pc, #344]	; (80028dc <HAL_GPIO_Init+0x334>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02b      	beq.n	80027de <HAL_GPIO_Init+0x236>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a55      	ldr	r2, [pc, #340]	; (80028e0 <HAL_GPIO_Init+0x338>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d025      	beq.n	80027da <HAL_GPIO_Init+0x232>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_GPIO_Init+0x33c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01f      	beq.n	80027d6 <HAL_GPIO_Init+0x22e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <HAL_GPIO_Init+0x340>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d019      	beq.n	80027d2 <HAL_GPIO_Init+0x22a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_GPIO_Init+0x344>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_GPIO_Init+0x226>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a51      	ldr	r2, [pc, #324]	; (80028f0 <HAL_GPIO_Init+0x348>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00d      	beq.n	80027ca <HAL_GPIO_Init+0x222>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <HAL_GPIO_Init+0x34c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x21e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4f      	ldr	r2, [pc, #316]	; (80028f8 <HAL_GPIO_Init+0x350>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_GPIO_Init+0x21a>
 80027be:	2309      	movs	r3, #9
 80027c0:	e012      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027c2:	230a      	movs	r3, #10
 80027c4:	e010      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027c6:	2308      	movs	r3, #8
 80027c8:	e00e      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e00c      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x328>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a34      	ldr	r2, [pc, #208]	; (80028fc <HAL_GPIO_Init+0x354>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_GPIO_Init+0x354>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a14      	ldr	r2, [pc, #80]	; (80028fc <HAL_GPIO_Init+0x354>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f ae86 	bls.w	80025c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021400 	.word	0x40021400
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40021c00 	.word	0x40021c00
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40022400 	.word	0x40022400
 80028fc:	40013c00 	.word	0x40013c00

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294a:	4a05      	ldr	r2, [pc, #20]	; (8002960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f83c 	bl	80019d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40013c00 	.word	0x40013c00

08002964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002992:	f7ff fceb 	bl	800236c <HAL_GetTick>
 8002996:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002998:	e009      	b.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299a:	f7ff fce7 	bl	800236c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a8:	d901      	bls.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e022      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d1ee      	bne.n	800299a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c8:	f7ff fcd0 	bl	800236c <HAL_GetTick>
 80029cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d0:	f7ff fccc 	bl	800236c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e291      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b96      	ldr	r3, [pc, #600]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a34:	4b93      	ldr	r3, [pc, #588]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
 8002a40:	4b90      	ldr	r3, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x130>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e26b      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x7a>
 8002a70:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a83      	ldr	r2, [pc, #524]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x9c>
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7b      	ldr	r2, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fc42 	bl	800236c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff fc3e 	bl	800236c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e21f      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fc2e 	bl	800236c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff fc2a 	bl	800236c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e20b      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x110>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d069      	beq.n	8002c16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1df      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	493d      	ldr	r1, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e040      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fbe0 	bl	800236c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fbdc 	bl	800236c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1bd      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4929      	ldr	r1, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fbbc 	bl	800236c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7ff fbb8 	bl	800236c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e199      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d038      	beq.n	8002c94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7ff fb99 	bl	800236c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7ff fb95 	bl	800236c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e176      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x23a>
 8002c5c:	e01a      	b.n	8002c94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fb7f 	bl	800236c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7ff fb7b 	bl	800236c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d903      	bls.n	8002c88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e15c      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
 8002c84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a4 	beq.w	8002dea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a87      	ldr	r2, [pc, #540]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b85      	ldr	r3, [pc, #532]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cca:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7e      	ldr	r2, [pc, #504]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff fb43 	bl	800236c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7ff fb3f 	bl	800236c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e120      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x31a>
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x33c>
 8002d26:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a66      	ldr	r2, [pc, #408]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x35e>
 8002d48:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a60      	ldr	r2, [pc, #384]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	4b5e      	ldr	r3, [pc, #376]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a5d      	ldr	r2, [pc, #372]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d62:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a5a      	ldr	r2, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a57      	ldr	r2, [pc, #348]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7ff faf3 	bl	800236c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7ff faef 	bl	800236c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0ce      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x386>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7ff fadd 	bl	800236c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff fad9 	bl	800236c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0b8      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a4 	beq.w	8002f3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d06b      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d149      	bne.n	8002e9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7ff faaa 	bl	800236c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7ff faa6 	bl	800236c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e087      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff fa7a 	bl	800236c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7ff fa76 	bl	800236c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e057      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x478>
 8002e9a:	e04f      	b.n	8002f3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fa60 	bl	800236c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7ff fa5c 	bl	800236c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e03d      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4ac>
 8002ece:	e035      	b.n	8002f3c <HAL_RCC_OscConfig+0x538>
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x544>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d121      	bne.n	8002f38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d11a      	bne.n	8002f38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	3b01      	subs	r3, #1
 8002f22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d0      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	4965      	ldr	r1, [pc, #404]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d040      	beq.n	8003070 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d115      	bne.n	800302e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e073      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06b      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4936      	ldr	r1, [pc, #216]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7ff f994 	bl	800236c <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7ff f990 	bl	800236c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e053      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d210      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 020f 	bic.w	r2, r3, #15
 8003086:	4922      	ldr	r1, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f821 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1cc>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1d0>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1d4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f8f0 	bl	80022e4 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	08009b58 	.word	0x08009b58
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b090      	sub	sp, #64	; 0x40
 800312a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d00d      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x40>
 8003148:	2b08      	cmp	r3, #8
 800314a:	f200 80a1 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x16c>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 8003152:	2b04      	cmp	r3, #4
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x3a>
 8003156:	e09b      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315c:	e09b      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003162:	e098      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800316e:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d028      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	2200      	movs	r2, #0
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	627a      	str	r2, [r7, #36]	; 0x24
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800318c:	2100      	movs	r1, #0
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003190:	fb03 f201 	mul.w	r2, r3, r1
 8003194:	2300      	movs	r3, #0
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	4413      	add	r3, r2
 800319c:	4a43      	ldr	r2, [pc, #268]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 800319e:	fba0 1202 	umull	r1, r2, r0, r2
 80031a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a4:	460a      	mov	r2, r1
 80031a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80031a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031aa:	4413      	add	r3, r2
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	2200      	movs	r2, #0
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	61fa      	str	r2, [r7, #28]
 80031b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031be:	f7fd fd33 	bl	8000c28 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4613      	mov	r3, r2
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ca:	e053      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	617a      	str	r2, [r7, #20]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031de:	f04f 0b00 	mov.w	fp, #0
 80031e2:	4652      	mov	r2, sl
 80031e4:	465b      	mov	r3, fp
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	ebb2 080a 	subs.w	r8, r2, sl
 80031fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800320e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003216:	ebb2 0408 	subs.w	r4, r2, r8
 800321a:	eb63 0509 	sbc.w	r5, r3, r9
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	00eb      	lsls	r3, r5, #3
 8003228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800322c:	00e2      	lsls	r2, r4, #3
 800322e:	4614      	mov	r4, r2
 8003230:	461d      	mov	r5, r3
 8003232:	eb14 030a 	adds.w	r3, r4, sl
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	eb45 030b 	adc.w	r3, r5, fp
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324a:	4629      	mov	r1, r5
 800324c:	028b      	lsls	r3, r1, #10
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003254:	4621      	mov	r1, r4
 8003256:	028a      	lsls	r2, r1, #10
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	2200      	movs	r2, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003268:	f7fd fcde 	bl	8000c28 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4613      	mov	r3, r2
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003298:	4618      	mov	r0, r3
 800329a:	3740      	adds	r7, #64	; 0x40
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	017d7840 	.word	0x017d7840

080032b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000

080032c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032cc:	f7ff fff0 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0a9b      	lsrs	r3, r3, #10
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08009b68 	.word	0x08009b68

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f4:	f7ff ffdc 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0b5b      	lsrs	r3, r3, #13
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	08009b68 	.word	0x08009b68

08003318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003340:	4b69      	ldr	r3, [pc, #420]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a68      	ldr	r2, [pc, #416]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800334a:	6093      	str	r3, [r2, #8]
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	4964      	ldr	r1, [pc, #400]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	4959      	ldr	r1, [pc, #356]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d101      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d017      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ae:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	494a      	ldr	r1, [pc, #296]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d101      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 808b 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	6413      	str	r3, [r2, #64]	; 0x40
 8003408:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fe ffa4 	bl	800236c <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fe ffa0 	bl	800236c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e357      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d035      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d02e      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d114      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe ff68 	bl	800236c <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fe ff64 	bl	800236c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e319      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ee      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034de:	400b      	ands	r3, r1
 80034e0:	4901      	ldr	r1, [pc, #4]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
 80034e6:	e00b      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000
 80034f0:	0ffffcff 	.word	0x0ffffcff
 80034f4:	4baa      	ldr	r3, [pc, #680]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4aa9      	ldr	r2, [pc, #676]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034fe:	6093      	str	r3, [r2, #8]
 8003500:	4ba7      	ldr	r3, [pc, #668]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	49a4      	ldr	r1, [pc, #656]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350e:	4313      	orrs	r3, r2
 8003510:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800351e:	4ba0      	ldr	r3, [pc, #640]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	4a9e      	ldr	r2, [pc, #632]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800352e:	4b9c      	ldr	r3, [pc, #624]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003530:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	4999      	ldr	r1, [pc, #612]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354c:	4b94      	ldr	r3, [pc, #592]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355a:	4991      	ldr	r1, [pc, #580]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800356e:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	4988      	ldr	r1, [pc, #544]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003590:	4b83      	ldr	r3, [pc, #524]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	4980      	ldr	r1, [pc, #512]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4977      	ldr	r1, [pc, #476]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d4:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	496f      	ldr	r1, [pc, #444]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f023 020c 	bic.w	r2, r3, #12
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	4966      	ldr	r1, [pc, #408]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	495e      	ldr	r1, [pc, #376]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800363a:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	4955      	ldr	r1, [pc, #340]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	494d      	ldr	r1, [pc, #308]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800367e:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4944      	ldr	r1, [pc, #272]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036a0:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	493c      	ldr	r1, [pc, #240]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036c2:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	4933      	ldr	r1, [pc, #204]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f2:	492b      	ldr	r1, [pc, #172]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003714:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d101      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	4909      	ldr	r1, [pc, #36]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d006      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80d9 	beq.w	8003946 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003794:	4b02      	ldr	r3, [pc, #8]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a01      	ldr	r2, [pc, #4]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800379e:	e001      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a6:	f7fe fde1 	bl	800236c <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ae:	f7fe fddd 	bl	800236c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e194      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d021      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11d      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037e0:	4b64      	ldr	r3, [pc, #400]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	0c1b      	lsrs	r3, r3, #16
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037ee:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f4:	0e1b      	lsrs	r3, r3, #24
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	019a      	lsls	r2, r3, #6
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	071b      	lsls	r3, r3, #28
 8003814:	4957      	ldr	r1, [pc, #348]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02e      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003846:	d129      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003848:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385c:	0f1b      	lsrs	r3, r3, #28
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	019a      	lsls	r2, r3, #6
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	071b      	lsls	r3, r3, #28
 800387c:	493d      	ldr	r1, [pc, #244]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800388a:	f023 021f 	bic.w	r2, r3, #31
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	3b01      	subs	r3, #1
 8003894:	4937      	ldr	r1, [pc, #220]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01d      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ae:	0e1b      	lsrs	r3, r3, #24
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038b6:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038bc:	0f1b      	lsrs	r3, r3, #28
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	019a      	lsls	r2, r3, #6
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	071b      	lsls	r3, r3, #28
 80038dc:	4925      	ldr	r1, [pc, #148]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d011      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	019a      	lsls	r2, r3, #6
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	041b      	lsls	r3, r3, #16
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	071b      	lsls	r3, r3, #28
 800390c:	4919      	ldr	r1, [pc, #100]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800391e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fe fd24 	bl	800236c <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003928:	f7fe fd20 	bl	800236c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0d7      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	f040 80cd 	bne.w	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395a:	f7fe fd07 	bl	800236c <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003962:	f7fe fd03 	bl	800236c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b64      	cmp	r3, #100	; 0x64
 800396e:	d903      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0ba      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003974:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003984:	d0ed      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02e      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d12a      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ae:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039bc:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	0f1b      	lsrs	r3, r3, #28
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	019a      	lsls	r2, r3, #6
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	071b      	lsls	r3, r3, #28
 80039e2:	4944      	ldr	r1, [pc, #272]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039ea:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	493d      	ldr	r1, [pc, #244]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d022      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a18:	d11d      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	0e1b      	lsrs	r3, r3, #24
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a28:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	0f1b      	lsrs	r3, r3, #28
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	019a      	lsls	r2, r3, #6
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	4929      	ldr	r1, [pc, #164]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	0c1b      	lsrs	r3, r3, #16
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	019a      	lsls	r2, r3, #6
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	4917      	ldr	r1, [pc, #92]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4911      	ldr	r1, [pc, #68]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac0:	f7fe fc54 	bl	800236c <HAL_GetTick>
 8003ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ac8:	f7fe fc50 	bl	800236c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e007      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae6:	d1ef      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e049      	b.n	8003b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe f9c0 	bl	8001ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 ffe0 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e054      	b.n	8003c6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d01d      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_TIM_Base_Start_IT+0xe0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_TIM_Base_Start_IT+0xe4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d115      	bne.n	8003c54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_TIM_Base_Start_IT+0xec>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d015      	beq.n	8003c66 <HAL_TIM_Base_Start_IT+0xbe>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d011      	beq.n	8003c66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	e008      	b.n	8003c66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e000      	b.n	8003c68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40010400 	.word	0x40010400
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40001800 	.word	0x40001800
 8003c94:	00010007 	.word	0x00010007

08003c98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	f240 4344 	movw	r3, #1092	; 0x444
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e049      	b.n	8003d9c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f841 	bl	8003da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 fee1 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start+0x24>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e03c      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d109      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x3e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e02f      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x58>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e022      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x72>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e015      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x8c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e092      	b.n	8003f84 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xb6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6c:	e023      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xc6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	e01b      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xd6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	e013      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xe6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e9c:	e00b      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0xf6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eac:	e003      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f880 	bl	8004fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <HAL_TIM_PWM_Start+0x1d4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_TIM_PWM_Start+0x120>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <HAL_TIM_PWM_Start+0x1d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_PWM_Start+0x124>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_TIM_PWM_Start+0x126>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_TIM_PWM_Start+0x1d4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d01d      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <HAL_TIM_PWM_Start+0x1dc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_TIM_PWM_Start+0x1e0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_TIM_PWM_Start+0x1e4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_TIM_PWM_Start+0x1d8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x18a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d115      	bne.n	8003f6e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d015      	beq.n	8003f80 <HAL_TIM_PWM_Start+0x1c8>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	d011      	beq.n	8003f80 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	e008      	b.n	8003f80 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e000      	b.n	8003f82 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40001800 	.word	0x40001800
 8003fa8:	00010007 	.word	0x00010007

08003fac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f800 	bl	8004fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a36      	ldr	r2, [pc, #216]	; (80040a4 <HAL_TIM_PWM_Stop+0xf8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_TIM_PWM_Stop+0x2c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a35      	ldr	r2, [pc, #212]	; (80040a8 <HAL_TIM_PWM_Stop+0xfc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIM_PWM_Stop+0x30>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_TIM_PWM_Stop+0x32>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d017      	beq.n	8004012 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_TIM_PWM_Stop+0x66>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	f240 4344 	movw	r3, #1092	; 0x444
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_TIM_PWM_Stop+0x66>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	f241 1311 	movw	r3, #4369	; 0x1111
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_TIM_PWM_Stop+0x96>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	f240 4344 	movw	r3, #1092	; 0x444
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d107      	bne.n	8004042 <HAL_TIM_PWM_Stop+0x96>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_TIM_PWM_Stop+0xa6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004050:	e023      	b.n	800409a <HAL_TIM_PWM_Stop+0xee>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d104      	bne.n	8004062 <HAL_TIM_PWM_Stop+0xb6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004060:	e01b      	b.n	800409a <HAL_TIM_PWM_Stop+0xee>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d104      	bne.n	8004072 <HAL_TIM_PWM_Stop+0xc6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004070:	e013      	b.n	800409a <HAL_TIM_PWM_Stop+0xee>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d104      	bne.n	8004082 <HAL_TIM_PWM_Stop+0xd6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004080:	e00b      	b.n	800409a <HAL_TIM_PWM_Stop+0xee>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Stop+0xe6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	e003      	b.n	800409a <HAL_TIM_PWM_Stop+0xee>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40010400 	.word	0x40010400

080040ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e049      	b.n	8004152 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f841 	bl	800415a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fd06 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <HAL_TIM_IC_Start_IT+0x1e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e023      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x66>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d104      	bne.n	800419e <HAL_TIM_IC_Start_IT+0x2e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e01b      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x66>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_IC_Start_IT+0x3e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	e013      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x66>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d104      	bne.n	80041be <HAL_TIM_IC_Start_IT+0x4e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e00b      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x66>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_IC_Start_IT+0x5e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e003      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x66>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <HAL_TIM_IC_Start_IT+0x78>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e013      	b.n	8004210 <HAL_TIM_IC_Start_IT+0xa0>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d104      	bne.n	80041f8 <HAL_TIM_IC_Start_IT+0x88>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e00b      	b.n	8004210 <HAL_TIM_IC_Start_IT+0xa0>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d104      	bne.n	8004208 <HAL_TIM_IC_Start_IT+0x98>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e003      	b.n	8004210 <HAL_TIM_IC_Start_IT+0xa0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800420e:	b2db      	uxtb	r3, r3
 8004210:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d102      	bne.n	800421e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004218:	7b7b      	ldrb	r3, [r7, #13]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0e2      	b.n	80043e8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d104      	bne.n	8004232 <HAL_TIM_IC_Start_IT+0xc2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	e023      	b.n	800427a <HAL_TIM_IC_Start_IT+0x10a>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d104      	bne.n	8004242 <HAL_TIM_IC_Start_IT+0xd2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	e01b      	b.n	800427a <HAL_TIM_IC_Start_IT+0x10a>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d104      	bne.n	8004252 <HAL_TIM_IC_Start_IT+0xe2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004250:	e013      	b.n	800427a <HAL_TIM_IC_Start_IT+0x10a>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d104      	bne.n	8004262 <HAL_TIM_IC_Start_IT+0xf2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004260:	e00b      	b.n	800427a <HAL_TIM_IC_Start_IT+0x10a>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b10      	cmp	r3, #16
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0x102>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004270:	e003      	b.n	800427a <HAL_TIM_IC_Start_IT+0x10a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_TIM_IC_Start_IT+0x11a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004288:	e013      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x142>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d104      	bne.n	800429a <HAL_TIM_IC_Start_IT+0x12a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004298:	e00b      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x142>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d104      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0x13a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a8:	e003      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x142>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d841      	bhi.n	800433c <HAL_TIM_IC_Start_IT+0x1cc>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <HAL_TIM_IC_Start_IT+0x150>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042f5 	.word	0x080042f5
 80042c4:	0800433d 	.word	0x0800433d
 80042c8:	0800433d 	.word	0x0800433d
 80042cc:	0800433d 	.word	0x0800433d
 80042d0:	08004307 	.word	0x08004307
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	0800433d 	.word	0x0800433d
 80042dc:	0800433d 	.word	0x0800433d
 80042e0:	08004319 	.word	0x08004319
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	0800433d 	.word	0x0800433d
 80042f0:	0800432b 	.word	0x0800432b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0202 	orr.w	r2, r2, #2
 8004302:	60da      	str	r2, [r3, #12]
      break;
 8004304:	e01d      	b.n	8004342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0204 	orr.w	r2, r2, #4
 8004314:	60da      	str	r2, [r3, #12]
      break;
 8004316:	e014      	b.n	8004342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	60da      	str	r2, [r3, #12]
      break;
 8004328:	e00b      	b.n	8004342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0210 	orr.w	r2, r2, #16
 8004338:	60da      	str	r2, [r3, #12]
      break;
 800433a:	e002      	b.n	8004342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      break;
 8004340:	bf00      	nop
  }

  if (status == HAL_OK)
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d14e      	bne.n	80043e6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fe37 	bl	8004fc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <HAL_TIM_IC_Start_IT+0x280>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d01d      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_TIM_IC_Start_IT+0x284>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_TIM_IC_Start_IT+0x288>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <HAL_TIM_IC_Start_IT+0x28c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <HAL_TIM_IC_Start_IT+0x290>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_TIM_IC_Start_IT+0x294>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIM_IC_Start_IT+0x236>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a19      	ldr	r2, [pc, #100]	; (8004408 <HAL_TIM_IC_Start_IT+0x298>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d115      	bne.n	80043d2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_TIM_IC_Start_IT+0x29c>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b06      	cmp	r3, #6
 80043b6:	d015      	beq.n	80043e4 <HAL_TIM_IC_Start_IT+0x274>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d011      	beq.n	80043e4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	e008      	b.n	80043e4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40010400 	.word	0x40010400
 8004404:	40014000 	.word	0x40014000
 8004408:	40001800 	.word	0x40001800
 800440c:	00010007 	.word	0x00010007

08004410 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d841      	bhi.n	80044a8 <HAL_TIM_IC_Stop_IT+0x98>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_TIM_IC_Stop_IT+0x1c>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004461 	.word	0x08004461
 8004430:	080044a9 	.word	0x080044a9
 8004434:	080044a9 	.word	0x080044a9
 8004438:	080044a9 	.word	0x080044a9
 800443c:	08004473 	.word	0x08004473
 8004440:	080044a9 	.word	0x080044a9
 8004444:	080044a9 	.word	0x080044a9
 8004448:	080044a9 	.word	0x080044a9
 800444c:	08004485 	.word	0x08004485
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044a9 	.word	0x080044a9
 8004458:	080044a9 	.word	0x080044a9
 800445c:	08004497 	.word	0x08004497
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0202 	bic.w	r2, r2, #2
 800446e:	60da      	str	r2, [r3, #12]
      break;
 8004470:	e01d      	b.n	80044ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0204 	bic.w	r2, r2, #4
 8004480:	60da      	str	r2, [r3, #12]
      break;
 8004482:	e014      	b.n	80044ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0208 	bic.w	r2, r2, #8
 8004492:	60da      	str	r2, [r3, #12]
      break;
 8004494:	e00b      	b.n	80044ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0210 	bic.w	r2, r2, #16
 80044a4:	60da      	str	r2, [r3, #12]
      break;
 80044a6:	e002      	b.n	80044ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d166      	bne.n	8004582 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fd81 	bl	8004fc4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <HAL_TIM_IC_Stop_IT+0xe2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	f240 4344 	movw	r3, #1092	; 0x444
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IC_Stop_IT+0xe2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_IC_Stop_IT+0xf2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004500:	e023      	b.n	800454a <HAL_TIM_IC_Stop_IT+0x13a>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d104      	bne.n	8004512 <HAL_TIM_IC_Stop_IT+0x102>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004510:	e01b      	b.n	800454a <HAL_TIM_IC_Stop_IT+0x13a>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d104      	bne.n	8004522 <HAL_TIM_IC_Stop_IT+0x112>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004520:	e013      	b.n	800454a <HAL_TIM_IC_Stop_IT+0x13a>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d104      	bne.n	8004532 <HAL_TIM_IC_Stop_IT+0x122>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004530:	e00b      	b.n	800454a <HAL_TIM_IC_Stop_IT+0x13a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b10      	cmp	r3, #16
 8004536:	d104      	bne.n	8004542 <HAL_TIM_IC_Stop_IT+0x132>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004540:	e003      	b.n	800454a <HAL_TIM_IC_Stop_IT+0x13a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d104      	bne.n	800455a <HAL_TIM_IC_Stop_IT+0x14a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004558:	e013      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x172>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d104      	bne.n	800456a <HAL_TIM_IC_Stop_IT+0x15a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004568:	e00b      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x172>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d104      	bne.n	800457a <HAL_TIM_IC_Stop_IT+0x16a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004578:	e003      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x172>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0202 	mvn.w	r2, #2
 80045b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa76 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa68 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa79 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0204 	mvn.w	r2, #4
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa4c 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa3e 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa4f 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b08      	cmp	r3, #8
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0208 	mvn.w	r2, #8
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa22 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa14 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa25 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0210 	mvn.w	r2, #16
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2208      	movs	r2, #8
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f9f8 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f9ea 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f9fb 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0201 	mvn.w	r2, #1
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9c4 	bl	8004a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fd02 	bl	8005140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474a:	d10e      	bne.n	800476a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b80      	cmp	r3, #128	; 0x80
 8004758:	d107      	bne.n	800476a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fcf5 	bl	8005154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d10e      	bne.n	8004796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d107      	bne.n	8004796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f9a9 	bl	8004ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d10e      	bne.n	80047c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d107      	bne.n	80047c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f06f 0220 	mvn.w	r2, #32
 80047ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fcb5 	bl	800512c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e088      	b.n	80048fa <HAL_TIM_IC_ConfigChannel+0x130>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11b      	bne.n	800482e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6819      	ldr	r1, [r3, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f000 fa19 	bl	8004c3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 020c 	bic.w	r2, r2, #12
 8004818:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6999      	ldr	r1, [r3, #24]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	619a      	str	r2, [r3, #24]
 800482c:	e060      	b.n	80048f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d11c      	bne.n	800486e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6819      	ldr	r1, [r3, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f000 fa9d 	bl	8004d82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004856:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6999      	ldr	r1, [r3, #24]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	619a      	str	r2, [r3, #24]
 800486c:	e040      	b.n	80048f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d11b      	bne.n	80048ac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f000 faea 	bl	8004e5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 020c 	bic.w	r2, r2, #12
 8004896:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69d9      	ldr	r1, [r3, #28]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	61da      	str	r2, [r3, #28]
 80048aa:	e021      	b.n	80048f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d11c      	bne.n	80048ec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f000 fb07 	bl	8004ed4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69d9      	ldr	r1, [r3, #28]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	61da      	str	r2, [r3, #28]
 80048ea:	e001      	b.n	80048f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIM_ConfigClockSource+0x1c>
 800491c:	2302      	movs	r3, #2
 800491e:	e0b4      	b.n	8004a8a <HAL_TIM_ConfigClockSource+0x186>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <HAL_TIM_ConfigClockSource+0x190>)
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d03e      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0xd4>
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495e:	f200 8087 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	f000 8086 	beq.w	8004a76 <HAL_TIM_ConfigClockSource+0x172>
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	d87f      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d01a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0xa6>
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d87b      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d050      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x11a>
 800497c:	2b60      	cmp	r3, #96	; 0x60
 800497e:	d877      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b50      	cmp	r3, #80	; 0x50
 8004982:	d03c      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0xfa>
 8004984:	2b50      	cmp	r3, #80	; 0x50
 8004986:	d873      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d058      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x13a>
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d86f      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d064      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	2b30      	cmp	r3, #48	; 0x30
 8004996:	d86b      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d060      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d867      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05c      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d05a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 80049a8:	e062      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f000 fae3 	bl	8004f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	609a      	str	r2, [r3, #8]
      break;
 80049d6:	e04f      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6899      	ldr	r1, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f000 facc 	bl	8004f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049fa:	609a      	str	r2, [r3, #8]
      break;
 80049fc:	e03c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f000 f98a 	bl	8004d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2150      	movs	r1, #80	; 0x50
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fa99 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e02c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f000 f9e6 	bl	8004dfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2160      	movs	r1, #96	; 0x60
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fa89 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e01c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 f96a 	bl	8004d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fa79 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e00c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fa70 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004a6e:	e003      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      break;
 8004a74:	e000      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	fffeff88 	.word	0xfffeff88

08004a98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <TIM_Base_SetConfig+0x114>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1a:	d00f      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3d      	ldr	r2, [pc, #244]	; (8004c14 <TIM_Base_SetConfig+0x118>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a3c      	ldr	r2, [pc, #240]	; (8004c18 <TIM_Base_SetConfig+0x11c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3b      	ldr	r2, [pc, #236]	; (8004c1c <TIM_Base_SetConfig+0x120>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3a      	ldr	r2, [pc, #232]	; (8004c20 <TIM_Base_SetConfig+0x124>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2f      	ldr	r2, [pc, #188]	; (8004c10 <TIM_Base_SetConfig+0x114>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02b      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d027      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2c      	ldr	r2, [pc, #176]	; (8004c14 <TIM_Base_SetConfig+0x118>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d023      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <TIM_Base_SetConfig+0x11c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a2a      	ldr	r2, [pc, #168]	; (8004c1c <TIM_Base_SetConfig+0x120>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01b      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <TIM_Base_SetConfig+0x124>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d017      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a28      	ldr	r2, [pc, #160]	; (8004c24 <TIM_Base_SetConfig+0x128>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a27      	ldr	r2, [pc, #156]	; (8004c28 <TIM_Base_SetConfig+0x12c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a26      	ldr	r2, [pc, #152]	; (8004c2c <TIM_Base_SetConfig+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <TIM_Base_SetConfig+0x134>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a24      	ldr	r2, [pc, #144]	; (8004c34 <TIM_Base_SetConfig+0x138>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a23      	ldr	r2, [pc, #140]	; (8004c38 <TIM_Base_SetConfig+0x13c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <TIM_Base_SetConfig+0x114>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_Base_SetConfig+0xf8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <TIM_Base_SetConfig+0x124>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d103      	bne.n	8004bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	615a      	str	r2, [r3, #20]
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40010400 	.word	0x40010400
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40014400 	.word	0x40014400
 8004c2c:	40014800 	.word	0x40014800
 8004c30:	40001800 	.word	0x40001800
 8004c34:	40001c00 	.word	0x40001c00
 8004c38:	40002000 	.word	0x40002000

08004c3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <TIM_TI1_SetConfig+0xcc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01b      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d017      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <TIM_TI1_SetConfig+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a24      	ldr	r2, [pc, #144]	; (8004d10 <TIM_TI1_SetConfig+0xd4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <TIM_TI1_SetConfig+0xd8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <TIM_TI1_SetConfig+0xdc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <TIM_TI1_SetConfig+0xe0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x66>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <TIM_TI1_SetConfig+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <TIM_TI1_SetConfig+0x6a>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <TIM_TI1_SetConfig+0x6c>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e003      	b.n	8004cc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f023 030a 	bic.w	r3, r3, #10
 8004ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 030a 	and.w	r3, r3, #10
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40000c00 	.word	0x40000c00
 8004d18:	40010400 	.word	0x40010400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40001800 	.word	0x40001800

08004d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 030a 	bic.w	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 0210 	bic.w	r2, r3, #16
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	031b      	lsls	r3, r3, #12
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 0210 	bic.w	r2, r3, #16
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	031b      	lsls	r3, r3, #12
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0303 	bic.w	r3, r3, #3
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004eac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	621a      	str	r2, [r3, #32]
}
 8004ec8:	bf00      	nop
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	031b      	lsls	r3, r3, #12
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	031b      	lsls	r3, r3, #12
 8004f2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f043 0307 	orr.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e06d      	b.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a30      	ldr	r2, [pc, #192]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2f      	ldr	r2, [pc, #188]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d108      	bne.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a20      	ldr	r2, [pc, #128]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d022      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d01d      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1d      	ldr	r2, [pc, #116]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d018      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00e      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10c      	bne.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40014000 	.word	0x40014000
 8005128:	40001800 	.word	0x40001800

0800512c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e040      	b.n	80051fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fed4 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	; 0x24
 8005194:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f974 	bl	8005494 <UART_SetConfig>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e022      	b.n	80051fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fbcc 	bl	800595c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fc53 	bl	8005aa0 <UART_CheckIdleState>
 80051fa:	4603      	mov	r3, r0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	; 0x28
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005218:	2b20      	cmp	r3, #32
 800521a:	d171      	bne.n	8005300 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_UART_Transmit+0x24>
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e06a      	b.n	8005302 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2221      	movs	r2, #33	; 0x21
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800523a:	f7fd f897 	bl	800236c <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005258:	d108      	bne.n	800526c <HAL_UART_Transmit+0x68>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e003      	b.n	8005274 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005274:	e02c      	b.n	80052d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fc44 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e038      	b.n	8005302 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	3302      	adds	r3, #2
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	e007      	b.n	80052be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	3301      	adds	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1cc      	bne.n	8005276 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2140      	movs	r1, #64	; 0x40
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fc11 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e005      	b.n	8005302 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e000      	b.n	8005302 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b08a      	sub	sp, #40	; 0x28
 800530e:	af02      	add	r7, sp, #8
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005320:	2b20      	cmp	r3, #32
 8005322:	f040 80b1 	bne.w	8005488 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_UART_Receive+0x28>
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0a9      	b.n	800548a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2222      	movs	r2, #34	; 0x22
 8005342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534c:	f7fd f80e 	bl	800236c <HAL_GetTick>
 8005350:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d10e      	bne.n	800538a <HAL_UART_Receive+0x80>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_UART_Receive+0x76>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f240 12ff 	movw	r2, #511	; 0x1ff
 800537a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800537e:	e02d      	b.n	80053dc <HAL_UART_Receive+0xd2>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	22ff      	movs	r2, #255	; 0xff
 8005384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005388:	e028      	b.n	80053dc <HAL_UART_Receive+0xd2>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <HAL_UART_Receive+0xa4>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d104      	bne.n	80053a4 <HAL_UART_Receive+0x9a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	22ff      	movs	r2, #255	; 0xff
 800539e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a2:	e01b      	b.n	80053dc <HAL_UART_Receive+0xd2>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	227f      	movs	r2, #127	; 0x7f
 80053a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ac:	e016      	b.n	80053dc <HAL_UART_Receive+0xd2>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b6:	d10d      	bne.n	80053d4 <HAL_UART_Receive+0xca>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <HAL_UART_Receive+0xc0>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	227f      	movs	r2, #127	; 0x7f
 80053c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c8:	e008      	b.n	80053dc <HAL_UART_Receive+0xd2>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	223f      	movs	r2, #63	; 0x3f
 80053ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d2:	e003      	b.n	80053dc <HAL_UART_Receive+0xd2>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Receive+0xf6>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005408:	e032      	b.n	8005470 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2120      	movs	r1, #32
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fb7a 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e032      	b.n	800548a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10c      	bne.n	8005444 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	b29a      	uxth	r2, r3
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	4013      	ands	r3, r2
 8005436:	b29a      	uxth	r2, r3
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3302      	adds	r3, #2
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e00c      	b.n	800545e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	b2da      	uxtb	r2, r3
 800544c:	8a7b      	ldrh	r3, [r7, #18]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	4013      	ands	r3, r2
 8005452:	b2da      	uxtb	r2, r3
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	3301      	adds	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1c6      	bne.n	800540a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4ba6      	ldr	r3, [pc, #664]	; (8005758 <UART_SetConfig+0x2c4>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a94      	ldr	r2, [pc, #592]	; (800575c <UART_SetConfig+0x2c8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d120      	bne.n	8005552 <UART_SetConfig+0xbe>
 8005510:	4b93      	ldr	r3, [pc, #588]	; (8005760 <UART_SetConfig+0x2cc>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b03      	cmp	r3, #3
 800551c:	d816      	bhi.n	800554c <UART_SetConfig+0xb8>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0x90>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005535 	.word	0x08005535
 8005528:	08005541 	.word	0x08005541
 800552c:	0800553b 	.word	0x0800553b
 8005530:	08005547 	.word	0x08005547
 8005534:	2301      	movs	r3, #1
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e150      	b.n	80057dc <UART_SetConfig+0x348>
 800553a:	2302      	movs	r3, #2
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e14d      	b.n	80057dc <UART_SetConfig+0x348>
 8005540:	2304      	movs	r3, #4
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e14a      	b.n	80057dc <UART_SetConfig+0x348>
 8005546:	2308      	movs	r3, #8
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e147      	b.n	80057dc <UART_SetConfig+0x348>
 800554c:	2310      	movs	r3, #16
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e144      	b.n	80057dc <UART_SetConfig+0x348>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a83      	ldr	r2, [pc, #524]	; (8005764 <UART_SetConfig+0x2d0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d132      	bne.n	80055c2 <UART_SetConfig+0x12e>
 800555c:	4b80      	ldr	r3, [pc, #512]	; (8005760 <UART_SetConfig+0x2cc>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d828      	bhi.n	80055bc <UART_SetConfig+0x128>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0xdc>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055bd 	.word	0x080055bd
 8005578:	080055bd 	.word	0x080055bd
 800557c:	080055bd 	.word	0x080055bd
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055bd 	.word	0x080055bd
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080055bd 	.word	0x080055bd
 8005590:	080055ab 	.word	0x080055ab
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055bd 	.word	0x080055bd
 80055a0:	080055b7 	.word	0x080055b7
 80055a4:	2300      	movs	r3, #0
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e118      	b.n	80057dc <UART_SetConfig+0x348>
 80055aa:	2302      	movs	r3, #2
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e115      	b.n	80057dc <UART_SetConfig+0x348>
 80055b0:	2304      	movs	r3, #4
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e112      	b.n	80057dc <UART_SetConfig+0x348>
 80055b6:	2308      	movs	r3, #8
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e10f      	b.n	80057dc <UART_SetConfig+0x348>
 80055bc:	2310      	movs	r3, #16
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e10c      	b.n	80057dc <UART_SetConfig+0x348>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a68      	ldr	r2, [pc, #416]	; (8005768 <UART_SetConfig+0x2d4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d120      	bne.n	800560e <UART_SetConfig+0x17a>
 80055cc:	4b64      	ldr	r3, [pc, #400]	; (8005760 <UART_SetConfig+0x2cc>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055d6:	2b30      	cmp	r3, #48	; 0x30
 80055d8:	d013      	beq.n	8005602 <UART_SetConfig+0x16e>
 80055da:	2b30      	cmp	r3, #48	; 0x30
 80055dc:	d814      	bhi.n	8005608 <UART_SetConfig+0x174>
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d009      	beq.n	80055f6 <UART_SetConfig+0x162>
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d810      	bhi.n	8005608 <UART_SetConfig+0x174>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <UART_SetConfig+0x15c>
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d006      	beq.n	80055fc <UART_SetConfig+0x168>
 80055ee:	e00b      	b.n	8005608 <UART_SetConfig+0x174>
 80055f0:	2300      	movs	r3, #0
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e0f2      	b.n	80057dc <UART_SetConfig+0x348>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e0ef      	b.n	80057dc <UART_SetConfig+0x348>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e0ec      	b.n	80057dc <UART_SetConfig+0x348>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e0e9      	b.n	80057dc <UART_SetConfig+0x348>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e0e6      	b.n	80057dc <UART_SetConfig+0x348>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a56      	ldr	r2, [pc, #344]	; (800576c <UART_SetConfig+0x2d8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d120      	bne.n	800565a <UART_SetConfig+0x1c6>
 8005618:	4b51      	ldr	r3, [pc, #324]	; (8005760 <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005622:	2bc0      	cmp	r3, #192	; 0xc0
 8005624:	d013      	beq.n	800564e <UART_SetConfig+0x1ba>
 8005626:	2bc0      	cmp	r3, #192	; 0xc0
 8005628:	d814      	bhi.n	8005654 <UART_SetConfig+0x1c0>
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d009      	beq.n	8005642 <UART_SetConfig+0x1ae>
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d810      	bhi.n	8005654 <UART_SetConfig+0x1c0>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <UART_SetConfig+0x1a8>
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d006      	beq.n	8005648 <UART_SetConfig+0x1b4>
 800563a:	e00b      	b.n	8005654 <UART_SetConfig+0x1c0>
 800563c:	2300      	movs	r3, #0
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e0cc      	b.n	80057dc <UART_SetConfig+0x348>
 8005642:	2302      	movs	r3, #2
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e0c9      	b.n	80057dc <UART_SetConfig+0x348>
 8005648:	2304      	movs	r3, #4
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e0c6      	b.n	80057dc <UART_SetConfig+0x348>
 800564e:	2308      	movs	r3, #8
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e0c3      	b.n	80057dc <UART_SetConfig+0x348>
 8005654:	2310      	movs	r3, #16
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e0c0      	b.n	80057dc <UART_SetConfig+0x348>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a44      	ldr	r2, [pc, #272]	; (8005770 <UART_SetConfig+0x2dc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d125      	bne.n	80056b0 <UART_SetConfig+0x21c>
 8005664:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <UART_SetConfig+0x2cc>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005672:	d017      	beq.n	80056a4 <UART_SetConfig+0x210>
 8005674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005678:	d817      	bhi.n	80056aa <UART_SetConfig+0x216>
 800567a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567e:	d00b      	beq.n	8005698 <UART_SetConfig+0x204>
 8005680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005684:	d811      	bhi.n	80056aa <UART_SetConfig+0x216>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <UART_SetConfig+0x1fe>
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	d006      	beq.n	800569e <UART_SetConfig+0x20a>
 8005690:	e00b      	b.n	80056aa <UART_SetConfig+0x216>
 8005692:	2300      	movs	r3, #0
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e0a1      	b.n	80057dc <UART_SetConfig+0x348>
 8005698:	2302      	movs	r3, #2
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e09e      	b.n	80057dc <UART_SetConfig+0x348>
 800569e:	2304      	movs	r3, #4
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e09b      	b.n	80057dc <UART_SetConfig+0x348>
 80056a4:	2308      	movs	r3, #8
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e098      	b.n	80057dc <UART_SetConfig+0x348>
 80056aa:	2310      	movs	r3, #16
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e095      	b.n	80057dc <UART_SetConfig+0x348>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <UART_SetConfig+0x2e0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d125      	bne.n	8005706 <UART_SetConfig+0x272>
 80056ba:	4b29      	ldr	r3, [pc, #164]	; (8005760 <UART_SetConfig+0x2cc>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056c8:	d017      	beq.n	80056fa <UART_SetConfig+0x266>
 80056ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ce:	d817      	bhi.n	8005700 <UART_SetConfig+0x26c>
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d00b      	beq.n	80056ee <UART_SetConfig+0x25a>
 80056d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056da:	d811      	bhi.n	8005700 <UART_SetConfig+0x26c>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <UART_SetConfig+0x254>
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d006      	beq.n	80056f4 <UART_SetConfig+0x260>
 80056e6:	e00b      	b.n	8005700 <UART_SetConfig+0x26c>
 80056e8:	2301      	movs	r3, #1
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e076      	b.n	80057dc <UART_SetConfig+0x348>
 80056ee:	2302      	movs	r3, #2
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e073      	b.n	80057dc <UART_SetConfig+0x348>
 80056f4:	2304      	movs	r3, #4
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e070      	b.n	80057dc <UART_SetConfig+0x348>
 80056fa:	2308      	movs	r3, #8
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e06d      	b.n	80057dc <UART_SetConfig+0x348>
 8005700:	2310      	movs	r3, #16
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e06a      	b.n	80057dc <UART_SetConfig+0x348>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <UART_SetConfig+0x2e4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d138      	bne.n	8005782 <UART_SetConfig+0x2ee>
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <UART_SetConfig+0x2cc>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800571a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800571e:	d017      	beq.n	8005750 <UART_SetConfig+0x2bc>
 8005720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005724:	d82a      	bhi.n	800577c <UART_SetConfig+0x2e8>
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	d00b      	beq.n	8005744 <UART_SetConfig+0x2b0>
 800572c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005730:	d824      	bhi.n	800577c <UART_SetConfig+0x2e8>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <UART_SetConfig+0x2aa>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d006      	beq.n	800574a <UART_SetConfig+0x2b6>
 800573c:	e01e      	b.n	800577c <UART_SetConfig+0x2e8>
 800573e:	2300      	movs	r3, #0
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e04b      	b.n	80057dc <UART_SetConfig+0x348>
 8005744:	2302      	movs	r3, #2
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e048      	b.n	80057dc <UART_SetConfig+0x348>
 800574a:	2304      	movs	r3, #4
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e045      	b.n	80057dc <UART_SetConfig+0x348>
 8005750:	2308      	movs	r3, #8
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e042      	b.n	80057dc <UART_SetConfig+0x348>
 8005756:	bf00      	nop
 8005758:	efff69f3 	.word	0xefff69f3
 800575c:	40011000 	.word	0x40011000
 8005760:	40023800 	.word	0x40023800
 8005764:	40004400 	.word	0x40004400
 8005768:	40004800 	.word	0x40004800
 800576c:	40004c00 	.word	0x40004c00
 8005770:	40005000 	.word	0x40005000
 8005774:	40011400 	.word	0x40011400
 8005778:	40007800 	.word	0x40007800
 800577c:	2310      	movs	r3, #16
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e02c      	b.n	80057dc <UART_SetConfig+0x348>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a72      	ldr	r2, [pc, #456]	; (8005950 <UART_SetConfig+0x4bc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d125      	bne.n	80057d8 <UART_SetConfig+0x344>
 800578c:	4b71      	ldr	r3, [pc, #452]	; (8005954 <UART_SetConfig+0x4c0>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005796:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800579a:	d017      	beq.n	80057cc <UART_SetConfig+0x338>
 800579c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057a0:	d817      	bhi.n	80057d2 <UART_SetConfig+0x33e>
 80057a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a6:	d00b      	beq.n	80057c0 <UART_SetConfig+0x32c>
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ac:	d811      	bhi.n	80057d2 <UART_SetConfig+0x33e>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <UART_SetConfig+0x326>
 80057b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b6:	d006      	beq.n	80057c6 <UART_SetConfig+0x332>
 80057b8:	e00b      	b.n	80057d2 <UART_SetConfig+0x33e>
 80057ba:	2300      	movs	r3, #0
 80057bc:	77fb      	strb	r3, [r7, #31]
 80057be:	e00d      	b.n	80057dc <UART_SetConfig+0x348>
 80057c0:	2302      	movs	r3, #2
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e00a      	b.n	80057dc <UART_SetConfig+0x348>
 80057c6:	2304      	movs	r3, #4
 80057c8:	77fb      	strb	r3, [r7, #31]
 80057ca:	e007      	b.n	80057dc <UART_SetConfig+0x348>
 80057cc:	2308      	movs	r3, #8
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e004      	b.n	80057dc <UART_SetConfig+0x348>
 80057d2:	2310      	movs	r3, #16
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e001      	b.n	80057dc <UART_SetConfig+0x348>
 80057d8:	2310      	movs	r3, #16
 80057da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d15b      	bne.n	800589e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d828      	bhi.n	800583e <UART_SetConfig+0x3aa>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x360>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005829 	.word	0x08005829
 8005800:	0800583f 	.word	0x0800583f
 8005804:	0800582f 	.word	0x0800582f
 8005808:	0800583f 	.word	0x0800583f
 800580c:	0800583f 	.word	0x0800583f
 8005810:	0800583f 	.word	0x0800583f
 8005814:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fd fd56 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 800581c:	61b8      	str	r0, [r7, #24]
        break;
 800581e:	e013      	b.n	8005848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fd fd66 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 8005824:	61b8      	str	r0, [r7, #24]
        break;
 8005826:	e00f      	b.n	8005848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b4b      	ldr	r3, [pc, #300]	; (8005958 <UART_SetConfig+0x4c4>)
 800582a:	61bb      	str	r3, [r7, #24]
        break;
 800582c:	e00c      	b.n	8005848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7fd fc79 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8005832:	61b8      	str	r0, [r7, #24]
        break;
 8005834:	e008      	b.n	8005848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583a:	61bb      	str	r3, [r7, #24]
        break;
 800583c:	e004      	b.n	8005848 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	77bb      	strb	r3, [r7, #30]
        break;
 8005846:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d074      	beq.n	8005938 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	005a      	lsls	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d916      	bls.n	8005898 <UART_SetConfig+0x404>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005870:	d212      	bcs.n	8005898 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f023 030f 	bic.w	r3, r3, #15
 800587a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	b29a      	uxth	r2, r3
 8005888:	89fb      	ldrh	r3, [r7, #14]
 800588a:	4313      	orrs	r3, r2
 800588c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	89fa      	ldrh	r2, [r7, #14]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	e04f      	b.n	8005938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	77bb      	strb	r3, [r7, #30]
 800589c:	e04c      	b.n	8005938 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800589e:	7ffb      	ldrb	r3, [r7, #31]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d828      	bhi.n	80058f6 <UART_SetConfig+0x462>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x418>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	080058f7 	.word	0x080058f7
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	080058f7 	.word	0x080058f7
 80058c4:	080058f7 	.word	0x080058f7
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	080058ef 	.word	0x080058ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d0:	f7fd fcfa 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 80058d4:	61b8      	str	r0, [r7, #24]
        break;
 80058d6:	e013      	b.n	8005900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d8:	f7fd fd0a 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 80058dc:	61b8      	str	r0, [r7, #24]
        break;
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <UART_SetConfig+0x4c4>)
 80058e2:	61bb      	str	r3, [r7, #24]
        break;
 80058e4:	e00c      	b.n	8005900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e6:	f7fd fc1d 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80058ea:	61b8      	str	r0, [r7, #24]
        break;
 80058ec:	e008      	b.n	8005900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f2:	61bb      	str	r3, [r7, #24]
        break;
 80058f4:	e004      	b.n	8005900 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	77bb      	strb	r3, [r7, #30]
        break;
 80058fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085a      	lsrs	r2, r3, #1
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	441a      	add	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d909      	bls.n	8005934 <UART_SetConfig+0x4a0>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005926:	d205      	bcs.n	8005934 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e001      	b.n	8005938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005944:	7fbb      	ldrb	r3, [r7, #30]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40007c00 	.word	0x40007c00
 8005954:	40023800 	.word	0x40023800
 8005958:	00f42400 	.word	0x00f42400

0800595c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01a      	beq.n	8005a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5a:	d10a      	bne.n	8005a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]
  }
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ab0:	f7fc fc5c 	bl	800236c <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d10e      	bne.n	8005ae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f81b 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e011      	b.n	8005b06 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b09c      	sub	sp, #112	; 0x70
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	e0a7      	b.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	f000 80a3 	beq.w	8005c70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fc fc1f 	bl	800236c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d13f      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b54:	667b      	str	r3, [r7, #100]	; 0x64
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	663b      	str	r3, [r7, #96]	; 0x60
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e068      	b.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d050      	beq.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bdc:	d148      	bne.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
 8005c08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e6      	bne.n	8005be8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f023 0301 	bic.w	r3, r3, #1
 8005c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c3a:	623a      	str	r2, [r7, #32]
 8005c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	69f9      	ldr	r1, [r7, #28]
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e5      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e010      	b.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	bf0c      	ite	eq
 8005c80:	2301      	moveq	r3, #1
 8005c82:	2300      	movne	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	f43f af48 	beq.w	8005b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3770      	adds	r7, #112	; 0x70
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <__errno>:
 8005c9c:	4b01      	ldr	r3, [pc, #4]	; (8005ca4 <__errno+0x8>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	2000000c 	.word	0x2000000c

08005ca8 <__libc_init_array>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	4d0d      	ldr	r5, [pc, #52]	; (8005ce0 <__libc_init_array+0x38>)
 8005cac:	4c0d      	ldr	r4, [pc, #52]	; (8005ce4 <__libc_init_array+0x3c>)
 8005cae:	1b64      	subs	r4, r4, r5
 8005cb0:	10a4      	asrs	r4, r4, #2
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	42a6      	cmp	r6, r4
 8005cb6:	d109      	bne.n	8005ccc <__libc_init_array+0x24>
 8005cb8:	4d0b      	ldr	r5, [pc, #44]	; (8005ce8 <__libc_init_array+0x40>)
 8005cba:	4c0c      	ldr	r4, [pc, #48]	; (8005cec <__libc_init_array+0x44>)
 8005cbc:	f003 fcbe 	bl	800963c <_init>
 8005cc0:	1b64      	subs	r4, r4, r5
 8005cc2:	10a4      	asrs	r4, r4, #2
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	42a6      	cmp	r6, r4
 8005cc8:	d105      	bne.n	8005cd6 <__libc_init_array+0x2e>
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd0:	4798      	blx	r3
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7ee      	b.n	8005cb4 <__libc_init_array+0xc>
 8005cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cda:	4798      	blx	r3
 8005cdc:	3601      	adds	r6, #1
 8005cde:	e7f2      	b.n	8005cc6 <__libc_init_array+0x1e>
 8005ce0:	08009f70 	.word	0x08009f70
 8005ce4:	08009f70 	.word	0x08009f70
 8005ce8:	08009f70 	.word	0x08009f70
 8005cec:	08009f74 	.word	0x08009f74

08005cf0 <memset>:
 8005cf0:	4402      	add	r2, r0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d100      	bne.n	8005cfa <memset+0xa>
 8005cf8:	4770      	bx	lr
 8005cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfe:	e7f9      	b.n	8005cf4 <memset+0x4>

08005d00 <__cvt>:
 8005d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	ec55 4b10 	vmov	r4, r5, d0
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	460e      	mov	r6, r1
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	462b      	mov	r3, r5
 8005d10:	bfbb      	ittet	lt
 8005d12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d16:	461d      	movlt	r5, r3
 8005d18:	2300      	movge	r3, #0
 8005d1a:	232d      	movlt	r3, #45	; 0x2d
 8005d1c:	700b      	strb	r3, [r1, #0]
 8005d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d24:	4691      	mov	r9, r2
 8005d26:	f023 0820 	bic.w	r8, r3, #32
 8005d2a:	bfbc      	itt	lt
 8005d2c:	4622      	movlt	r2, r4
 8005d2e:	4614      	movlt	r4, r2
 8005d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d34:	d005      	beq.n	8005d42 <__cvt+0x42>
 8005d36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d3a:	d100      	bne.n	8005d3e <__cvt+0x3e>
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	2102      	movs	r1, #2
 8005d40:	e000      	b.n	8005d44 <__cvt+0x44>
 8005d42:	2103      	movs	r1, #3
 8005d44:	ab03      	add	r3, sp, #12
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	ab02      	add	r3, sp, #8
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	ec45 4b10 	vmov	d0, r4, r5
 8005d50:	4653      	mov	r3, sl
 8005d52:	4632      	mov	r2, r6
 8005d54:	f000 fef8 	bl	8006b48 <_dtoa_r>
 8005d58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	d102      	bne.n	8005d66 <__cvt+0x66>
 8005d60:	f019 0f01 	tst.w	r9, #1
 8005d64:	d022      	beq.n	8005dac <__cvt+0xac>
 8005d66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d6a:	eb07 0906 	add.w	r9, r7, r6
 8005d6e:	d110      	bne.n	8005d92 <__cvt+0x92>
 8005d70:	783b      	ldrb	r3, [r7, #0]
 8005d72:	2b30      	cmp	r3, #48	; 0x30
 8005d74:	d10a      	bne.n	8005d8c <__cvt+0x8c>
 8005d76:	2200      	movs	r2, #0
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fec3 	bl	8000b08 <__aeabi_dcmpeq>
 8005d82:	b918      	cbnz	r0, 8005d8c <__cvt+0x8c>
 8005d84:	f1c6 0601 	rsb	r6, r6, #1
 8005d88:	f8ca 6000 	str.w	r6, [sl]
 8005d8c:	f8da 3000 	ldr.w	r3, [sl]
 8005d90:	4499      	add	r9, r3
 8005d92:	2200      	movs	r2, #0
 8005d94:	2300      	movs	r3, #0
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8005d9e:	b108      	cbz	r0, 8005da4 <__cvt+0xa4>
 8005da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005da4:	2230      	movs	r2, #48	; 0x30
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	454b      	cmp	r3, r9
 8005daa:	d307      	bcc.n	8005dbc <__cvt+0xbc>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005db0:	1bdb      	subs	r3, r3, r7
 8005db2:	4638      	mov	r0, r7
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	b004      	add	sp, #16
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	1c59      	adds	r1, r3, #1
 8005dbe:	9103      	str	r1, [sp, #12]
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e7f0      	b.n	8005da6 <__cvt+0xa6>

08005dc4 <__exponent>:
 8005dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	bfb8      	it	lt
 8005dcc:	4249      	neglt	r1, r1
 8005dce:	f803 2b02 	strb.w	r2, [r3], #2
 8005dd2:	bfb4      	ite	lt
 8005dd4:	222d      	movlt	r2, #45	; 0x2d
 8005dd6:	222b      	movge	r2, #43	; 0x2b
 8005dd8:	2909      	cmp	r1, #9
 8005dda:	7042      	strb	r2, [r0, #1]
 8005ddc:	dd2a      	ble.n	8005e34 <__exponent+0x70>
 8005dde:	f10d 0407 	add.w	r4, sp, #7
 8005de2:	46a4      	mov	ip, r4
 8005de4:	270a      	movs	r7, #10
 8005de6:	46a6      	mov	lr, r4
 8005de8:	460a      	mov	r2, r1
 8005dea:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dee:	fb07 1516 	mls	r5, r7, r6, r1
 8005df2:	3530      	adds	r5, #48	; 0x30
 8005df4:	2a63      	cmp	r2, #99	; 0x63
 8005df6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dfe:	4631      	mov	r1, r6
 8005e00:	dcf1      	bgt.n	8005de6 <__exponent+0x22>
 8005e02:	3130      	adds	r1, #48	; 0x30
 8005e04:	f1ae 0502 	sub.w	r5, lr, #2
 8005e08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e0c:	1c44      	adds	r4, r0, #1
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4561      	cmp	r1, ip
 8005e12:	d30a      	bcc.n	8005e2a <__exponent+0x66>
 8005e14:	f10d 0209 	add.w	r2, sp, #9
 8005e18:	eba2 020e 	sub.w	r2, r2, lr
 8005e1c:	4565      	cmp	r5, ip
 8005e1e:	bf88      	it	hi
 8005e20:	2200      	movhi	r2, #0
 8005e22:	4413      	add	r3, r2
 8005e24:	1a18      	subs	r0, r3, r0
 8005e26:	b003      	add	sp, #12
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e32:	e7ed      	b.n	8005e10 <__exponent+0x4c>
 8005e34:	2330      	movs	r3, #48	; 0x30
 8005e36:	3130      	adds	r1, #48	; 0x30
 8005e38:	7083      	strb	r3, [r0, #2]
 8005e3a:	70c1      	strb	r1, [r0, #3]
 8005e3c:	1d03      	adds	r3, r0, #4
 8005e3e:	e7f1      	b.n	8005e24 <__exponent+0x60>

08005e40 <_printf_float>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	ed2d 8b02 	vpush	{d8}
 8005e48:	b08d      	sub	sp, #52	; 0x34
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e50:	4616      	mov	r6, r2
 8005e52:	461f      	mov	r7, r3
 8005e54:	4605      	mov	r5, r0
 8005e56:	f001 fe4b 	bl	8007af0 <_localeconv_r>
 8005e5a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e5e:	4650      	mov	r0, sl
 8005e60:	f7fa f9d6 	bl	8000210 <strlen>
 8005e64:	2300      	movs	r3, #0
 8005e66:	930a      	str	r3, [sp, #40]	; 0x28
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e74:	3307      	adds	r3, #7
 8005e76:	f023 0307 	bic.w	r3, r3, #7
 8005e7a:	f103 0208 	add.w	r2, r3, #8
 8005e7e:	f8c8 2000 	str.w	r2, [r8]
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e92:	9307      	str	r3, [sp, #28]
 8005e94:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e98:	ee08 0a10 	vmov	s16, r0
 8005e9c:	4b9f      	ldr	r3, [pc, #636]	; (800611c <_printf_float+0x2dc>)
 8005e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	f7fa fe61 	bl	8000b6c <__aeabi_dcmpun>
 8005eaa:	bb88      	cbnz	r0, 8005f10 <_printf_float+0xd0>
 8005eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eb0:	4b9a      	ldr	r3, [pc, #616]	; (800611c <_printf_float+0x2dc>)
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	f7fa fe3b 	bl	8000b30 <__aeabi_dcmple>
 8005eba:	bb48      	cbnz	r0, 8005f10 <_printf_float+0xd0>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	f7fa fe2a 	bl	8000b1c <__aeabi_dcmplt>
 8005ec8:	b110      	cbz	r0, 8005ed0 <_printf_float+0x90>
 8005eca:	232d      	movs	r3, #45	; 0x2d
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	4b93      	ldr	r3, [pc, #588]	; (8006120 <_printf_float+0x2e0>)
 8005ed2:	4894      	ldr	r0, [pc, #592]	; (8006124 <_printf_float+0x2e4>)
 8005ed4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ed8:	bf94      	ite	ls
 8005eda:	4698      	movls	r8, r3
 8005edc:	4680      	movhi	r8, r0
 8005ede:	2303      	movs	r3, #3
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	9b05      	ldr	r3, [sp, #20]
 8005ee4:	f023 0204 	bic.w	r2, r3, #4
 8005ee8:	6022      	str	r2, [r4, #0]
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	9700      	str	r7, [sp, #0]
 8005ef0:	4633      	mov	r3, r6
 8005ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 f9d8 	bl	80062ac <_printf_common>
 8005efc:	3001      	adds	r0, #1
 8005efe:	f040 8090 	bne.w	8006022 <_printf_float+0x1e2>
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	b00d      	add	sp, #52	; 0x34
 8005f08:	ecbd 8b02 	vpop	{d8}
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa fe28 	bl	8000b6c <__aeabi_dcmpun>
 8005f1c:	b140      	cbz	r0, 8005f30 <_printf_float+0xf0>
 8005f1e:	464b      	mov	r3, r9
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfbc      	itt	lt
 8005f24:	232d      	movlt	r3, #45	; 0x2d
 8005f26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f2a:	487f      	ldr	r0, [pc, #508]	; (8006128 <_printf_float+0x2e8>)
 8005f2c:	4b7f      	ldr	r3, [pc, #508]	; (800612c <_printf_float+0x2ec>)
 8005f2e:	e7d1      	b.n	8005ed4 <_printf_float+0x94>
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f36:	9206      	str	r2, [sp, #24]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	d13f      	bne.n	8005fbc <_printf_float+0x17c>
 8005f3c:	2306      	movs	r3, #6
 8005f3e:	6063      	str	r3, [r4, #4]
 8005f40:	9b05      	ldr	r3, [sp, #20]
 8005f42:	6861      	ldr	r1, [r4, #4]
 8005f44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9303      	str	r3, [sp, #12]
 8005f4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005f4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f52:	ab09      	add	r3, sp, #36	; 0x24
 8005f54:	ec49 8b10 	vmov	d0, r8, r9
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6022      	str	r2, [r4, #0]
 8005f5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f60:	4628      	mov	r0, r5
 8005f62:	f7ff fecd 	bl	8005d00 <__cvt>
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f6a:	2b47      	cmp	r3, #71	; 0x47
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	d108      	bne.n	8005f82 <_printf_float+0x142>
 8005f70:	1cc8      	adds	r0, r1, #3
 8005f72:	db02      	blt.n	8005f7a <_printf_float+0x13a>
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	4299      	cmp	r1, r3
 8005f78:	dd41      	ble.n	8005ffe <_printf_float+0x1be>
 8005f7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f7e:	fa5f fb8b 	uxtb.w	fp, fp
 8005f82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f86:	d820      	bhi.n	8005fca <_printf_float+0x18a>
 8005f88:	3901      	subs	r1, #1
 8005f8a:	465a      	mov	r2, fp
 8005f8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f90:	9109      	str	r1, [sp, #36]	; 0x24
 8005f92:	f7ff ff17 	bl	8005dc4 <__exponent>
 8005f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f98:	1813      	adds	r3, r2, r0
 8005f9a:	2a01      	cmp	r2, #1
 8005f9c:	4681      	mov	r9, r0
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	dc02      	bgt.n	8005fa8 <_printf_float+0x168>
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	07d2      	lsls	r2, r2, #31
 8005fa6:	d501      	bpl.n	8005fac <_printf_float+0x16c>
 8005fa8:	3301      	adds	r3, #1
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d09c      	beq.n	8005eee <_printf_float+0xae>
 8005fb4:	232d      	movs	r3, #45	; 0x2d
 8005fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fba:	e798      	b.n	8005eee <_printf_float+0xae>
 8005fbc:	9a06      	ldr	r2, [sp, #24]
 8005fbe:	2a47      	cmp	r2, #71	; 0x47
 8005fc0:	d1be      	bne.n	8005f40 <_printf_float+0x100>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1bc      	bne.n	8005f40 <_printf_float+0x100>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e7b9      	b.n	8005f3e <_printf_float+0xfe>
 8005fca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fce:	d118      	bne.n	8006002 <_printf_float+0x1c2>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	dd0b      	ble.n	8005fee <_printf_float+0x1ae>
 8005fd6:	6121      	str	r1, [r4, #16]
 8005fd8:	b913      	cbnz	r3, 8005fe0 <_printf_float+0x1a0>
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	07d0      	lsls	r0, r2, #31
 8005fde:	d502      	bpl.n	8005fe6 <_printf_float+0x1a6>
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	440b      	add	r3, r1
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fe8:	f04f 0900 	mov.w	r9, #0
 8005fec:	e7de      	b.n	8005fac <_printf_float+0x16c>
 8005fee:	b913      	cbnz	r3, 8005ff6 <_printf_float+0x1b6>
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	07d2      	lsls	r2, r2, #31
 8005ff4:	d501      	bpl.n	8005ffa <_printf_float+0x1ba>
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	e7f4      	b.n	8005fe4 <_printf_float+0x1a4>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7f2      	b.n	8005fe4 <_printf_float+0x1a4>
 8005ffe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006004:	4299      	cmp	r1, r3
 8006006:	db05      	blt.n	8006014 <_printf_float+0x1d4>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	6121      	str	r1, [r4, #16]
 800600c:	07d8      	lsls	r0, r3, #31
 800600e:	d5ea      	bpl.n	8005fe6 <_printf_float+0x1a6>
 8006010:	1c4b      	adds	r3, r1, #1
 8006012:	e7e7      	b.n	8005fe4 <_printf_float+0x1a4>
 8006014:	2900      	cmp	r1, #0
 8006016:	bfd4      	ite	le
 8006018:	f1c1 0202 	rsble	r2, r1, #2
 800601c:	2201      	movgt	r2, #1
 800601e:	4413      	add	r3, r2
 8006020:	e7e0      	b.n	8005fe4 <_printf_float+0x1a4>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	055a      	lsls	r2, r3, #21
 8006026:	d407      	bmi.n	8006038 <_printf_float+0x1f8>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	4642      	mov	r2, r8
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	d12c      	bne.n	8006090 <_printf_float+0x250>
 8006036:	e764      	b.n	8005f02 <_printf_float+0xc2>
 8006038:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800603c:	f240 80e0 	bls.w	8006200 <_printf_float+0x3c0>
 8006040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	f7fa fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800604c:	2800      	cmp	r0, #0
 800604e:	d034      	beq.n	80060ba <_printf_float+0x27a>
 8006050:	4a37      	ldr	r2, [pc, #220]	; (8006130 <_printf_float+0x2f0>)
 8006052:	2301      	movs	r3, #1
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	f43f af51 	beq.w	8005f02 <_printf_float+0xc2>
 8006060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006064:	429a      	cmp	r2, r3
 8006066:	db02      	blt.n	800606e <_printf_float+0x22e>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07d8      	lsls	r0, r3, #31
 800606c:	d510      	bpl.n	8006090 <_printf_float+0x250>
 800606e:	ee18 3a10 	vmov	r3, s16
 8006072:	4652      	mov	r2, sl
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f af41 	beq.w	8005f02 <_printf_float+0xc2>
 8006080:	f04f 0800 	mov.w	r8, #0
 8006084:	f104 091a 	add.w	r9, r4, #26
 8006088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	4543      	cmp	r3, r8
 800608e:	dc09      	bgt.n	80060a4 <_printf_float+0x264>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	079b      	lsls	r3, r3, #30
 8006094:	f100 8105 	bmi.w	80062a2 <_printf_float+0x462>
 8006098:	68e0      	ldr	r0, [r4, #12]
 800609a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609c:	4298      	cmp	r0, r3
 800609e:	bfb8      	it	lt
 80060a0:	4618      	movlt	r0, r3
 80060a2:	e730      	b.n	8005f06 <_printf_float+0xc6>
 80060a4:	2301      	movs	r3, #1
 80060a6:	464a      	mov	r2, r9
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af27 	beq.w	8005f02 <_printf_float+0xc2>
 80060b4:	f108 0801 	add.w	r8, r8, #1
 80060b8:	e7e6      	b.n	8006088 <_printf_float+0x248>
 80060ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dc39      	bgt.n	8006134 <_printf_float+0x2f4>
 80060c0:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <_printf_float+0x2f0>)
 80060c2:	2301      	movs	r3, #1
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f af19 	beq.w	8005f02 <_printf_float+0xc2>
 80060d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d102      	bne.n	80060de <_printf_float+0x29e>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	d5d8      	bpl.n	8006090 <_printf_float+0x250>
 80060de:	ee18 3a10 	vmov	r3, s16
 80060e2:	4652      	mov	r2, sl
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f af09 	beq.w	8005f02 <_printf_float+0xc2>
 80060f0:	f04f 0900 	mov.w	r9, #0
 80060f4:	f104 0a1a 	add.w	sl, r4, #26
 80060f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fa:	425b      	negs	r3, r3
 80060fc:	454b      	cmp	r3, r9
 80060fe:	dc01      	bgt.n	8006104 <_printf_float+0x2c4>
 8006100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006102:	e792      	b.n	800602a <_printf_float+0x1ea>
 8006104:	2301      	movs	r3, #1
 8006106:	4652      	mov	r2, sl
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	f43f aef7 	beq.w	8005f02 <_printf_float+0xc2>
 8006114:	f109 0901 	add.w	r9, r9, #1
 8006118:	e7ee      	b.n	80060f8 <_printf_float+0x2b8>
 800611a:	bf00      	nop
 800611c:	7fefffff 	.word	0x7fefffff
 8006120:	08009b74 	.word	0x08009b74
 8006124:	08009b78 	.word	0x08009b78
 8006128:	08009b80 	.word	0x08009b80
 800612c:	08009b7c 	.word	0x08009b7c
 8006130:	08009e09 	.word	0x08009e09
 8006134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006138:	429a      	cmp	r2, r3
 800613a:	bfa8      	it	ge
 800613c:	461a      	movge	r2, r3
 800613e:	2a00      	cmp	r2, #0
 8006140:	4691      	mov	r9, r2
 8006142:	dc37      	bgt.n	80061b4 <_printf_float+0x374>
 8006144:	f04f 0b00 	mov.w	fp, #0
 8006148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800614c:	f104 021a 	add.w	r2, r4, #26
 8006150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	eba3 0309 	sub.w	r3, r3, r9
 8006158:	455b      	cmp	r3, fp
 800615a:	dc33      	bgt.n	80061c4 <_printf_float+0x384>
 800615c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006160:	429a      	cmp	r2, r3
 8006162:	db3b      	blt.n	80061dc <_printf_float+0x39c>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	07da      	lsls	r2, r3, #31
 8006168:	d438      	bmi.n	80061dc <_printf_float+0x39c>
 800616a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616c:	9a05      	ldr	r2, [sp, #20]
 800616e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006170:	1a9a      	subs	r2, r3, r2
 8006172:	eba3 0901 	sub.w	r9, r3, r1
 8006176:	4591      	cmp	r9, r2
 8006178:	bfa8      	it	ge
 800617a:	4691      	movge	r9, r2
 800617c:	f1b9 0f00 	cmp.w	r9, #0
 8006180:	dc35      	bgt.n	80061ee <_printf_float+0x3ae>
 8006182:	f04f 0800 	mov.w	r8, #0
 8006186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800618a:	f104 0a1a 	add.w	sl, r4, #26
 800618e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	eba3 0309 	sub.w	r3, r3, r9
 8006198:	4543      	cmp	r3, r8
 800619a:	f77f af79 	ble.w	8006090 <_printf_float+0x250>
 800619e:	2301      	movs	r3, #1
 80061a0:	4652      	mov	r2, sl
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f aeaa 	beq.w	8005f02 <_printf_float+0xc2>
 80061ae:	f108 0801 	add.w	r8, r8, #1
 80061b2:	e7ec      	b.n	800618e <_printf_float+0x34e>
 80061b4:	4613      	mov	r3, r2
 80061b6:	4631      	mov	r1, r6
 80061b8:	4642      	mov	r2, r8
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	d1c0      	bne.n	8006144 <_printf_float+0x304>
 80061c2:	e69e      	b.n	8005f02 <_printf_float+0xc2>
 80061c4:	2301      	movs	r3, #1
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	9205      	str	r2, [sp, #20]
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f ae97 	beq.w	8005f02 <_printf_float+0xc2>
 80061d4:	9a05      	ldr	r2, [sp, #20]
 80061d6:	f10b 0b01 	add.w	fp, fp, #1
 80061da:	e7b9      	b.n	8006150 <_printf_float+0x310>
 80061dc:	ee18 3a10 	vmov	r3, s16
 80061e0:	4652      	mov	r2, sl
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1be      	bne.n	800616a <_printf_float+0x32a>
 80061ec:	e689      	b.n	8005f02 <_printf_float+0xc2>
 80061ee:	9a05      	ldr	r2, [sp, #20]
 80061f0:	464b      	mov	r3, r9
 80061f2:	4442      	add	r2, r8
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	d1c1      	bne.n	8006182 <_printf_float+0x342>
 80061fe:	e680      	b.n	8005f02 <_printf_float+0xc2>
 8006200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006202:	2a01      	cmp	r2, #1
 8006204:	dc01      	bgt.n	800620a <_printf_float+0x3ca>
 8006206:	07db      	lsls	r3, r3, #31
 8006208:	d538      	bpl.n	800627c <_printf_float+0x43c>
 800620a:	2301      	movs	r3, #1
 800620c:	4642      	mov	r2, r8
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae74 	beq.w	8005f02 <_printf_float+0xc2>
 800621a:	ee18 3a10 	vmov	r3, s16
 800621e:	4652      	mov	r2, sl
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f ae6b 	beq.w	8005f02 <_printf_float+0xc2>
 800622c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006230:	2200      	movs	r2, #0
 8006232:	2300      	movs	r3, #0
 8006234:	f7fa fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8006238:	b9d8      	cbnz	r0, 8006272 <_printf_float+0x432>
 800623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623c:	f108 0201 	add.w	r2, r8, #1
 8006240:	3b01      	subs	r3, #1
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	47b8      	blx	r7
 8006248:	3001      	adds	r0, #1
 800624a:	d10e      	bne.n	800626a <_printf_float+0x42a>
 800624c:	e659      	b.n	8005f02 <_printf_float+0xc2>
 800624e:	2301      	movs	r3, #1
 8006250:	4652      	mov	r2, sl
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	f43f ae52 	beq.w	8005f02 <_printf_float+0xc2>
 800625e:	f108 0801 	add.w	r8, r8, #1
 8006262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	4543      	cmp	r3, r8
 8006268:	dcf1      	bgt.n	800624e <_printf_float+0x40e>
 800626a:	464b      	mov	r3, r9
 800626c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006270:	e6dc      	b.n	800602c <_printf_float+0x1ec>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	f104 0a1a 	add.w	sl, r4, #26
 800627a:	e7f2      	b.n	8006262 <_printf_float+0x422>
 800627c:	2301      	movs	r3, #1
 800627e:	4642      	mov	r2, r8
 8006280:	e7df      	b.n	8006242 <_printf_float+0x402>
 8006282:	2301      	movs	r3, #1
 8006284:	464a      	mov	r2, r9
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f ae38 	beq.w	8005f02 <_printf_float+0xc2>
 8006292:	f108 0801 	add.w	r8, r8, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	4543      	cmp	r3, r8
 800629e:	dcf0      	bgt.n	8006282 <_printf_float+0x442>
 80062a0:	e6fa      	b.n	8006098 <_printf_float+0x258>
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	f104 0919 	add.w	r9, r4, #25
 80062aa:	e7f4      	b.n	8006296 <_printf_float+0x456>

080062ac <_printf_common>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	4616      	mov	r6, r2
 80062b2:	4699      	mov	r9, r3
 80062b4:	688a      	ldr	r2, [r1, #8]
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062bc:	4293      	cmp	r3, r2
 80062be:	bfb8      	it	lt
 80062c0:	4613      	movlt	r3, r2
 80062c2:	6033      	str	r3, [r6, #0]
 80062c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c8:	4607      	mov	r7, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b10a      	cbz	r2, 80062d2 <_printf_common+0x26>
 80062ce:	3301      	adds	r3, #1
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	0699      	lsls	r1, r3, #26
 80062d6:	bf42      	ittt	mi
 80062d8:	6833      	ldrmi	r3, [r6, #0]
 80062da:	3302      	addmi	r3, #2
 80062dc:	6033      	strmi	r3, [r6, #0]
 80062de:	6825      	ldr	r5, [r4, #0]
 80062e0:	f015 0506 	ands.w	r5, r5, #6
 80062e4:	d106      	bne.n	80062f4 <_printf_common+0x48>
 80062e6:	f104 0a19 	add.w	sl, r4, #25
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	6832      	ldr	r2, [r6, #0]
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc26      	bgt.n	8006342 <_printf_common+0x96>
 80062f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f8:	1e13      	subs	r3, r2, #0
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	bf18      	it	ne
 80062fe:	2301      	movne	r3, #1
 8006300:	0692      	lsls	r2, r2, #26
 8006302:	d42b      	bmi.n	800635c <_printf_common+0xb0>
 8006304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006308:	4649      	mov	r1, r9
 800630a:	4638      	mov	r0, r7
 800630c:	47c0      	blx	r8
 800630e:	3001      	adds	r0, #1
 8006310:	d01e      	beq.n	8006350 <_printf_common+0xa4>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	68e5      	ldr	r5, [r4, #12]
 8006316:	6832      	ldr	r2, [r6, #0]
 8006318:	f003 0306 	and.w	r3, r3, #6
 800631c:	2b04      	cmp	r3, #4
 800631e:	bf08      	it	eq
 8006320:	1aad      	subeq	r5, r5, r2
 8006322:	68a3      	ldr	r3, [r4, #8]
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	bf0c      	ite	eq
 8006328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800632c:	2500      	movne	r5, #0
 800632e:	4293      	cmp	r3, r2
 8006330:	bfc4      	itt	gt
 8006332:	1a9b      	subgt	r3, r3, r2
 8006334:	18ed      	addgt	r5, r5, r3
 8006336:	2600      	movs	r6, #0
 8006338:	341a      	adds	r4, #26
 800633a:	42b5      	cmp	r5, r6
 800633c:	d11a      	bne.n	8006374 <_printf_common+0xc8>
 800633e:	2000      	movs	r0, #0
 8006340:	e008      	b.n	8006354 <_printf_common+0xa8>
 8006342:	2301      	movs	r3, #1
 8006344:	4652      	mov	r2, sl
 8006346:	4649      	mov	r1, r9
 8006348:	4638      	mov	r0, r7
 800634a:	47c0      	blx	r8
 800634c:	3001      	adds	r0, #1
 800634e:	d103      	bne.n	8006358 <_printf_common+0xac>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006358:	3501      	adds	r5, #1
 800635a:	e7c6      	b.n	80062ea <_printf_common+0x3e>
 800635c:	18e1      	adds	r1, r4, r3
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	2030      	movs	r0, #48	; 0x30
 8006362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006366:	4422      	add	r2, r4
 8006368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800636c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006370:	3302      	adds	r3, #2
 8006372:	e7c7      	b.n	8006304 <_printf_common+0x58>
 8006374:	2301      	movs	r3, #1
 8006376:	4622      	mov	r2, r4
 8006378:	4649      	mov	r1, r9
 800637a:	4638      	mov	r0, r7
 800637c:	47c0      	blx	r8
 800637e:	3001      	adds	r0, #1
 8006380:	d0e6      	beq.n	8006350 <_printf_common+0xa4>
 8006382:	3601      	adds	r6, #1
 8006384:	e7d9      	b.n	800633a <_printf_common+0x8e>
	...

08006388 <_printf_i>:
 8006388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	7e0f      	ldrb	r7, [r1, #24]
 800638e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006390:	2f78      	cmp	r7, #120	; 0x78
 8006392:	4691      	mov	r9, r2
 8006394:	4680      	mov	r8, r0
 8006396:	460c      	mov	r4, r1
 8006398:	469a      	mov	sl, r3
 800639a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800639e:	d807      	bhi.n	80063b0 <_printf_i+0x28>
 80063a0:	2f62      	cmp	r7, #98	; 0x62
 80063a2:	d80a      	bhi.n	80063ba <_printf_i+0x32>
 80063a4:	2f00      	cmp	r7, #0
 80063a6:	f000 80d8 	beq.w	800655a <_printf_i+0x1d2>
 80063aa:	2f58      	cmp	r7, #88	; 0x58
 80063ac:	f000 80a3 	beq.w	80064f6 <_printf_i+0x16e>
 80063b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b8:	e03a      	b.n	8006430 <_printf_i+0xa8>
 80063ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063be:	2b15      	cmp	r3, #21
 80063c0:	d8f6      	bhi.n	80063b0 <_printf_i+0x28>
 80063c2:	a101      	add	r1, pc, #4	; (adr r1, 80063c8 <_printf_i+0x40>)
 80063c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006435 	.word	0x08006435
 80063d0:	080063b1 	.word	0x080063b1
 80063d4:	080063b1 	.word	0x080063b1
 80063d8:	080063b1 	.word	0x080063b1
 80063dc:	080063b1 	.word	0x080063b1
 80063e0:	08006435 	.word	0x08006435
 80063e4:	080063b1 	.word	0x080063b1
 80063e8:	080063b1 	.word	0x080063b1
 80063ec:	080063b1 	.word	0x080063b1
 80063f0:	080063b1 	.word	0x080063b1
 80063f4:	08006541 	.word	0x08006541
 80063f8:	08006465 	.word	0x08006465
 80063fc:	08006523 	.word	0x08006523
 8006400:	080063b1 	.word	0x080063b1
 8006404:	080063b1 	.word	0x080063b1
 8006408:	08006563 	.word	0x08006563
 800640c:	080063b1 	.word	0x080063b1
 8006410:	08006465 	.word	0x08006465
 8006414:	080063b1 	.word	0x080063b1
 8006418:	080063b1 	.word	0x080063b1
 800641c:	0800652b 	.word	0x0800652b
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	602a      	str	r2, [r5, #0]
 8006428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800642c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006430:	2301      	movs	r3, #1
 8006432:	e0a3      	b.n	800657c <_printf_i+0x1f4>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	6829      	ldr	r1, [r5, #0]
 8006438:	0606      	lsls	r6, r0, #24
 800643a:	f101 0304 	add.w	r3, r1, #4
 800643e:	d50a      	bpl.n	8006456 <_printf_i+0xce>
 8006440:	680e      	ldr	r6, [r1, #0]
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	2e00      	cmp	r6, #0
 8006446:	da03      	bge.n	8006450 <_printf_i+0xc8>
 8006448:	232d      	movs	r3, #45	; 0x2d
 800644a:	4276      	negs	r6, r6
 800644c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006450:	485e      	ldr	r0, [pc, #376]	; (80065cc <_printf_i+0x244>)
 8006452:	230a      	movs	r3, #10
 8006454:	e019      	b.n	800648a <_printf_i+0x102>
 8006456:	680e      	ldr	r6, [r1, #0]
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800645e:	bf18      	it	ne
 8006460:	b236      	sxthne	r6, r6
 8006462:	e7ef      	b.n	8006444 <_printf_i+0xbc>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	1d19      	adds	r1, r3, #4
 800646a:	6029      	str	r1, [r5, #0]
 800646c:	0601      	lsls	r1, r0, #24
 800646e:	d501      	bpl.n	8006474 <_printf_i+0xec>
 8006470:	681e      	ldr	r6, [r3, #0]
 8006472:	e002      	b.n	800647a <_printf_i+0xf2>
 8006474:	0646      	lsls	r6, r0, #25
 8006476:	d5fb      	bpl.n	8006470 <_printf_i+0xe8>
 8006478:	881e      	ldrh	r6, [r3, #0]
 800647a:	4854      	ldr	r0, [pc, #336]	; (80065cc <_printf_i+0x244>)
 800647c:	2f6f      	cmp	r7, #111	; 0x6f
 800647e:	bf0c      	ite	eq
 8006480:	2308      	moveq	r3, #8
 8006482:	230a      	movne	r3, #10
 8006484:	2100      	movs	r1, #0
 8006486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800648a:	6865      	ldr	r5, [r4, #4]
 800648c:	60a5      	str	r5, [r4, #8]
 800648e:	2d00      	cmp	r5, #0
 8006490:	bfa2      	ittt	ge
 8006492:	6821      	ldrge	r1, [r4, #0]
 8006494:	f021 0104 	bicge.w	r1, r1, #4
 8006498:	6021      	strge	r1, [r4, #0]
 800649a:	b90e      	cbnz	r6, 80064a0 <_printf_i+0x118>
 800649c:	2d00      	cmp	r5, #0
 800649e:	d04d      	beq.n	800653c <_printf_i+0x1b4>
 80064a0:	4615      	mov	r5, r2
 80064a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064a6:	fb03 6711 	mls	r7, r3, r1, r6
 80064aa:	5dc7      	ldrb	r7, [r0, r7]
 80064ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064b0:	4637      	mov	r7, r6
 80064b2:	42bb      	cmp	r3, r7
 80064b4:	460e      	mov	r6, r1
 80064b6:	d9f4      	bls.n	80064a2 <_printf_i+0x11a>
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d10b      	bne.n	80064d4 <_printf_i+0x14c>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	07de      	lsls	r6, r3, #31
 80064c0:	d508      	bpl.n	80064d4 <_printf_i+0x14c>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	6861      	ldr	r1, [r4, #4]
 80064c6:	4299      	cmp	r1, r3
 80064c8:	bfde      	ittt	le
 80064ca:	2330      	movle	r3, #48	; 0x30
 80064cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064d4:	1b52      	subs	r2, r2, r5
 80064d6:	6122      	str	r2, [r4, #16]
 80064d8:	f8cd a000 	str.w	sl, [sp]
 80064dc:	464b      	mov	r3, r9
 80064de:	aa03      	add	r2, sp, #12
 80064e0:	4621      	mov	r1, r4
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff fee2 	bl	80062ac <_printf_common>
 80064e8:	3001      	adds	r0, #1
 80064ea:	d14c      	bne.n	8006586 <_printf_i+0x1fe>
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	b004      	add	sp, #16
 80064f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f6:	4835      	ldr	r0, [pc, #212]	; (80065cc <_printf_i+0x244>)
 80064f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064fc:	6829      	ldr	r1, [r5, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	f851 6b04 	ldr.w	r6, [r1], #4
 8006504:	6029      	str	r1, [r5, #0]
 8006506:	061d      	lsls	r5, r3, #24
 8006508:	d514      	bpl.n	8006534 <_printf_i+0x1ac>
 800650a:	07df      	lsls	r7, r3, #31
 800650c:	bf44      	itt	mi
 800650e:	f043 0320 	orrmi.w	r3, r3, #32
 8006512:	6023      	strmi	r3, [r4, #0]
 8006514:	b91e      	cbnz	r6, 800651e <_printf_i+0x196>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f023 0320 	bic.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	2310      	movs	r3, #16
 8006520:	e7b0      	b.n	8006484 <_printf_i+0xfc>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	f043 0320 	orr.w	r3, r3, #32
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	2378      	movs	r3, #120	; 0x78
 800652c:	4828      	ldr	r0, [pc, #160]	; (80065d0 <_printf_i+0x248>)
 800652e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006532:	e7e3      	b.n	80064fc <_printf_i+0x174>
 8006534:	0659      	lsls	r1, r3, #25
 8006536:	bf48      	it	mi
 8006538:	b2b6      	uxthmi	r6, r6
 800653a:	e7e6      	b.n	800650a <_printf_i+0x182>
 800653c:	4615      	mov	r5, r2
 800653e:	e7bb      	b.n	80064b8 <_printf_i+0x130>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	6826      	ldr	r6, [r4, #0]
 8006544:	6961      	ldr	r1, [r4, #20]
 8006546:	1d18      	adds	r0, r3, #4
 8006548:	6028      	str	r0, [r5, #0]
 800654a:	0635      	lsls	r5, r6, #24
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	d501      	bpl.n	8006554 <_printf_i+0x1cc>
 8006550:	6019      	str	r1, [r3, #0]
 8006552:	e002      	b.n	800655a <_printf_i+0x1d2>
 8006554:	0670      	lsls	r0, r6, #25
 8006556:	d5fb      	bpl.n	8006550 <_printf_i+0x1c8>
 8006558:	8019      	strh	r1, [r3, #0]
 800655a:	2300      	movs	r3, #0
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	4615      	mov	r5, r2
 8006560:	e7ba      	b.n	80064d8 <_printf_i+0x150>
 8006562:	682b      	ldr	r3, [r5, #0]
 8006564:	1d1a      	adds	r2, r3, #4
 8006566:	602a      	str	r2, [r5, #0]
 8006568:	681d      	ldr	r5, [r3, #0]
 800656a:	6862      	ldr	r2, [r4, #4]
 800656c:	2100      	movs	r1, #0
 800656e:	4628      	mov	r0, r5
 8006570:	f7f9 fe56 	bl	8000220 <memchr>
 8006574:	b108      	cbz	r0, 800657a <_printf_i+0x1f2>
 8006576:	1b40      	subs	r0, r0, r5
 8006578:	6060      	str	r0, [r4, #4]
 800657a:	6863      	ldr	r3, [r4, #4]
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	2300      	movs	r3, #0
 8006580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006584:	e7a8      	b.n	80064d8 <_printf_i+0x150>
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	462a      	mov	r2, r5
 800658a:	4649      	mov	r1, r9
 800658c:	4640      	mov	r0, r8
 800658e:	47d0      	blx	sl
 8006590:	3001      	adds	r0, #1
 8006592:	d0ab      	beq.n	80064ec <_printf_i+0x164>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	079b      	lsls	r3, r3, #30
 8006598:	d413      	bmi.n	80065c2 <_printf_i+0x23a>
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	4298      	cmp	r0, r3
 80065a0:	bfb8      	it	lt
 80065a2:	4618      	movlt	r0, r3
 80065a4:	e7a4      	b.n	80064f0 <_printf_i+0x168>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4632      	mov	r2, r6
 80065aa:	4649      	mov	r1, r9
 80065ac:	4640      	mov	r0, r8
 80065ae:	47d0      	blx	sl
 80065b0:	3001      	adds	r0, #1
 80065b2:	d09b      	beq.n	80064ec <_printf_i+0x164>
 80065b4:	3501      	adds	r5, #1
 80065b6:	68e3      	ldr	r3, [r4, #12]
 80065b8:	9903      	ldr	r1, [sp, #12]
 80065ba:	1a5b      	subs	r3, r3, r1
 80065bc:	42ab      	cmp	r3, r5
 80065be:	dcf2      	bgt.n	80065a6 <_printf_i+0x21e>
 80065c0:	e7eb      	b.n	800659a <_printf_i+0x212>
 80065c2:	2500      	movs	r5, #0
 80065c4:	f104 0619 	add.w	r6, r4, #25
 80065c8:	e7f5      	b.n	80065b6 <_printf_i+0x22e>
 80065ca:	bf00      	nop
 80065cc:	08009b84 	.word	0x08009b84
 80065d0:	08009b95 	.word	0x08009b95

080065d4 <iprintf>:
 80065d4:	b40f      	push	{r0, r1, r2, r3}
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <iprintf+0x2c>)
 80065d8:	b513      	push	{r0, r1, r4, lr}
 80065da:	681c      	ldr	r4, [r3, #0]
 80065dc:	b124      	cbz	r4, 80065e8 <iprintf+0x14>
 80065de:	69a3      	ldr	r3, [r4, #24]
 80065e0:	b913      	cbnz	r3, 80065e8 <iprintf+0x14>
 80065e2:	4620      	mov	r0, r4
 80065e4:	f001 f9ca 	bl	800797c <__sinit>
 80065e8:	ab05      	add	r3, sp, #20
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	68a1      	ldr	r1, [r4, #8]
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f001 ffa3 	bl	800853c <_vfiprintf_r>
 80065f6:	b002      	add	sp, #8
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	b004      	add	sp, #16
 80065fe:	4770      	bx	lr
 8006600:	2000000c 	.word	0x2000000c

08006604 <_puts_r>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	460e      	mov	r6, r1
 8006608:	4605      	mov	r5, r0
 800660a:	b118      	cbz	r0, 8006614 <_puts_r+0x10>
 800660c:	6983      	ldr	r3, [r0, #24]
 800660e:	b90b      	cbnz	r3, 8006614 <_puts_r+0x10>
 8006610:	f001 f9b4 	bl	800797c <__sinit>
 8006614:	69ab      	ldr	r3, [r5, #24]
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	b913      	cbnz	r3, 8006620 <_puts_r+0x1c>
 800661a:	4628      	mov	r0, r5
 800661c:	f001 f9ae 	bl	800797c <__sinit>
 8006620:	4b2c      	ldr	r3, [pc, #176]	; (80066d4 <_puts_r+0xd0>)
 8006622:	429c      	cmp	r4, r3
 8006624:	d120      	bne.n	8006668 <_puts_r+0x64>
 8006626:	686c      	ldr	r4, [r5, #4]
 8006628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	d405      	bmi.n	800663a <_puts_r+0x36>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	0598      	lsls	r0, r3, #22
 8006632:	d402      	bmi.n	800663a <_puts_r+0x36>
 8006634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006636:	f001 fa60 	bl	8007afa <__retarget_lock_acquire_recursive>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	0719      	lsls	r1, r3, #28
 800663e:	d51d      	bpl.n	800667c <_puts_r+0x78>
 8006640:	6923      	ldr	r3, [r4, #16]
 8006642:	b1db      	cbz	r3, 800667c <_puts_r+0x78>
 8006644:	3e01      	subs	r6, #1
 8006646:	68a3      	ldr	r3, [r4, #8]
 8006648:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800664c:	3b01      	subs	r3, #1
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	bb39      	cbnz	r1, 80066a2 <_puts_r+0x9e>
 8006652:	2b00      	cmp	r3, #0
 8006654:	da38      	bge.n	80066c8 <_puts_r+0xc4>
 8006656:	4622      	mov	r2, r4
 8006658:	210a      	movs	r1, #10
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f926 	bl	80068ac <__swbuf_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d011      	beq.n	8006688 <_puts_r+0x84>
 8006664:	250a      	movs	r5, #10
 8006666:	e011      	b.n	800668c <_puts_r+0x88>
 8006668:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <_puts_r+0xd4>)
 800666a:	429c      	cmp	r4, r3
 800666c:	d101      	bne.n	8006672 <_puts_r+0x6e>
 800666e:	68ac      	ldr	r4, [r5, #8]
 8006670:	e7da      	b.n	8006628 <_puts_r+0x24>
 8006672:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <_puts_r+0xd8>)
 8006674:	429c      	cmp	r4, r3
 8006676:	bf08      	it	eq
 8006678:	68ec      	ldreq	r4, [r5, #12]
 800667a:	e7d5      	b.n	8006628 <_puts_r+0x24>
 800667c:	4621      	mov	r1, r4
 800667e:	4628      	mov	r0, r5
 8006680:	f000 f966 	bl	8006950 <__swsetup_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	d0dd      	beq.n	8006644 <_puts_r+0x40>
 8006688:	f04f 35ff 	mov.w	r5, #4294967295
 800668c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800668e:	07da      	lsls	r2, r3, #31
 8006690:	d405      	bmi.n	800669e <_puts_r+0x9a>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	059b      	lsls	r3, r3, #22
 8006696:	d402      	bmi.n	800669e <_puts_r+0x9a>
 8006698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800669a:	f001 fa2f 	bl	8007afc <__retarget_lock_release_recursive>
 800669e:	4628      	mov	r0, r5
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da04      	bge.n	80066b0 <_puts_r+0xac>
 80066a6:	69a2      	ldr	r2, [r4, #24]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	dc06      	bgt.n	80066ba <_puts_r+0xb6>
 80066ac:	290a      	cmp	r1, #10
 80066ae:	d004      	beq.n	80066ba <_puts_r+0xb6>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	7019      	strb	r1, [r3, #0]
 80066b8:	e7c5      	b.n	8006646 <_puts_r+0x42>
 80066ba:	4622      	mov	r2, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	f000 f8f5 	bl	80068ac <__swbuf_r>
 80066c2:	3001      	adds	r0, #1
 80066c4:	d1bf      	bne.n	8006646 <_puts_r+0x42>
 80066c6:	e7df      	b.n	8006688 <_puts_r+0x84>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	250a      	movs	r5, #10
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	6022      	str	r2, [r4, #0]
 80066d0:	701d      	strb	r5, [r3, #0]
 80066d2:	e7db      	b.n	800668c <_puts_r+0x88>
 80066d4:	08009c58 	.word	0x08009c58
 80066d8:	08009c78 	.word	0x08009c78
 80066dc:	08009c38 	.word	0x08009c38

080066e0 <puts>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <puts+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7ff bf8d 	b.w	8006604 <_puts_r>
 80066ea:	bf00      	nop
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <iscanf>:
 80066f0:	b40f      	push	{r0, r1, r2, r3}
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <iscanf+0x2c>)
 80066f4:	b513      	push	{r0, r1, r4, lr}
 80066f6:	681c      	ldr	r4, [r3, #0]
 80066f8:	b124      	cbz	r4, 8006704 <iscanf+0x14>
 80066fa:	69a3      	ldr	r3, [r4, #24]
 80066fc:	b913      	cbnz	r3, 8006704 <iscanf+0x14>
 80066fe:	4620      	mov	r0, r4
 8006700:	f001 f93c 	bl	800797c <__sinit>
 8006704:	ab05      	add	r3, sp, #20
 8006706:	9a04      	ldr	r2, [sp, #16]
 8006708:	6861      	ldr	r1, [r4, #4]
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	4620      	mov	r0, r4
 800670e:	f002 f9eb 	bl	8008ae8 <_vfiscanf_r>
 8006712:	b002      	add	sp, #8
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	b004      	add	sp, #16
 800671a:	4770      	bx	lr
 800671c:	2000000c 	.word	0x2000000c

08006720 <setvbuf>:
 8006720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006724:	461d      	mov	r5, r3
 8006726:	4b5d      	ldr	r3, [pc, #372]	; (800689c <setvbuf+0x17c>)
 8006728:	681f      	ldr	r7, [r3, #0]
 800672a:	4604      	mov	r4, r0
 800672c:	460e      	mov	r6, r1
 800672e:	4690      	mov	r8, r2
 8006730:	b127      	cbz	r7, 800673c <setvbuf+0x1c>
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	b913      	cbnz	r3, 800673c <setvbuf+0x1c>
 8006736:	4638      	mov	r0, r7
 8006738:	f001 f920 	bl	800797c <__sinit>
 800673c:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <setvbuf+0x180>)
 800673e:	429c      	cmp	r4, r3
 8006740:	d167      	bne.n	8006812 <setvbuf+0xf2>
 8006742:	687c      	ldr	r4, [r7, #4]
 8006744:	f1b8 0f02 	cmp.w	r8, #2
 8006748:	d006      	beq.n	8006758 <setvbuf+0x38>
 800674a:	f1b8 0f01 	cmp.w	r8, #1
 800674e:	f200 809f 	bhi.w	8006890 <setvbuf+0x170>
 8006752:	2d00      	cmp	r5, #0
 8006754:	f2c0 809c 	blt.w	8006890 <setvbuf+0x170>
 8006758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800675a:	07db      	lsls	r3, r3, #31
 800675c:	d405      	bmi.n	800676a <setvbuf+0x4a>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	0598      	lsls	r0, r3, #22
 8006762:	d402      	bmi.n	800676a <setvbuf+0x4a>
 8006764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006766:	f001 f9c8 	bl	8007afa <__retarget_lock_acquire_recursive>
 800676a:	4621      	mov	r1, r4
 800676c:	4638      	mov	r0, r7
 800676e:	f001 f85f 	bl	8007830 <_fflush_r>
 8006772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006774:	b141      	cbz	r1, 8006788 <setvbuf+0x68>
 8006776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800677a:	4299      	cmp	r1, r3
 800677c:	d002      	beq.n	8006784 <setvbuf+0x64>
 800677e:	4638      	mov	r0, r7
 8006780:	f001 fdd2 	bl	8008328 <_free_r>
 8006784:	2300      	movs	r3, #0
 8006786:	6363      	str	r3, [r4, #52]	; 0x34
 8006788:	2300      	movs	r3, #0
 800678a:	61a3      	str	r3, [r4, #24]
 800678c:	6063      	str	r3, [r4, #4]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	0619      	lsls	r1, r3, #24
 8006792:	d503      	bpl.n	800679c <setvbuf+0x7c>
 8006794:	6921      	ldr	r1, [r4, #16]
 8006796:	4638      	mov	r0, r7
 8006798:	f001 fdc6 	bl	8008328 <_free_r>
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	f1b8 0f02 	cmp.w	r8, #2
 80067aa:	81a3      	strh	r3, [r4, #12]
 80067ac:	d06c      	beq.n	8006888 <setvbuf+0x168>
 80067ae:	ab01      	add	r3, sp, #4
 80067b0:	466a      	mov	r2, sp
 80067b2:	4621      	mov	r1, r4
 80067b4:	4638      	mov	r0, r7
 80067b6:	f001 f9a2 	bl	8007afe <__swhatbuf_r>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	4318      	orrs	r0, r3
 80067be:	81a0      	strh	r0, [r4, #12]
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	d130      	bne.n	8006826 <setvbuf+0x106>
 80067c4:	9d00      	ldr	r5, [sp, #0]
 80067c6:	4628      	mov	r0, r5
 80067c8:	f001 f9fe 	bl	8007bc8 <malloc>
 80067cc:	4606      	mov	r6, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d155      	bne.n	800687e <setvbuf+0x15e>
 80067d2:	f8dd 9000 	ldr.w	r9, [sp]
 80067d6:	45a9      	cmp	r9, r5
 80067d8:	d14a      	bne.n	8006870 <setvbuf+0x150>
 80067da:	f04f 35ff 	mov.w	r5, #4294967295
 80067de:	2200      	movs	r2, #0
 80067e0:	60a2      	str	r2, [r4, #8]
 80067e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	6122      	str	r2, [r4, #16]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f0:	6162      	str	r2, [r4, #20]
 80067f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067f4:	f043 0302 	orr.w	r3, r3, #2
 80067f8:	07d2      	lsls	r2, r2, #31
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	d405      	bmi.n	800680a <setvbuf+0xea>
 80067fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006802:	d102      	bne.n	800680a <setvbuf+0xea>
 8006804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006806:	f001 f979 	bl	8007afc <__retarget_lock_release_recursive>
 800680a:	4628      	mov	r0, r5
 800680c:	b003      	add	sp, #12
 800680e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006812:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <setvbuf+0x184>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d101      	bne.n	800681c <setvbuf+0xfc>
 8006818:	68bc      	ldr	r4, [r7, #8]
 800681a:	e793      	b.n	8006744 <setvbuf+0x24>
 800681c:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <setvbuf+0x188>)
 800681e:	429c      	cmp	r4, r3
 8006820:	bf08      	it	eq
 8006822:	68fc      	ldreq	r4, [r7, #12]
 8006824:	e78e      	b.n	8006744 <setvbuf+0x24>
 8006826:	2e00      	cmp	r6, #0
 8006828:	d0cd      	beq.n	80067c6 <setvbuf+0xa6>
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	b913      	cbnz	r3, 8006834 <setvbuf+0x114>
 800682e:	4638      	mov	r0, r7
 8006830:	f001 f8a4 	bl	800797c <__sinit>
 8006834:	f1b8 0f01 	cmp.w	r8, #1
 8006838:	bf08      	it	eq
 800683a:	89a3      	ldrheq	r3, [r4, #12]
 800683c:	6026      	str	r6, [r4, #0]
 800683e:	bf04      	itt	eq
 8006840:	f043 0301 	orreq.w	r3, r3, #1
 8006844:	81a3      	strheq	r3, [r4, #12]
 8006846:	89a2      	ldrh	r2, [r4, #12]
 8006848:	f012 0308 	ands.w	r3, r2, #8
 800684c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006850:	d01c      	beq.n	800688c <setvbuf+0x16c>
 8006852:	07d3      	lsls	r3, r2, #31
 8006854:	bf41      	itttt	mi
 8006856:	2300      	movmi	r3, #0
 8006858:	426d      	negmi	r5, r5
 800685a:	60a3      	strmi	r3, [r4, #8]
 800685c:	61a5      	strmi	r5, [r4, #24]
 800685e:	bf58      	it	pl
 8006860:	60a5      	strpl	r5, [r4, #8]
 8006862:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006864:	f015 0501 	ands.w	r5, r5, #1
 8006868:	d115      	bne.n	8006896 <setvbuf+0x176>
 800686a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800686e:	e7c8      	b.n	8006802 <setvbuf+0xe2>
 8006870:	4648      	mov	r0, r9
 8006872:	f001 f9a9 	bl	8007bc8 <malloc>
 8006876:	4606      	mov	r6, r0
 8006878:	2800      	cmp	r0, #0
 800687a:	d0ae      	beq.n	80067da <setvbuf+0xba>
 800687c:	464d      	mov	r5, r9
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	e7d0      	b.n	800682a <setvbuf+0x10a>
 8006888:	2500      	movs	r5, #0
 800688a:	e7a8      	b.n	80067de <setvbuf+0xbe>
 800688c:	60a3      	str	r3, [r4, #8]
 800688e:	e7e8      	b.n	8006862 <setvbuf+0x142>
 8006890:	f04f 35ff 	mov.w	r5, #4294967295
 8006894:	e7b9      	b.n	800680a <setvbuf+0xea>
 8006896:	2500      	movs	r5, #0
 8006898:	e7b7      	b.n	800680a <setvbuf+0xea>
 800689a:	bf00      	nop
 800689c:	2000000c 	.word	0x2000000c
 80068a0:	08009c58 	.word	0x08009c58
 80068a4:	08009c78 	.word	0x08009c78
 80068a8:	08009c38 	.word	0x08009c38

080068ac <__swbuf_r>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	460e      	mov	r6, r1
 80068b0:	4614      	mov	r4, r2
 80068b2:	4605      	mov	r5, r0
 80068b4:	b118      	cbz	r0, 80068be <__swbuf_r+0x12>
 80068b6:	6983      	ldr	r3, [r0, #24]
 80068b8:	b90b      	cbnz	r3, 80068be <__swbuf_r+0x12>
 80068ba:	f001 f85f 	bl	800797c <__sinit>
 80068be:	4b21      	ldr	r3, [pc, #132]	; (8006944 <__swbuf_r+0x98>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	d12b      	bne.n	800691c <__swbuf_r+0x70>
 80068c4:	686c      	ldr	r4, [r5, #4]
 80068c6:	69a3      	ldr	r3, [r4, #24]
 80068c8:	60a3      	str	r3, [r4, #8]
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	071a      	lsls	r2, r3, #28
 80068ce:	d52f      	bpl.n	8006930 <__swbuf_r+0x84>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	b36b      	cbz	r3, 8006930 <__swbuf_r+0x84>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	6820      	ldr	r0, [r4, #0]
 80068d8:	1ac0      	subs	r0, r0, r3
 80068da:	6963      	ldr	r3, [r4, #20]
 80068dc:	b2f6      	uxtb	r6, r6
 80068de:	4283      	cmp	r3, r0
 80068e0:	4637      	mov	r7, r6
 80068e2:	dc04      	bgt.n	80068ee <__swbuf_r+0x42>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 ffa2 	bl	8007830 <_fflush_r>
 80068ec:	bb30      	cbnz	r0, 800693c <__swbuf_r+0x90>
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60a3      	str	r3, [r4, #8]
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	6022      	str	r2, [r4, #0]
 80068fa:	701e      	strb	r6, [r3, #0]
 80068fc:	6963      	ldr	r3, [r4, #20]
 80068fe:	3001      	adds	r0, #1
 8006900:	4283      	cmp	r3, r0
 8006902:	d004      	beq.n	800690e <__swbuf_r+0x62>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	07db      	lsls	r3, r3, #31
 8006908:	d506      	bpl.n	8006918 <__swbuf_r+0x6c>
 800690a:	2e0a      	cmp	r6, #10
 800690c:	d104      	bne.n	8006918 <__swbuf_r+0x6c>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 ff8d 	bl	8007830 <_fflush_r>
 8006916:	b988      	cbnz	r0, 800693c <__swbuf_r+0x90>
 8006918:	4638      	mov	r0, r7
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <__swbuf_r+0x9c>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d101      	bne.n	8006926 <__swbuf_r+0x7a>
 8006922:	68ac      	ldr	r4, [r5, #8]
 8006924:	e7cf      	b.n	80068c6 <__swbuf_r+0x1a>
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <__swbuf_r+0xa0>)
 8006928:	429c      	cmp	r4, r3
 800692a:	bf08      	it	eq
 800692c:	68ec      	ldreq	r4, [r5, #12]
 800692e:	e7ca      	b.n	80068c6 <__swbuf_r+0x1a>
 8006930:	4621      	mov	r1, r4
 8006932:	4628      	mov	r0, r5
 8006934:	f000 f80c 	bl	8006950 <__swsetup_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	d0cb      	beq.n	80068d4 <__swbuf_r+0x28>
 800693c:	f04f 37ff 	mov.w	r7, #4294967295
 8006940:	e7ea      	b.n	8006918 <__swbuf_r+0x6c>
 8006942:	bf00      	nop
 8006944:	08009c58 	.word	0x08009c58
 8006948:	08009c78 	.word	0x08009c78
 800694c:	08009c38 	.word	0x08009c38

08006950 <__swsetup_r>:
 8006950:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <__swsetup_r+0xcc>)
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	4606      	mov	r6, r0
 8006958:	460c      	mov	r4, r1
 800695a:	b125      	cbz	r5, 8006966 <__swsetup_r+0x16>
 800695c:	69ab      	ldr	r3, [r5, #24]
 800695e:	b913      	cbnz	r3, 8006966 <__swsetup_r+0x16>
 8006960:	4628      	mov	r0, r5
 8006962:	f001 f80b 	bl	800797c <__sinit>
 8006966:	4b2e      	ldr	r3, [pc, #184]	; (8006a20 <__swsetup_r+0xd0>)
 8006968:	429c      	cmp	r4, r3
 800696a:	d10f      	bne.n	800698c <__swsetup_r+0x3c>
 800696c:	686c      	ldr	r4, [r5, #4]
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006974:	0719      	lsls	r1, r3, #28
 8006976:	d42c      	bmi.n	80069d2 <__swsetup_r+0x82>
 8006978:	06dd      	lsls	r5, r3, #27
 800697a:	d411      	bmi.n	80069a0 <__swsetup_r+0x50>
 800697c:	2309      	movs	r3, #9
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	e03e      	b.n	8006a0a <__swsetup_r+0xba>
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <__swsetup_r+0xd4>)
 800698e:	429c      	cmp	r4, r3
 8006990:	d101      	bne.n	8006996 <__swsetup_r+0x46>
 8006992:	68ac      	ldr	r4, [r5, #8]
 8006994:	e7eb      	b.n	800696e <__swsetup_r+0x1e>
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <__swsetup_r+0xd8>)
 8006998:	429c      	cmp	r4, r3
 800699a:	bf08      	it	eq
 800699c:	68ec      	ldreq	r4, [r5, #12]
 800699e:	e7e6      	b.n	800696e <__swsetup_r+0x1e>
 80069a0:	0758      	lsls	r0, r3, #29
 80069a2:	d512      	bpl.n	80069ca <__swsetup_r+0x7a>
 80069a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069a6:	b141      	cbz	r1, 80069ba <__swsetup_r+0x6a>
 80069a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d002      	beq.n	80069b6 <__swsetup_r+0x66>
 80069b0:	4630      	mov	r0, r6
 80069b2:	f001 fcb9 	bl	8008328 <_free_r>
 80069b6:	2300      	movs	r3, #0
 80069b8:	6363      	str	r3, [r4, #52]	; 0x34
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	b94b      	cbnz	r3, 80069ea <__swsetup_r+0x9a>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d003      	beq.n	80069ea <__swsetup_r+0x9a>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4630      	mov	r0, r6
 80069e6:	f001 f8af 	bl	8007b48 <__smakebuf_r>
 80069ea:	89a0      	ldrh	r0, [r4, #12]
 80069ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069f0:	f010 0301 	ands.w	r3, r0, #1
 80069f4:	d00a      	beq.n	8006a0c <__swsetup_r+0xbc>
 80069f6:	2300      	movs	r3, #0
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6963      	ldr	r3, [r4, #20]
 80069fc:	425b      	negs	r3, r3
 80069fe:	61a3      	str	r3, [r4, #24]
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	b943      	cbnz	r3, 8006a16 <__swsetup_r+0xc6>
 8006a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a08:	d1ba      	bne.n	8006980 <__swsetup_r+0x30>
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	0781      	lsls	r1, r0, #30
 8006a0e:	bf58      	it	pl
 8006a10:	6963      	ldrpl	r3, [r4, #20]
 8006a12:	60a3      	str	r3, [r4, #8]
 8006a14:	e7f4      	b.n	8006a00 <__swsetup_r+0xb0>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e7f7      	b.n	8006a0a <__swsetup_r+0xba>
 8006a1a:	bf00      	nop
 8006a1c:	2000000c 	.word	0x2000000c
 8006a20:	08009c58 	.word	0x08009c58
 8006a24:	08009c78 	.word	0x08009c78
 8006a28:	08009c38 	.word	0x08009c38

08006a2c <quorem>:
 8006a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	6903      	ldr	r3, [r0, #16]
 8006a32:	690c      	ldr	r4, [r1, #16]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	4607      	mov	r7, r0
 8006a38:	f2c0 8081 	blt.w	8006b3e <quorem+0x112>
 8006a3c:	3c01      	subs	r4, #1
 8006a3e:	f101 0814 	add.w	r8, r1, #20
 8006a42:	f100 0514 	add.w	r5, r0, #20
 8006a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a54:	3301      	adds	r3, #1
 8006a56:	429a      	cmp	r2, r3
 8006a58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a60:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a64:	d331      	bcc.n	8006aca <quorem+0x9e>
 8006a66:	f04f 0e00 	mov.w	lr, #0
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	46ac      	mov	ip, r5
 8006a6e:	46f2      	mov	sl, lr
 8006a70:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a74:	b293      	uxth	r3, r2
 8006a76:	fb06 e303 	mla	r3, r6, r3, lr
 8006a7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	ebaa 0303 	sub.w	r3, sl, r3
 8006a84:	f8dc a000 	ldr.w	sl, [ip]
 8006a88:	0c12      	lsrs	r2, r2, #16
 8006a8a:	fa13 f38a 	uxtah	r3, r3, sl
 8006a8e:	fb06 e202 	mla	r2, r6, r2, lr
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	9b00      	ldr	r3, [sp, #0]
 8006a96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a9a:	b292      	uxth	r2, r2
 8006a9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aa4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006aa8:	4581      	cmp	r9, r0
 8006aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aae:	f84c 3b04 	str.w	r3, [ip], #4
 8006ab2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ab6:	d2db      	bcs.n	8006a70 <quorem+0x44>
 8006ab8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006abc:	b92b      	cbnz	r3, 8006aca <quorem+0x9e>
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	3b04      	subs	r3, #4
 8006ac2:	429d      	cmp	r5, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	d32e      	bcc.n	8006b26 <quorem+0xfa>
 8006ac8:	613c      	str	r4, [r7, #16]
 8006aca:	4638      	mov	r0, r7
 8006acc:	f001 fb14 	bl	80080f8 <__mcmp>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	db24      	blt.n	8006b1e <quorem+0xf2>
 8006ad4:	3601      	adds	r6, #1
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f04f 0c00 	mov.w	ip, #0
 8006adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ae0:	f8d0 e000 	ldr.w	lr, [r0]
 8006ae4:	b293      	uxth	r3, r2
 8006ae6:	ebac 0303 	sub.w	r3, ip, r3
 8006aea:	0c12      	lsrs	r2, r2, #16
 8006aec:	fa13 f38e 	uxtah	r3, r3, lr
 8006af0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006afe:	45c1      	cmp	r9, r8
 8006b00:	f840 3b04 	str.w	r3, [r0], #4
 8006b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b08:	d2e8      	bcs.n	8006adc <quorem+0xb0>
 8006b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b12:	b922      	cbnz	r2, 8006b1e <quorem+0xf2>
 8006b14:	3b04      	subs	r3, #4
 8006b16:	429d      	cmp	r5, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	d30a      	bcc.n	8006b32 <quorem+0x106>
 8006b1c:	613c      	str	r4, [r7, #16]
 8006b1e:	4630      	mov	r0, r6
 8006b20:	b003      	add	sp, #12
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	3b04      	subs	r3, #4
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	d1cc      	bne.n	8006ac8 <quorem+0x9c>
 8006b2e:	3c01      	subs	r4, #1
 8006b30:	e7c7      	b.n	8006ac2 <quorem+0x96>
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	3b04      	subs	r3, #4
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	d1f0      	bne.n	8006b1c <quorem+0xf0>
 8006b3a:	3c01      	subs	r4, #1
 8006b3c:	e7eb      	b.n	8006b16 <quorem+0xea>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e7ee      	b.n	8006b20 <quorem+0xf4>
 8006b42:	0000      	movs	r0, r0
 8006b44:	0000      	movs	r0, r0
	...

08006b48 <_dtoa_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	ed2d 8b04 	vpush	{d8-d9}
 8006b50:	ec57 6b10 	vmov	r6, r7, d0
 8006b54:	b093      	sub	sp, #76	; 0x4c
 8006b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b5c:	9106      	str	r1, [sp, #24]
 8006b5e:	ee10 aa10 	vmov	sl, s0
 8006b62:	4604      	mov	r4, r0
 8006b64:	9209      	str	r2, [sp, #36]	; 0x24
 8006b66:	930c      	str	r3, [sp, #48]	; 0x30
 8006b68:	46bb      	mov	fp, r7
 8006b6a:	b975      	cbnz	r5, 8006b8a <_dtoa_r+0x42>
 8006b6c:	2010      	movs	r0, #16
 8006b6e:	f001 f82b 	bl	8007bc8 <malloc>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6260      	str	r0, [r4, #36]	; 0x24
 8006b76:	b920      	cbnz	r0, 8006b82 <_dtoa_r+0x3a>
 8006b78:	4ba7      	ldr	r3, [pc, #668]	; (8006e18 <_dtoa_r+0x2d0>)
 8006b7a:	21ea      	movs	r1, #234	; 0xea
 8006b7c:	48a7      	ldr	r0, [pc, #668]	; (8006e1c <_dtoa_r+0x2d4>)
 8006b7e:	f002 fc29 	bl	80093d4 <__assert_func>
 8006b82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b86:	6005      	str	r5, [r0, #0]
 8006b88:	60c5      	str	r5, [r0, #12]
 8006b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	b151      	cbz	r1, 8006ba6 <_dtoa_r+0x5e>
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	604a      	str	r2, [r1, #4]
 8006b94:	2301      	movs	r3, #1
 8006b96:	4093      	lsls	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f001 f86a 	bl	8007c74 <_Bfree>
 8006ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	1e3b      	subs	r3, r7, #0
 8006ba8:	bfaa      	itet	ge
 8006baa:	2300      	movge	r3, #0
 8006bac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006bb0:	f8c8 3000 	strge.w	r3, [r8]
 8006bb4:	4b9a      	ldr	r3, [pc, #616]	; (8006e20 <_dtoa_r+0x2d8>)
 8006bb6:	bfbc      	itt	lt
 8006bb8:	2201      	movlt	r2, #1
 8006bba:	f8c8 2000 	strlt.w	r2, [r8]
 8006bbe:	ea33 030b 	bics.w	r3, r3, fp
 8006bc2:	d11b      	bne.n	8006bfc <_dtoa_r+0xb4>
 8006bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bd0:	4333      	orrs	r3, r6
 8006bd2:	f000 8592 	beq.w	80076fa <_dtoa_r+0xbb2>
 8006bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd8:	b963      	cbnz	r3, 8006bf4 <_dtoa_r+0xac>
 8006bda:	4b92      	ldr	r3, [pc, #584]	; (8006e24 <_dtoa_r+0x2dc>)
 8006bdc:	e022      	b.n	8006c24 <_dtoa_r+0xdc>
 8006bde:	4b92      	ldr	r3, [pc, #584]	; (8006e28 <_dtoa_r+0x2e0>)
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	3308      	adds	r3, #8
 8006be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	9801      	ldr	r0, [sp, #4]
 8006bea:	b013      	add	sp, #76	; 0x4c
 8006bec:	ecbd 8b04 	vpop	{d8-d9}
 8006bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf4:	4b8b      	ldr	r3, [pc, #556]	; (8006e24 <_dtoa_r+0x2dc>)
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	3303      	adds	r3, #3
 8006bfa:	e7f3      	b.n	8006be4 <_dtoa_r+0x9c>
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4650      	mov	r0, sl
 8006c02:	4659      	mov	r1, fp
 8006c04:	f7f9 ff80 	bl	8000b08 <__aeabi_dcmpeq>
 8006c08:	ec4b ab19 	vmov	d9, sl, fp
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	b158      	cbz	r0, 8006c28 <_dtoa_r+0xe0>
 8006c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c12:	2301      	movs	r3, #1
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 856b 	beq.w	80076f4 <_dtoa_r+0xbac>
 8006c1e:	4883      	ldr	r0, [pc, #524]	; (8006e2c <_dtoa_r+0x2e4>)
 8006c20:	6018      	str	r0, [r3, #0]
 8006c22:	1e43      	subs	r3, r0, #1
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	e7df      	b.n	8006be8 <_dtoa_r+0xa0>
 8006c28:	ec4b ab10 	vmov	d0, sl, fp
 8006c2c:	aa10      	add	r2, sp, #64	; 0x40
 8006c2e:	a911      	add	r1, sp, #68	; 0x44
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 fb07 	bl	8008244 <__d2b>
 8006c36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c3a:	ee08 0a10 	vmov	s16, r0
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	f000 8084 	beq.w	8006d4c <_dtoa_r+0x204>
 8006c44:	ee19 3a90 	vmov	r3, s19
 8006c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c50:	4656      	mov	r6, sl
 8006c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c5e:	4b74      	ldr	r3, [pc, #464]	; (8006e30 <_dtoa_r+0x2e8>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fb2f 	bl	80002c8 <__aeabi_dsub>
 8006c6a:	a365      	add	r3, pc, #404	; (adr r3, 8006e00 <_dtoa_r+0x2b8>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fce2 	bl	8000638 <__aeabi_dmul>
 8006c74:	a364      	add	r3, pc, #400	; (adr r3, 8006e08 <_dtoa_r+0x2c0>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 fb27 	bl	80002cc <__adddf3>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	4628      	mov	r0, r5
 8006c82:	460f      	mov	r7, r1
 8006c84:	f7f9 fc6e 	bl	8000564 <__aeabi_i2d>
 8006c88:	a361      	add	r3, pc, #388	; (adr r3, 8006e10 <_dtoa_r+0x2c8>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 fcd3 	bl	8000638 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4630      	mov	r0, r6
 8006c98:	4639      	mov	r1, r7
 8006c9a:	f7f9 fb17 	bl	80002cc <__adddf3>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	f7f9 ff79 	bl	8000b98 <__aeabi_d2iz>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	9000      	str	r0, [sp, #0]
 8006caa:	2300      	movs	r3, #0
 8006cac:	4630      	mov	r0, r6
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 ff34 	bl	8000b1c <__aeabi_dcmplt>
 8006cb4:	b150      	cbz	r0, 8006ccc <_dtoa_r+0x184>
 8006cb6:	9800      	ldr	r0, [sp, #0]
 8006cb8:	f7f9 fc54 	bl	8000564 <__aeabi_i2d>
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	f7f9 ff22 	bl	8000b08 <__aeabi_dcmpeq>
 8006cc4:	b910      	cbnz	r0, 8006ccc <_dtoa_r+0x184>
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	9b00      	ldr	r3, [sp, #0]
 8006cce:	2b16      	cmp	r3, #22
 8006cd0:	d85a      	bhi.n	8006d88 <_dtoa_r+0x240>
 8006cd2:	9a00      	ldr	r2, [sp, #0]
 8006cd4:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <_dtoa_r+0x2ec>)
 8006cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	ec51 0b19 	vmov	r0, r1, d9
 8006ce2:	f7f9 ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d050      	beq.n	8006d8c <_dtoa_r+0x244>
 8006cea:	9b00      	ldr	r3, [sp, #0]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cf6:	1b5d      	subs	r5, r3, r5
 8006cf8:	1e6b      	subs	r3, r5, #1
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	bf45      	ittet	mi
 8006cfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d02:	9304      	strmi	r3, [sp, #16]
 8006d04:	2300      	movpl	r3, #0
 8006d06:	2300      	movmi	r3, #0
 8006d08:	bf4c      	ite	mi
 8006d0a:	9305      	strmi	r3, [sp, #20]
 8006d0c:	9304      	strpl	r3, [sp, #16]
 8006d0e:	9b00      	ldr	r3, [sp, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db3d      	blt.n	8006d90 <_dtoa_r+0x248>
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	9a00      	ldr	r2, [sp, #0]
 8006d18:	920a      	str	r2, [sp, #40]	; 0x28
 8006d1a:	4413      	add	r3, r2
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9307      	str	r3, [sp, #28]
 8006d22:	9b06      	ldr	r3, [sp, #24]
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	f200 8089 	bhi.w	8006e3c <_dtoa_r+0x2f4>
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	bfc4      	itt	gt
 8006d2e:	3b04      	subgt	r3, #4
 8006d30:	9306      	strgt	r3, [sp, #24]
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	f1a3 0302 	sub.w	r3, r3, #2
 8006d38:	bfcc      	ite	gt
 8006d3a:	2500      	movgt	r5, #0
 8006d3c:	2501      	movle	r5, #1
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	f200 8087 	bhi.w	8006e52 <_dtoa_r+0x30a>
 8006d44:	e8df f003 	tbb	[pc, r3]
 8006d48:	59383a2d 	.word	0x59383a2d
 8006d4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d50:	441d      	add	r5, r3
 8006d52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	bfc1      	itttt	gt
 8006d5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d62:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d6a:	bfda      	itte	le
 8006d6c:	f1c3 0320 	rsble	r3, r3, #32
 8006d70:	fa06 f003 	lslle.w	r0, r6, r3
 8006d74:	4318      	orrgt	r0, r3
 8006d76:	f7f9 fbe5 	bl	8000544 <__aeabi_ui2d>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d82:	3d01      	subs	r5, #1
 8006d84:	930e      	str	r3, [sp, #56]	; 0x38
 8006d86:	e76a      	b.n	8006c5e <_dtoa_r+0x116>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e7b2      	b.n	8006cf2 <_dtoa_r+0x1aa>
 8006d8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d8e:	e7b1      	b.n	8006cf4 <_dtoa_r+0x1ac>
 8006d90:	9b04      	ldr	r3, [sp, #16]
 8006d92:	9a00      	ldr	r2, [sp, #0]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	4253      	negs	r3, r2
 8006d9a:	9307      	str	r3, [sp, #28]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006da0:	e7bf      	b.n	8006d22 <_dtoa_r+0x1da>
 8006da2:	2300      	movs	r3, #0
 8006da4:	9308      	str	r3, [sp, #32]
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dc55      	bgt.n	8006e58 <_dtoa_r+0x310>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006db2:	461a      	mov	r2, r3
 8006db4:	9209      	str	r2, [sp, #36]	; 0x24
 8006db6:	e00c      	b.n	8006dd2 <_dtoa_r+0x28a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e7f3      	b.n	8006da4 <_dtoa_r+0x25c>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dc0:	9308      	str	r3, [sp, #32]
 8006dc2:	9b00      	ldr	r3, [sp, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	bfb8      	it	lt
 8006dd0:	2301      	movlt	r3, #1
 8006dd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	6042      	str	r2, [r0, #4]
 8006dd8:	2204      	movs	r2, #4
 8006dda:	f102 0614 	add.w	r6, r2, #20
 8006dde:	429e      	cmp	r6, r3
 8006de0:	6841      	ldr	r1, [r0, #4]
 8006de2:	d93d      	bls.n	8006e60 <_dtoa_r+0x318>
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 ff05 	bl	8007bf4 <_Balloc>
 8006dea:	9001      	str	r0, [sp, #4]
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d13b      	bne.n	8006e68 <_dtoa_r+0x320>
 8006df0:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <_dtoa_r+0x2f0>)
 8006df2:	4602      	mov	r2, r0
 8006df4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006df8:	e6c0      	b.n	8006b7c <_dtoa_r+0x34>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e7df      	b.n	8006dbe <_dtoa_r+0x276>
 8006dfe:	bf00      	nop
 8006e00:	636f4361 	.word	0x636f4361
 8006e04:	3fd287a7 	.word	0x3fd287a7
 8006e08:	8b60c8b3 	.word	0x8b60c8b3
 8006e0c:	3fc68a28 	.word	0x3fc68a28
 8006e10:	509f79fb 	.word	0x509f79fb
 8006e14:	3fd34413 	.word	0x3fd34413
 8006e18:	08009bb3 	.word	0x08009bb3
 8006e1c:	08009bca 	.word	0x08009bca
 8006e20:	7ff00000 	.word	0x7ff00000
 8006e24:	08009baf 	.word	0x08009baf
 8006e28:	08009ba6 	.word	0x08009ba6
 8006e2c:	08009e0a 	.word	0x08009e0a
 8006e30:	3ff80000 	.word	0x3ff80000
 8006e34:	08009d20 	.word	0x08009d20
 8006e38:	08009c25 	.word	0x08009c25
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9306      	str	r3, [sp, #24]
 8006e42:	9508      	str	r5, [sp, #32]
 8006e44:	f04f 33ff 	mov.w	r3, #4294967295
 8006e48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2312      	movs	r3, #18
 8006e50:	e7b0      	b.n	8006db4 <_dtoa_r+0x26c>
 8006e52:	2301      	movs	r3, #1
 8006e54:	9308      	str	r3, [sp, #32]
 8006e56:	e7f5      	b.n	8006e44 <_dtoa_r+0x2fc>
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e5e:	e7b8      	b.n	8006dd2 <_dtoa_r+0x28a>
 8006e60:	3101      	adds	r1, #1
 8006e62:	6041      	str	r1, [r0, #4]
 8006e64:	0052      	lsls	r2, r2, #1
 8006e66:	e7b8      	b.n	8006dda <_dtoa_r+0x292>
 8006e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6a:	9a01      	ldr	r2, [sp, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	2b0e      	cmp	r3, #14
 8006e72:	f200 809d 	bhi.w	8006fb0 <_dtoa_r+0x468>
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	f000 809a 	beq.w	8006fb0 <_dtoa_r+0x468>
 8006e7c:	9b00      	ldr	r3, [sp, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dd32      	ble.n	8006ee8 <_dtoa_r+0x3a0>
 8006e82:	4ab7      	ldr	r2, [pc, #732]	; (8007160 <_dtoa_r+0x618>)
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	05d8      	lsls	r0, r3, #23
 8006e94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e98:	d516      	bpl.n	8006ec8 <_dtoa_r+0x380>
 8006e9a:	4bb2      	ldr	r3, [pc, #712]	; (8007164 <_dtoa_r+0x61c>)
 8006e9c:	ec51 0b19 	vmov	r0, r1, d9
 8006ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ea4:	f7f9 fcf2 	bl	800088c <__aeabi_ddiv>
 8006ea8:	f007 070f 	and.w	r7, r7, #15
 8006eac:	4682      	mov	sl, r0
 8006eae:	468b      	mov	fp, r1
 8006eb0:	2503      	movs	r5, #3
 8006eb2:	4eac      	ldr	r6, [pc, #688]	; (8007164 <_dtoa_r+0x61c>)
 8006eb4:	b957      	cbnz	r7, 8006ecc <_dtoa_r+0x384>
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	464b      	mov	r3, r9
 8006eba:	4650      	mov	r0, sl
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	f7f9 fce5 	bl	800088c <__aeabi_ddiv>
 8006ec2:	4682      	mov	sl, r0
 8006ec4:	468b      	mov	fp, r1
 8006ec6:	e028      	b.n	8006f1a <_dtoa_r+0x3d2>
 8006ec8:	2502      	movs	r5, #2
 8006eca:	e7f2      	b.n	8006eb2 <_dtoa_r+0x36a>
 8006ecc:	07f9      	lsls	r1, r7, #31
 8006ece:	d508      	bpl.n	8006ee2 <_dtoa_r+0x39a>
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ed8:	f7f9 fbae 	bl	8000638 <__aeabi_dmul>
 8006edc:	3501      	adds	r5, #1
 8006ede:	4680      	mov	r8, r0
 8006ee0:	4689      	mov	r9, r1
 8006ee2:	107f      	asrs	r7, r7, #1
 8006ee4:	3608      	adds	r6, #8
 8006ee6:	e7e5      	b.n	8006eb4 <_dtoa_r+0x36c>
 8006ee8:	f000 809b 	beq.w	8007022 <_dtoa_r+0x4da>
 8006eec:	9b00      	ldr	r3, [sp, #0]
 8006eee:	4f9d      	ldr	r7, [pc, #628]	; (8007164 <_dtoa_r+0x61c>)
 8006ef0:	425e      	negs	r6, r3
 8006ef2:	4b9b      	ldr	r3, [pc, #620]	; (8007160 <_dtoa_r+0x618>)
 8006ef4:	f006 020f 	and.w	r2, r6, #15
 8006ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	ec51 0b19 	vmov	r0, r1, d9
 8006f04:	f7f9 fb98 	bl	8000638 <__aeabi_dmul>
 8006f08:	1136      	asrs	r6, r6, #4
 8006f0a:	4682      	mov	sl, r0
 8006f0c:	468b      	mov	fp, r1
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2502      	movs	r5, #2
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	d17a      	bne.n	800700c <_dtoa_r+0x4c4>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1d3      	bne.n	8006ec2 <_dtoa_r+0x37a>
 8006f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8082 	beq.w	8007026 <_dtoa_r+0x4de>
 8006f22:	4b91      	ldr	r3, [pc, #580]	; (8007168 <_dtoa_r+0x620>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	4650      	mov	r0, sl
 8006f28:	4659      	mov	r1, fp
 8006f2a:	f7f9 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d079      	beq.n	8007026 <_dtoa_r+0x4de>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d076      	beq.n	8007026 <_dtoa_r+0x4de>
 8006f38:	9b02      	ldr	r3, [sp, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dd36      	ble.n	8006fac <_dtoa_r+0x464>
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	4650      	mov	r0, sl
 8006f42:	4659      	mov	r1, fp
 8006f44:	1e5f      	subs	r7, r3, #1
 8006f46:	2200      	movs	r2, #0
 8006f48:	4b88      	ldr	r3, [pc, #544]	; (800716c <_dtoa_r+0x624>)
 8006f4a:	f7f9 fb75 	bl	8000638 <__aeabi_dmul>
 8006f4e:	9e02      	ldr	r6, [sp, #8]
 8006f50:	4682      	mov	sl, r0
 8006f52:	468b      	mov	fp, r1
 8006f54:	3501      	adds	r5, #1
 8006f56:	4628      	mov	r0, r5
 8006f58:	f7f9 fb04 	bl	8000564 <__aeabi_i2d>
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	465b      	mov	r3, fp
 8006f60:	f7f9 fb6a 	bl	8000638 <__aeabi_dmul>
 8006f64:	4b82      	ldr	r3, [pc, #520]	; (8007170 <_dtoa_r+0x628>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	f7f9 f9b0 	bl	80002cc <__adddf3>
 8006f6c:	46d0      	mov	r8, sl
 8006f6e:	46d9      	mov	r9, fp
 8006f70:	4682      	mov	sl, r0
 8006f72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	d158      	bne.n	800702c <_dtoa_r+0x4e4>
 8006f7a:	4b7e      	ldr	r3, [pc, #504]	; (8007174 <_dtoa_r+0x62c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 f9a1 	bl	80002c8 <__aeabi_dsub>
 8006f86:	4652      	mov	r2, sl
 8006f88:	465b      	mov	r3, fp
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4689      	mov	r9, r1
 8006f8e:	f7f9 fde3 	bl	8000b58 <__aeabi_dcmpgt>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	f040 8295 	bne.w	80074c2 <_dtoa_r+0x97a>
 8006f98:	4652      	mov	r2, sl
 8006f9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fdbb 	bl	8000b1c <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f040 8289 	bne.w	80074be <_dtoa_r+0x976>
 8006fac:	ec5b ab19 	vmov	sl, fp, d9
 8006fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f2c0 8148 	blt.w	8007248 <_dtoa_r+0x700>
 8006fb8:	9a00      	ldr	r2, [sp, #0]
 8006fba:	2a0e      	cmp	r2, #14
 8006fbc:	f300 8144 	bgt.w	8007248 <_dtoa_r+0x700>
 8006fc0:	4b67      	ldr	r3, [pc, #412]	; (8007160 <_dtoa_r+0x618>)
 8006fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f280 80d5 	bge.w	800717c <_dtoa_r+0x634>
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f300 80d1 	bgt.w	800717c <_dtoa_r+0x634>
 8006fda:	f040 826f 	bne.w	80074bc <_dtoa_r+0x974>
 8006fde:	4b65      	ldr	r3, [pc, #404]	; (8007174 <_dtoa_r+0x62c>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 fb27 	bl	8000638 <__aeabi_dmul>
 8006fea:	4652      	mov	r2, sl
 8006fec:	465b      	mov	r3, fp
 8006fee:	f7f9 fda9 	bl	8000b44 <__aeabi_dcmpge>
 8006ff2:	9e03      	ldr	r6, [sp, #12]
 8006ff4:	4637      	mov	r7, r6
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8245 	bne.w	8007486 <_dtoa_r+0x93e>
 8006ffc:	9d01      	ldr	r5, [sp, #4]
 8006ffe:	2331      	movs	r3, #49	; 0x31
 8007000:	f805 3b01 	strb.w	r3, [r5], #1
 8007004:	9b00      	ldr	r3, [sp, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	e240      	b.n	800748e <_dtoa_r+0x946>
 800700c:	07f2      	lsls	r2, r6, #31
 800700e:	d505      	bpl.n	800701c <_dtoa_r+0x4d4>
 8007010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007014:	f7f9 fb10 	bl	8000638 <__aeabi_dmul>
 8007018:	3501      	adds	r5, #1
 800701a:	2301      	movs	r3, #1
 800701c:	1076      	asrs	r6, r6, #1
 800701e:	3708      	adds	r7, #8
 8007020:	e777      	b.n	8006f12 <_dtoa_r+0x3ca>
 8007022:	2502      	movs	r5, #2
 8007024:	e779      	b.n	8006f1a <_dtoa_r+0x3d2>
 8007026:	9f00      	ldr	r7, [sp, #0]
 8007028:	9e03      	ldr	r6, [sp, #12]
 800702a:	e794      	b.n	8006f56 <_dtoa_r+0x40e>
 800702c:	9901      	ldr	r1, [sp, #4]
 800702e:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <_dtoa_r+0x618>)
 8007030:	4431      	add	r1, r6
 8007032:	910d      	str	r1, [sp, #52]	; 0x34
 8007034:	9908      	ldr	r1, [sp, #32]
 8007036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800703a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800703e:	2900      	cmp	r1, #0
 8007040:	d043      	beq.n	80070ca <_dtoa_r+0x582>
 8007042:	494d      	ldr	r1, [pc, #308]	; (8007178 <_dtoa_r+0x630>)
 8007044:	2000      	movs	r0, #0
 8007046:	f7f9 fc21 	bl	800088c <__aeabi_ddiv>
 800704a:	4652      	mov	r2, sl
 800704c:	465b      	mov	r3, fp
 800704e:	f7f9 f93b 	bl	80002c8 <__aeabi_dsub>
 8007052:	9d01      	ldr	r5, [sp, #4]
 8007054:	4682      	mov	sl, r0
 8007056:	468b      	mov	fp, r1
 8007058:	4649      	mov	r1, r9
 800705a:	4640      	mov	r0, r8
 800705c:	f7f9 fd9c 	bl	8000b98 <__aeabi_d2iz>
 8007060:	4606      	mov	r6, r0
 8007062:	f7f9 fa7f 	bl	8000564 <__aeabi_i2d>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4640      	mov	r0, r8
 800706c:	4649      	mov	r1, r9
 800706e:	f7f9 f92b 	bl	80002c8 <__aeabi_dsub>
 8007072:	3630      	adds	r6, #48	; 0x30
 8007074:	f805 6b01 	strb.w	r6, [r5], #1
 8007078:	4652      	mov	r2, sl
 800707a:	465b      	mov	r3, fp
 800707c:	4680      	mov	r8, r0
 800707e:	4689      	mov	r9, r1
 8007080:	f7f9 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 8007084:	2800      	cmp	r0, #0
 8007086:	d163      	bne.n	8007150 <_dtoa_r+0x608>
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	4936      	ldr	r1, [pc, #216]	; (8007168 <_dtoa_r+0x620>)
 800708e:	2000      	movs	r0, #0
 8007090:	f7f9 f91a 	bl	80002c8 <__aeabi_dsub>
 8007094:	4652      	mov	r2, sl
 8007096:	465b      	mov	r3, fp
 8007098:	f7f9 fd40 	bl	8000b1c <__aeabi_dcmplt>
 800709c:	2800      	cmp	r0, #0
 800709e:	f040 80b5 	bne.w	800720c <_dtoa_r+0x6c4>
 80070a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a4:	429d      	cmp	r5, r3
 80070a6:	d081      	beq.n	8006fac <_dtoa_r+0x464>
 80070a8:	4b30      	ldr	r3, [pc, #192]	; (800716c <_dtoa_r+0x624>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	4650      	mov	r0, sl
 80070ae:	4659      	mov	r1, fp
 80070b0:	f7f9 fac2 	bl	8000638 <__aeabi_dmul>
 80070b4:	4b2d      	ldr	r3, [pc, #180]	; (800716c <_dtoa_r+0x624>)
 80070b6:	4682      	mov	sl, r0
 80070b8:	468b      	mov	fp, r1
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	2200      	movs	r2, #0
 80070c0:	f7f9 faba 	bl	8000638 <__aeabi_dmul>
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	e7c6      	b.n	8007058 <_dtoa_r+0x510>
 80070ca:	4650      	mov	r0, sl
 80070cc:	4659      	mov	r1, fp
 80070ce:	f7f9 fab3 	bl	8000638 <__aeabi_dmul>
 80070d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d4:	9d01      	ldr	r5, [sp, #4]
 80070d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	4649      	mov	r1, r9
 80070de:	4640      	mov	r0, r8
 80070e0:	f7f9 fd5a 	bl	8000b98 <__aeabi_d2iz>
 80070e4:	4606      	mov	r6, r0
 80070e6:	f7f9 fa3d 	bl	8000564 <__aeabi_i2d>
 80070ea:	3630      	adds	r6, #48	; 0x30
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4640      	mov	r0, r8
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7f9 f8e8 	bl	80002c8 <__aeabi_dsub>
 80070f8:	f805 6b01 	strb.w	r6, [r5], #1
 80070fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070fe:	429d      	cmp	r5, r3
 8007100:	4680      	mov	r8, r0
 8007102:	4689      	mov	r9, r1
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	d124      	bne.n	8007154 <_dtoa_r+0x60c>
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <_dtoa_r+0x630>)
 800710c:	4650      	mov	r0, sl
 800710e:	4659      	mov	r1, fp
 8007110:	f7f9 f8dc 	bl	80002cc <__adddf3>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fd1c 	bl	8000b58 <__aeabi_dcmpgt>
 8007120:	2800      	cmp	r0, #0
 8007122:	d173      	bne.n	800720c <_dtoa_r+0x6c4>
 8007124:	4652      	mov	r2, sl
 8007126:	465b      	mov	r3, fp
 8007128:	4913      	ldr	r1, [pc, #76]	; (8007178 <_dtoa_r+0x630>)
 800712a:	2000      	movs	r0, #0
 800712c:	f7f9 f8cc 	bl	80002c8 <__aeabi_dsub>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 fcf0 	bl	8000b1c <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f43f af35 	beq.w	8006fac <_dtoa_r+0x464>
 8007142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007144:	1e6b      	subs	r3, r5, #1
 8007146:	930f      	str	r3, [sp, #60]	; 0x3c
 8007148:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d0f8      	beq.n	8007142 <_dtoa_r+0x5fa>
 8007150:	9700      	str	r7, [sp, #0]
 8007152:	e049      	b.n	80071e8 <_dtoa_r+0x6a0>
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <_dtoa_r+0x624>)
 8007156:	f7f9 fa6f 	bl	8000638 <__aeabi_dmul>
 800715a:	4680      	mov	r8, r0
 800715c:	4689      	mov	r9, r1
 800715e:	e7bd      	b.n	80070dc <_dtoa_r+0x594>
 8007160:	08009d20 	.word	0x08009d20
 8007164:	08009cf8 	.word	0x08009cf8
 8007168:	3ff00000 	.word	0x3ff00000
 800716c:	40240000 	.word	0x40240000
 8007170:	401c0000 	.word	0x401c0000
 8007174:	40140000 	.word	0x40140000
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	9d01      	ldr	r5, [sp, #4]
 800717e:	4656      	mov	r6, sl
 8007180:	465f      	mov	r7, fp
 8007182:	4642      	mov	r2, r8
 8007184:	464b      	mov	r3, r9
 8007186:	4630      	mov	r0, r6
 8007188:	4639      	mov	r1, r7
 800718a:	f7f9 fb7f 	bl	800088c <__aeabi_ddiv>
 800718e:	f7f9 fd03 	bl	8000b98 <__aeabi_d2iz>
 8007192:	4682      	mov	sl, r0
 8007194:	f7f9 f9e6 	bl	8000564 <__aeabi_i2d>
 8007198:	4642      	mov	r2, r8
 800719a:	464b      	mov	r3, r9
 800719c:	f7f9 fa4c 	bl	8000638 <__aeabi_dmul>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4630      	mov	r0, r6
 80071a6:	4639      	mov	r1, r7
 80071a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071ac:	f7f9 f88c 	bl	80002c8 <__aeabi_dsub>
 80071b0:	f805 6b01 	strb.w	r6, [r5], #1
 80071b4:	9e01      	ldr	r6, [sp, #4]
 80071b6:	9f03      	ldr	r7, [sp, #12]
 80071b8:	1bae      	subs	r6, r5, r6
 80071ba:	42b7      	cmp	r7, r6
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	d135      	bne.n	800722e <_dtoa_r+0x6e6>
 80071c2:	f7f9 f883 	bl	80002cc <__adddf3>
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	4606      	mov	r6, r0
 80071cc:	460f      	mov	r7, r1
 80071ce:	f7f9 fcc3 	bl	8000b58 <__aeabi_dcmpgt>
 80071d2:	b9d0      	cbnz	r0, 800720a <_dtoa_r+0x6c2>
 80071d4:	4642      	mov	r2, r8
 80071d6:	464b      	mov	r3, r9
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 fc94 	bl	8000b08 <__aeabi_dcmpeq>
 80071e0:	b110      	cbz	r0, 80071e8 <_dtoa_r+0x6a0>
 80071e2:	f01a 0f01 	tst.w	sl, #1
 80071e6:	d110      	bne.n	800720a <_dtoa_r+0x6c2>
 80071e8:	4620      	mov	r0, r4
 80071ea:	ee18 1a10 	vmov	r1, s16
 80071ee:	f000 fd41 	bl	8007c74 <_Bfree>
 80071f2:	2300      	movs	r3, #0
 80071f4:	9800      	ldr	r0, [sp, #0]
 80071f6:	702b      	strb	r3, [r5, #0]
 80071f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071fa:	3001      	adds	r0, #1
 80071fc:	6018      	str	r0, [r3, #0]
 80071fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007200:	2b00      	cmp	r3, #0
 8007202:	f43f acf1 	beq.w	8006be8 <_dtoa_r+0xa0>
 8007206:	601d      	str	r5, [r3, #0]
 8007208:	e4ee      	b.n	8006be8 <_dtoa_r+0xa0>
 800720a:	9f00      	ldr	r7, [sp, #0]
 800720c:	462b      	mov	r3, r5
 800720e:	461d      	mov	r5, r3
 8007210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007214:	2a39      	cmp	r2, #57	; 0x39
 8007216:	d106      	bne.n	8007226 <_dtoa_r+0x6de>
 8007218:	9a01      	ldr	r2, [sp, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d1f7      	bne.n	800720e <_dtoa_r+0x6c6>
 800721e:	9901      	ldr	r1, [sp, #4]
 8007220:	2230      	movs	r2, #48	; 0x30
 8007222:	3701      	adds	r7, #1
 8007224:	700a      	strb	r2, [r1, #0]
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	3201      	adds	r2, #1
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	e790      	b.n	8007150 <_dtoa_r+0x608>
 800722e:	4ba6      	ldr	r3, [pc, #664]	; (80074c8 <_dtoa_r+0x980>)
 8007230:	2200      	movs	r2, #0
 8007232:	f7f9 fa01 	bl	8000638 <__aeabi_dmul>
 8007236:	2200      	movs	r2, #0
 8007238:	2300      	movs	r3, #0
 800723a:	4606      	mov	r6, r0
 800723c:	460f      	mov	r7, r1
 800723e:	f7f9 fc63 	bl	8000b08 <__aeabi_dcmpeq>
 8007242:	2800      	cmp	r0, #0
 8007244:	d09d      	beq.n	8007182 <_dtoa_r+0x63a>
 8007246:	e7cf      	b.n	80071e8 <_dtoa_r+0x6a0>
 8007248:	9a08      	ldr	r2, [sp, #32]
 800724a:	2a00      	cmp	r2, #0
 800724c:	f000 80d7 	beq.w	80073fe <_dtoa_r+0x8b6>
 8007250:	9a06      	ldr	r2, [sp, #24]
 8007252:	2a01      	cmp	r2, #1
 8007254:	f300 80ba 	bgt.w	80073cc <_dtoa_r+0x884>
 8007258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800725a:	2a00      	cmp	r2, #0
 800725c:	f000 80b2 	beq.w	80073c4 <_dtoa_r+0x87c>
 8007260:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007264:	9e07      	ldr	r6, [sp, #28]
 8007266:	9d04      	ldr	r5, [sp, #16]
 8007268:	9a04      	ldr	r2, [sp, #16]
 800726a:	441a      	add	r2, r3
 800726c:	9204      	str	r2, [sp, #16]
 800726e:	9a05      	ldr	r2, [sp, #20]
 8007270:	2101      	movs	r1, #1
 8007272:	441a      	add	r2, r3
 8007274:	4620      	mov	r0, r4
 8007276:	9205      	str	r2, [sp, #20]
 8007278:	f000 fdb4 	bl	8007de4 <__i2b>
 800727c:	4607      	mov	r7, r0
 800727e:	2d00      	cmp	r5, #0
 8007280:	dd0c      	ble.n	800729c <_dtoa_r+0x754>
 8007282:	9b05      	ldr	r3, [sp, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd09      	ble.n	800729c <_dtoa_r+0x754>
 8007288:	42ab      	cmp	r3, r5
 800728a:	9a04      	ldr	r2, [sp, #16]
 800728c:	bfa8      	it	ge
 800728e:	462b      	movge	r3, r5
 8007290:	1ad2      	subs	r2, r2, r3
 8007292:	9204      	str	r2, [sp, #16]
 8007294:	9a05      	ldr	r2, [sp, #20]
 8007296:	1aed      	subs	r5, r5, r3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	9b07      	ldr	r3, [sp, #28]
 800729e:	b31b      	cbz	r3, 80072e8 <_dtoa_r+0x7a0>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80af 	beq.w	8007406 <_dtoa_r+0x8be>
 80072a8:	2e00      	cmp	r6, #0
 80072aa:	dd13      	ble.n	80072d4 <_dtoa_r+0x78c>
 80072ac:	4639      	mov	r1, r7
 80072ae:	4632      	mov	r2, r6
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fe57 	bl	8007f64 <__pow5mult>
 80072b6:	ee18 2a10 	vmov	r2, s16
 80072ba:	4601      	mov	r1, r0
 80072bc:	4607      	mov	r7, r0
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 fda6 	bl	8007e10 <__multiply>
 80072c4:	ee18 1a10 	vmov	r1, s16
 80072c8:	4680      	mov	r8, r0
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 fcd2 	bl	8007c74 <_Bfree>
 80072d0:	ee08 8a10 	vmov	s16, r8
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	1b9a      	subs	r2, r3, r6
 80072d8:	d006      	beq.n	80072e8 <_dtoa_r+0x7a0>
 80072da:	ee18 1a10 	vmov	r1, s16
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fe40 	bl	8007f64 <__pow5mult>
 80072e4:	ee08 0a10 	vmov	s16, r0
 80072e8:	2101      	movs	r1, #1
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fd7a 	bl	8007de4 <__i2b>
 80072f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	4606      	mov	r6, r0
 80072f6:	f340 8088 	ble.w	800740a <_dtoa_r+0x8c2>
 80072fa:	461a      	mov	r2, r3
 80072fc:	4601      	mov	r1, r0
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 fe30 	bl	8007f64 <__pow5mult>
 8007304:	9b06      	ldr	r3, [sp, #24]
 8007306:	2b01      	cmp	r3, #1
 8007308:	4606      	mov	r6, r0
 800730a:	f340 8081 	ble.w	8007410 <_dtoa_r+0x8c8>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	6933      	ldr	r3, [r6, #16]
 8007314:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007318:	6918      	ldr	r0, [r3, #16]
 800731a:	f000 fd13 	bl	8007d44 <__hi0bits>
 800731e:	f1c0 0020 	rsb	r0, r0, #32
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	4418      	add	r0, r3
 8007326:	f010 001f 	ands.w	r0, r0, #31
 800732a:	f000 8092 	beq.w	8007452 <_dtoa_r+0x90a>
 800732e:	f1c0 0320 	rsb	r3, r0, #32
 8007332:	2b04      	cmp	r3, #4
 8007334:	f340 808a 	ble.w	800744c <_dtoa_r+0x904>
 8007338:	f1c0 001c 	rsb	r0, r0, #28
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	4403      	add	r3, r0
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	9b05      	ldr	r3, [sp, #20]
 8007344:	4403      	add	r3, r0
 8007346:	4405      	add	r5, r0
 8007348:	9305      	str	r3, [sp, #20]
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd07      	ble.n	8007360 <_dtoa_r+0x818>
 8007350:	ee18 1a10 	vmov	r1, s16
 8007354:	461a      	mov	r2, r3
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fe5e 	bl	8008018 <__lshift>
 800735c:	ee08 0a10 	vmov	s16, r0
 8007360:	9b05      	ldr	r3, [sp, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	dd05      	ble.n	8007372 <_dtoa_r+0x82a>
 8007366:	4631      	mov	r1, r6
 8007368:	461a      	mov	r2, r3
 800736a:	4620      	mov	r0, r4
 800736c:	f000 fe54 	bl	8008018 <__lshift>
 8007370:	4606      	mov	r6, r0
 8007372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d06e      	beq.n	8007456 <_dtoa_r+0x90e>
 8007378:	ee18 0a10 	vmov	r0, s16
 800737c:	4631      	mov	r1, r6
 800737e:	f000 febb 	bl	80080f8 <__mcmp>
 8007382:	2800      	cmp	r0, #0
 8007384:	da67      	bge.n	8007456 <_dtoa_r+0x90e>
 8007386:	9b00      	ldr	r3, [sp, #0]
 8007388:	3b01      	subs	r3, #1
 800738a:	ee18 1a10 	vmov	r1, s16
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	220a      	movs	r2, #10
 8007392:	2300      	movs	r3, #0
 8007394:	4620      	mov	r0, r4
 8007396:	f000 fc8f 	bl	8007cb8 <__multadd>
 800739a:	9b08      	ldr	r3, [sp, #32]
 800739c:	ee08 0a10 	vmov	s16, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 81b1 	beq.w	8007708 <_dtoa_r+0xbc0>
 80073a6:	2300      	movs	r3, #0
 80073a8:	4639      	mov	r1, r7
 80073aa:	220a      	movs	r2, #10
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fc83 	bl	8007cb8 <__multadd>
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	4607      	mov	r7, r0
 80073b8:	f300 808e 	bgt.w	80074d8 <_dtoa_r+0x990>
 80073bc:	9b06      	ldr	r3, [sp, #24]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	dc51      	bgt.n	8007466 <_dtoa_r+0x91e>
 80073c2:	e089      	b.n	80074d8 <_dtoa_r+0x990>
 80073c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073ca:	e74b      	b.n	8007264 <_dtoa_r+0x71c>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	1e5e      	subs	r6, r3, #1
 80073d0:	9b07      	ldr	r3, [sp, #28]
 80073d2:	42b3      	cmp	r3, r6
 80073d4:	bfbf      	itttt	lt
 80073d6:	9b07      	ldrlt	r3, [sp, #28]
 80073d8:	9607      	strlt	r6, [sp, #28]
 80073da:	1af2      	sublt	r2, r6, r3
 80073dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073de:	bfb6      	itet	lt
 80073e0:	189b      	addlt	r3, r3, r2
 80073e2:	1b9e      	subge	r6, r3, r6
 80073e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	bfb8      	it	lt
 80073ea:	2600      	movlt	r6, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfb7      	itett	lt
 80073f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80073f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80073f8:	1a9d      	sublt	r5, r3, r2
 80073fa:	2300      	movlt	r3, #0
 80073fc:	e734      	b.n	8007268 <_dtoa_r+0x720>
 80073fe:	9e07      	ldr	r6, [sp, #28]
 8007400:	9d04      	ldr	r5, [sp, #16]
 8007402:	9f08      	ldr	r7, [sp, #32]
 8007404:	e73b      	b.n	800727e <_dtoa_r+0x736>
 8007406:	9a07      	ldr	r2, [sp, #28]
 8007408:	e767      	b.n	80072da <_dtoa_r+0x792>
 800740a:	9b06      	ldr	r3, [sp, #24]
 800740c:	2b01      	cmp	r3, #1
 800740e:	dc18      	bgt.n	8007442 <_dtoa_r+0x8fa>
 8007410:	f1ba 0f00 	cmp.w	sl, #0
 8007414:	d115      	bne.n	8007442 <_dtoa_r+0x8fa>
 8007416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800741a:	b993      	cbnz	r3, 8007442 <_dtoa_r+0x8fa>
 800741c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	051b      	lsls	r3, r3, #20
 8007424:	b183      	cbz	r3, 8007448 <_dtoa_r+0x900>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	9b05      	ldr	r3, [sp, #20]
 800742e:	3301      	adds	r3, #1
 8007430:	9305      	str	r3, [sp, #20]
 8007432:	f04f 0801 	mov.w	r8, #1
 8007436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	f47f af6a 	bne.w	8007312 <_dtoa_r+0x7ca>
 800743e:	2001      	movs	r0, #1
 8007440:	e76f      	b.n	8007322 <_dtoa_r+0x7da>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	e7f6      	b.n	8007436 <_dtoa_r+0x8ee>
 8007448:	4698      	mov	r8, r3
 800744a:	e7f4      	b.n	8007436 <_dtoa_r+0x8ee>
 800744c:	f43f af7d 	beq.w	800734a <_dtoa_r+0x802>
 8007450:	4618      	mov	r0, r3
 8007452:	301c      	adds	r0, #28
 8007454:	e772      	b.n	800733c <_dtoa_r+0x7f4>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	dc37      	bgt.n	80074cc <_dtoa_r+0x984>
 800745c:	9b06      	ldr	r3, [sp, #24]
 800745e:	2b02      	cmp	r3, #2
 8007460:	dd34      	ble.n	80074cc <_dtoa_r+0x984>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	b96b      	cbnz	r3, 8007486 <_dtoa_r+0x93e>
 800746a:	4631      	mov	r1, r6
 800746c:	2205      	movs	r2, #5
 800746e:	4620      	mov	r0, r4
 8007470:	f000 fc22 	bl	8007cb8 <__multadd>
 8007474:	4601      	mov	r1, r0
 8007476:	4606      	mov	r6, r0
 8007478:	ee18 0a10 	vmov	r0, s16
 800747c:	f000 fe3c 	bl	80080f8 <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	f73f adbb 	bgt.w	8006ffc <_dtoa_r+0x4b4>
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	9d01      	ldr	r5, [sp, #4]
 800748a:	43db      	mvns	r3, r3
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	4631      	mov	r1, r6
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fbed 	bl	8007c74 <_Bfree>
 800749a:	2f00      	cmp	r7, #0
 800749c:	f43f aea4 	beq.w	80071e8 <_dtoa_r+0x6a0>
 80074a0:	f1b8 0f00 	cmp.w	r8, #0
 80074a4:	d005      	beq.n	80074b2 <_dtoa_r+0x96a>
 80074a6:	45b8      	cmp	r8, r7
 80074a8:	d003      	beq.n	80074b2 <_dtoa_r+0x96a>
 80074aa:	4641      	mov	r1, r8
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fbe1 	bl	8007c74 <_Bfree>
 80074b2:	4639      	mov	r1, r7
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 fbdd 	bl	8007c74 <_Bfree>
 80074ba:	e695      	b.n	80071e8 <_dtoa_r+0x6a0>
 80074bc:	2600      	movs	r6, #0
 80074be:	4637      	mov	r7, r6
 80074c0:	e7e1      	b.n	8007486 <_dtoa_r+0x93e>
 80074c2:	9700      	str	r7, [sp, #0]
 80074c4:	4637      	mov	r7, r6
 80074c6:	e599      	b.n	8006ffc <_dtoa_r+0x4b4>
 80074c8:	40240000 	.word	0x40240000
 80074cc:	9b08      	ldr	r3, [sp, #32]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80ca 	beq.w	8007668 <_dtoa_r+0xb20>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	2d00      	cmp	r5, #0
 80074da:	dd05      	ble.n	80074e8 <_dtoa_r+0x9a0>
 80074dc:	4639      	mov	r1, r7
 80074de:	462a      	mov	r2, r5
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fd99 	bl	8008018 <__lshift>
 80074e6:	4607      	mov	r7, r0
 80074e8:	f1b8 0f00 	cmp.w	r8, #0
 80074ec:	d05b      	beq.n	80075a6 <_dtoa_r+0xa5e>
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fb7f 	bl	8007bf4 <_Balloc>
 80074f6:	4605      	mov	r5, r0
 80074f8:	b928      	cbnz	r0, 8007506 <_dtoa_r+0x9be>
 80074fa:	4b87      	ldr	r3, [pc, #540]	; (8007718 <_dtoa_r+0xbd0>)
 80074fc:	4602      	mov	r2, r0
 80074fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007502:	f7ff bb3b 	b.w	8006b7c <_dtoa_r+0x34>
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	3202      	adds	r2, #2
 800750a:	0092      	lsls	r2, r2, #2
 800750c:	f107 010c 	add.w	r1, r7, #12
 8007510:	300c      	adds	r0, #12
 8007512:	f000 fb61 	bl	8007bd8 <memcpy>
 8007516:	2201      	movs	r2, #1
 8007518:	4629      	mov	r1, r5
 800751a:	4620      	mov	r0, r4
 800751c:	f000 fd7c 	bl	8008018 <__lshift>
 8007520:	9b01      	ldr	r3, [sp, #4]
 8007522:	f103 0901 	add.w	r9, r3, #1
 8007526:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800752a:	4413      	add	r3, r2
 800752c:	9305      	str	r3, [sp, #20]
 800752e:	f00a 0301 	and.w	r3, sl, #1
 8007532:	46b8      	mov	r8, r7
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	4607      	mov	r7, r0
 8007538:	4631      	mov	r1, r6
 800753a:	ee18 0a10 	vmov	r0, s16
 800753e:	f7ff fa75 	bl	8006a2c <quorem>
 8007542:	4641      	mov	r1, r8
 8007544:	9002      	str	r0, [sp, #8]
 8007546:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800754a:	ee18 0a10 	vmov	r0, s16
 800754e:	f000 fdd3 	bl	80080f8 <__mcmp>
 8007552:	463a      	mov	r2, r7
 8007554:	9003      	str	r0, [sp, #12]
 8007556:	4631      	mov	r1, r6
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fde9 	bl	8008130 <__mdiff>
 800755e:	68c2      	ldr	r2, [r0, #12]
 8007560:	f109 3bff 	add.w	fp, r9, #4294967295
 8007564:	4605      	mov	r5, r0
 8007566:	bb02      	cbnz	r2, 80075aa <_dtoa_r+0xa62>
 8007568:	4601      	mov	r1, r0
 800756a:	ee18 0a10 	vmov	r0, s16
 800756e:	f000 fdc3 	bl	80080f8 <__mcmp>
 8007572:	4602      	mov	r2, r0
 8007574:	4629      	mov	r1, r5
 8007576:	4620      	mov	r0, r4
 8007578:	9207      	str	r2, [sp, #28]
 800757a:	f000 fb7b 	bl	8007c74 <_Bfree>
 800757e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007582:	ea43 0102 	orr.w	r1, r3, r2
 8007586:	9b04      	ldr	r3, [sp, #16]
 8007588:	430b      	orrs	r3, r1
 800758a:	464d      	mov	r5, r9
 800758c:	d10f      	bne.n	80075ae <_dtoa_r+0xa66>
 800758e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007592:	d02a      	beq.n	80075ea <_dtoa_r+0xaa2>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd02      	ble.n	80075a0 <_dtoa_r+0xa58>
 800759a:	9b02      	ldr	r3, [sp, #8]
 800759c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075a0:	f88b a000 	strb.w	sl, [fp]
 80075a4:	e775      	b.n	8007492 <_dtoa_r+0x94a>
 80075a6:	4638      	mov	r0, r7
 80075a8:	e7ba      	b.n	8007520 <_dtoa_r+0x9d8>
 80075aa:	2201      	movs	r2, #1
 80075ac:	e7e2      	b.n	8007574 <_dtoa_r+0xa2c>
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	db04      	blt.n	80075be <_dtoa_r+0xa76>
 80075b4:	9906      	ldr	r1, [sp, #24]
 80075b6:	430b      	orrs	r3, r1
 80075b8:	9904      	ldr	r1, [sp, #16]
 80075ba:	430b      	orrs	r3, r1
 80075bc:	d122      	bne.n	8007604 <_dtoa_r+0xabc>
 80075be:	2a00      	cmp	r2, #0
 80075c0:	ddee      	ble.n	80075a0 <_dtoa_r+0xa58>
 80075c2:	ee18 1a10 	vmov	r1, s16
 80075c6:	2201      	movs	r2, #1
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fd25 	bl	8008018 <__lshift>
 80075ce:	4631      	mov	r1, r6
 80075d0:	ee08 0a10 	vmov	s16, r0
 80075d4:	f000 fd90 	bl	80080f8 <__mcmp>
 80075d8:	2800      	cmp	r0, #0
 80075da:	dc03      	bgt.n	80075e4 <_dtoa_r+0xa9c>
 80075dc:	d1e0      	bne.n	80075a0 <_dtoa_r+0xa58>
 80075de:	f01a 0f01 	tst.w	sl, #1
 80075e2:	d0dd      	beq.n	80075a0 <_dtoa_r+0xa58>
 80075e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075e8:	d1d7      	bne.n	800759a <_dtoa_r+0xa52>
 80075ea:	2339      	movs	r3, #57	; 0x39
 80075ec:	f88b 3000 	strb.w	r3, [fp]
 80075f0:	462b      	mov	r3, r5
 80075f2:	461d      	mov	r5, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075fa:	2a39      	cmp	r2, #57	; 0x39
 80075fc:	d071      	beq.n	80076e2 <_dtoa_r+0xb9a>
 80075fe:	3201      	adds	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e746      	b.n	8007492 <_dtoa_r+0x94a>
 8007604:	2a00      	cmp	r2, #0
 8007606:	dd07      	ble.n	8007618 <_dtoa_r+0xad0>
 8007608:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800760c:	d0ed      	beq.n	80075ea <_dtoa_r+0xaa2>
 800760e:	f10a 0301 	add.w	r3, sl, #1
 8007612:	f88b 3000 	strb.w	r3, [fp]
 8007616:	e73c      	b.n	8007492 <_dtoa_r+0x94a>
 8007618:	9b05      	ldr	r3, [sp, #20]
 800761a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800761e:	4599      	cmp	r9, r3
 8007620:	d047      	beq.n	80076b2 <_dtoa_r+0xb6a>
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2300      	movs	r3, #0
 8007628:	220a      	movs	r2, #10
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fb44 	bl	8007cb8 <__multadd>
 8007630:	45b8      	cmp	r8, r7
 8007632:	ee08 0a10 	vmov	s16, r0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	f04f 020a 	mov.w	r2, #10
 800763e:	4641      	mov	r1, r8
 8007640:	4620      	mov	r0, r4
 8007642:	d106      	bne.n	8007652 <_dtoa_r+0xb0a>
 8007644:	f000 fb38 	bl	8007cb8 <__multadd>
 8007648:	4680      	mov	r8, r0
 800764a:	4607      	mov	r7, r0
 800764c:	f109 0901 	add.w	r9, r9, #1
 8007650:	e772      	b.n	8007538 <_dtoa_r+0x9f0>
 8007652:	f000 fb31 	bl	8007cb8 <__multadd>
 8007656:	4639      	mov	r1, r7
 8007658:	4680      	mov	r8, r0
 800765a:	2300      	movs	r3, #0
 800765c:	220a      	movs	r2, #10
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fb2a 	bl	8007cb8 <__multadd>
 8007664:	4607      	mov	r7, r0
 8007666:	e7f1      	b.n	800764c <_dtoa_r+0xb04>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	9302      	str	r3, [sp, #8]
 800766c:	9d01      	ldr	r5, [sp, #4]
 800766e:	ee18 0a10 	vmov	r0, s16
 8007672:	4631      	mov	r1, r6
 8007674:	f7ff f9da 	bl	8006a2c <quorem>
 8007678:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	f805 ab01 	strb.w	sl, [r5], #1
 8007682:	1aea      	subs	r2, r5, r3
 8007684:	9b02      	ldr	r3, [sp, #8]
 8007686:	4293      	cmp	r3, r2
 8007688:	dd09      	ble.n	800769e <_dtoa_r+0xb56>
 800768a:	ee18 1a10 	vmov	r1, s16
 800768e:	2300      	movs	r3, #0
 8007690:	220a      	movs	r2, #10
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fb10 	bl	8007cb8 <__multadd>
 8007698:	ee08 0a10 	vmov	s16, r0
 800769c:	e7e7      	b.n	800766e <_dtoa_r+0xb26>
 800769e:	9b02      	ldr	r3, [sp, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bfc8      	it	gt
 80076a4:	461d      	movgt	r5, r3
 80076a6:	9b01      	ldr	r3, [sp, #4]
 80076a8:	bfd8      	it	le
 80076aa:	2501      	movle	r5, #1
 80076ac:	441d      	add	r5, r3
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	ee18 1a10 	vmov	r1, s16
 80076b6:	2201      	movs	r2, #1
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 fcad 	bl	8008018 <__lshift>
 80076be:	4631      	mov	r1, r6
 80076c0:	ee08 0a10 	vmov	s16, r0
 80076c4:	f000 fd18 	bl	80080f8 <__mcmp>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	dc91      	bgt.n	80075f0 <_dtoa_r+0xaa8>
 80076cc:	d102      	bne.n	80076d4 <_dtoa_r+0xb8c>
 80076ce:	f01a 0f01 	tst.w	sl, #1
 80076d2:	d18d      	bne.n	80075f0 <_dtoa_r+0xaa8>
 80076d4:	462b      	mov	r3, r5
 80076d6:	461d      	mov	r5, r3
 80076d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076dc:	2a30      	cmp	r2, #48	; 0x30
 80076de:	d0fa      	beq.n	80076d6 <_dtoa_r+0xb8e>
 80076e0:	e6d7      	b.n	8007492 <_dtoa_r+0x94a>
 80076e2:	9a01      	ldr	r2, [sp, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d184      	bne.n	80075f2 <_dtoa_r+0xaaa>
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	2331      	movs	r3, #49	; 0x31
 80076f0:	7013      	strb	r3, [r2, #0]
 80076f2:	e6ce      	b.n	8007492 <_dtoa_r+0x94a>
 80076f4:	4b09      	ldr	r3, [pc, #36]	; (800771c <_dtoa_r+0xbd4>)
 80076f6:	f7ff ba95 	b.w	8006c24 <_dtoa_r+0xdc>
 80076fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f47f aa6e 	bne.w	8006bde <_dtoa_r+0x96>
 8007702:	4b07      	ldr	r3, [pc, #28]	; (8007720 <_dtoa_r+0xbd8>)
 8007704:	f7ff ba8e 	b.w	8006c24 <_dtoa_r+0xdc>
 8007708:	9b02      	ldr	r3, [sp, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dcae      	bgt.n	800766c <_dtoa_r+0xb24>
 800770e:	9b06      	ldr	r3, [sp, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f73f aea8 	bgt.w	8007466 <_dtoa_r+0x91e>
 8007716:	e7a9      	b.n	800766c <_dtoa_r+0xb24>
 8007718:	08009c25 	.word	0x08009c25
 800771c:	08009e09 	.word	0x08009e09
 8007720:	08009ba6 	.word	0x08009ba6

08007724 <__sflush_r>:
 8007724:	898a      	ldrh	r2, [r1, #12]
 8007726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772a:	4605      	mov	r5, r0
 800772c:	0710      	lsls	r0, r2, #28
 800772e:	460c      	mov	r4, r1
 8007730:	d458      	bmi.n	80077e4 <__sflush_r+0xc0>
 8007732:	684b      	ldr	r3, [r1, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dc05      	bgt.n	8007744 <__sflush_r+0x20>
 8007738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	dc02      	bgt.n	8007744 <__sflush_r+0x20>
 800773e:	2000      	movs	r0, #0
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007746:	2e00      	cmp	r6, #0
 8007748:	d0f9      	beq.n	800773e <__sflush_r+0x1a>
 800774a:	2300      	movs	r3, #0
 800774c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007750:	682f      	ldr	r7, [r5, #0]
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	d032      	beq.n	80077bc <__sflush_r+0x98>
 8007756:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	075a      	lsls	r2, r3, #29
 800775c:	d505      	bpl.n	800776a <__sflush_r+0x46>
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	1ac0      	subs	r0, r0, r3
 8007762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007764:	b10b      	cbz	r3, 800776a <__sflush_r+0x46>
 8007766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007768:	1ac0      	subs	r0, r0, r3
 800776a:	2300      	movs	r3, #0
 800776c:	4602      	mov	r2, r0
 800776e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007770:	6a21      	ldr	r1, [r4, #32]
 8007772:	4628      	mov	r0, r5
 8007774:	47b0      	blx	r6
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	d106      	bne.n	800778a <__sflush_r+0x66>
 800777c:	6829      	ldr	r1, [r5, #0]
 800777e:	291d      	cmp	r1, #29
 8007780:	d82c      	bhi.n	80077dc <__sflush_r+0xb8>
 8007782:	4a2a      	ldr	r2, [pc, #168]	; (800782c <__sflush_r+0x108>)
 8007784:	40ca      	lsrs	r2, r1
 8007786:	07d6      	lsls	r6, r2, #31
 8007788:	d528      	bpl.n	80077dc <__sflush_r+0xb8>
 800778a:	2200      	movs	r2, #0
 800778c:	6062      	str	r2, [r4, #4]
 800778e:	04d9      	lsls	r1, r3, #19
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	d504      	bpl.n	80077a0 <__sflush_r+0x7c>
 8007796:	1c42      	adds	r2, r0, #1
 8007798:	d101      	bne.n	800779e <__sflush_r+0x7a>
 800779a:	682b      	ldr	r3, [r5, #0]
 800779c:	b903      	cbnz	r3, 80077a0 <__sflush_r+0x7c>
 800779e:	6560      	str	r0, [r4, #84]	; 0x54
 80077a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a2:	602f      	str	r7, [r5, #0]
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d0ca      	beq.n	800773e <__sflush_r+0x1a>
 80077a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077ac:	4299      	cmp	r1, r3
 80077ae:	d002      	beq.n	80077b6 <__sflush_r+0x92>
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 fdb9 	bl	8008328 <_free_r>
 80077b6:	2000      	movs	r0, #0
 80077b8:	6360      	str	r0, [r4, #52]	; 0x34
 80077ba:	e7c1      	b.n	8007740 <__sflush_r+0x1c>
 80077bc:	6a21      	ldr	r1, [r4, #32]
 80077be:	2301      	movs	r3, #1
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b0      	blx	r6
 80077c4:	1c41      	adds	r1, r0, #1
 80077c6:	d1c7      	bne.n	8007758 <__sflush_r+0x34>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0c4      	beq.n	8007758 <__sflush_r+0x34>
 80077ce:	2b1d      	cmp	r3, #29
 80077d0:	d001      	beq.n	80077d6 <__sflush_r+0xb2>
 80077d2:	2b16      	cmp	r3, #22
 80077d4:	d101      	bne.n	80077da <__sflush_r+0xb6>
 80077d6:	602f      	str	r7, [r5, #0]
 80077d8:	e7b1      	b.n	800773e <__sflush_r+0x1a>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	e7ad      	b.n	8007740 <__sflush_r+0x1c>
 80077e4:	690f      	ldr	r7, [r1, #16]
 80077e6:	2f00      	cmp	r7, #0
 80077e8:	d0a9      	beq.n	800773e <__sflush_r+0x1a>
 80077ea:	0793      	lsls	r3, r2, #30
 80077ec:	680e      	ldr	r6, [r1, #0]
 80077ee:	bf08      	it	eq
 80077f0:	694b      	ldreq	r3, [r1, #20]
 80077f2:	600f      	str	r7, [r1, #0]
 80077f4:	bf18      	it	ne
 80077f6:	2300      	movne	r3, #0
 80077f8:	eba6 0807 	sub.w	r8, r6, r7
 80077fc:	608b      	str	r3, [r1, #8]
 80077fe:	f1b8 0f00 	cmp.w	r8, #0
 8007802:	dd9c      	ble.n	800773e <__sflush_r+0x1a>
 8007804:	6a21      	ldr	r1, [r4, #32]
 8007806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007808:	4643      	mov	r3, r8
 800780a:	463a      	mov	r2, r7
 800780c:	4628      	mov	r0, r5
 800780e:	47b0      	blx	r6
 8007810:	2800      	cmp	r0, #0
 8007812:	dc06      	bgt.n	8007822 <__sflush_r+0xfe>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e78e      	b.n	8007740 <__sflush_r+0x1c>
 8007822:	4407      	add	r7, r0
 8007824:	eba8 0800 	sub.w	r8, r8, r0
 8007828:	e7e9      	b.n	80077fe <__sflush_r+0xda>
 800782a:	bf00      	nop
 800782c:	20400001 	.word	0x20400001

08007830 <_fflush_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	690b      	ldr	r3, [r1, #16]
 8007834:	4605      	mov	r5, r0
 8007836:	460c      	mov	r4, r1
 8007838:	b913      	cbnz	r3, 8007840 <_fflush_r+0x10>
 800783a:	2500      	movs	r5, #0
 800783c:	4628      	mov	r0, r5
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	b118      	cbz	r0, 800784a <_fflush_r+0x1a>
 8007842:	6983      	ldr	r3, [r0, #24]
 8007844:	b90b      	cbnz	r3, 800784a <_fflush_r+0x1a>
 8007846:	f000 f899 	bl	800797c <__sinit>
 800784a:	4b14      	ldr	r3, [pc, #80]	; (800789c <_fflush_r+0x6c>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d11b      	bne.n	8007888 <_fflush_r+0x58>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0ef      	beq.n	800783a <_fflush_r+0xa>
 800785a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800785c:	07d0      	lsls	r0, r2, #31
 800785e:	d404      	bmi.n	800786a <_fflush_r+0x3a>
 8007860:	0599      	lsls	r1, r3, #22
 8007862:	d402      	bmi.n	800786a <_fflush_r+0x3a>
 8007864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007866:	f000 f948 	bl	8007afa <__retarget_lock_acquire_recursive>
 800786a:	4628      	mov	r0, r5
 800786c:	4621      	mov	r1, r4
 800786e:	f7ff ff59 	bl	8007724 <__sflush_r>
 8007872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007874:	07da      	lsls	r2, r3, #31
 8007876:	4605      	mov	r5, r0
 8007878:	d4e0      	bmi.n	800783c <_fflush_r+0xc>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	059b      	lsls	r3, r3, #22
 800787e:	d4dd      	bmi.n	800783c <_fflush_r+0xc>
 8007880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007882:	f000 f93b 	bl	8007afc <__retarget_lock_release_recursive>
 8007886:	e7d9      	b.n	800783c <_fflush_r+0xc>
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <_fflush_r+0x70>)
 800788a:	429c      	cmp	r4, r3
 800788c:	d101      	bne.n	8007892 <_fflush_r+0x62>
 800788e:	68ac      	ldr	r4, [r5, #8]
 8007890:	e7df      	b.n	8007852 <_fflush_r+0x22>
 8007892:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <_fflush_r+0x74>)
 8007894:	429c      	cmp	r4, r3
 8007896:	bf08      	it	eq
 8007898:	68ec      	ldreq	r4, [r5, #12]
 800789a:	e7da      	b.n	8007852 <_fflush_r+0x22>
 800789c:	08009c58 	.word	0x08009c58
 80078a0:	08009c78 	.word	0x08009c78
 80078a4:	08009c38 	.word	0x08009c38

080078a8 <fflush>:
 80078a8:	4601      	mov	r1, r0
 80078aa:	b920      	cbnz	r0, 80078b6 <fflush+0xe>
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <fflush+0x18>)
 80078ae:	4905      	ldr	r1, [pc, #20]	; (80078c4 <fflush+0x1c>)
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f000 b8fe 	b.w	8007ab2 <_fwalk_reent>
 80078b6:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <fflush+0x20>)
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	f7ff bfb9 	b.w	8007830 <_fflush_r>
 80078be:	bf00      	nop
 80078c0:	08009b70 	.word	0x08009b70
 80078c4:	08007831 	.word	0x08007831
 80078c8:	2000000c 	.word	0x2000000c

080078cc <std>:
 80078cc:	2300      	movs	r3, #0
 80078ce:	b510      	push	{r4, lr}
 80078d0:	4604      	mov	r4, r0
 80078d2:	e9c0 3300 	strd	r3, r3, [r0]
 80078d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078da:	6083      	str	r3, [r0, #8]
 80078dc:	8181      	strh	r1, [r0, #12]
 80078de:	6643      	str	r3, [r0, #100]	; 0x64
 80078e0:	81c2      	strh	r2, [r0, #14]
 80078e2:	6183      	str	r3, [r0, #24]
 80078e4:	4619      	mov	r1, r3
 80078e6:	2208      	movs	r2, #8
 80078e8:	305c      	adds	r0, #92	; 0x5c
 80078ea:	f7fe fa01 	bl	8005cf0 <memset>
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <std+0x38>)
 80078f0:	6263      	str	r3, [r4, #36]	; 0x24
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <std+0x3c>)
 80078f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x40>)
 80078f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <std+0x44>)
 80078fc:	6224      	str	r4, [r4, #32]
 80078fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	08008f95 	.word	0x08008f95
 8007908:	08008fb7 	.word	0x08008fb7
 800790c:	08008fef 	.word	0x08008fef
 8007910:	08009013 	.word	0x08009013

08007914 <_cleanup_r>:
 8007914:	4901      	ldr	r1, [pc, #4]	; (800791c <_cleanup_r+0x8>)
 8007916:	f000 b8cc 	b.w	8007ab2 <_fwalk_reent>
 800791a:	bf00      	nop
 800791c:	08007831 	.word	0x08007831

08007920 <__sfmoreglue>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	2268      	movs	r2, #104	; 0x68
 8007924:	1e4d      	subs	r5, r1, #1
 8007926:	4355      	muls	r5, r2
 8007928:	460e      	mov	r6, r1
 800792a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800792e:	f000 fd67 	bl	8008400 <_malloc_r>
 8007932:	4604      	mov	r4, r0
 8007934:	b140      	cbz	r0, 8007948 <__sfmoreglue+0x28>
 8007936:	2100      	movs	r1, #0
 8007938:	e9c0 1600 	strd	r1, r6, [r0]
 800793c:	300c      	adds	r0, #12
 800793e:	60a0      	str	r0, [r4, #8]
 8007940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007944:	f7fe f9d4 	bl	8005cf0 <memset>
 8007948:	4620      	mov	r0, r4
 800794a:	bd70      	pop	{r4, r5, r6, pc}

0800794c <__sfp_lock_acquire>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__sfp_lock_acquire+0x8>)
 800794e:	f000 b8d4 	b.w	8007afa <__retarget_lock_acquire_recursive>
 8007952:	bf00      	nop
 8007954:	2000045d 	.word	0x2000045d

08007958 <__sfp_lock_release>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__sfp_lock_release+0x8>)
 800795a:	f000 b8cf 	b.w	8007afc <__retarget_lock_release_recursive>
 800795e:	bf00      	nop
 8007960:	2000045d 	.word	0x2000045d

08007964 <__sinit_lock_acquire>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__sinit_lock_acquire+0x8>)
 8007966:	f000 b8c8 	b.w	8007afa <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	2000045e 	.word	0x2000045e

08007970 <__sinit_lock_release>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__sinit_lock_release+0x8>)
 8007972:	f000 b8c3 	b.w	8007afc <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	2000045e 	.word	0x2000045e

0800797c <__sinit>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4604      	mov	r4, r0
 8007980:	f7ff fff0 	bl	8007964 <__sinit_lock_acquire>
 8007984:	69a3      	ldr	r3, [r4, #24]
 8007986:	b11b      	cbz	r3, 8007990 <__sinit+0x14>
 8007988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798c:	f7ff bff0 	b.w	8007970 <__sinit_lock_release>
 8007990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007994:	6523      	str	r3, [r4, #80]	; 0x50
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <__sinit+0x68>)
 8007998:	4a13      	ldr	r2, [pc, #76]	; (80079e8 <__sinit+0x6c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	62a2      	str	r2, [r4, #40]	; 0x28
 800799e:	42a3      	cmp	r3, r4
 80079a0:	bf04      	itt	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	61a3      	streq	r3, [r4, #24]
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 f820 	bl	80079ec <__sfp>
 80079ac:	6060      	str	r0, [r4, #4]
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 f81c 	bl	80079ec <__sfp>
 80079b4:	60a0      	str	r0, [r4, #8]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f818 	bl	80079ec <__sfp>
 80079bc:	2200      	movs	r2, #0
 80079be:	60e0      	str	r0, [r4, #12]
 80079c0:	2104      	movs	r1, #4
 80079c2:	6860      	ldr	r0, [r4, #4]
 80079c4:	f7ff ff82 	bl	80078cc <std>
 80079c8:	68a0      	ldr	r0, [r4, #8]
 80079ca:	2201      	movs	r2, #1
 80079cc:	2109      	movs	r1, #9
 80079ce:	f7ff ff7d 	bl	80078cc <std>
 80079d2:	68e0      	ldr	r0, [r4, #12]
 80079d4:	2202      	movs	r2, #2
 80079d6:	2112      	movs	r1, #18
 80079d8:	f7ff ff78 	bl	80078cc <std>
 80079dc:	2301      	movs	r3, #1
 80079de:	61a3      	str	r3, [r4, #24]
 80079e0:	e7d2      	b.n	8007988 <__sinit+0xc>
 80079e2:	bf00      	nop
 80079e4:	08009b70 	.word	0x08009b70
 80079e8:	08007915 	.word	0x08007915

080079ec <__sfp>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	4607      	mov	r7, r0
 80079f0:	f7ff ffac 	bl	800794c <__sfp_lock_acquire>
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <__sfp+0x84>)
 80079f6:	681e      	ldr	r6, [r3, #0]
 80079f8:	69b3      	ldr	r3, [r6, #24]
 80079fa:	b913      	cbnz	r3, 8007a02 <__sfp+0x16>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff ffbd 	bl	800797c <__sinit>
 8007a02:	3648      	adds	r6, #72	; 0x48
 8007a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	d503      	bpl.n	8007a14 <__sfp+0x28>
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	b30b      	cbz	r3, 8007a54 <__sfp+0x68>
 8007a10:	6836      	ldr	r6, [r6, #0]
 8007a12:	e7f7      	b.n	8007a04 <__sfp+0x18>
 8007a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a18:	b9d5      	cbnz	r5, 8007a50 <__sfp+0x64>
 8007a1a:	4b16      	ldr	r3, [pc, #88]	; (8007a74 <__sfp+0x88>)
 8007a1c:	60e3      	str	r3, [r4, #12]
 8007a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a22:	6665      	str	r5, [r4, #100]	; 0x64
 8007a24:	f000 f868 	bl	8007af8 <__retarget_lock_init_recursive>
 8007a28:	f7ff ff96 	bl	8007958 <__sfp_lock_release>
 8007a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a34:	6025      	str	r5, [r4, #0]
 8007a36:	61a5      	str	r5, [r4, #24]
 8007a38:	2208      	movs	r2, #8
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a40:	f7fe f956 	bl	8005cf0 <memset>
 8007a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a50:	3468      	adds	r4, #104	; 0x68
 8007a52:	e7d9      	b.n	8007a08 <__sfp+0x1c>
 8007a54:	2104      	movs	r1, #4
 8007a56:	4638      	mov	r0, r7
 8007a58:	f7ff ff62 	bl	8007920 <__sfmoreglue>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	6030      	str	r0, [r6, #0]
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1d5      	bne.n	8007a10 <__sfp+0x24>
 8007a64:	f7ff ff78 	bl	8007958 <__sfp_lock_release>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	e7ee      	b.n	8007a4c <__sfp+0x60>
 8007a6e:	bf00      	nop
 8007a70:	08009b70 	.word	0x08009b70
 8007a74:	ffff0001 	.word	0xffff0001

08007a78 <_fwalk>:
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a82:	2600      	movs	r6, #0
 8007a84:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8007a88:	f1b8 0801 	subs.w	r8, r8, #1
 8007a8c:	d505      	bpl.n	8007a9a <_fwalk+0x22>
 8007a8e:	6824      	ldr	r4, [r4, #0]
 8007a90:	2c00      	cmp	r4, #0
 8007a92:	d1f7      	bne.n	8007a84 <_fwalk+0xc>
 8007a94:	4630      	mov	r0, r6
 8007a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d906      	bls.n	8007aae <_fwalk+0x36>
 8007aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	d002      	beq.n	8007aae <_fwalk+0x36>
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	4306      	orrs	r6, r0
 8007aae:	3568      	adds	r5, #104	; 0x68
 8007ab0:	e7ea      	b.n	8007a88 <_fwalk+0x10>

08007ab2 <_fwalk_reent>:
 8007ab2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	4688      	mov	r8, r1
 8007aba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007abe:	2700      	movs	r7, #0
 8007ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ac8:	d505      	bpl.n	8007ad6 <_fwalk_reent+0x24>
 8007aca:	6824      	ldr	r4, [r4, #0]
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d1f7      	bne.n	8007ac0 <_fwalk_reent+0xe>
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d907      	bls.n	8007aec <_fwalk_reent+0x3a>
 8007adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	d003      	beq.n	8007aec <_fwalk_reent+0x3a>
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	47c0      	blx	r8
 8007aea:	4307      	orrs	r7, r0
 8007aec:	3568      	adds	r5, #104	; 0x68
 8007aee:	e7e9      	b.n	8007ac4 <_fwalk_reent+0x12>

08007af0 <_localeconv_r>:
 8007af0:	4800      	ldr	r0, [pc, #0]	; (8007af4 <_localeconv_r+0x4>)
 8007af2:	4770      	bx	lr
 8007af4:	20000160 	.word	0x20000160

08007af8 <__retarget_lock_init_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__retarget_lock_acquire_recursive>:
 8007afa:	4770      	bx	lr

08007afc <__retarget_lock_release_recursive>:
 8007afc:	4770      	bx	lr

08007afe <__swhatbuf_r>:
 8007afe:	b570      	push	{r4, r5, r6, lr}
 8007b00:	460e      	mov	r6, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	2900      	cmp	r1, #0
 8007b08:	b096      	sub	sp, #88	; 0x58
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	da08      	bge.n	8007b22 <__swhatbuf_r+0x24>
 8007b10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	602a      	str	r2, [r5, #0]
 8007b18:	061a      	lsls	r2, r3, #24
 8007b1a:	d410      	bmi.n	8007b3e <__swhatbuf_r+0x40>
 8007b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b20:	e00e      	b.n	8007b40 <__swhatbuf_r+0x42>
 8007b22:	466a      	mov	r2, sp
 8007b24:	f001 fc96 	bl	8009454 <_fstat_r>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	dbf1      	blt.n	8007b10 <__swhatbuf_r+0x12>
 8007b2c:	9a01      	ldr	r2, [sp, #4]
 8007b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b36:	425a      	negs	r2, r3
 8007b38:	415a      	adcs	r2, r3
 8007b3a:	602a      	str	r2, [r5, #0]
 8007b3c:	e7ee      	b.n	8007b1c <__swhatbuf_r+0x1e>
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	2000      	movs	r0, #0
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	b016      	add	sp, #88	; 0x58
 8007b46:	bd70      	pop	{r4, r5, r6, pc}

08007b48 <__smakebuf_r>:
 8007b48:	898b      	ldrh	r3, [r1, #12]
 8007b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b4c:	079d      	lsls	r5, r3, #30
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	d507      	bpl.n	8007b64 <__smakebuf_r+0x1c>
 8007b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	6123      	str	r3, [r4, #16]
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	6163      	str	r3, [r4, #20]
 8007b60:	b002      	add	sp, #8
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	ab01      	add	r3, sp, #4
 8007b66:	466a      	mov	r2, sp
 8007b68:	f7ff ffc9 	bl	8007afe <__swhatbuf_r>
 8007b6c:	9900      	ldr	r1, [sp, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 fc45 	bl	8008400 <_malloc_r>
 8007b76:	b948      	cbnz	r0, 8007b8c <__smakebuf_r+0x44>
 8007b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7c:	059a      	lsls	r2, r3, #22
 8007b7e:	d4ef      	bmi.n	8007b60 <__smakebuf_r+0x18>
 8007b80:	f023 0303 	bic.w	r3, r3, #3
 8007b84:	f043 0302 	orr.w	r3, r3, #2
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	e7e3      	b.n	8007b54 <__smakebuf_r+0xc>
 8007b8c:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <__smakebuf_r+0x7c>)
 8007b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	6020      	str	r0, [r4, #0]
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	9b00      	ldr	r3, [sp, #0]
 8007b9c:	6163      	str	r3, [r4, #20]
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	6120      	str	r0, [r4, #16]
 8007ba2:	b15b      	cbz	r3, 8007bbc <__smakebuf_r+0x74>
 8007ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f001 fc65 	bl	8009478 <_isatty_r>
 8007bae:	b128      	cbz	r0, 8007bbc <__smakebuf_r+0x74>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	f043 0301 	orr.w	r3, r3, #1
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	89a0      	ldrh	r0, [r4, #12]
 8007bbe:	4305      	orrs	r5, r0
 8007bc0:	81a5      	strh	r5, [r4, #12]
 8007bc2:	e7cd      	b.n	8007b60 <__smakebuf_r+0x18>
 8007bc4:	08007915 	.word	0x08007915

08007bc8 <malloc>:
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <malloc+0xc>)
 8007bca:	4601      	mov	r1, r0
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f000 bc17 	b.w	8008400 <_malloc_r>
 8007bd2:	bf00      	nop
 8007bd4:	2000000c 	.word	0x2000000c

08007bd8 <memcpy>:
 8007bd8:	440a      	add	r2, r1
 8007bda:	4291      	cmp	r1, r2
 8007bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be0:	d100      	bne.n	8007be4 <memcpy+0xc>
 8007be2:	4770      	bx	lr
 8007be4:	b510      	push	{r4, lr}
 8007be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bee:	4291      	cmp	r1, r2
 8007bf0:	d1f9      	bne.n	8007be6 <memcpy+0xe>
 8007bf2:	bd10      	pop	{r4, pc}

08007bf4 <_Balloc>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	b976      	cbnz	r6, 8007c1c <_Balloc+0x28>
 8007bfe:	2010      	movs	r0, #16
 8007c00:	f7ff ffe2 	bl	8007bc8 <malloc>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6260      	str	r0, [r4, #36]	; 0x24
 8007c08:	b920      	cbnz	r0, 8007c14 <_Balloc+0x20>
 8007c0a:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <_Balloc+0x78>)
 8007c0c:	4818      	ldr	r0, [pc, #96]	; (8007c70 <_Balloc+0x7c>)
 8007c0e:	2166      	movs	r1, #102	; 0x66
 8007c10:	f001 fbe0 	bl	80093d4 <__assert_func>
 8007c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c18:	6006      	str	r6, [r0, #0]
 8007c1a:	60c6      	str	r6, [r0, #12]
 8007c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c1e:	68f3      	ldr	r3, [r6, #12]
 8007c20:	b183      	cbz	r3, 8007c44 <_Balloc+0x50>
 8007c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c2a:	b9b8      	cbnz	r0, 8007c5c <_Balloc+0x68>
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c32:	1d72      	adds	r2, r6, #5
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fb60 	bl	80082fc <_calloc_r>
 8007c3c:	b160      	cbz	r0, 8007c58 <_Balloc+0x64>
 8007c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c42:	e00e      	b.n	8007c62 <_Balloc+0x6e>
 8007c44:	2221      	movs	r2, #33	; 0x21
 8007c46:	2104      	movs	r1, #4
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fb57 	bl	80082fc <_calloc_r>
 8007c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c50:	60f0      	str	r0, [r6, #12]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e4      	bne.n	8007c22 <_Balloc+0x2e>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	6802      	ldr	r2, [r0, #0]
 8007c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c62:	2300      	movs	r3, #0
 8007c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c68:	e7f7      	b.n	8007c5a <_Balloc+0x66>
 8007c6a:	bf00      	nop
 8007c6c:	08009bb3 	.word	0x08009bb3
 8007c70:	08009c98 	.word	0x08009c98

08007c74 <_Bfree>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	b976      	cbnz	r6, 8007c9c <_Bfree+0x28>
 8007c7e:	2010      	movs	r0, #16
 8007c80:	f7ff ffa2 	bl	8007bc8 <malloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6268      	str	r0, [r5, #36]	; 0x24
 8007c88:	b920      	cbnz	r0, 8007c94 <_Bfree+0x20>
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <_Bfree+0x3c>)
 8007c8c:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <_Bfree+0x40>)
 8007c8e:	218a      	movs	r1, #138	; 0x8a
 8007c90:	f001 fba0 	bl	80093d4 <__assert_func>
 8007c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c98:	6006      	str	r6, [r0, #0]
 8007c9a:	60c6      	str	r6, [r0, #12]
 8007c9c:	b13c      	cbz	r4, 8007cae <_Bfree+0x3a>
 8007c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ca0:	6862      	ldr	r2, [r4, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ca8:	6021      	str	r1, [r4, #0]
 8007caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	08009bb3 	.word	0x08009bb3
 8007cb4:	08009c98 	.word	0x08009c98

08007cb8 <__multadd>:
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	690d      	ldr	r5, [r1, #16]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	461e      	mov	r6, r3
 8007cc4:	f101 0c14 	add.w	ip, r1, #20
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f8dc 3000 	ldr.w	r3, [ip]
 8007cce:	b299      	uxth	r1, r3
 8007cd0:	fb02 6101 	mla	r1, r2, r1, r6
 8007cd4:	0c1e      	lsrs	r6, r3, #16
 8007cd6:	0c0b      	lsrs	r3, r1, #16
 8007cd8:	fb02 3306 	mla	r3, r2, r6, r3
 8007cdc:	b289      	uxth	r1, r1
 8007cde:	3001      	adds	r0, #1
 8007ce0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ce4:	4285      	cmp	r5, r0
 8007ce6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cee:	dcec      	bgt.n	8007cca <__multadd+0x12>
 8007cf0:	b30e      	cbz	r6, 8007d36 <__multadd+0x7e>
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	dc19      	bgt.n	8007d2c <__multadd+0x74>
 8007cf8:	6861      	ldr	r1, [r4, #4]
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	f7ff ff79 	bl	8007bf4 <_Balloc>
 8007d02:	4680      	mov	r8, r0
 8007d04:	b928      	cbnz	r0, 8007d12 <__multadd+0x5a>
 8007d06:	4602      	mov	r2, r0
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <__multadd+0x84>)
 8007d0a:	480d      	ldr	r0, [pc, #52]	; (8007d40 <__multadd+0x88>)
 8007d0c:	21b5      	movs	r1, #181	; 0xb5
 8007d0e:	f001 fb61 	bl	80093d4 <__assert_func>
 8007d12:	6922      	ldr	r2, [r4, #16]
 8007d14:	3202      	adds	r2, #2
 8007d16:	f104 010c 	add.w	r1, r4, #12
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	300c      	adds	r0, #12
 8007d1e:	f7ff ff5b 	bl	8007bd8 <memcpy>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4638      	mov	r0, r7
 8007d26:	f7ff ffa5 	bl	8007c74 <_Bfree>
 8007d2a:	4644      	mov	r4, r8
 8007d2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d30:	3501      	adds	r5, #1
 8007d32:	615e      	str	r6, [r3, #20]
 8007d34:	6125      	str	r5, [r4, #16]
 8007d36:	4620      	mov	r0, r4
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	08009c25 	.word	0x08009c25
 8007d40:	08009c98 	.word	0x08009c98

08007d44 <__hi0bits>:
 8007d44:	0c03      	lsrs	r3, r0, #16
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	b9d3      	cbnz	r3, 8007d80 <__hi0bits+0x3c>
 8007d4a:	0400      	lsls	r0, r0, #16
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d52:	bf04      	itt	eq
 8007d54:	0200      	lsleq	r0, r0, #8
 8007d56:	3308      	addeq	r3, #8
 8007d58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d5c:	bf04      	itt	eq
 8007d5e:	0100      	lsleq	r0, r0, #4
 8007d60:	3304      	addeq	r3, #4
 8007d62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d66:	bf04      	itt	eq
 8007d68:	0080      	lsleq	r0, r0, #2
 8007d6a:	3302      	addeq	r3, #2
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	db05      	blt.n	8007d7c <__hi0bits+0x38>
 8007d70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d74:	f103 0301 	add.w	r3, r3, #1
 8007d78:	bf08      	it	eq
 8007d7a:	2320      	moveq	r3, #32
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	4770      	bx	lr
 8007d80:	2300      	movs	r3, #0
 8007d82:	e7e4      	b.n	8007d4e <__hi0bits+0xa>

08007d84 <__lo0bits>:
 8007d84:	6803      	ldr	r3, [r0, #0]
 8007d86:	f013 0207 	ands.w	r2, r3, #7
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	d00b      	beq.n	8007da6 <__lo0bits+0x22>
 8007d8e:	07da      	lsls	r2, r3, #31
 8007d90:	d423      	bmi.n	8007dda <__lo0bits+0x56>
 8007d92:	0798      	lsls	r0, r3, #30
 8007d94:	bf49      	itett	mi
 8007d96:	085b      	lsrmi	r3, r3, #1
 8007d98:	089b      	lsrpl	r3, r3, #2
 8007d9a:	2001      	movmi	r0, #1
 8007d9c:	600b      	strmi	r3, [r1, #0]
 8007d9e:	bf5c      	itt	pl
 8007da0:	600b      	strpl	r3, [r1, #0]
 8007da2:	2002      	movpl	r0, #2
 8007da4:	4770      	bx	lr
 8007da6:	b298      	uxth	r0, r3
 8007da8:	b9a8      	cbnz	r0, 8007dd6 <__lo0bits+0x52>
 8007daa:	0c1b      	lsrs	r3, r3, #16
 8007dac:	2010      	movs	r0, #16
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	b90a      	cbnz	r2, 8007db6 <__lo0bits+0x32>
 8007db2:	3008      	adds	r0, #8
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	071a      	lsls	r2, r3, #28
 8007db8:	bf04      	itt	eq
 8007dba:	091b      	lsreq	r3, r3, #4
 8007dbc:	3004      	addeq	r0, #4
 8007dbe:	079a      	lsls	r2, r3, #30
 8007dc0:	bf04      	itt	eq
 8007dc2:	089b      	lsreq	r3, r3, #2
 8007dc4:	3002      	addeq	r0, #2
 8007dc6:	07da      	lsls	r2, r3, #31
 8007dc8:	d403      	bmi.n	8007dd2 <__lo0bits+0x4e>
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	f100 0001 	add.w	r0, r0, #1
 8007dd0:	d005      	beq.n	8007dde <__lo0bits+0x5a>
 8007dd2:	600b      	str	r3, [r1, #0]
 8007dd4:	4770      	bx	lr
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	e7e9      	b.n	8007dae <__lo0bits+0x2a>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	4770      	bx	lr
 8007dde:	2020      	movs	r0, #32
 8007de0:	4770      	bx	lr
	...

08007de4 <__i2b>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	2101      	movs	r1, #1
 8007dea:	f7ff ff03 	bl	8007bf4 <_Balloc>
 8007dee:	4602      	mov	r2, r0
 8007df0:	b928      	cbnz	r0, 8007dfe <__i2b+0x1a>
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <__i2b+0x24>)
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <__i2b+0x28>)
 8007df6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dfa:	f001 faeb 	bl	80093d4 <__assert_func>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6144      	str	r4, [r0, #20]
 8007e02:	6103      	str	r3, [r0, #16]
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	08009c25 	.word	0x08009c25
 8007e0c:	08009c98 	.word	0x08009c98

08007e10 <__multiply>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4691      	mov	r9, r2
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	bfb8      	it	lt
 8007e20:	460b      	movlt	r3, r1
 8007e22:	460c      	mov	r4, r1
 8007e24:	bfbc      	itt	lt
 8007e26:	464c      	movlt	r4, r9
 8007e28:	4699      	movlt	r9, r3
 8007e2a:	6927      	ldr	r7, [r4, #16]
 8007e2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e30:	68a3      	ldr	r3, [r4, #8]
 8007e32:	6861      	ldr	r1, [r4, #4]
 8007e34:	eb07 060a 	add.w	r6, r7, sl
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	bfb8      	it	lt
 8007e3e:	3101      	addlt	r1, #1
 8007e40:	f7ff fed8 	bl	8007bf4 <_Balloc>
 8007e44:	b930      	cbnz	r0, 8007e54 <__multiply+0x44>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b44      	ldr	r3, [pc, #272]	; (8007f5c <__multiply+0x14c>)
 8007e4a:	4845      	ldr	r0, [pc, #276]	; (8007f60 <__multiply+0x150>)
 8007e4c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e50:	f001 fac0 	bl	80093d4 <__assert_func>
 8007e54:	f100 0514 	add.w	r5, r0, #20
 8007e58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4543      	cmp	r3, r8
 8007e62:	d321      	bcc.n	8007ea8 <__multiply+0x98>
 8007e64:	f104 0314 	add.w	r3, r4, #20
 8007e68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e6c:	f109 0314 	add.w	r3, r9, #20
 8007e70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e74:	9202      	str	r2, [sp, #8]
 8007e76:	1b3a      	subs	r2, r7, r4
 8007e78:	3a15      	subs	r2, #21
 8007e7a:	f022 0203 	bic.w	r2, r2, #3
 8007e7e:	3204      	adds	r2, #4
 8007e80:	f104 0115 	add.w	r1, r4, #21
 8007e84:	428f      	cmp	r7, r1
 8007e86:	bf38      	it	cc
 8007e88:	2204      	movcc	r2, #4
 8007e8a:	9201      	str	r2, [sp, #4]
 8007e8c:	9a02      	ldr	r2, [sp, #8]
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d80c      	bhi.n	8007eae <__multiply+0x9e>
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	dd03      	ble.n	8007ea0 <__multiply+0x90>
 8007e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05a      	beq.n	8007f56 <__multiply+0x146>
 8007ea0:	6106      	str	r6, [r0, #16]
 8007ea2:	b005      	add	sp, #20
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	f843 2b04 	str.w	r2, [r3], #4
 8007eac:	e7d8      	b.n	8007e60 <__multiply+0x50>
 8007eae:	f8b3 a000 	ldrh.w	sl, [r3]
 8007eb2:	f1ba 0f00 	cmp.w	sl, #0
 8007eb6:	d024      	beq.n	8007f02 <__multiply+0xf2>
 8007eb8:	f104 0e14 	add.w	lr, r4, #20
 8007ebc:	46a9      	mov	r9, r5
 8007ebe:	f04f 0c00 	mov.w	ip, #0
 8007ec2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ec6:	f8d9 1000 	ldr.w	r1, [r9]
 8007eca:	fa1f fb82 	uxth.w	fp, r2
 8007ece:	b289      	uxth	r1, r1
 8007ed0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ed4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8007edc:	4461      	add	r1, ip
 8007ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ee2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007eea:	b289      	uxth	r1, r1
 8007eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ef0:	4577      	cmp	r7, lr
 8007ef2:	f849 1b04 	str.w	r1, [r9], #4
 8007ef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007efa:	d8e2      	bhi.n	8007ec2 <__multiply+0xb2>
 8007efc:	9a01      	ldr	r2, [sp, #4]
 8007efe:	f845 c002 	str.w	ip, [r5, r2]
 8007f02:	9a03      	ldr	r2, [sp, #12]
 8007f04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	d020      	beq.n	8007f52 <__multiply+0x142>
 8007f10:	6829      	ldr	r1, [r5, #0]
 8007f12:	f104 0c14 	add.w	ip, r4, #20
 8007f16:	46ae      	mov	lr, r5
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f24:	fb09 220b 	mla	r2, r9, fp, r2
 8007f28:	4492      	add	sl, r2
 8007f2a:	b289      	uxth	r1, r1
 8007f2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f30:	f84e 1b04 	str.w	r1, [lr], #4
 8007f34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f38:	f8be 1000 	ldrh.w	r1, [lr]
 8007f3c:	0c12      	lsrs	r2, r2, #16
 8007f3e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f46:	4567      	cmp	r7, ip
 8007f48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f4c:	d8e6      	bhi.n	8007f1c <__multiply+0x10c>
 8007f4e:	9a01      	ldr	r2, [sp, #4]
 8007f50:	50a9      	str	r1, [r5, r2]
 8007f52:	3504      	adds	r5, #4
 8007f54:	e79a      	b.n	8007e8c <__multiply+0x7c>
 8007f56:	3e01      	subs	r6, #1
 8007f58:	e79c      	b.n	8007e94 <__multiply+0x84>
 8007f5a:	bf00      	nop
 8007f5c:	08009c25 	.word	0x08009c25
 8007f60:	08009c98 	.word	0x08009c98

08007f64 <__pow5mult>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4615      	mov	r5, r2
 8007f6a:	f012 0203 	ands.w	r2, r2, #3
 8007f6e:	4606      	mov	r6, r0
 8007f70:	460f      	mov	r7, r1
 8007f72:	d007      	beq.n	8007f84 <__pow5mult+0x20>
 8007f74:	4c25      	ldr	r4, [pc, #148]	; (800800c <__pow5mult+0xa8>)
 8007f76:	3a01      	subs	r2, #1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7e:	f7ff fe9b 	bl	8007cb8 <__multadd>
 8007f82:	4607      	mov	r7, r0
 8007f84:	10ad      	asrs	r5, r5, #2
 8007f86:	d03d      	beq.n	8008004 <__pow5mult+0xa0>
 8007f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f8a:	b97c      	cbnz	r4, 8007fac <__pow5mult+0x48>
 8007f8c:	2010      	movs	r0, #16
 8007f8e:	f7ff fe1b 	bl	8007bc8 <malloc>
 8007f92:	4602      	mov	r2, r0
 8007f94:	6270      	str	r0, [r6, #36]	; 0x24
 8007f96:	b928      	cbnz	r0, 8007fa4 <__pow5mult+0x40>
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <__pow5mult+0xac>)
 8007f9a:	481e      	ldr	r0, [pc, #120]	; (8008014 <__pow5mult+0xb0>)
 8007f9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fa0:	f001 fa18 	bl	80093d4 <__assert_func>
 8007fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fa8:	6004      	str	r4, [r0, #0]
 8007faa:	60c4      	str	r4, [r0, #12]
 8007fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fb4:	b94c      	cbnz	r4, 8007fca <__pow5mult+0x66>
 8007fb6:	f240 2171 	movw	r1, #625	; 0x271
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff ff12 	bl	8007de4 <__i2b>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	07eb      	lsls	r3, r5, #31
 8007fd0:	d50a      	bpl.n	8007fe8 <__pow5mult+0x84>
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff ff1a 	bl	8007e10 <__multiply>
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4680      	mov	r8, r0
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff fe47 	bl	8007c74 <_Bfree>
 8007fe6:	4647      	mov	r7, r8
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	d00b      	beq.n	8008004 <__pow5mult+0xa0>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	b938      	cbnz	r0, 8008000 <__pow5mult+0x9c>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ff0b 	bl	8007e10 <__multiply>
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f8c0 9000 	str.w	r9, [r0]
 8008000:	4604      	mov	r4, r0
 8008002:	e7e4      	b.n	8007fce <__pow5mult+0x6a>
 8008004:	4638      	mov	r0, r7
 8008006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800a:	bf00      	nop
 800800c:	08009de8 	.word	0x08009de8
 8008010:	08009bb3 	.word	0x08009bb3
 8008014:	08009c98 	.word	0x08009c98

08008018 <__lshift>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	6849      	ldr	r1, [r1, #4]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	4607      	mov	r7, r0
 800802a:	4691      	mov	r9, r2
 800802c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008030:	f108 0601 	add.w	r6, r8, #1
 8008034:	42b3      	cmp	r3, r6
 8008036:	db0b      	blt.n	8008050 <__lshift+0x38>
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff fddb 	bl	8007bf4 <_Balloc>
 800803e:	4605      	mov	r5, r0
 8008040:	b948      	cbnz	r0, 8008056 <__lshift+0x3e>
 8008042:	4602      	mov	r2, r0
 8008044:	4b2a      	ldr	r3, [pc, #168]	; (80080f0 <__lshift+0xd8>)
 8008046:	482b      	ldr	r0, [pc, #172]	; (80080f4 <__lshift+0xdc>)
 8008048:	f240 11d9 	movw	r1, #473	; 0x1d9
 800804c:	f001 f9c2 	bl	80093d4 <__assert_func>
 8008050:	3101      	adds	r1, #1
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	e7ee      	b.n	8008034 <__lshift+0x1c>
 8008056:	2300      	movs	r3, #0
 8008058:	f100 0114 	add.w	r1, r0, #20
 800805c:	f100 0210 	add.w	r2, r0, #16
 8008060:	4618      	mov	r0, r3
 8008062:	4553      	cmp	r3, sl
 8008064:	db37      	blt.n	80080d6 <__lshift+0xbe>
 8008066:	6920      	ldr	r0, [r4, #16]
 8008068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800806c:	f104 0314 	add.w	r3, r4, #20
 8008070:	f019 091f 	ands.w	r9, r9, #31
 8008074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800807c:	d02f      	beq.n	80080de <__lshift+0xc6>
 800807e:	f1c9 0e20 	rsb	lr, r9, #32
 8008082:	468a      	mov	sl, r1
 8008084:	f04f 0c00 	mov.w	ip, #0
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	fa02 f209 	lsl.w	r2, r2, r9
 800808e:	ea42 020c 	orr.w	r2, r2, ip
 8008092:	f84a 2b04 	str.w	r2, [sl], #4
 8008096:	f853 2b04 	ldr.w	r2, [r3], #4
 800809a:	4298      	cmp	r0, r3
 800809c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080a0:	d8f2      	bhi.n	8008088 <__lshift+0x70>
 80080a2:	1b03      	subs	r3, r0, r4
 80080a4:	3b15      	subs	r3, #21
 80080a6:	f023 0303 	bic.w	r3, r3, #3
 80080aa:	3304      	adds	r3, #4
 80080ac:	f104 0215 	add.w	r2, r4, #21
 80080b0:	4290      	cmp	r0, r2
 80080b2:	bf38      	it	cc
 80080b4:	2304      	movcc	r3, #4
 80080b6:	f841 c003 	str.w	ip, [r1, r3]
 80080ba:	f1bc 0f00 	cmp.w	ip, #0
 80080be:	d001      	beq.n	80080c4 <__lshift+0xac>
 80080c0:	f108 0602 	add.w	r6, r8, #2
 80080c4:	3e01      	subs	r6, #1
 80080c6:	4638      	mov	r0, r7
 80080c8:	612e      	str	r6, [r5, #16]
 80080ca:	4621      	mov	r1, r4
 80080cc:	f7ff fdd2 	bl	8007c74 <_Bfree>
 80080d0:	4628      	mov	r0, r5
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080da:	3301      	adds	r3, #1
 80080dc:	e7c1      	b.n	8008062 <__lshift+0x4a>
 80080de:	3904      	subs	r1, #4
 80080e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80080e8:	4298      	cmp	r0, r3
 80080ea:	d8f9      	bhi.n	80080e0 <__lshift+0xc8>
 80080ec:	e7ea      	b.n	80080c4 <__lshift+0xac>
 80080ee:	bf00      	nop
 80080f0:	08009c25 	.word	0x08009c25
 80080f4:	08009c98 	.word	0x08009c98

080080f8 <__mcmp>:
 80080f8:	b530      	push	{r4, r5, lr}
 80080fa:	6902      	ldr	r2, [r0, #16]
 80080fc:	690c      	ldr	r4, [r1, #16]
 80080fe:	1b12      	subs	r2, r2, r4
 8008100:	d10e      	bne.n	8008120 <__mcmp+0x28>
 8008102:	f100 0314 	add.w	r3, r0, #20
 8008106:	3114      	adds	r1, #20
 8008108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800810c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008118:	42a5      	cmp	r5, r4
 800811a:	d003      	beq.n	8008124 <__mcmp+0x2c>
 800811c:	d305      	bcc.n	800812a <__mcmp+0x32>
 800811e:	2201      	movs	r2, #1
 8008120:	4610      	mov	r0, r2
 8008122:	bd30      	pop	{r4, r5, pc}
 8008124:	4283      	cmp	r3, r0
 8008126:	d3f3      	bcc.n	8008110 <__mcmp+0x18>
 8008128:	e7fa      	b.n	8008120 <__mcmp+0x28>
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	e7f7      	b.n	8008120 <__mcmp+0x28>

08008130 <__mdiff>:
 8008130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	4606      	mov	r6, r0
 8008138:	4611      	mov	r1, r2
 800813a:	4620      	mov	r0, r4
 800813c:	4690      	mov	r8, r2
 800813e:	f7ff ffdb 	bl	80080f8 <__mcmp>
 8008142:	1e05      	subs	r5, r0, #0
 8008144:	d110      	bne.n	8008168 <__mdiff+0x38>
 8008146:	4629      	mov	r1, r5
 8008148:	4630      	mov	r0, r6
 800814a:	f7ff fd53 	bl	8007bf4 <_Balloc>
 800814e:	b930      	cbnz	r0, 800815e <__mdiff+0x2e>
 8008150:	4b3a      	ldr	r3, [pc, #232]	; (800823c <__mdiff+0x10c>)
 8008152:	4602      	mov	r2, r0
 8008154:	f240 2132 	movw	r1, #562	; 0x232
 8008158:	4839      	ldr	r0, [pc, #228]	; (8008240 <__mdiff+0x110>)
 800815a:	f001 f93b 	bl	80093d4 <__assert_func>
 800815e:	2301      	movs	r3, #1
 8008160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008168:	bfa4      	itt	ge
 800816a:	4643      	movge	r3, r8
 800816c:	46a0      	movge	r8, r4
 800816e:	4630      	mov	r0, r6
 8008170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008174:	bfa6      	itte	ge
 8008176:	461c      	movge	r4, r3
 8008178:	2500      	movge	r5, #0
 800817a:	2501      	movlt	r5, #1
 800817c:	f7ff fd3a 	bl	8007bf4 <_Balloc>
 8008180:	b920      	cbnz	r0, 800818c <__mdiff+0x5c>
 8008182:	4b2e      	ldr	r3, [pc, #184]	; (800823c <__mdiff+0x10c>)
 8008184:	4602      	mov	r2, r0
 8008186:	f44f 7110 	mov.w	r1, #576	; 0x240
 800818a:	e7e5      	b.n	8008158 <__mdiff+0x28>
 800818c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008190:	6926      	ldr	r6, [r4, #16]
 8008192:	60c5      	str	r5, [r0, #12]
 8008194:	f104 0914 	add.w	r9, r4, #20
 8008198:	f108 0514 	add.w	r5, r8, #20
 800819c:	f100 0e14 	add.w	lr, r0, #20
 80081a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081a8:	f108 0210 	add.w	r2, r8, #16
 80081ac:	46f2      	mov	sl, lr
 80081ae:	2100      	movs	r1, #0
 80081b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081b8:	fa1f f883 	uxth.w	r8, r3
 80081bc:	fa11 f18b 	uxtah	r1, r1, fp
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	eba1 0808 	sub.w	r8, r1, r8
 80081c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081ce:	fa1f f888 	uxth.w	r8, r8
 80081d2:	1419      	asrs	r1, r3, #16
 80081d4:	454e      	cmp	r6, r9
 80081d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081da:	f84a 3b04 	str.w	r3, [sl], #4
 80081de:	d8e7      	bhi.n	80081b0 <__mdiff+0x80>
 80081e0:	1b33      	subs	r3, r6, r4
 80081e2:	3b15      	subs	r3, #21
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	3304      	adds	r3, #4
 80081ea:	3415      	adds	r4, #21
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	bf38      	it	cc
 80081f0:	2304      	movcc	r3, #4
 80081f2:	441d      	add	r5, r3
 80081f4:	4473      	add	r3, lr
 80081f6:	469e      	mov	lr, r3
 80081f8:	462e      	mov	r6, r5
 80081fa:	4566      	cmp	r6, ip
 80081fc:	d30e      	bcc.n	800821c <__mdiff+0xec>
 80081fe:	f10c 0203 	add.w	r2, ip, #3
 8008202:	1b52      	subs	r2, r2, r5
 8008204:	f022 0203 	bic.w	r2, r2, #3
 8008208:	3d03      	subs	r5, #3
 800820a:	45ac      	cmp	ip, r5
 800820c:	bf38      	it	cc
 800820e:	2200      	movcc	r2, #0
 8008210:	441a      	add	r2, r3
 8008212:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008216:	b17b      	cbz	r3, 8008238 <__mdiff+0x108>
 8008218:	6107      	str	r7, [r0, #16]
 800821a:	e7a3      	b.n	8008164 <__mdiff+0x34>
 800821c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008220:	fa11 f288 	uxtah	r2, r1, r8
 8008224:	1414      	asrs	r4, r2, #16
 8008226:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800822a:	b292      	uxth	r2, r2
 800822c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008230:	f84e 2b04 	str.w	r2, [lr], #4
 8008234:	1421      	asrs	r1, r4, #16
 8008236:	e7e0      	b.n	80081fa <__mdiff+0xca>
 8008238:	3f01      	subs	r7, #1
 800823a:	e7ea      	b.n	8008212 <__mdiff+0xe2>
 800823c:	08009c25 	.word	0x08009c25
 8008240:	08009c98 	.word	0x08009c98

08008244 <__d2b>:
 8008244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4689      	mov	r9, r1
 800824a:	2101      	movs	r1, #1
 800824c:	ec57 6b10 	vmov	r6, r7, d0
 8008250:	4690      	mov	r8, r2
 8008252:	f7ff fccf 	bl	8007bf4 <_Balloc>
 8008256:	4604      	mov	r4, r0
 8008258:	b930      	cbnz	r0, 8008268 <__d2b+0x24>
 800825a:	4602      	mov	r2, r0
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <__d2b+0xb0>)
 800825e:	4826      	ldr	r0, [pc, #152]	; (80082f8 <__d2b+0xb4>)
 8008260:	f240 310a 	movw	r1, #778	; 0x30a
 8008264:	f001 f8b6 	bl	80093d4 <__assert_func>
 8008268:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800826c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008270:	bb35      	cbnz	r5, 80082c0 <__d2b+0x7c>
 8008272:	2e00      	cmp	r6, #0
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	d028      	beq.n	80082ca <__d2b+0x86>
 8008278:	4668      	mov	r0, sp
 800827a:	9600      	str	r6, [sp, #0]
 800827c:	f7ff fd82 	bl	8007d84 <__lo0bits>
 8008280:	9900      	ldr	r1, [sp, #0]
 8008282:	b300      	cbz	r0, 80082c6 <__d2b+0x82>
 8008284:	9a01      	ldr	r2, [sp, #4]
 8008286:	f1c0 0320 	rsb	r3, r0, #32
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	430b      	orrs	r3, r1
 8008290:	40c2      	lsrs	r2, r0
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	61a3      	str	r3, [r4, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2202      	movne	r2, #2
 80082a0:	2201      	moveq	r2, #1
 80082a2:	6122      	str	r2, [r4, #16]
 80082a4:	b1d5      	cbz	r5, 80082dc <__d2b+0x98>
 80082a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082aa:	4405      	add	r5, r0
 80082ac:	f8c9 5000 	str.w	r5, [r9]
 80082b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082b4:	f8c8 0000 	str.w	r0, [r8]
 80082b8:	4620      	mov	r0, r4
 80082ba:	b003      	add	sp, #12
 80082bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082c4:	e7d5      	b.n	8008272 <__d2b+0x2e>
 80082c6:	6161      	str	r1, [r4, #20]
 80082c8:	e7e5      	b.n	8008296 <__d2b+0x52>
 80082ca:	a801      	add	r0, sp, #4
 80082cc:	f7ff fd5a 	bl	8007d84 <__lo0bits>
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	2201      	movs	r2, #1
 80082d6:	6122      	str	r2, [r4, #16]
 80082d8:	3020      	adds	r0, #32
 80082da:	e7e3      	b.n	80082a4 <__d2b+0x60>
 80082dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082e4:	f8c9 0000 	str.w	r0, [r9]
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f7ff fd2b 	bl	8007d44 <__hi0bits>
 80082ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082f2:	e7df      	b.n	80082b4 <__d2b+0x70>
 80082f4:	08009c25 	.word	0x08009c25
 80082f8:	08009c98 	.word	0x08009c98

080082fc <_calloc_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	fba1 2402 	umull	r2, r4, r1, r2
 8008302:	b94c      	cbnz	r4, 8008318 <_calloc_r+0x1c>
 8008304:	4611      	mov	r1, r2
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	f000 f87a 	bl	8008400 <_malloc_r>
 800830c:	9a01      	ldr	r2, [sp, #4]
 800830e:	4605      	mov	r5, r0
 8008310:	b930      	cbnz	r0, 8008320 <_calloc_r+0x24>
 8008312:	4628      	mov	r0, r5
 8008314:	b003      	add	sp, #12
 8008316:	bd30      	pop	{r4, r5, pc}
 8008318:	220c      	movs	r2, #12
 800831a:	6002      	str	r2, [r0, #0]
 800831c:	2500      	movs	r5, #0
 800831e:	e7f8      	b.n	8008312 <_calloc_r+0x16>
 8008320:	4621      	mov	r1, r4
 8008322:	f7fd fce5 	bl	8005cf0 <memset>
 8008326:	e7f4      	b.n	8008312 <_calloc_r+0x16>

08008328 <_free_r>:
 8008328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800832a:	2900      	cmp	r1, #0
 800832c:	d044      	beq.n	80083b8 <_free_r+0x90>
 800832e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008332:	9001      	str	r0, [sp, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f1a1 0404 	sub.w	r4, r1, #4
 800833a:	bfb8      	it	lt
 800833c:	18e4      	addlt	r4, r4, r3
 800833e:	f001 f8cf 	bl	80094e0 <__malloc_lock>
 8008342:	4a1e      	ldr	r2, [pc, #120]	; (80083bc <_free_r+0x94>)
 8008344:	9801      	ldr	r0, [sp, #4]
 8008346:	6813      	ldr	r3, [r2, #0]
 8008348:	b933      	cbnz	r3, 8008358 <_free_r+0x30>
 800834a:	6063      	str	r3, [r4, #4]
 800834c:	6014      	str	r4, [r2, #0]
 800834e:	b003      	add	sp, #12
 8008350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008354:	f001 b8ca 	b.w	80094ec <__malloc_unlock>
 8008358:	42a3      	cmp	r3, r4
 800835a:	d908      	bls.n	800836e <_free_r+0x46>
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	1961      	adds	r1, r4, r5
 8008360:	428b      	cmp	r3, r1
 8008362:	bf01      	itttt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	1949      	addeq	r1, r1, r5
 800836a:	6021      	streq	r1, [r4, #0]
 800836c:	e7ed      	b.n	800834a <_free_r+0x22>
 800836e:	461a      	mov	r2, r3
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	b10b      	cbz	r3, 8008378 <_free_r+0x50>
 8008374:	42a3      	cmp	r3, r4
 8008376:	d9fa      	bls.n	800836e <_free_r+0x46>
 8008378:	6811      	ldr	r1, [r2, #0]
 800837a:	1855      	adds	r5, r2, r1
 800837c:	42a5      	cmp	r5, r4
 800837e:	d10b      	bne.n	8008398 <_free_r+0x70>
 8008380:	6824      	ldr	r4, [r4, #0]
 8008382:	4421      	add	r1, r4
 8008384:	1854      	adds	r4, r2, r1
 8008386:	42a3      	cmp	r3, r4
 8008388:	6011      	str	r1, [r2, #0]
 800838a:	d1e0      	bne.n	800834e <_free_r+0x26>
 800838c:	681c      	ldr	r4, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	6053      	str	r3, [r2, #4]
 8008392:	4421      	add	r1, r4
 8008394:	6011      	str	r1, [r2, #0]
 8008396:	e7da      	b.n	800834e <_free_r+0x26>
 8008398:	d902      	bls.n	80083a0 <_free_r+0x78>
 800839a:	230c      	movs	r3, #12
 800839c:	6003      	str	r3, [r0, #0]
 800839e:	e7d6      	b.n	800834e <_free_r+0x26>
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	1961      	adds	r1, r4, r5
 80083a4:	428b      	cmp	r3, r1
 80083a6:	bf04      	itt	eq
 80083a8:	6819      	ldreq	r1, [r3, #0]
 80083aa:	685b      	ldreq	r3, [r3, #4]
 80083ac:	6063      	str	r3, [r4, #4]
 80083ae:	bf04      	itt	eq
 80083b0:	1949      	addeq	r1, r1, r5
 80083b2:	6021      	streq	r1, [r4, #0]
 80083b4:	6054      	str	r4, [r2, #4]
 80083b6:	e7ca      	b.n	800834e <_free_r+0x26>
 80083b8:	b003      	add	sp, #12
 80083ba:	bd30      	pop	{r4, r5, pc}
 80083bc:	20000460 	.word	0x20000460

080083c0 <sbrk_aligned>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4e0e      	ldr	r6, [pc, #56]	; (80083fc <sbrk_aligned+0x3c>)
 80083c4:	460c      	mov	r4, r1
 80083c6:	6831      	ldr	r1, [r6, #0]
 80083c8:	4605      	mov	r5, r0
 80083ca:	b911      	cbnz	r1, 80083d2 <sbrk_aligned+0x12>
 80083cc:	f000 fd9a 	bl	8008f04 <_sbrk_r>
 80083d0:	6030      	str	r0, [r6, #0]
 80083d2:	4621      	mov	r1, r4
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 fd95 	bl	8008f04 <_sbrk_r>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	d00a      	beq.n	80083f4 <sbrk_aligned+0x34>
 80083de:	1cc4      	adds	r4, r0, #3
 80083e0:	f024 0403 	bic.w	r4, r4, #3
 80083e4:	42a0      	cmp	r0, r4
 80083e6:	d007      	beq.n	80083f8 <sbrk_aligned+0x38>
 80083e8:	1a21      	subs	r1, r4, r0
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 fd8a 	bl	8008f04 <_sbrk_r>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d101      	bne.n	80083f8 <sbrk_aligned+0x38>
 80083f4:	f04f 34ff 	mov.w	r4, #4294967295
 80083f8:	4620      	mov	r0, r4
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	20000464 	.word	0x20000464

08008400 <_malloc_r>:
 8008400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008404:	1ccd      	adds	r5, r1, #3
 8008406:	f025 0503 	bic.w	r5, r5, #3
 800840a:	3508      	adds	r5, #8
 800840c:	2d0c      	cmp	r5, #12
 800840e:	bf38      	it	cc
 8008410:	250c      	movcc	r5, #12
 8008412:	2d00      	cmp	r5, #0
 8008414:	4607      	mov	r7, r0
 8008416:	db01      	blt.n	800841c <_malloc_r+0x1c>
 8008418:	42a9      	cmp	r1, r5
 800841a:	d905      	bls.n	8008428 <_malloc_r+0x28>
 800841c:	230c      	movs	r3, #12
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	2600      	movs	r6, #0
 8008422:	4630      	mov	r0, r6
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	4e2e      	ldr	r6, [pc, #184]	; (80084e4 <_malloc_r+0xe4>)
 800842a:	f001 f859 	bl	80094e0 <__malloc_lock>
 800842e:	6833      	ldr	r3, [r6, #0]
 8008430:	461c      	mov	r4, r3
 8008432:	bb34      	cbnz	r4, 8008482 <_malloc_r+0x82>
 8008434:	4629      	mov	r1, r5
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ffc2 	bl	80083c0 <sbrk_aligned>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	4604      	mov	r4, r0
 8008440:	d14d      	bne.n	80084de <_malloc_r+0xde>
 8008442:	6834      	ldr	r4, [r6, #0]
 8008444:	4626      	mov	r6, r4
 8008446:	2e00      	cmp	r6, #0
 8008448:	d140      	bne.n	80084cc <_malloc_r+0xcc>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	4631      	mov	r1, r6
 800844e:	4638      	mov	r0, r7
 8008450:	eb04 0803 	add.w	r8, r4, r3
 8008454:	f000 fd56 	bl	8008f04 <_sbrk_r>
 8008458:	4580      	cmp	r8, r0
 800845a:	d13a      	bne.n	80084d2 <_malloc_r+0xd2>
 800845c:	6821      	ldr	r1, [r4, #0]
 800845e:	3503      	adds	r5, #3
 8008460:	1a6d      	subs	r5, r5, r1
 8008462:	f025 0503 	bic.w	r5, r5, #3
 8008466:	3508      	adds	r5, #8
 8008468:	2d0c      	cmp	r5, #12
 800846a:	bf38      	it	cc
 800846c:	250c      	movcc	r5, #12
 800846e:	4629      	mov	r1, r5
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff ffa5 	bl	80083c0 <sbrk_aligned>
 8008476:	3001      	adds	r0, #1
 8008478:	d02b      	beq.n	80084d2 <_malloc_r+0xd2>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	442b      	add	r3, r5
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	e00e      	b.n	80084a0 <_malloc_r+0xa0>
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	1b52      	subs	r2, r2, r5
 8008486:	d41e      	bmi.n	80084c6 <_malloc_r+0xc6>
 8008488:	2a0b      	cmp	r2, #11
 800848a:	d916      	bls.n	80084ba <_malloc_r+0xba>
 800848c:	1961      	adds	r1, r4, r5
 800848e:	42a3      	cmp	r3, r4
 8008490:	6025      	str	r5, [r4, #0]
 8008492:	bf18      	it	ne
 8008494:	6059      	strne	r1, [r3, #4]
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	bf08      	it	eq
 800849a:	6031      	streq	r1, [r6, #0]
 800849c:	5162      	str	r2, [r4, r5]
 800849e:	604b      	str	r3, [r1, #4]
 80084a0:	4638      	mov	r0, r7
 80084a2:	f104 060b 	add.w	r6, r4, #11
 80084a6:	f001 f821 	bl	80094ec <__malloc_unlock>
 80084aa:	f026 0607 	bic.w	r6, r6, #7
 80084ae:	1d23      	adds	r3, r4, #4
 80084b0:	1af2      	subs	r2, r6, r3
 80084b2:	d0b6      	beq.n	8008422 <_malloc_r+0x22>
 80084b4:	1b9b      	subs	r3, r3, r6
 80084b6:	50a3      	str	r3, [r4, r2]
 80084b8:	e7b3      	b.n	8008422 <_malloc_r+0x22>
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	42a3      	cmp	r3, r4
 80084be:	bf0c      	ite	eq
 80084c0:	6032      	streq	r2, [r6, #0]
 80084c2:	605a      	strne	r2, [r3, #4]
 80084c4:	e7ec      	b.n	80084a0 <_malloc_r+0xa0>
 80084c6:	4623      	mov	r3, r4
 80084c8:	6864      	ldr	r4, [r4, #4]
 80084ca:	e7b2      	b.n	8008432 <_malloc_r+0x32>
 80084cc:	4634      	mov	r4, r6
 80084ce:	6876      	ldr	r6, [r6, #4]
 80084d0:	e7b9      	b.n	8008446 <_malloc_r+0x46>
 80084d2:	230c      	movs	r3, #12
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	4638      	mov	r0, r7
 80084d8:	f001 f808 	bl	80094ec <__malloc_unlock>
 80084dc:	e7a1      	b.n	8008422 <_malloc_r+0x22>
 80084de:	6025      	str	r5, [r4, #0]
 80084e0:	e7de      	b.n	80084a0 <_malloc_r+0xa0>
 80084e2:	bf00      	nop
 80084e4:	20000460 	.word	0x20000460

080084e8 <__sfputc_r>:
 80084e8:	6893      	ldr	r3, [r2, #8]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	b410      	push	{r4}
 80084f0:	6093      	str	r3, [r2, #8]
 80084f2:	da08      	bge.n	8008506 <__sfputc_r+0x1e>
 80084f4:	6994      	ldr	r4, [r2, #24]
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	db01      	blt.n	80084fe <__sfputc_r+0x16>
 80084fa:	290a      	cmp	r1, #10
 80084fc:	d103      	bne.n	8008506 <__sfputc_r+0x1e>
 80084fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008502:	f7fe b9d3 	b.w	80068ac <__swbuf_r>
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	1c58      	adds	r0, r3, #1
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	7019      	strb	r1, [r3, #0]
 800850e:	4608      	mov	r0, r1
 8008510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008514:	4770      	bx	lr

08008516 <__sfputs_r>:
 8008516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008518:	4606      	mov	r6, r0
 800851a:	460f      	mov	r7, r1
 800851c:	4614      	mov	r4, r2
 800851e:	18d5      	adds	r5, r2, r3
 8008520:	42ac      	cmp	r4, r5
 8008522:	d101      	bne.n	8008528 <__sfputs_r+0x12>
 8008524:	2000      	movs	r0, #0
 8008526:	e007      	b.n	8008538 <__sfputs_r+0x22>
 8008528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852c:	463a      	mov	r2, r7
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff ffda 	bl	80084e8 <__sfputc_r>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d1f3      	bne.n	8008520 <__sfputs_r+0xa>
 8008538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800853c <_vfiprintf_r>:
 800853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	460d      	mov	r5, r1
 8008542:	b09d      	sub	sp, #116	; 0x74
 8008544:	4614      	mov	r4, r2
 8008546:	4698      	mov	r8, r3
 8008548:	4606      	mov	r6, r0
 800854a:	b118      	cbz	r0, 8008554 <_vfiprintf_r+0x18>
 800854c:	6983      	ldr	r3, [r0, #24]
 800854e:	b90b      	cbnz	r3, 8008554 <_vfiprintf_r+0x18>
 8008550:	f7ff fa14 	bl	800797c <__sinit>
 8008554:	4b89      	ldr	r3, [pc, #548]	; (800877c <_vfiprintf_r+0x240>)
 8008556:	429d      	cmp	r5, r3
 8008558:	d11b      	bne.n	8008592 <_vfiprintf_r+0x56>
 800855a:	6875      	ldr	r5, [r6, #4]
 800855c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800855e:	07d9      	lsls	r1, r3, #31
 8008560:	d405      	bmi.n	800856e <_vfiprintf_r+0x32>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	059a      	lsls	r2, r3, #22
 8008566:	d402      	bmi.n	800856e <_vfiprintf_r+0x32>
 8008568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800856a:	f7ff fac6 	bl	8007afa <__retarget_lock_acquire_recursive>
 800856e:	89ab      	ldrh	r3, [r5, #12]
 8008570:	071b      	lsls	r3, r3, #28
 8008572:	d501      	bpl.n	8008578 <_vfiprintf_r+0x3c>
 8008574:	692b      	ldr	r3, [r5, #16]
 8008576:	b9eb      	cbnz	r3, 80085b4 <_vfiprintf_r+0x78>
 8008578:	4629      	mov	r1, r5
 800857a:	4630      	mov	r0, r6
 800857c:	f7fe f9e8 	bl	8006950 <__swsetup_r>
 8008580:	b1c0      	cbz	r0, 80085b4 <_vfiprintf_r+0x78>
 8008582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008584:	07dc      	lsls	r4, r3, #31
 8008586:	d50e      	bpl.n	80085a6 <_vfiprintf_r+0x6a>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	b01d      	add	sp, #116	; 0x74
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	4b7b      	ldr	r3, [pc, #492]	; (8008780 <_vfiprintf_r+0x244>)
 8008594:	429d      	cmp	r5, r3
 8008596:	d101      	bne.n	800859c <_vfiprintf_r+0x60>
 8008598:	68b5      	ldr	r5, [r6, #8]
 800859a:	e7df      	b.n	800855c <_vfiprintf_r+0x20>
 800859c:	4b79      	ldr	r3, [pc, #484]	; (8008784 <_vfiprintf_r+0x248>)
 800859e:	429d      	cmp	r5, r3
 80085a0:	bf08      	it	eq
 80085a2:	68f5      	ldreq	r5, [r6, #12]
 80085a4:	e7da      	b.n	800855c <_vfiprintf_r+0x20>
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	0598      	lsls	r0, r3, #22
 80085aa:	d4ed      	bmi.n	8008588 <_vfiprintf_r+0x4c>
 80085ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ae:	f7ff faa5 	bl	8007afc <__retarget_lock_release_recursive>
 80085b2:	e7e9      	b.n	8008588 <_vfiprintf_r+0x4c>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9309      	str	r3, [sp, #36]	; 0x24
 80085b8:	2320      	movs	r3, #32
 80085ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085be:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c2:	2330      	movs	r3, #48	; 0x30
 80085c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008788 <_vfiprintf_r+0x24c>
 80085c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085cc:	f04f 0901 	mov.w	r9, #1
 80085d0:	4623      	mov	r3, r4
 80085d2:	469a      	mov	sl, r3
 80085d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d8:	b10a      	cbz	r2, 80085de <_vfiprintf_r+0xa2>
 80085da:	2a25      	cmp	r2, #37	; 0x25
 80085dc:	d1f9      	bne.n	80085d2 <_vfiprintf_r+0x96>
 80085de:	ebba 0b04 	subs.w	fp, sl, r4
 80085e2:	d00b      	beq.n	80085fc <_vfiprintf_r+0xc0>
 80085e4:	465b      	mov	r3, fp
 80085e6:	4622      	mov	r2, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ff93 	bl	8008516 <__sfputs_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	f000 80aa 	beq.w	800874a <_vfiprintf_r+0x20e>
 80085f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f8:	445a      	add	r2, fp
 80085fa:	9209      	str	r2, [sp, #36]	; 0x24
 80085fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 80a2 	beq.w	800874a <_vfiprintf_r+0x20e>
 8008606:	2300      	movs	r3, #0
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008610:	f10a 0a01 	add.w	sl, sl, #1
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800861c:	931a      	str	r3, [sp, #104]	; 0x68
 800861e:	4654      	mov	r4, sl
 8008620:	2205      	movs	r2, #5
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	4858      	ldr	r0, [pc, #352]	; (8008788 <_vfiprintf_r+0x24c>)
 8008628:	f7f7 fdfa 	bl	8000220 <memchr>
 800862c:	9a04      	ldr	r2, [sp, #16]
 800862e:	b9d8      	cbnz	r0, 8008668 <_vfiprintf_r+0x12c>
 8008630:	06d1      	lsls	r1, r2, #27
 8008632:	bf44      	itt	mi
 8008634:	2320      	movmi	r3, #32
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863a:	0713      	lsls	r3, r2, #28
 800863c:	bf44      	itt	mi
 800863e:	232b      	movmi	r3, #43	; 0x2b
 8008640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b2a      	cmp	r3, #42	; 0x2a
 800864a:	d015      	beq.n	8008678 <_vfiprintf_r+0x13c>
 800864c:	9a07      	ldr	r2, [sp, #28]
 800864e:	4654      	mov	r4, sl
 8008650:	2000      	movs	r0, #0
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	4621      	mov	r1, r4
 8008658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865c:	3b30      	subs	r3, #48	; 0x30
 800865e:	2b09      	cmp	r3, #9
 8008660:	d94e      	bls.n	8008700 <_vfiprintf_r+0x1c4>
 8008662:	b1b0      	cbz	r0, 8008692 <_vfiprintf_r+0x156>
 8008664:	9207      	str	r2, [sp, #28]
 8008666:	e014      	b.n	8008692 <_vfiprintf_r+0x156>
 8008668:	eba0 0308 	sub.w	r3, r0, r8
 800866c:	fa09 f303 	lsl.w	r3, r9, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	46a2      	mov	sl, r4
 8008676:	e7d2      	b.n	800861e <_vfiprintf_r+0xe2>
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	1d19      	adds	r1, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	9103      	str	r1, [sp, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfbb      	ittet	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	f042 0202 	orrlt.w	r2, r2, #2
 800868a:	9307      	strge	r3, [sp, #28]
 800868c:	9307      	strlt	r3, [sp, #28]
 800868e:	bfb8      	it	lt
 8008690:	9204      	strlt	r2, [sp, #16]
 8008692:	7823      	ldrb	r3, [r4, #0]
 8008694:	2b2e      	cmp	r3, #46	; 0x2e
 8008696:	d10c      	bne.n	80086b2 <_vfiprintf_r+0x176>
 8008698:	7863      	ldrb	r3, [r4, #1]
 800869a:	2b2a      	cmp	r3, #42	; 0x2a
 800869c:	d135      	bne.n	800870a <_vfiprintf_r+0x1ce>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfb8      	it	lt
 80086aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80086ae:	3402      	adds	r4, #2
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008798 <_vfiprintf_r+0x25c>
 80086b6:	7821      	ldrb	r1, [r4, #0]
 80086b8:	2203      	movs	r2, #3
 80086ba:	4650      	mov	r0, sl
 80086bc:	f7f7 fdb0 	bl	8000220 <memchr>
 80086c0:	b140      	cbz	r0, 80086d4 <_vfiprintf_r+0x198>
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	eba0 000a 	sub.w	r0, r0, sl
 80086c8:	fa03 f000 	lsl.w	r0, r3, r0
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	4303      	orrs	r3, r0
 80086d0:	3401      	adds	r4, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d8:	482c      	ldr	r0, [pc, #176]	; (800878c <_vfiprintf_r+0x250>)
 80086da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086de:	2206      	movs	r2, #6
 80086e0:	f7f7 fd9e 	bl	8000220 <memchr>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d03f      	beq.n	8008768 <_vfiprintf_r+0x22c>
 80086e8:	4b29      	ldr	r3, [pc, #164]	; (8008790 <_vfiprintf_r+0x254>)
 80086ea:	bb1b      	cbnz	r3, 8008734 <_vfiprintf_r+0x1f8>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	3308      	adds	r3, #8
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fa:	443b      	add	r3, r7
 80086fc:	9309      	str	r3, [sp, #36]	; 0x24
 80086fe:	e767      	b.n	80085d0 <_vfiprintf_r+0x94>
 8008700:	fb0c 3202 	mla	r2, ip, r2, r3
 8008704:	460c      	mov	r4, r1
 8008706:	2001      	movs	r0, #1
 8008708:	e7a5      	b.n	8008656 <_vfiprintf_r+0x11a>
 800870a:	2300      	movs	r3, #0
 800870c:	3401      	adds	r4, #1
 800870e:	9305      	str	r3, [sp, #20]
 8008710:	4619      	mov	r1, r3
 8008712:	f04f 0c0a 	mov.w	ip, #10
 8008716:	4620      	mov	r0, r4
 8008718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871c:	3a30      	subs	r2, #48	; 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_vfiprintf_r+0x1ee>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c5      	beq.n	80086b2 <_vfiprintf_r+0x176>
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	e7c3      	b.n	80086b2 <_vfiprintf_r+0x176>
 800872a:	fb0c 2101 	mla	r1, ip, r1, r2
 800872e:	4604      	mov	r4, r0
 8008730:	2301      	movs	r3, #1
 8008732:	e7f0      	b.n	8008716 <_vfiprintf_r+0x1da>
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	462a      	mov	r2, r5
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <_vfiprintf_r+0x258>)
 800873c:	a904      	add	r1, sp, #16
 800873e:	4630      	mov	r0, r6
 8008740:	f7fd fb7e 	bl	8005e40 <_printf_float>
 8008744:	4607      	mov	r7, r0
 8008746:	1c78      	adds	r0, r7, #1
 8008748:	d1d6      	bne.n	80086f8 <_vfiprintf_r+0x1bc>
 800874a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800874c:	07d9      	lsls	r1, r3, #31
 800874e:	d405      	bmi.n	800875c <_vfiprintf_r+0x220>
 8008750:	89ab      	ldrh	r3, [r5, #12]
 8008752:	059a      	lsls	r2, r3, #22
 8008754:	d402      	bmi.n	800875c <_vfiprintf_r+0x220>
 8008756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008758:	f7ff f9d0 	bl	8007afc <__retarget_lock_release_recursive>
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	065b      	lsls	r3, r3, #25
 8008760:	f53f af12 	bmi.w	8008588 <_vfiprintf_r+0x4c>
 8008764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008766:	e711      	b.n	800858c <_vfiprintf_r+0x50>
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <_vfiprintf_r+0x258>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	4630      	mov	r0, r6
 8008774:	f7fd fe08 	bl	8006388 <_printf_i>
 8008778:	e7e4      	b.n	8008744 <_vfiprintf_r+0x208>
 800877a:	bf00      	nop
 800877c:	08009c58 	.word	0x08009c58
 8008780:	08009c78 	.word	0x08009c78
 8008784:	08009c38 	.word	0x08009c38
 8008788:	08009df4 	.word	0x08009df4
 800878c:	08009dfe 	.word	0x08009dfe
 8008790:	08005e41 	.word	0x08005e41
 8008794:	08008517 	.word	0x08008517
 8008798:	08009dfa 	.word	0x08009dfa

0800879c <__svfiscanf_r>:
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	461d      	mov	r5, r3
 80087a2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80087a4:	07df      	lsls	r7, r3, #31
 80087a6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80087aa:	4606      	mov	r6, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	4692      	mov	sl, r2
 80087b0:	d405      	bmi.n	80087be <__svfiscanf_r+0x22>
 80087b2:	898b      	ldrh	r3, [r1, #12]
 80087b4:	0598      	lsls	r0, r3, #22
 80087b6:	d402      	bmi.n	80087be <__svfiscanf_r+0x22>
 80087b8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80087ba:	f7ff f99e 	bl	8007afa <__retarget_lock_acquire_recursive>
 80087be:	2300      	movs	r3, #0
 80087c0:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80087c4:	4ba6      	ldr	r3, [pc, #664]	; (8008a60 <__svfiscanf_r+0x2c4>)
 80087c6:	93a0      	str	r3, [sp, #640]	; 0x280
 80087c8:	f10d 0804 	add.w	r8, sp, #4
 80087cc:	4ba5      	ldr	r3, [pc, #660]	; (8008a64 <__svfiscanf_r+0x2c8>)
 80087ce:	4fa6      	ldr	r7, [pc, #664]	; (8008a68 <__svfiscanf_r+0x2cc>)
 80087d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008a6c <__svfiscanf_r+0x2d0>
 80087d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80087d8:	93a1      	str	r3, [sp, #644]	; 0x284
 80087da:	9500      	str	r5, [sp, #0]
 80087dc:	f89a 3000 	ldrb.w	r3, [sl]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8173 	beq.w	8008acc <__svfiscanf_r+0x330>
 80087e6:	5dd9      	ldrb	r1, [r3, r7]
 80087e8:	f011 0108 	ands.w	r1, r1, #8
 80087ec:	f10a 0501 	add.w	r5, sl, #1
 80087f0:	d019      	beq.n	8008826 <__svfiscanf_r+0x8a>
 80087f2:	6863      	ldr	r3, [r4, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dd0f      	ble.n	8008818 <__svfiscanf_r+0x7c>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	5cba      	ldrb	r2, [r7, r2]
 80087fe:	0711      	lsls	r1, r2, #28
 8008800:	d401      	bmi.n	8008806 <__svfiscanf_r+0x6a>
 8008802:	46aa      	mov	sl, r5
 8008804:	e7ea      	b.n	80087dc <__svfiscanf_r+0x40>
 8008806:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008808:	3201      	adds	r2, #1
 800880a:	9245      	str	r2, [sp, #276]	; 0x114
 800880c:	6862      	ldr	r2, [r4, #4]
 800880e:	3301      	adds	r3, #1
 8008810:	3a01      	subs	r2, #1
 8008812:	6062      	str	r2, [r4, #4]
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	e7ec      	b.n	80087f2 <__svfiscanf_r+0x56>
 8008818:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800881a:	4621      	mov	r1, r4
 800881c:	4630      	mov	r0, r6
 800881e:	4798      	blx	r3
 8008820:	2800      	cmp	r0, #0
 8008822:	d0e9      	beq.n	80087f8 <__svfiscanf_r+0x5c>
 8008824:	e7ed      	b.n	8008802 <__svfiscanf_r+0x66>
 8008826:	2b25      	cmp	r3, #37	; 0x25
 8008828:	d012      	beq.n	8008850 <__svfiscanf_r+0xb4>
 800882a:	469a      	mov	sl, r3
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f340 8095 	ble.w	800895e <__svfiscanf_r+0x1c2>
 8008834:	6822      	ldr	r2, [r4, #0]
 8008836:	7813      	ldrb	r3, [r2, #0]
 8008838:	4553      	cmp	r3, sl
 800883a:	f040 8147 	bne.w	8008acc <__svfiscanf_r+0x330>
 800883e:	6863      	ldr	r3, [r4, #4]
 8008840:	3b01      	subs	r3, #1
 8008842:	6063      	str	r3, [r4, #4]
 8008844:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008846:	3201      	adds	r2, #1
 8008848:	3301      	adds	r3, #1
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	9345      	str	r3, [sp, #276]	; 0x114
 800884e:	e7d8      	b.n	8008802 <__svfiscanf_r+0x66>
 8008850:	9141      	str	r1, [sp, #260]	; 0x104
 8008852:	9143      	str	r1, [sp, #268]	; 0x10c
 8008854:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008858:	2b2a      	cmp	r3, #42	; 0x2a
 800885a:	bf02      	ittt	eq
 800885c:	2310      	moveq	r3, #16
 800885e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008860:	f10a 0502 	addeq.w	r5, sl, #2
 8008864:	220a      	movs	r2, #10
 8008866:	46aa      	mov	sl, r5
 8008868:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800886c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008870:	2b09      	cmp	r3, #9
 8008872:	d91e      	bls.n	80088b2 <__svfiscanf_r+0x116>
 8008874:	487d      	ldr	r0, [pc, #500]	; (8008a6c <__svfiscanf_r+0x2d0>)
 8008876:	2203      	movs	r2, #3
 8008878:	f7f7 fcd2 	bl	8000220 <memchr>
 800887c:	b140      	cbz	r0, 8008890 <__svfiscanf_r+0xf4>
 800887e:	2301      	movs	r3, #1
 8008880:	eba0 0009 	sub.w	r0, r0, r9
 8008884:	fa03 f000 	lsl.w	r0, r3, r0
 8008888:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800888a:	4318      	orrs	r0, r3
 800888c:	9041      	str	r0, [sp, #260]	; 0x104
 800888e:	4655      	mov	r5, sl
 8008890:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008894:	2b78      	cmp	r3, #120	; 0x78
 8008896:	d807      	bhi.n	80088a8 <__svfiscanf_r+0x10c>
 8008898:	2b57      	cmp	r3, #87	; 0x57
 800889a:	d811      	bhi.n	80088c0 <__svfiscanf_r+0x124>
 800889c:	2b25      	cmp	r3, #37	; 0x25
 800889e:	d0c4      	beq.n	800882a <__svfiscanf_r+0x8e>
 80088a0:	d858      	bhi.n	8008954 <__svfiscanf_r+0x1b8>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80c8 	beq.w	8008a38 <__svfiscanf_r+0x29c>
 80088a8:	2303      	movs	r3, #3
 80088aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80088ac:	230a      	movs	r3, #10
 80088ae:	9342      	str	r3, [sp, #264]	; 0x108
 80088b0:	e07c      	b.n	80089ac <__svfiscanf_r+0x210>
 80088b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80088b4:	fb02 1103 	mla	r1, r2, r3, r1
 80088b8:	3930      	subs	r1, #48	; 0x30
 80088ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80088bc:	4655      	mov	r5, sl
 80088be:	e7d2      	b.n	8008866 <__svfiscanf_r+0xca>
 80088c0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80088c4:	2a20      	cmp	r2, #32
 80088c6:	d8ef      	bhi.n	80088a8 <__svfiscanf_r+0x10c>
 80088c8:	a101      	add	r1, pc, #4	; (adr r1, 80088d0 <__svfiscanf_r+0x134>)
 80088ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	08008997 	.word	0x08008997
 80088d4:	080088a9 	.word	0x080088a9
 80088d8:	080088a9 	.word	0x080088a9
 80088dc:	080089f5 	.word	0x080089f5
 80088e0:	080088a9 	.word	0x080088a9
 80088e4:	080088a9 	.word	0x080088a9
 80088e8:	080088a9 	.word	0x080088a9
 80088ec:	080088a9 	.word	0x080088a9
 80088f0:	080088a9 	.word	0x080088a9
 80088f4:	080088a9 	.word	0x080088a9
 80088f8:	080088a9 	.word	0x080088a9
 80088fc:	08008a0b 	.word	0x08008a0b
 8008900:	080089e1 	.word	0x080089e1
 8008904:	0800895b 	.word	0x0800895b
 8008908:	0800895b 	.word	0x0800895b
 800890c:	0800895b 	.word	0x0800895b
 8008910:	080088a9 	.word	0x080088a9
 8008914:	080089e5 	.word	0x080089e5
 8008918:	080088a9 	.word	0x080088a9
 800891c:	080088a9 	.word	0x080088a9
 8008920:	080088a9 	.word	0x080088a9
 8008924:	080088a9 	.word	0x080088a9
 8008928:	08008a1b 	.word	0x08008a1b
 800892c:	080089ed 	.word	0x080089ed
 8008930:	0800898f 	.word	0x0800898f
 8008934:	080088a9 	.word	0x080088a9
 8008938:	080088a9 	.word	0x080088a9
 800893c:	08008a17 	.word	0x08008a17
 8008940:	080088a9 	.word	0x080088a9
 8008944:	080089e1 	.word	0x080089e1
 8008948:	080088a9 	.word	0x080088a9
 800894c:	080088a9 	.word	0x080088a9
 8008950:	08008997 	.word	0x08008997
 8008954:	3b45      	subs	r3, #69	; 0x45
 8008956:	2b02      	cmp	r3, #2
 8008958:	d8a6      	bhi.n	80088a8 <__svfiscanf_r+0x10c>
 800895a:	2305      	movs	r3, #5
 800895c:	e025      	b.n	80089aa <__svfiscanf_r+0x20e>
 800895e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008960:	4621      	mov	r1, r4
 8008962:	4630      	mov	r0, r6
 8008964:	4798      	blx	r3
 8008966:	2800      	cmp	r0, #0
 8008968:	f43f af64 	beq.w	8008834 <__svfiscanf_r+0x98>
 800896c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800896e:	07da      	lsls	r2, r3, #31
 8008970:	f140 80a4 	bpl.w	8008abc <__svfiscanf_r+0x320>
 8008974:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008976:	2800      	cmp	r0, #0
 8008978:	d067      	beq.n	8008a4a <__svfiscanf_r+0x2ae>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008980:	bf18      	it	ne
 8008982:	f04f 30ff 	movne.w	r0, #4294967295
 8008986:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008990:	f042 0220 	orr.w	r2, r2, #32
 8008994:	9241      	str	r2, [sp, #260]	; 0x104
 8008996:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800899c:	9241      	str	r2, [sp, #260]	; 0x104
 800899e:	2210      	movs	r2, #16
 80089a0:	2b6f      	cmp	r3, #111	; 0x6f
 80089a2:	9242      	str	r2, [sp, #264]	; 0x108
 80089a4:	bf34      	ite	cc
 80089a6:	2303      	movcc	r3, #3
 80089a8:	2304      	movcs	r3, #4
 80089aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dd4e      	ble.n	8008a50 <__svfiscanf_r+0x2b4>
 80089b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089b4:	065b      	lsls	r3, r3, #25
 80089b6:	d404      	bmi.n	80089c2 <__svfiscanf_r+0x226>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	781a      	ldrb	r2, [r3, #0]
 80089bc:	5cba      	ldrb	r2, [r7, r2]
 80089be:	0710      	lsls	r0, r2, #28
 80089c0:	d456      	bmi.n	8008a70 <__svfiscanf_r+0x2d4>
 80089c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	dc65      	bgt.n	8008a94 <__svfiscanf_r+0x2f8>
 80089c8:	466b      	mov	r3, sp
 80089ca:	4622      	mov	r2, r4
 80089cc:	a941      	add	r1, sp, #260	; 0x104
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 f8b2 	bl	8008b38 <_scanf_chars>
 80089d4:	2801      	cmp	r0, #1
 80089d6:	d079      	beq.n	8008acc <__svfiscanf_r+0x330>
 80089d8:	2802      	cmp	r0, #2
 80089da:	f47f af12 	bne.w	8008802 <__svfiscanf_r+0x66>
 80089de:	e7c5      	b.n	800896c <__svfiscanf_r+0x1d0>
 80089e0:	220a      	movs	r2, #10
 80089e2:	e7dd      	b.n	80089a0 <__svfiscanf_r+0x204>
 80089e4:	2300      	movs	r3, #0
 80089e6:	9342      	str	r3, [sp, #264]	; 0x108
 80089e8:	2303      	movs	r3, #3
 80089ea:	e7de      	b.n	80089aa <__svfiscanf_r+0x20e>
 80089ec:	2308      	movs	r3, #8
 80089ee:	9342      	str	r3, [sp, #264]	; 0x108
 80089f0:	2304      	movs	r3, #4
 80089f2:	e7da      	b.n	80089aa <__svfiscanf_r+0x20e>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4640      	mov	r0, r8
 80089f8:	f000 fa94 	bl	8008f24 <__sccl>
 80089fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a02:	9341      	str	r3, [sp, #260]	; 0x104
 8008a04:	4605      	mov	r5, r0
 8008a06:	2301      	movs	r3, #1
 8008a08:	e7cf      	b.n	80089aa <__svfiscanf_r+0x20e>
 8008a0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a10:	9341      	str	r3, [sp, #260]	; 0x104
 8008a12:	2300      	movs	r3, #0
 8008a14:	e7c9      	b.n	80089aa <__svfiscanf_r+0x20e>
 8008a16:	2302      	movs	r3, #2
 8008a18:	e7c7      	b.n	80089aa <__svfiscanf_r+0x20e>
 8008a1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008a1c:	06c3      	lsls	r3, r0, #27
 8008a1e:	f53f aef0 	bmi.w	8008802 <__svfiscanf_r+0x66>
 8008a22:	9b00      	ldr	r3, [sp, #0]
 8008a24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a26:	1d19      	adds	r1, r3, #4
 8008a28:	9100      	str	r1, [sp, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f010 0f01 	tst.w	r0, #1
 8008a30:	bf14      	ite	ne
 8008a32:	801a      	strhne	r2, [r3, #0]
 8008a34:	601a      	streq	r2, [r3, #0]
 8008a36:	e6e4      	b.n	8008802 <__svfiscanf_r+0x66>
 8008a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3a:	07d8      	lsls	r0, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <__svfiscanf_r+0x2ae>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	0599      	lsls	r1, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <__svfiscanf_r+0x2ae>
 8008a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a46:	f7ff f859 	bl	8007afc <__retarget_lock_release_recursive>
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	e79a      	b.n	8008986 <__svfiscanf_r+0x1ea>
 8008a50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a52:	4621      	mov	r1, r4
 8008a54:	4630      	mov	r0, r6
 8008a56:	4798      	blx	r3
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d0aa      	beq.n	80089b2 <__svfiscanf_r+0x216>
 8008a5c:	e786      	b.n	800896c <__svfiscanf_r+0x1d0>
 8008a5e:	bf00      	nop
 8008a60:	08009281 	.word	0x08009281
 8008a64:	08008df1 	.word	0x08008df1
 8008a68:	08009e5d 	.word	0x08009e5d
 8008a6c:	08009dfa 	.word	0x08009dfa
 8008a70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a72:	3201      	adds	r2, #1
 8008a74:	9245      	str	r2, [sp, #276]	; 0x114
 8008a76:	6862      	ldr	r2, [r4, #4]
 8008a78:	3a01      	subs	r2, #1
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	6062      	str	r2, [r4, #4]
 8008a7e:	dd02      	ble.n	8008a86 <__svfiscanf_r+0x2ea>
 8008a80:	3301      	adds	r3, #1
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	e798      	b.n	80089b8 <__svfiscanf_r+0x21c>
 8008a86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	4798      	blx	r3
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d092      	beq.n	80089b8 <__svfiscanf_r+0x21c>
 8008a92:	e76b      	b.n	800896c <__svfiscanf_r+0x1d0>
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	dc06      	bgt.n	8008aa6 <__svfiscanf_r+0x30a>
 8008a98:	466b      	mov	r3, sp
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	a941      	add	r1, sp, #260	; 0x104
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 f8a4 	bl	8008bec <_scanf_i>
 8008aa4:	e796      	b.n	80089d4 <__svfiscanf_r+0x238>
 8008aa6:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <__svfiscanf_r+0x348>)
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f43f aeaa 	beq.w	8008802 <__svfiscanf_r+0x66>
 8008aae:	466b      	mov	r3, sp
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	a941      	add	r1, sp, #260	; 0x104
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f3af 8000 	nop.w
 8008aba:	e78b      	b.n	80089d4 <__svfiscanf_r+0x238>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	0599      	lsls	r1, r3, #22
 8008ac0:	f53f af58 	bmi.w	8008974 <__svfiscanf_r+0x1d8>
 8008ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac6:	f7ff f819 	bl	8007afc <__retarget_lock_release_recursive>
 8008aca:	e753      	b.n	8008974 <__svfiscanf_r+0x1d8>
 8008acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ace:	07da      	lsls	r2, r3, #31
 8008ad0:	d405      	bmi.n	8008ade <__svfiscanf_r+0x342>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	059b      	lsls	r3, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <__svfiscanf_r+0x342>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ada:	f7ff f80f 	bl	8007afc <__retarget_lock_release_recursive>
 8008ade:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ae0:	e751      	b.n	8008986 <__svfiscanf_r+0x1ea>
 8008ae2:	bf00      	nop
 8008ae4:	00000000 	.word	0x00000000

08008ae8 <_vfiscanf_r>:
 8008ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	4605      	mov	r5, r0
 8008aee:	b138      	cbz	r0, 8008b00 <_vfiscanf_r+0x18>
 8008af0:	6981      	ldr	r1, [r0, #24]
 8008af2:	b929      	cbnz	r1, 8008b00 <_vfiscanf_r+0x18>
 8008af4:	e9cd 2300 	strd	r2, r3, [sp]
 8008af8:	f7fe ff40 	bl	800797c <__sinit>
 8008afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b00:	490a      	ldr	r1, [pc, #40]	; (8008b2c <_vfiscanf_r+0x44>)
 8008b02:	428c      	cmp	r4, r1
 8008b04:	d107      	bne.n	8008b16 <_vfiscanf_r+0x2e>
 8008b06:	686c      	ldr	r4, [r5, #4]
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	b003      	add	sp, #12
 8008b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b12:	f7ff be43 	b.w	800879c <__svfiscanf_r>
 8008b16:	4906      	ldr	r1, [pc, #24]	; (8008b30 <_vfiscanf_r+0x48>)
 8008b18:	428c      	cmp	r4, r1
 8008b1a:	d101      	bne.n	8008b20 <_vfiscanf_r+0x38>
 8008b1c:	68ac      	ldr	r4, [r5, #8]
 8008b1e:	e7f3      	b.n	8008b08 <_vfiscanf_r+0x20>
 8008b20:	4904      	ldr	r1, [pc, #16]	; (8008b34 <_vfiscanf_r+0x4c>)
 8008b22:	428c      	cmp	r4, r1
 8008b24:	bf08      	it	eq
 8008b26:	68ec      	ldreq	r4, [r5, #12]
 8008b28:	e7ee      	b.n	8008b08 <_vfiscanf_r+0x20>
 8008b2a:	bf00      	nop
 8008b2c:	08009c58 	.word	0x08009c58
 8008b30:	08009c78 	.word	0x08009c78
 8008b34:	08009c38 	.word	0x08009c38

08008b38 <_scanf_chars>:
 8008b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	4615      	mov	r5, r2
 8008b3e:	688a      	ldr	r2, [r1, #8]
 8008b40:	4680      	mov	r8, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	b932      	cbnz	r2, 8008b54 <_scanf_chars+0x1c>
 8008b46:	698a      	ldr	r2, [r1, #24]
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2201      	moveq	r2, #1
 8008b4e:	f04f 32ff 	movne.w	r2, #4294967295
 8008b52:	608a      	str	r2, [r1, #8]
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008be8 <_scanf_chars+0xb0>
 8008b5a:	06d1      	lsls	r1, r2, #27
 8008b5c:	bf5f      	itttt	pl
 8008b5e:	681a      	ldrpl	r2, [r3, #0]
 8008b60:	1d11      	addpl	r1, r2, #4
 8008b62:	6019      	strpl	r1, [r3, #0]
 8008b64:	6816      	ldrpl	r6, [r2, #0]
 8008b66:	2700      	movs	r7, #0
 8008b68:	69a0      	ldr	r0, [r4, #24]
 8008b6a:	b188      	cbz	r0, 8008b90 <_scanf_chars+0x58>
 8008b6c:	2801      	cmp	r0, #1
 8008b6e:	d107      	bne.n	8008b80 <_scanf_chars+0x48>
 8008b70:	682a      	ldr	r2, [r5, #0]
 8008b72:	7811      	ldrb	r1, [r2, #0]
 8008b74:	6962      	ldr	r2, [r4, #20]
 8008b76:	5c52      	ldrb	r2, [r2, r1]
 8008b78:	b952      	cbnz	r2, 8008b90 <_scanf_chars+0x58>
 8008b7a:	2f00      	cmp	r7, #0
 8008b7c:	d031      	beq.n	8008be2 <_scanf_chars+0xaa>
 8008b7e:	e022      	b.n	8008bc6 <_scanf_chars+0x8e>
 8008b80:	2802      	cmp	r0, #2
 8008b82:	d120      	bne.n	8008bc6 <_scanf_chars+0x8e>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008b8c:	071b      	lsls	r3, r3, #28
 8008b8e:	d41a      	bmi.n	8008bc6 <_scanf_chars+0x8e>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	06da      	lsls	r2, r3, #27
 8008b94:	bf5e      	ittt	pl
 8008b96:	682b      	ldrpl	r3, [r5, #0]
 8008b98:	781b      	ldrbpl	r3, [r3, #0]
 8008b9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b9e:	682a      	ldr	r2, [r5, #0]
 8008ba0:	686b      	ldr	r3, [r5, #4]
 8008ba2:	3201      	adds	r2, #1
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	68a2      	ldr	r2, [r4, #8]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	3a01      	subs	r2, #1
 8008bac:	606b      	str	r3, [r5, #4]
 8008bae:	3701      	adds	r7, #1
 8008bb0:	60a2      	str	r2, [r4, #8]
 8008bb2:	b142      	cbz	r2, 8008bc6 <_scanf_chars+0x8e>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dcd7      	bgt.n	8008b68 <_scanf_chars+0x30>
 8008bb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4798      	blx	r3
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0d0      	beq.n	8008b68 <_scanf_chars+0x30>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f013 0310 	ands.w	r3, r3, #16
 8008bcc:	d105      	bne.n	8008bda <_scanf_chars+0xa2>
 8008bce:	68e2      	ldr	r2, [r4, #12]
 8008bd0:	3201      	adds	r2, #1
 8008bd2:	60e2      	str	r2, [r4, #12]
 8008bd4:	69a2      	ldr	r2, [r4, #24]
 8008bd6:	b102      	cbz	r2, 8008bda <_scanf_chars+0xa2>
 8008bd8:	7033      	strb	r3, [r6, #0]
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	443b      	add	r3, r7
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	2000      	movs	r0, #0
 8008be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be6:	bf00      	nop
 8008be8:	08009e5d 	.word	0x08009e5d

08008bec <_scanf_i>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	4b76      	ldr	r3, [pc, #472]	; (8008dcc <_scanf_i+0x1e0>)
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	4616      	mov	r6, r2
 8008bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	ab03      	add	r3, sp, #12
 8008c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008c06:	4b72      	ldr	r3, [pc, #456]	; (8008dd0 <_scanf_i+0x1e4>)
 8008c08:	69a1      	ldr	r1, [r4, #24]
 8008c0a:	4a72      	ldr	r2, [pc, #456]	; (8008dd4 <_scanf_i+0x1e8>)
 8008c0c:	2903      	cmp	r1, #3
 8008c0e:	bf18      	it	ne
 8008c10:	461a      	movne	r2, r3
 8008c12:	68a3      	ldr	r3, [r4, #8]
 8008c14:	9201      	str	r2, [sp, #4]
 8008c16:	1e5a      	subs	r2, r3, #1
 8008c18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c1c:	bf88      	it	hi
 8008c1e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c22:	4627      	mov	r7, r4
 8008c24:	bf82      	ittt	hi
 8008c26:	eb03 0905 	addhi.w	r9, r3, r5
 8008c2a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c2e:	60a3      	strhi	r3, [r4, #8]
 8008c30:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008c34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008c38:	bf98      	it	ls
 8008c3a:	f04f 0900 	movls.w	r9, #0
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	463d      	mov	r5, r7
 8008c42:	f04f 0b00 	mov.w	fp, #0
 8008c46:	6831      	ldr	r1, [r6, #0]
 8008c48:	ab03      	add	r3, sp, #12
 8008c4a:	7809      	ldrb	r1, [r1, #0]
 8008c4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f7f7 fae5 	bl	8000220 <memchr>
 8008c56:	b328      	cbz	r0, 8008ca4 <_scanf_i+0xb8>
 8008c58:	f1bb 0f01 	cmp.w	fp, #1
 8008c5c:	d159      	bne.n	8008d12 <_scanf_i+0x126>
 8008c5e:	6862      	ldr	r2, [r4, #4]
 8008c60:	b92a      	cbnz	r2, 8008c6e <_scanf_i+0x82>
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	2308      	movs	r3, #8
 8008c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6022      	str	r2, [r4, #0]
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	68a2      	ldr	r2, [r4, #8]
 8008c78:	1e51      	subs	r1, r2, #1
 8008c7a:	60a1      	str	r1, [r4, #8]
 8008c7c:	b192      	cbz	r2, 8008ca4 <_scanf_i+0xb8>
 8008c7e:	6832      	ldr	r2, [r6, #0]
 8008c80:	1c51      	adds	r1, r2, #1
 8008c82:	6031      	str	r1, [r6, #0]
 8008c84:	7812      	ldrb	r2, [r2, #0]
 8008c86:	f805 2b01 	strb.w	r2, [r5], #1
 8008c8a:	6872      	ldr	r2, [r6, #4]
 8008c8c:	3a01      	subs	r2, #1
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	6072      	str	r2, [r6, #4]
 8008c92:	dc07      	bgt.n	8008ca4 <_scanf_i+0xb8>
 8008c94:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4790      	blx	r2
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f040 8085 	bne.w	8008dae <_scanf_i+0x1c2>
 8008ca4:	f10b 0b01 	add.w	fp, fp, #1
 8008ca8:	f1bb 0f03 	cmp.w	fp, #3
 8008cac:	d1cb      	bne.n	8008c46 <_scanf_i+0x5a>
 8008cae:	6863      	ldr	r3, [r4, #4]
 8008cb0:	b90b      	cbnz	r3, 8008cb6 <_scanf_i+0xca>
 8008cb2:	230a      	movs	r3, #10
 8008cb4:	6063      	str	r3, [r4, #4]
 8008cb6:	6863      	ldr	r3, [r4, #4]
 8008cb8:	4947      	ldr	r1, [pc, #284]	; (8008dd8 <_scanf_i+0x1ec>)
 8008cba:	6960      	ldr	r0, [r4, #20]
 8008cbc:	1ac9      	subs	r1, r1, r3
 8008cbe:	f000 f931 	bl	8008f24 <__sccl>
 8008cc2:	f04f 0b00 	mov.w	fp, #0
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d03d      	beq.n	8008d4a <_scanf_i+0x15e>
 8008cce:	6831      	ldr	r1, [r6, #0]
 8008cd0:	6960      	ldr	r0, [r4, #20]
 8008cd2:	f891 c000 	ldrb.w	ip, [r1]
 8008cd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d035      	beq.n	8008d4a <_scanf_i+0x15e>
 8008cde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008ce2:	d124      	bne.n	8008d2e <_scanf_i+0x142>
 8008ce4:	0510      	lsls	r0, r2, #20
 8008ce6:	d522      	bpl.n	8008d2e <_scanf_i+0x142>
 8008ce8:	f10b 0b01 	add.w	fp, fp, #1
 8008cec:	f1b9 0f00 	cmp.w	r9, #0
 8008cf0:	d003      	beq.n	8008cfa <_scanf_i+0x10e>
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cf8:	60a3      	str	r3, [r4, #8]
 8008cfa:	6873      	ldr	r3, [r6, #4]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	6073      	str	r3, [r6, #4]
 8008d02:	dd1b      	ble.n	8008d3c <_scanf_i+0x150>
 8008d04:	6833      	ldr	r3, [r6, #0]
 8008d06:	3301      	adds	r3, #1
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	60a3      	str	r3, [r4, #8]
 8008d10:	e7d9      	b.n	8008cc6 <_scanf_i+0xda>
 8008d12:	f1bb 0f02 	cmp.w	fp, #2
 8008d16:	d1ae      	bne.n	8008c76 <_scanf_i+0x8a>
 8008d18:	6822      	ldr	r2, [r4, #0]
 8008d1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008d1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d22:	d1bf      	bne.n	8008ca4 <_scanf_i+0xb8>
 8008d24:	2310      	movs	r3, #16
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d2c:	e7a2      	b.n	8008c74 <_scanf_i+0x88>
 8008d2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008d32:	6022      	str	r2, [r4, #0]
 8008d34:	780b      	ldrb	r3, [r1, #0]
 8008d36:	f805 3b01 	strb.w	r3, [r5], #1
 8008d3a:	e7de      	b.n	8008cfa <_scanf_i+0x10e>
 8008d3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d40:	4631      	mov	r1, r6
 8008d42:	4650      	mov	r0, sl
 8008d44:	4798      	blx	r3
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0df      	beq.n	8008d0a <_scanf_i+0x11e>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	05db      	lsls	r3, r3, #23
 8008d4e:	d50d      	bpl.n	8008d6c <_scanf_i+0x180>
 8008d50:	42bd      	cmp	r5, r7
 8008d52:	d909      	bls.n	8008d68 <_scanf_i+0x17c>
 8008d54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4650      	mov	r0, sl
 8008d60:	4798      	blx	r3
 8008d62:	f105 39ff 	add.w	r9, r5, #4294967295
 8008d66:	464d      	mov	r5, r9
 8008d68:	42bd      	cmp	r5, r7
 8008d6a:	d02d      	beq.n	8008dc8 <_scanf_i+0x1dc>
 8008d6c:	6822      	ldr	r2, [r4, #0]
 8008d6e:	f012 0210 	ands.w	r2, r2, #16
 8008d72:	d113      	bne.n	8008d9c <_scanf_i+0x1b0>
 8008d74:	702a      	strb	r2, [r5, #0]
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	9e01      	ldr	r6, [sp, #4]
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	47b0      	blx	r6
 8008d80:	6821      	ldr	r1, [r4, #0]
 8008d82:	f8d8 3000 	ldr.w	r3, [r8]
 8008d86:	f011 0f20 	tst.w	r1, #32
 8008d8a:	d013      	beq.n	8008db4 <_scanf_i+0x1c8>
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	f8c8 2000 	str.w	r2, [r8]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6018      	str	r0, [r3, #0]
 8008d96:	68e3      	ldr	r3, [r4, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60e3      	str	r3, [r4, #12]
 8008d9c:	1bed      	subs	r5, r5, r7
 8008d9e:	44ab      	add	fp, r5
 8008da0:	6925      	ldr	r5, [r4, #16]
 8008da2:	445d      	add	r5, fp
 8008da4:	6125      	str	r5, [r4, #16]
 8008da6:	2000      	movs	r0, #0
 8008da8:	b007      	add	sp, #28
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	f04f 0b00 	mov.w	fp, #0
 8008db2:	e7ca      	b.n	8008d4a <_scanf_i+0x15e>
 8008db4:	1d1a      	adds	r2, r3, #4
 8008db6:	f8c8 2000 	str.w	r2, [r8]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f011 0f01 	tst.w	r1, #1
 8008dc0:	bf14      	ite	ne
 8008dc2:	8018      	strhne	r0, [r3, #0]
 8008dc4:	6018      	streq	r0, [r3, #0]
 8008dc6:	e7e6      	b.n	8008d96 <_scanf_i+0x1aa>
 8008dc8:	2001      	movs	r0, #1
 8008dca:	e7ed      	b.n	8008da8 <_scanf_i+0x1bc>
 8008dcc:	08009b4c 	.word	0x08009b4c
 8008dd0:	08009209 	.word	0x08009209
 8008dd4:	08009121 	.word	0x08009121
 8008dd8:	08009e1e 	.word	0x08009e1e

08008ddc <lflush>:
 8008ddc:	8983      	ldrh	r3, [r0, #12]
 8008dde:	f003 0309 	and.w	r3, r3, #9
 8008de2:	2b09      	cmp	r3, #9
 8008de4:	d101      	bne.n	8008dea <lflush+0xe>
 8008de6:	f7fe bd5f 	b.w	80078a8 <fflush>
 8008dea:	2000      	movs	r0, #0
 8008dec:	4770      	bx	lr
	...

08008df0 <__srefill_r>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	460c      	mov	r4, r1
 8008df4:	4605      	mov	r5, r0
 8008df6:	b118      	cbz	r0, 8008e00 <__srefill_r+0x10>
 8008df8:	6983      	ldr	r3, [r0, #24]
 8008dfa:	b90b      	cbnz	r3, 8008e00 <__srefill_r+0x10>
 8008dfc:	f7fe fdbe 	bl	800797c <__sinit>
 8008e00:	4b3b      	ldr	r3, [pc, #236]	; (8008ef0 <__srefill_r+0x100>)
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d10a      	bne.n	8008e1c <__srefill_r+0x2c>
 8008e06:	686c      	ldr	r4, [r5, #4]
 8008e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	069e      	lsls	r6, r3, #26
 8008e14:	d50c      	bpl.n	8008e30 <__srefill_r+0x40>
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	e066      	b.n	8008eea <__srefill_r+0xfa>
 8008e1c:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <__srefill_r+0x104>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d101      	bne.n	8008e26 <__srefill_r+0x36>
 8008e22:	68ac      	ldr	r4, [r5, #8]
 8008e24:	e7f0      	b.n	8008e08 <__srefill_r+0x18>
 8008e26:	4b34      	ldr	r3, [pc, #208]	; (8008ef8 <__srefill_r+0x108>)
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	bf08      	it	eq
 8008e2c:	68ec      	ldreq	r4, [r5, #12]
 8008e2e:	e7eb      	b.n	8008e08 <__srefill_r+0x18>
 8008e30:	0758      	lsls	r0, r3, #29
 8008e32:	d448      	bmi.n	8008ec6 <__srefill_r+0xd6>
 8008e34:	06d9      	lsls	r1, r3, #27
 8008e36:	d405      	bmi.n	8008e44 <__srefill_r+0x54>
 8008e38:	2309      	movs	r3, #9
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	e7e8      	b.n	8008e16 <__srefill_r+0x26>
 8008e44:	071a      	lsls	r2, r3, #28
 8008e46:	d50b      	bpl.n	8008e60 <__srefill_r+0x70>
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f7fe fcf0 	bl	8007830 <_fflush_r>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d1e0      	bne.n	8008e16 <__srefill_r+0x26>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	60a0      	str	r0, [r4, #8]
 8008e58:	f023 0308 	bic.w	r3, r3, #8
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	61a0      	str	r0, [r4, #24]
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f043 0304 	orr.w	r3, r3, #4
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	b91b      	cbnz	r3, 8008e74 <__srefill_r+0x84>
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f7fe fe6a 	bl	8007b48 <__smakebuf_r>
 8008e74:	89a6      	ldrh	r6, [r4, #12]
 8008e76:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008e7a:	07b3      	lsls	r3, r6, #30
 8008e7c:	d00f      	beq.n	8008e9e <__srefill_r+0xae>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	4b1e      	ldr	r3, [pc, #120]	; (8008efc <__srefill_r+0x10c>)
 8008e84:	491e      	ldr	r1, [pc, #120]	; (8008f00 <__srefill_r+0x110>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	f006 0609 	and.w	r6, r6, #9
 8008e8c:	f7fe fdf4 	bl	8007a78 <_fwalk>
 8008e90:	2e09      	cmp	r6, #9
 8008e92:	81a7      	strh	r7, [r4, #12]
 8008e94:	d103      	bne.n	8008e9e <__srefill_r+0xae>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f7fe fc43 	bl	8007724 <__sflush_r>
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ea2:	6963      	ldr	r3, [r4, #20]
 8008ea4:	6a21      	ldr	r1, [r4, #32]
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b0      	blx	r6
 8008eac:	2800      	cmp	r0, #0
 8008eae:	6060      	str	r0, [r4, #4]
 8008eb0:	dc1c      	bgt.n	8008eec <__srefill_r+0xfc>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	bf17      	itett	ne
 8008eb8:	2200      	movne	r2, #0
 8008eba:	f043 0320 	orreq.w	r3, r3, #32
 8008ebe:	6062      	strne	r2, [r4, #4]
 8008ec0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008ec4:	e7bc      	b.n	8008e40 <__srefill_r+0x50>
 8008ec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	d0cd      	beq.n	8008e68 <__srefill_r+0x78>
 8008ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	d002      	beq.n	8008eda <__srefill_r+0xea>
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7ff fa27 	bl	8008328 <_free_r>
 8008eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	2000      	movs	r0, #0
 8008ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c0      	beq.n	8008e68 <__srefill_r+0x78>
 8008ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eec:	2000      	movs	r0, #0
 8008eee:	e7fc      	b.n	8008eea <__srefill_r+0xfa>
 8008ef0:	08009c58 	.word	0x08009c58
 8008ef4:	08009c78 	.word	0x08009c78
 8008ef8:	08009c38 	.word	0x08009c38
 8008efc:	08009b70 	.word	0x08009b70
 8008f00:	08008ddd 	.word	0x08008ddd

08008f04 <_sbrk_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d06      	ldr	r5, [pc, #24]	; (8008f20 <_sbrk_r+0x1c>)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	f7f9 f96a 	bl	80021e8 <_sbrk>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_sbrk_r+0x1a>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_sbrk_r+0x1a>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000468 	.word	0x20000468

08008f24 <__sccl>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	780b      	ldrb	r3, [r1, #0]
 8008f28:	4604      	mov	r4, r0
 8008f2a:	2b5e      	cmp	r3, #94	; 0x5e
 8008f2c:	bf0b      	itete	eq
 8008f2e:	784b      	ldrbeq	r3, [r1, #1]
 8008f30:	1c48      	addne	r0, r1, #1
 8008f32:	1c88      	addeq	r0, r1, #2
 8008f34:	2200      	movne	r2, #0
 8008f36:	bf08      	it	eq
 8008f38:	2201      	moveq	r2, #1
 8008f3a:	1e61      	subs	r1, r4, #1
 8008f3c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008f40:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008f44:	42a9      	cmp	r1, r5
 8008f46:	d1fb      	bne.n	8008f40 <__sccl+0x1c>
 8008f48:	b90b      	cbnz	r3, 8008f4e <__sccl+0x2a>
 8008f4a:	3801      	subs	r0, #1
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
 8008f4e:	f082 0201 	eor.w	r2, r2, #1
 8008f52:	54e2      	strb	r2, [r4, r3]
 8008f54:	4605      	mov	r5, r0
 8008f56:	4628      	mov	r0, r5
 8008f58:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008f5c:	292d      	cmp	r1, #45	; 0x2d
 8008f5e:	d006      	beq.n	8008f6e <__sccl+0x4a>
 8008f60:	295d      	cmp	r1, #93	; 0x5d
 8008f62:	d0f3      	beq.n	8008f4c <__sccl+0x28>
 8008f64:	b909      	cbnz	r1, 8008f6a <__sccl+0x46>
 8008f66:	4628      	mov	r0, r5
 8008f68:	e7f0      	b.n	8008f4c <__sccl+0x28>
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	e7f1      	b.n	8008f52 <__sccl+0x2e>
 8008f6e:	786e      	ldrb	r6, [r5, #1]
 8008f70:	2e5d      	cmp	r6, #93	; 0x5d
 8008f72:	d0fa      	beq.n	8008f6a <__sccl+0x46>
 8008f74:	42b3      	cmp	r3, r6
 8008f76:	dcf8      	bgt.n	8008f6a <__sccl+0x46>
 8008f78:	3502      	adds	r5, #2
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	3101      	adds	r1, #1
 8008f7e:	428e      	cmp	r6, r1
 8008f80:	5462      	strb	r2, [r4, r1]
 8008f82:	dcfb      	bgt.n	8008f7c <__sccl+0x58>
 8008f84:	1af1      	subs	r1, r6, r3
 8008f86:	3901      	subs	r1, #1
 8008f88:	1c58      	adds	r0, r3, #1
 8008f8a:	42b3      	cmp	r3, r6
 8008f8c:	bfa8      	it	ge
 8008f8e:	2100      	movge	r1, #0
 8008f90:	1843      	adds	r3, r0, r1
 8008f92:	e7e0      	b.n	8008f56 <__sccl+0x32>

08008f94 <__sread>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	460c      	mov	r4, r1
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	f000 fadc 	bl	8009558 <_read_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	bfab      	itete	ge
 8008fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fa8:	181b      	addge	r3, r3, r0
 8008faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fae:	bfac      	ite	ge
 8008fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fb2:	81a3      	strhlt	r3, [r4, #12]
 8008fb4:	bd10      	pop	{r4, pc}

08008fb6 <__swrite>:
 8008fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fba:	461f      	mov	r7, r3
 8008fbc:	898b      	ldrh	r3, [r1, #12]
 8008fbe:	05db      	lsls	r3, r3, #23
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	d505      	bpl.n	8008fd4 <__swrite+0x1e>
 8008fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fcc:	2302      	movs	r3, #2
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f000 fa62 	bl	8009498 <_lseek_r>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	f000 b9e1 	b.w	80093b0 <_write_r>

08008fee <__sseek>:
 8008fee:	b510      	push	{r4, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff6:	f000 fa4f 	bl	8009498 <_lseek_r>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	bf15      	itete	ne
 8009000:	6560      	strne	r0, [r4, #84]	; 0x54
 8009002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800900a:	81a3      	strheq	r3, [r4, #12]
 800900c:	bf18      	it	ne
 800900e:	81a3      	strhne	r3, [r4, #12]
 8009010:	bd10      	pop	{r4, pc}

08009012 <__sclose>:
 8009012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009016:	f000 b9fb 	b.w	8009410 <_close_r>
	...

0800901c <_strtol_l.constprop.0>:
 800901c:	2b01      	cmp	r3, #1
 800901e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009022:	d001      	beq.n	8009028 <_strtol_l.constprop.0+0xc>
 8009024:	2b24      	cmp	r3, #36	; 0x24
 8009026:	d906      	bls.n	8009036 <_strtol_l.constprop.0+0x1a>
 8009028:	f7fc fe38 	bl	8005c9c <__errno>
 800902c:	2316      	movs	r3, #22
 800902e:	6003      	str	r3, [r0, #0]
 8009030:	2000      	movs	r0, #0
 8009032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009036:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800911c <_strtol_l.constprop.0+0x100>
 800903a:	460d      	mov	r5, r1
 800903c:	462e      	mov	r6, r5
 800903e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009042:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009046:	f017 0708 	ands.w	r7, r7, #8
 800904a:	d1f7      	bne.n	800903c <_strtol_l.constprop.0+0x20>
 800904c:	2c2d      	cmp	r4, #45	; 0x2d
 800904e:	d132      	bne.n	80090b6 <_strtol_l.constprop.0+0x9a>
 8009050:	782c      	ldrb	r4, [r5, #0]
 8009052:	2701      	movs	r7, #1
 8009054:	1cb5      	adds	r5, r6, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d05b      	beq.n	8009112 <_strtol_l.constprop.0+0xf6>
 800905a:	2b10      	cmp	r3, #16
 800905c:	d109      	bne.n	8009072 <_strtol_l.constprop.0+0x56>
 800905e:	2c30      	cmp	r4, #48	; 0x30
 8009060:	d107      	bne.n	8009072 <_strtol_l.constprop.0+0x56>
 8009062:	782c      	ldrb	r4, [r5, #0]
 8009064:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009068:	2c58      	cmp	r4, #88	; 0x58
 800906a:	d14d      	bne.n	8009108 <_strtol_l.constprop.0+0xec>
 800906c:	786c      	ldrb	r4, [r5, #1]
 800906e:	2310      	movs	r3, #16
 8009070:	3502      	adds	r5, #2
 8009072:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009076:	f108 38ff 	add.w	r8, r8, #4294967295
 800907a:	f04f 0c00 	mov.w	ip, #0
 800907e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009082:	4666      	mov	r6, ip
 8009084:	fb03 8a19 	mls	sl, r3, r9, r8
 8009088:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800908c:	f1be 0f09 	cmp.w	lr, #9
 8009090:	d816      	bhi.n	80090c0 <_strtol_l.constprop.0+0xa4>
 8009092:	4674      	mov	r4, lr
 8009094:	42a3      	cmp	r3, r4
 8009096:	dd24      	ble.n	80090e2 <_strtol_l.constprop.0+0xc6>
 8009098:	f1bc 0f00 	cmp.w	ip, #0
 800909c:	db1e      	blt.n	80090dc <_strtol_l.constprop.0+0xc0>
 800909e:	45b1      	cmp	r9, r6
 80090a0:	d31c      	bcc.n	80090dc <_strtol_l.constprop.0+0xc0>
 80090a2:	d101      	bne.n	80090a8 <_strtol_l.constprop.0+0x8c>
 80090a4:	45a2      	cmp	sl, r4
 80090a6:	db19      	blt.n	80090dc <_strtol_l.constprop.0+0xc0>
 80090a8:	fb06 4603 	mla	r6, r6, r3, r4
 80090ac:	f04f 0c01 	mov.w	ip, #1
 80090b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090b4:	e7e8      	b.n	8009088 <_strtol_l.constprop.0+0x6c>
 80090b6:	2c2b      	cmp	r4, #43	; 0x2b
 80090b8:	bf04      	itt	eq
 80090ba:	782c      	ldrbeq	r4, [r5, #0]
 80090bc:	1cb5      	addeq	r5, r6, #2
 80090be:	e7ca      	b.n	8009056 <_strtol_l.constprop.0+0x3a>
 80090c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80090c4:	f1be 0f19 	cmp.w	lr, #25
 80090c8:	d801      	bhi.n	80090ce <_strtol_l.constprop.0+0xb2>
 80090ca:	3c37      	subs	r4, #55	; 0x37
 80090cc:	e7e2      	b.n	8009094 <_strtol_l.constprop.0+0x78>
 80090ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80090d2:	f1be 0f19 	cmp.w	lr, #25
 80090d6:	d804      	bhi.n	80090e2 <_strtol_l.constprop.0+0xc6>
 80090d8:	3c57      	subs	r4, #87	; 0x57
 80090da:	e7db      	b.n	8009094 <_strtol_l.constprop.0+0x78>
 80090dc:	f04f 3cff 	mov.w	ip, #4294967295
 80090e0:	e7e6      	b.n	80090b0 <_strtol_l.constprop.0+0x94>
 80090e2:	f1bc 0f00 	cmp.w	ip, #0
 80090e6:	da05      	bge.n	80090f4 <_strtol_l.constprop.0+0xd8>
 80090e8:	2322      	movs	r3, #34	; 0x22
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	4646      	mov	r6, r8
 80090ee:	b942      	cbnz	r2, 8009102 <_strtol_l.constprop.0+0xe6>
 80090f0:	4630      	mov	r0, r6
 80090f2:	e79e      	b.n	8009032 <_strtol_l.constprop.0+0x16>
 80090f4:	b107      	cbz	r7, 80090f8 <_strtol_l.constprop.0+0xdc>
 80090f6:	4276      	negs	r6, r6
 80090f8:	2a00      	cmp	r2, #0
 80090fa:	d0f9      	beq.n	80090f0 <_strtol_l.constprop.0+0xd4>
 80090fc:	f1bc 0f00 	cmp.w	ip, #0
 8009100:	d000      	beq.n	8009104 <_strtol_l.constprop.0+0xe8>
 8009102:	1e69      	subs	r1, r5, #1
 8009104:	6011      	str	r1, [r2, #0]
 8009106:	e7f3      	b.n	80090f0 <_strtol_l.constprop.0+0xd4>
 8009108:	2430      	movs	r4, #48	; 0x30
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1b1      	bne.n	8009072 <_strtol_l.constprop.0+0x56>
 800910e:	2308      	movs	r3, #8
 8009110:	e7af      	b.n	8009072 <_strtol_l.constprop.0+0x56>
 8009112:	2c30      	cmp	r4, #48	; 0x30
 8009114:	d0a5      	beq.n	8009062 <_strtol_l.constprop.0+0x46>
 8009116:	230a      	movs	r3, #10
 8009118:	e7ab      	b.n	8009072 <_strtol_l.constprop.0+0x56>
 800911a:	bf00      	nop
 800911c:	08009e5d 	.word	0x08009e5d

08009120 <_strtol_r>:
 8009120:	f7ff bf7c 	b.w	800901c <_strtol_l.constprop.0>

08009124 <_strtoul_l.constprop.0>:
 8009124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009128:	4f36      	ldr	r7, [pc, #216]	; (8009204 <_strtoul_l.constprop.0+0xe0>)
 800912a:	4686      	mov	lr, r0
 800912c:	460d      	mov	r5, r1
 800912e:	4628      	mov	r0, r5
 8009130:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009134:	5de6      	ldrb	r6, [r4, r7]
 8009136:	f016 0608 	ands.w	r6, r6, #8
 800913a:	d1f8      	bne.n	800912e <_strtoul_l.constprop.0+0xa>
 800913c:	2c2d      	cmp	r4, #45	; 0x2d
 800913e:	d12f      	bne.n	80091a0 <_strtoul_l.constprop.0+0x7c>
 8009140:	782c      	ldrb	r4, [r5, #0]
 8009142:	2601      	movs	r6, #1
 8009144:	1c85      	adds	r5, r0, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d057      	beq.n	80091fa <_strtoul_l.constprop.0+0xd6>
 800914a:	2b10      	cmp	r3, #16
 800914c:	d109      	bne.n	8009162 <_strtoul_l.constprop.0+0x3e>
 800914e:	2c30      	cmp	r4, #48	; 0x30
 8009150:	d107      	bne.n	8009162 <_strtoul_l.constprop.0+0x3e>
 8009152:	7828      	ldrb	r0, [r5, #0]
 8009154:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009158:	2858      	cmp	r0, #88	; 0x58
 800915a:	d149      	bne.n	80091f0 <_strtoul_l.constprop.0+0xcc>
 800915c:	786c      	ldrb	r4, [r5, #1]
 800915e:	2310      	movs	r3, #16
 8009160:	3502      	adds	r5, #2
 8009162:	f04f 38ff 	mov.w	r8, #4294967295
 8009166:	2700      	movs	r7, #0
 8009168:	fbb8 f8f3 	udiv	r8, r8, r3
 800916c:	fb03 f908 	mul.w	r9, r3, r8
 8009170:	ea6f 0909 	mvn.w	r9, r9
 8009174:	4638      	mov	r0, r7
 8009176:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800917a:	f1bc 0f09 	cmp.w	ip, #9
 800917e:	d814      	bhi.n	80091aa <_strtoul_l.constprop.0+0x86>
 8009180:	4664      	mov	r4, ip
 8009182:	42a3      	cmp	r3, r4
 8009184:	dd22      	ble.n	80091cc <_strtoul_l.constprop.0+0xa8>
 8009186:	2f00      	cmp	r7, #0
 8009188:	db1d      	blt.n	80091c6 <_strtoul_l.constprop.0+0xa2>
 800918a:	4580      	cmp	r8, r0
 800918c:	d31b      	bcc.n	80091c6 <_strtoul_l.constprop.0+0xa2>
 800918e:	d101      	bne.n	8009194 <_strtoul_l.constprop.0+0x70>
 8009190:	45a1      	cmp	r9, r4
 8009192:	db18      	blt.n	80091c6 <_strtoul_l.constprop.0+0xa2>
 8009194:	fb00 4003 	mla	r0, r0, r3, r4
 8009198:	2701      	movs	r7, #1
 800919a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800919e:	e7ea      	b.n	8009176 <_strtoul_l.constprop.0+0x52>
 80091a0:	2c2b      	cmp	r4, #43	; 0x2b
 80091a2:	bf04      	itt	eq
 80091a4:	782c      	ldrbeq	r4, [r5, #0]
 80091a6:	1c85      	addeq	r5, r0, #2
 80091a8:	e7cd      	b.n	8009146 <_strtoul_l.constprop.0+0x22>
 80091aa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80091ae:	f1bc 0f19 	cmp.w	ip, #25
 80091b2:	d801      	bhi.n	80091b8 <_strtoul_l.constprop.0+0x94>
 80091b4:	3c37      	subs	r4, #55	; 0x37
 80091b6:	e7e4      	b.n	8009182 <_strtoul_l.constprop.0+0x5e>
 80091b8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80091bc:	f1bc 0f19 	cmp.w	ip, #25
 80091c0:	d804      	bhi.n	80091cc <_strtoul_l.constprop.0+0xa8>
 80091c2:	3c57      	subs	r4, #87	; 0x57
 80091c4:	e7dd      	b.n	8009182 <_strtoul_l.constprop.0+0x5e>
 80091c6:	f04f 37ff 	mov.w	r7, #4294967295
 80091ca:	e7e6      	b.n	800919a <_strtoul_l.constprop.0+0x76>
 80091cc:	2f00      	cmp	r7, #0
 80091ce:	da07      	bge.n	80091e0 <_strtoul_l.constprop.0+0xbc>
 80091d0:	2322      	movs	r3, #34	; 0x22
 80091d2:	f8ce 3000 	str.w	r3, [lr]
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	b932      	cbnz	r2, 80091ea <_strtoul_l.constprop.0+0xc6>
 80091dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091e0:	b106      	cbz	r6, 80091e4 <_strtoul_l.constprop.0+0xc0>
 80091e2:	4240      	negs	r0, r0
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	d0f9      	beq.n	80091dc <_strtoul_l.constprop.0+0xb8>
 80091e8:	b107      	cbz	r7, 80091ec <_strtoul_l.constprop.0+0xc8>
 80091ea:	1e69      	subs	r1, r5, #1
 80091ec:	6011      	str	r1, [r2, #0]
 80091ee:	e7f5      	b.n	80091dc <_strtoul_l.constprop.0+0xb8>
 80091f0:	2430      	movs	r4, #48	; 0x30
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1b5      	bne.n	8009162 <_strtoul_l.constprop.0+0x3e>
 80091f6:	2308      	movs	r3, #8
 80091f8:	e7b3      	b.n	8009162 <_strtoul_l.constprop.0+0x3e>
 80091fa:	2c30      	cmp	r4, #48	; 0x30
 80091fc:	d0a9      	beq.n	8009152 <_strtoul_l.constprop.0+0x2e>
 80091fe:	230a      	movs	r3, #10
 8009200:	e7af      	b.n	8009162 <_strtoul_l.constprop.0+0x3e>
 8009202:	bf00      	nop
 8009204:	08009e5d 	.word	0x08009e5d

08009208 <_strtoul_r>:
 8009208:	f7ff bf8c 	b.w	8009124 <_strtoul_l.constprop.0>

0800920c <__submore>:
 800920c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009218:	4299      	cmp	r1, r3
 800921a:	d11d      	bne.n	8009258 <__submore+0x4c>
 800921c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009220:	f7ff f8ee 	bl	8008400 <_malloc_r>
 8009224:	b918      	cbnz	r0, 800922e <__submore+0x22>
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009232:	63a3      	str	r3, [r4, #56]	; 0x38
 8009234:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009238:	6360      	str	r0, [r4, #52]	; 0x34
 800923a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800923e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009242:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009246:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800924a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800924e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009252:	6020      	str	r0, [r4, #0]
 8009254:	2000      	movs	r0, #0
 8009256:	e7e8      	b.n	800922a <__submore+0x1e>
 8009258:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800925a:	0077      	lsls	r7, r6, #1
 800925c:	463a      	mov	r2, r7
 800925e:	f000 f94b 	bl	80094f8 <_realloc_r>
 8009262:	4605      	mov	r5, r0
 8009264:	2800      	cmp	r0, #0
 8009266:	d0de      	beq.n	8009226 <__submore+0x1a>
 8009268:	eb00 0806 	add.w	r8, r0, r6
 800926c:	4601      	mov	r1, r0
 800926e:	4632      	mov	r2, r6
 8009270:	4640      	mov	r0, r8
 8009272:	f7fe fcb1 	bl	8007bd8 <memcpy>
 8009276:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800927a:	f8c4 8000 	str.w	r8, [r4]
 800927e:	e7e9      	b.n	8009254 <__submore+0x48>

08009280 <_ungetc_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4614      	mov	r4, r2
 8009284:	1c4a      	adds	r2, r1, #1
 8009286:	4606      	mov	r6, r0
 8009288:	460d      	mov	r5, r1
 800928a:	d103      	bne.n	8009294 <_ungetc_r+0x14>
 800928c:	f04f 35ff 	mov.w	r5, #4294967295
 8009290:	4628      	mov	r0, r5
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	b118      	cbz	r0, 800929e <_ungetc_r+0x1e>
 8009296:	6983      	ldr	r3, [r0, #24]
 8009298:	b90b      	cbnz	r3, 800929e <_ungetc_r+0x1e>
 800929a:	f7fe fb6f 	bl	800797c <__sinit>
 800929e:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <_ungetc_r+0x124>)
 80092a0:	429c      	cmp	r4, r3
 80092a2:	d11d      	bne.n	80092e0 <_ungetc_r+0x60>
 80092a4:	6874      	ldr	r4, [r6, #4]
 80092a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a8:	07db      	lsls	r3, r3, #31
 80092aa:	d405      	bmi.n	80092b8 <_ungetc_r+0x38>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	0598      	lsls	r0, r3, #22
 80092b0:	d402      	bmi.n	80092b8 <_ungetc_r+0x38>
 80092b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092b4:	f7fe fc21 	bl	8007afa <__retarget_lock_acquire_recursive>
 80092b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092bc:	f023 0320 	bic.w	r3, r3, #32
 80092c0:	0759      	lsls	r1, r3, #29
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	d42d      	bmi.n	8009324 <_ungetc_r+0xa4>
 80092c8:	06d3      	lsls	r3, r2, #27
 80092ca:	d413      	bmi.n	80092f4 <_ungetc_r+0x74>
 80092cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092ce:	07dd      	lsls	r5, r3, #31
 80092d0:	d4dc      	bmi.n	800928c <_ungetc_r+0xc>
 80092d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80092d6:	d1d9      	bne.n	800928c <_ungetc_r+0xc>
 80092d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092da:	f7fe fc0f 	bl	8007afc <__retarget_lock_release_recursive>
 80092de:	e7d5      	b.n	800928c <_ungetc_r+0xc>
 80092e0:	4b31      	ldr	r3, [pc, #196]	; (80093a8 <_ungetc_r+0x128>)
 80092e2:	429c      	cmp	r4, r3
 80092e4:	d101      	bne.n	80092ea <_ungetc_r+0x6a>
 80092e6:	68b4      	ldr	r4, [r6, #8]
 80092e8:	e7dd      	b.n	80092a6 <_ungetc_r+0x26>
 80092ea:	4b30      	ldr	r3, [pc, #192]	; (80093ac <_ungetc_r+0x12c>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	bf08      	it	eq
 80092f0:	68f4      	ldreq	r4, [r6, #12]
 80092f2:	e7d8      	b.n	80092a6 <_ungetc_r+0x26>
 80092f4:	0710      	lsls	r0, r2, #28
 80092f6:	d511      	bpl.n	800931c <_ungetc_r+0x9c>
 80092f8:	4621      	mov	r1, r4
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7fe fa98 	bl	8007830 <_fflush_r>
 8009300:	b130      	cbz	r0, 8009310 <_ungetc_r+0x90>
 8009302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d4c1      	bmi.n	800928c <_ungetc_r+0xc>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800930e:	e7e2      	b.n	80092d6 <_ungetc_r+0x56>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	60a0      	str	r0, [r4, #8]
 8009314:	f023 0308 	bic.w	r3, r3, #8
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	61a0      	str	r0, [r4, #24]
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f043 0304 	orr.w	r3, r3, #4
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009326:	6862      	ldr	r2, [r4, #4]
 8009328:	b2ed      	uxtb	r5, r5
 800932a:	b1d3      	cbz	r3, 8009362 <_ungetc_r+0xe2>
 800932c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800932e:	4293      	cmp	r3, r2
 8009330:	dc05      	bgt.n	800933e <_ungetc_r+0xbe>
 8009332:	4621      	mov	r1, r4
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff ff69 	bl	800920c <__submore>
 800933a:	2800      	cmp	r0, #0
 800933c:	d1e1      	bne.n	8009302 <_ungetc_r+0x82>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	1e5a      	subs	r2, r3, #1
 8009342:	6022      	str	r2, [r4, #0]
 8009344:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009348:	6863      	ldr	r3, [r4, #4]
 800934a:	3301      	adds	r3, #1
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009350:	07da      	lsls	r2, r3, #31
 8009352:	d49d      	bmi.n	8009290 <_ungetc_r+0x10>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	059b      	lsls	r3, r3, #22
 8009358:	d49a      	bmi.n	8009290 <_ungetc_r+0x10>
 800935a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935c:	f7fe fbce 	bl	8007afc <__retarget_lock_release_recursive>
 8009360:	e796      	b.n	8009290 <_ungetc_r+0x10>
 8009362:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009364:	6920      	ldr	r0, [r4, #16]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	f001 0101 	and.w	r1, r1, #1
 800936c:	b160      	cbz	r0, 8009388 <_ungetc_r+0x108>
 800936e:	4298      	cmp	r0, r3
 8009370:	d20a      	bcs.n	8009388 <_ungetc_r+0x108>
 8009372:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8009376:	42a8      	cmp	r0, r5
 8009378:	d106      	bne.n	8009388 <_ungetc_r+0x108>
 800937a:	3b01      	subs	r3, #1
 800937c:	3201      	adds	r2, #1
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	6062      	str	r2, [r4, #4]
 8009382:	2900      	cmp	r1, #0
 8009384:	d184      	bne.n	8009290 <_ungetc_r+0x10>
 8009386:	e7e5      	b.n	8009354 <_ungetc_r+0xd4>
 8009388:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800938c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009390:	6363      	str	r3, [r4, #52]	; 0x34
 8009392:	2303      	movs	r3, #3
 8009394:	63a3      	str	r3, [r4, #56]	; 0x38
 8009396:	4623      	mov	r3, r4
 8009398:	f803 5f46 	strb.w	r5, [r3, #70]!
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	2301      	movs	r3, #1
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	e7ee      	b.n	8009382 <_ungetc_r+0x102>
 80093a4:	08009c58 	.word	0x08009c58
 80093a8:	08009c78 	.word	0x08009c78
 80093ac:	08009c38 	.word	0x08009c38

080093b0 <_write_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d07      	ldr	r5, [pc, #28]	; (80093d0 <_write_r+0x20>)
 80093b4:	4604      	mov	r4, r0
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	602a      	str	r2, [r5, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f7f8 fec1 	bl	8002146 <_write>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d102      	bne.n	80093ce <_write_r+0x1e>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b103      	cbz	r3, 80093ce <_write_r+0x1e>
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	20000468 	.word	0x20000468

080093d4 <__assert_func>:
 80093d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093d6:	4614      	mov	r4, r2
 80093d8:	461a      	mov	r2, r3
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <__assert_func+0x2c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4605      	mov	r5, r0
 80093e0:	68d8      	ldr	r0, [r3, #12]
 80093e2:	b14c      	cbz	r4, 80093f8 <__assert_func+0x24>
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <__assert_func+0x30>)
 80093e6:	9100      	str	r1, [sp, #0]
 80093e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093ec:	4906      	ldr	r1, [pc, #24]	; (8009408 <__assert_func+0x34>)
 80093ee:	462b      	mov	r3, r5
 80093f0:	f000 f81e 	bl	8009430 <fiprintf>
 80093f4:	f000 f8cf 	bl	8009596 <abort>
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <__assert_func+0x38>)
 80093fa:	461c      	mov	r4, r3
 80093fc:	e7f3      	b.n	80093e6 <__assert_func+0x12>
 80093fe:	bf00      	nop
 8009400:	2000000c 	.word	0x2000000c
 8009404:	08009e20 	.word	0x08009e20
 8009408:	08009e2d 	.word	0x08009e2d
 800940c:	08009e5b 	.word	0x08009e5b

08009410 <_close_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_close_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f8 feaf 	bl	800217e <_close>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_close_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_close_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000468 	.word	0x20000468

08009430 <fiprintf>:
 8009430:	b40e      	push	{r1, r2, r3}
 8009432:	b503      	push	{r0, r1, lr}
 8009434:	4601      	mov	r1, r0
 8009436:	ab03      	add	r3, sp, #12
 8009438:	4805      	ldr	r0, [pc, #20]	; (8009450 <fiprintf+0x20>)
 800943a:	f853 2b04 	ldr.w	r2, [r3], #4
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	f7ff f87b 	bl	800853c <_vfiprintf_r>
 8009446:	b002      	add	sp, #8
 8009448:	f85d eb04 	ldr.w	lr, [sp], #4
 800944c:	b003      	add	sp, #12
 800944e:	4770      	bx	lr
 8009450:	2000000c 	.word	0x2000000c

08009454 <_fstat_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d07      	ldr	r5, [pc, #28]	; (8009474 <_fstat_r+0x20>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	4611      	mov	r1, r2
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	f7f8 fe98 	bl	8002196 <_fstat>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d102      	bne.n	8009470 <_fstat_r+0x1c>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	b103      	cbz	r3, 8009470 <_fstat_r+0x1c>
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	bd38      	pop	{r3, r4, r5, pc}
 8009472:	bf00      	nop
 8009474:	20000468 	.word	0x20000468

08009478 <_isatty_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d06      	ldr	r5, [pc, #24]	; (8009494 <_isatty_r+0x1c>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	602b      	str	r3, [r5, #0]
 8009484:	f7f8 fe97 	bl	80021b6 <_isatty>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_isatty_r+0x1a>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_isatty_r+0x1a>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000468 	.word	0x20000468

08009498 <_lseek_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	; (80094b8 <_lseek_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f8 fe90 	bl	80021cc <_lseek>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_lseek_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_lseek_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000468 	.word	0x20000468

080094bc <__ascii_mbtowc>:
 80094bc:	b082      	sub	sp, #8
 80094be:	b901      	cbnz	r1, 80094c2 <__ascii_mbtowc+0x6>
 80094c0:	a901      	add	r1, sp, #4
 80094c2:	b142      	cbz	r2, 80094d6 <__ascii_mbtowc+0x1a>
 80094c4:	b14b      	cbz	r3, 80094da <__ascii_mbtowc+0x1e>
 80094c6:	7813      	ldrb	r3, [r2, #0]
 80094c8:	600b      	str	r3, [r1, #0]
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	1e10      	subs	r0, r2, #0
 80094ce:	bf18      	it	ne
 80094d0:	2001      	movne	r0, #1
 80094d2:	b002      	add	sp, #8
 80094d4:	4770      	bx	lr
 80094d6:	4610      	mov	r0, r2
 80094d8:	e7fb      	b.n	80094d2 <__ascii_mbtowc+0x16>
 80094da:	f06f 0001 	mvn.w	r0, #1
 80094de:	e7f8      	b.n	80094d2 <__ascii_mbtowc+0x16>

080094e0 <__malloc_lock>:
 80094e0:	4801      	ldr	r0, [pc, #4]	; (80094e8 <__malloc_lock+0x8>)
 80094e2:	f7fe bb0a 	b.w	8007afa <__retarget_lock_acquire_recursive>
 80094e6:	bf00      	nop
 80094e8:	2000045c 	.word	0x2000045c

080094ec <__malloc_unlock>:
 80094ec:	4801      	ldr	r0, [pc, #4]	; (80094f4 <__malloc_unlock+0x8>)
 80094ee:	f7fe bb05 	b.w	8007afc <__retarget_lock_release_recursive>
 80094f2:	bf00      	nop
 80094f4:	2000045c 	.word	0x2000045c

080094f8 <_realloc_r>:
 80094f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094fc:	4680      	mov	r8, r0
 80094fe:	4614      	mov	r4, r2
 8009500:	460e      	mov	r6, r1
 8009502:	b921      	cbnz	r1, 800950e <_realloc_r+0x16>
 8009504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	4611      	mov	r1, r2
 800950a:	f7fe bf79 	b.w	8008400 <_malloc_r>
 800950e:	b92a      	cbnz	r2, 800951c <_realloc_r+0x24>
 8009510:	f7fe ff0a 	bl	8008328 <_free_r>
 8009514:	4625      	mov	r5, r4
 8009516:	4628      	mov	r0, r5
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951c:	f000 f842 	bl	80095a4 <_malloc_usable_size_r>
 8009520:	4284      	cmp	r4, r0
 8009522:	4607      	mov	r7, r0
 8009524:	d802      	bhi.n	800952c <_realloc_r+0x34>
 8009526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800952a:	d812      	bhi.n	8009552 <_realloc_r+0x5a>
 800952c:	4621      	mov	r1, r4
 800952e:	4640      	mov	r0, r8
 8009530:	f7fe ff66 	bl	8008400 <_malloc_r>
 8009534:	4605      	mov	r5, r0
 8009536:	2800      	cmp	r0, #0
 8009538:	d0ed      	beq.n	8009516 <_realloc_r+0x1e>
 800953a:	42bc      	cmp	r4, r7
 800953c:	4622      	mov	r2, r4
 800953e:	4631      	mov	r1, r6
 8009540:	bf28      	it	cs
 8009542:	463a      	movcs	r2, r7
 8009544:	f7fe fb48 	bl	8007bd8 <memcpy>
 8009548:	4631      	mov	r1, r6
 800954a:	4640      	mov	r0, r8
 800954c:	f7fe feec 	bl	8008328 <_free_r>
 8009550:	e7e1      	b.n	8009516 <_realloc_r+0x1e>
 8009552:	4635      	mov	r5, r6
 8009554:	e7df      	b.n	8009516 <_realloc_r+0x1e>
	...

08009558 <_read_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_read_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f8 fdd0 	bl	800210c <_read>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_read_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_read_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20000468 	.word	0x20000468

0800957c <__ascii_wctomb>:
 800957c:	b149      	cbz	r1, 8009592 <__ascii_wctomb+0x16>
 800957e:	2aff      	cmp	r2, #255	; 0xff
 8009580:	bf85      	ittet	hi
 8009582:	238a      	movhi	r3, #138	; 0x8a
 8009584:	6003      	strhi	r3, [r0, #0]
 8009586:	700a      	strbls	r2, [r1, #0]
 8009588:	f04f 30ff 	movhi.w	r0, #4294967295
 800958c:	bf98      	it	ls
 800958e:	2001      	movls	r0, #1
 8009590:	4770      	bx	lr
 8009592:	4608      	mov	r0, r1
 8009594:	4770      	bx	lr

08009596 <abort>:
 8009596:	b508      	push	{r3, lr}
 8009598:	2006      	movs	r0, #6
 800959a:	f000 f833 	bl	8009604 <raise>
 800959e:	2001      	movs	r0, #1
 80095a0:	f7f8 fdaa 	bl	80020f8 <_exit>

080095a4 <_malloc_usable_size_r>:
 80095a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a8:	1f18      	subs	r0, r3, #4
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	bfbc      	itt	lt
 80095ae:	580b      	ldrlt	r3, [r1, r0]
 80095b0:	18c0      	addlt	r0, r0, r3
 80095b2:	4770      	bx	lr

080095b4 <_raise_r>:
 80095b4:	291f      	cmp	r1, #31
 80095b6:	b538      	push	{r3, r4, r5, lr}
 80095b8:	4604      	mov	r4, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	d904      	bls.n	80095c8 <_raise_r+0x14>
 80095be:	2316      	movs	r3, #22
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	f04f 30ff 	mov.w	r0, #4294967295
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095ca:	b112      	cbz	r2, 80095d2 <_raise_r+0x1e>
 80095cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095d0:	b94b      	cbnz	r3, 80095e6 <_raise_r+0x32>
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 f830 	bl	8009638 <_getpid_r>
 80095d8:	462a      	mov	r2, r5
 80095da:	4601      	mov	r1, r0
 80095dc:	4620      	mov	r0, r4
 80095de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e2:	f000 b817 	b.w	8009614 <_kill_r>
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d00a      	beq.n	8009600 <_raise_r+0x4c>
 80095ea:	1c59      	adds	r1, r3, #1
 80095ec:	d103      	bne.n	80095f6 <_raise_r+0x42>
 80095ee:	2316      	movs	r3, #22
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	2001      	movs	r0, #1
 80095f4:	e7e7      	b.n	80095c6 <_raise_r+0x12>
 80095f6:	2400      	movs	r4, #0
 80095f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095fc:	4628      	mov	r0, r5
 80095fe:	4798      	blx	r3
 8009600:	2000      	movs	r0, #0
 8009602:	e7e0      	b.n	80095c6 <_raise_r+0x12>

08009604 <raise>:
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <raise+0xc>)
 8009606:	4601      	mov	r1, r0
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	f7ff bfd3 	b.w	80095b4 <_raise_r>
 800960e:	bf00      	nop
 8009610:	2000000c 	.word	0x2000000c

08009614 <_kill_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d07      	ldr	r5, [pc, #28]	; (8009634 <_kill_r+0x20>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	4611      	mov	r1, r2
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	f7f8 fd59 	bl	80020d8 <_kill>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d102      	bne.n	8009630 <_kill_r+0x1c>
 800962a:	682b      	ldr	r3, [r5, #0]
 800962c:	b103      	cbz	r3, 8009630 <_kill_r+0x1c>
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	bd38      	pop	{r3, r4, r5, pc}
 8009632:	bf00      	nop
 8009634:	20000468 	.word	0x20000468

08009638 <_getpid_r>:
 8009638:	f7f8 bd46 	b.w	80020c8 <_getpid>

0800963c <_init>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr

08009648 <_fini>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr
