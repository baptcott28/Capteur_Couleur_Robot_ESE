
couleur_fonctionel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800ad68  0800ad68  0001ad68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6a8  0800b6a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6a8  0800b6a8  0001b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b0  0800b6b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b0  0800b6b0  0001b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e0  200001e0  0800b898  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044c0  0800b898  000244c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199b9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003777  00000000  00000000  00039bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002961d  00000000  00000000  0003f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017883  00000000  00000000  00068e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf2d  00000000  00000000  000806c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b5f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006300  00000000  00000000  0017b648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad4c 	.word	0x0800ad4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ad4c 	.word	0x0800ad4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <colorSetOutputFreqScaling>:
// ----- Global Fonctions -----


// --- fonctions de gestion du hardware ---

static void colorSetOutputFreqScaling(h_color_sensor_t * h_color_sensor){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	switch(h_color_sensor->ouput_scale){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d836      	bhi.n	8000fac <colorSetOutputFreqScaling+0x80>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <colorSetOutputFreqScaling+0x18>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f97 	.word	0x08000f97
 8000f48:	08000f81 	.word	0x08000f81
 8000f4c:	08000f6b 	.word	0x08000f6b
 8000f50:	08000f55 	.word	0x08000f55
	case 4:
		// 100%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f5a:	f000 fd48 	bl	80019ee <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f64:	f000 fd43 	bl	80019ee <GPIO_write>
		break;
 8000f68:	e020      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 3:
		// 20%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f70:	f000 fd3d 	bl	80019ee <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f7a:	f000 fd38 	bl	80019ee <GPIO_write>
		break;
 8000f7e:	e015      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 2:
		// 2%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f86:	f000 fd32 	bl	80019ee <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f90:	f000 fd2d 	bl	80019ee <GPIO_write>
		break;
 8000f94:	e00a      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 1:
		// Power_down
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f9c:	f000 fd27 	bl	80019ee <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000fa6:	f000 fd22 	bl	80019ee <GPIO_write>
		break;
 8000faa:	bf00      	nop
	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021800 	.word	0x40021800

08000fbc <colorSetPhotodiodeType>:

void colorSetPhotodiodeType(h_color_sensor_t * h_color_sensor,color_sensor_color_t color){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	h_color_sensor->color=color;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	701a      	strb	r2, [r3, #0]
	switch(color){
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d842      	bhi.n	800105c <colorSetPhotodiodeType+0xa0>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <colorSetPhotodiodeType+0x20>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001025 	.word	0x08001025
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08000fed 	.word	0x08000fed
	case GREEN:
		//GREEN
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481c      	ldr	r0, [pc, #112]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8000ff2:	f000 fcfc 	bl	80019ee <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8000ffc:	f000 fcf7 	bl	80019ee <GPIO_write>
		printf("\n--- photosensor set vert ---\r\n\n");
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <colorSetPhotodiodeType+0xb0>)
 8001002:	f007 f841 	bl	8008088 <puts>
		break;
 8001006:	e029      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case CLEAR:
		//clear
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800100e:	f000 fcee 	bl	80019ee <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 8001012:	2200      	movs	r2, #0
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001018:	f000 fce9 	bl	80019ee <GPIO_write>
		printf("\n--- photosensor set clear ---\r\n\n");
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <colorSetPhotodiodeType+0xb4>)
 800101e:	f007 f833 	bl	8008088 <puts>
		break;
 8001022:	e01b      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case BLUE:
		//BLUE
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800102a:	f000 fce0 	bl	80019ee <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 800102e:	2201      	movs	r2, #1
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001034:	f000 fcdb 	bl	80019ee <GPIO_write>
		printf("\n--- photosensor set blue ---\r\n\n");
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <colorSetPhotodiodeType+0xb8>)
 800103a:	f007 f825 	bl	8008088 <puts>
		break;
 800103e:	e00d      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case RED:
		//RED
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8001046:	f000 fcd2 	bl	80019ee <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 800104a:	2200      	movs	r2, #0
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001050:	f000 fccd 	bl	80019ee <GPIO_write>
		printf("\n--- photosensor set rouge ---\r\n\n");
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <colorSetPhotodiodeType+0xbc>)
 8001056:	f007 f817 	bl	8008088 <puts>
		break;
 800105a:	bf00      	nop
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020400 	.word	0x40020400
 8001068:	40021800 	.word	0x40021800
 800106c:	0800ad68 	.word	0x0800ad68
 8001070:	0800ad88 	.word	0x0800ad88
 8001074:	0800adac 	.word	0x0800adac
 8001078:	0800adcc 	.word	0x0800adcc

0800107c <colorSensorInit>:

void colorSensorInit(h_color_sensor_t *h_color_sensor, color_sensor_color_t color, color_sensor_output_scale_t output_scale, color_sensor_state_t state){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	460b      	mov	r3, r1
 8001090:	70bb      	strb	r3, [r7, #2]
 8001092:	4613      	mov	r3, r2
 8001094:	707b      	strb	r3, [r7, #1]
	h_color_sensor->color=color;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	701a      	strb	r2, [r3, #0]
	h_color_sensor->ouput_scale=output_scale;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	78ba      	ldrb	r2, [r7, #2]
 80010a0:	705a      	strb	r2, [r3, #1]
	h_color_sensor->sensor_state=state;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	787a      	ldrb	r2, [r7, #1]
 80010a6:	709a      	strb	r2, [r3, #2]
	h_color_sensor->frequence=0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
	h_color_sensor->blue_color=0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
	h_color_sensor->green_color=0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	h_color_sensor->red_color=0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]

	h_color_sensor->green_transformation.green_coef_dir=1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_min_freq=1;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	835a      	strh	r2, [r3, #26]
	h_color_sensor->green_transformation.green_ord_origin=1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	831a      	strh	r2, [r3, #24]

	h_color_sensor->red_transformation.red_coef_dir=1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_min_freq=1;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	841a      	strh	r2, [r3, #32]
	h_color_sensor->red_transformation.red_ord_origin=1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	83da      	strh	r2, [r3, #30]

	h_color_sensor->calib_state=WAINTING_FOR_CALIB;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	751a      	strb	r2, [r3, #20]
	h_color_sensor->calib_struct.calib_value_rouge_canette=1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	84da      	strh	r2, [r3, #38]	; 0x26
	h_color_sensor->calib_struct.calib_value_rouge_vide=1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
	h_color_sensor->calib_struct.calib_value_vert_canette=1;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	845a      	strh	r2, [r3, #34]	; 0x22
	h_color_sensor->calib_struct.calib_value_vert_vide=1;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	849a      	strh	r2, [r3, #36]	; 0x24
	colorSetOutputFreqScaling(h_color_sensor);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff12 	bl	8000f2c <colorSetOutputFreqScaling>
	colorSetPhotodiodeType(h_color_sensor,color);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff55 	bl	8000fbc <colorSetPhotodiodeType>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <colorDisable>:
uint32_t colorGetGreenValue(h_color_sensor_t * h_color_sensor){
	printf("sensor_value : %ld\r\n",h_color_sensor->frequence);
	return h_color_sensor->green_color;
}

void colorDisable(h_color_sensor_t * h_color_sensor){
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	b095      	sub	sp, #84	; 0x54
 8001120:	af12      	add	r7, sp, #72	; 0x48
 8001122:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <colorDisable+0x50>)
 800112a:	f000 fc60 	bl	80019ee <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_DISABLE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,STOP,TIM_CHANNEL_1);
 8001134:	4e0e      	ldr	r6, [pc, #56]	; (8001170 <colorDisable+0x54>)
 8001136:	2300      	movs	r3, #0
 8001138:	9311      	str	r3, [sp, #68]	; 0x44
 800113a:	2300      	movs	r3, #0
 800113c:	9310      	str	r3, [sp, #64]	; 0x40
 800113e:	2301      	movs	r3, #1
 8001140:	930f      	str	r3, [sp, #60]	; 0x3c
 8001142:	466d      	mov	r5, sp
 8001144:	f106 0410 	add.w	r4, r6, #16
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001154:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001158:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800115c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001160:	f000 fbd3 	bl	800190a <timer_handle>
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116c:	40020800 	.word	0x40020800
 8001170:	2000068c 	.word	0x2000068c

08001174 <colorEnable>:

void colorEnable(h_color_sensor_t * h_color_sensor){
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b095      	sub	sp, #84	; 0x54
 8001178:	af12      	add	r7, sp, #72	; 0x48
 800117a:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <colorEnable+0x50>)
 8001182:	f000 fc34 	bl	80019ee <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_ENABLE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,START,TIM_CHANNEL_1);
 800118c:	4e0e      	ldr	r6, [pc, #56]	; (80011c8 <colorEnable+0x54>)
 800118e:	2300      	movs	r3, #0
 8001190:	9311      	str	r3, [sp, #68]	; 0x44
 8001192:	2301      	movs	r3, #1
 8001194:	9310      	str	r3, [sp, #64]	; 0x40
 8001196:	2301      	movs	r3, #1
 8001198:	930f      	str	r3, [sp, #60]	; 0x3c
 800119a:	466d      	mov	r5, sp
 800119c:	f106 0410 	add.w	r4, r6, #16
 80011a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011b8:	f000 fba7 	bl	800190a <timer_handle>
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c4:	40020800 	.word	0x40020800
 80011c8:	2000068c 	.word	0x2000068c

080011cc <colorHandleCalibrationSensor>:


// --- fonctions de calibration ---

uint32_t colorHandleCalibrationSensor(h_color_sensor_t * h_color_sensor){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	calibration_flag=1;
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <colorHandleCalibrationSensor+0x218>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	printf("calibration flag : %d\r\n",calibration_flag);
 80011da:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <colorHandleCalibrationSensor+0x218>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4881      	ldr	r0, [pc, #516]	; (80013e8 <colorHandleCalibrationSensor+0x21c>)
 80011e2:	f006 fecb 	bl	8007f7c <iprintf>
	char entree[2];
	h_color_sensor->calib_state=CALIB_VERT_CANETTE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	751a      	strb	r2, [r3, #20]
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80011ec:	e08a      	b.n	8001304 <colorHandleCalibrationSensor+0x138>
		//printf("entré dans while\r\n");
		switch(h_color_sensor->calib_state){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7d1b      	ldrb	r3, [r3, #20]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	f200 8084 	bhi.w	8001302 <colorHandleCalibrationSensor+0x136>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <colorHandleCalibrationSensor+0x34>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001211 	.word	0x08001211
 8001204:	08001249 	.word	0x08001249
 8001208:	08001287 	.word	0x08001287
 800120c:	080012c5 	.word	0x080012c5
		case CALIB_VERT_CANETTE:
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 8001210:	2104      	movs	r1, #4
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fed2 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 8001218:	4874      	ldr	r0, [pc, #464]	; (80013ec <colorHandleCalibrationSensor+0x220>)
 800121a:	f006 ff35 	bl	8008088 <puts>
			scanf( "%s",entree);
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	4872      	ldr	r0, [pc, #456]	; (80013f0 <colorHandleCalibrationSensor+0x224>)
 8001226:	f006 ffb1 	bl	800818c <iscanf>
			h_color_sensor->calib_struct.calib_value_vert_canette=0;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	845a      	strh	r2, [r3, #34]	; 0x22
			colorEnable(h_color_sensor);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff9f 	bl	8001174 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_vert_canette==0){
 8001236:	bf00      	nop
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0fb      	beq.n	8001238 <colorHandleCalibrationSensor+0x6c>
				//Wait for calib completed
			}
			h_color_sensor->calib_state=CALIB_VERT_VIDE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	751a      	strb	r2, [r3, #20]
			break;
 8001246:	e05d      	b.n	8001304 <colorHandleCalibrationSensor+0x138>

		case CALIB_VERT_VIDE:
			printf("calib_vert_vide\r\n");
 8001248:	486a      	ldr	r0, [pc, #424]	; (80013f4 <colorHandleCalibrationSensor+0x228>)
 800124a:	f006 ff1d 	bl	8008088 <puts>
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 800124e:	2104      	movs	r1, #4
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff feb3 	bl	8000fbc <colorSetPhotodiodeType>
			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when the green can is removed\r\n");
 8001256:	4868      	ldr	r0, [pc, #416]	; (80013f8 <colorHandleCalibrationSensor+0x22c>)
 8001258:	f006 ff16 	bl	8008088 <puts>
			scanf("%s",entree);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4863      	ldr	r0, [pc, #396]	; (80013f0 <colorHandleCalibrationSensor+0x224>)
 8001264:	f006 ff92 	bl	800818c <iscanf>
			h_color_sensor->calib_struct.calib_value_vert_vide=0;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	849a      	strh	r2, [r3, #36]	; 0x24
			colorEnable(h_color_sensor);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff80 	bl	8001174 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_vert_vide==0){
 8001274:	bf00      	nop
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0fb      	beq.n	8001276 <colorHandleCalibrationSensor+0xaa>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_CANETTE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	751a      	strb	r2, [r3, #20]
			break;
 8001284:	e03e      	b.n	8001304 <colorHandleCalibrationSensor+0x138>

		case CALIB_ROUGE_CANETTE:
			printf("calib_rouge_canette\r\n");
 8001286:	485d      	ldr	r0, [pc, #372]	; (80013fc <colorHandleCalibrationSensor+0x230>)
 8001288:	f006 fefe 	bl	8008088 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 800128c:	2101      	movs	r1, #1
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fe94 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a red can is captured\r\n");
 8001294:	485a      	ldr	r0, [pc, #360]	; (8001400 <colorHandleCalibrationSensor+0x234>)
 8001296:	f006 fef7 	bl	8008088 <puts>
			scanf("%s",entree);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4853      	ldr	r0, [pc, #332]	; (80013f0 <colorHandleCalibrationSensor+0x224>)
 80012a2:	f006 ff73 	bl	800818c <iscanf>
			h_color_sensor->calib_struct.calib_value_rouge_canette=0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	84da      	strh	r2, [r3, #38]	; 0x26
			colorEnable(h_color_sensor);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff61 	bl	8001174 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_rouge_canette==0){
 80012b2:	bf00      	nop
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0fb      	beq.n	80012b4 <colorHandleCalibrationSensor+0xe8>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_VIDE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2204      	movs	r2, #4
 80012c0:	751a      	strb	r2, [r3, #20]
			break;
 80012c2:	e01f      	b.n	8001304 <colorHandleCalibrationSensor+0x138>

		case CALIB_ROUGE_VIDE:
			printf("calib_rouge_vide\r\n");
 80012c4:	484f      	ldr	r0, [pc, #316]	; (8001404 <colorHandleCalibrationSensor+0x238>)
 80012c6:	f006 fedf 	bl	8008088 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 80012ca:	2101      	movs	r1, #1
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fe75 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 80012d2:	4846      	ldr	r0, [pc, #280]	; (80013ec <colorHandleCalibrationSensor+0x220>)
 80012d4:	f006 fed8 	bl	8008088 <puts>
			scanf("%s",entree);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4844      	ldr	r0, [pc, #272]	; (80013f0 <colorHandleCalibrationSensor+0x224>)
 80012e0:	f006 ff54 	bl	800818c <iscanf>
			h_color_sensor->calib_struct.calib_value_rouge_vide=0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	851a      	strh	r2, [r3, #40]	; 0x28
			colorEnable(h_color_sensor);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff42 	bl	8001174 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_rouge_vide==0){
 80012f0:	bf00      	nop
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0fb      	beq.n	80012f2 <colorHandleCalibrationSensor+0x126>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_DONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	751a      	strb	r2, [r3, #20]
			break;
 8001300:	e000      	b.n	8001304 <colorHandleCalibrationSensor+0x138>

		default:
			break;
 8001302:	bf00      	nop
	while(h_color_sensor->calib_state!=CALIB_DONE){
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b05      	cmp	r3, #5
 800130a:	f47f af70 	bne.w	80011ee <colorHandleCalibrationSensor+0x22>
		}
	}
	printf("calib_verte_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001312:	4619      	mov	r1, r3
 8001314:	483c      	ldr	r0, [pc, #240]	; (8001408 <colorHandleCalibrationSensor+0x23c>)
 8001316:	f006 fe31 	bl	8007f7c <iprintf>
	printf("calib_verte_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	483a      	ldr	r0, [pc, #232]	; (800140c <colorHandleCalibrationSensor+0x240>)
 8001322:	f006 fe2b 	bl	8007f7c <iprintf>
	printf("calib_rouge_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800132a:	4619      	mov	r1, r3
 800132c:	4838      	ldr	r0, [pc, #224]	; (8001410 <colorHandleCalibrationSensor+0x244>)
 800132e:	f006 fe25 	bl	8007f7c <iprintf>
	printf("calib_rouge_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001336:	4619      	mov	r1, r3
 8001338:	4836      	ldr	r0, [pc, #216]	; (8001414 <colorHandleCalibrationSensor+0x248>)
 800133a:	f006 fe1f 	bl	8007f7c <iprintf>

	//computation of the transformation coefficient
	h_color_sensor->green_transformation.green_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_color_sensor->calib_struct.calib_value_vert_vide)-(h_color_sensor->calib_struct.calib_value_vert_canette)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f242 7210 	movw	r2, #10000	; 0x2710
 800134e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->green_transformation.green_coef_dir)*(h_color_sensor->calib_struct.calib_value_vert_vide)));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8ada      	ldrh	r2, [r3, #22]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001360:	fb12 f303 	smulbb	r3, r2, r3
 8001364:	b29a      	uxth	r2, r3
 8001366:	f644 6320 	movw	r3, #20000	; 0x4e20
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	831a      	strh	r2, [r3, #24]
	printf("coef dir vert : %u\r\nord origin vert : %u\r\nmin freq vert : %u\r\n\n",h_color_sensor->green_transformation.green_coef_dir,h_color_sensor->green_transformation.green_ord_origin,h_color_sensor->green_transformation.green_min_freq);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	8adb      	ldrh	r3, [r3, #22]
 8001376:	4619      	mov	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	8b1b      	ldrh	r3, [r3, #24]
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	8b5b      	ldrh	r3, [r3, #26]
 8001382:	4825      	ldr	r0, [pc, #148]	; (8001418 <colorHandleCalibrationSensor+0x24c>)
 8001384:	f006 fdfa 	bl	8007f7c <iprintf>

	h_color_sensor->red_transformation.red_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_color_sensor->calib_struct.calib_value_rouge_vide)-(h_color_sensor->calib_struct.calib_value_rouge_canette)));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f242 7210 	movw	r2, #10000	; 0x2710
 8001398:	fb92 f3f3 	sdiv	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->red_transformation.red_coef_dir)*(h_color_sensor->calib_struct.calib_value_rouge_vide)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	8b9a      	ldrh	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	fb12 f303 	smulbb	r3, r2, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	83da      	strh	r2, [r3, #30]
	printf("coef dir rouge : %u\r\nord origin rouge : %u\r\nmin freq rouge : %u\r\n\n",h_color_sensor->red_transformation.red_coef_dir,h_color_sensor->red_transformation.red_ord_origin,h_color_sensor->red_transformation.red_min_freq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	8b9b      	ldrh	r3, [r3, #28]
 80013c0:	4619      	mov	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	8bdb      	ldrh	r3, [r3, #30]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	8c1b      	ldrh	r3, [r3, #32]
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <colorHandleCalibrationSensor+0x250>)
 80013ce:	f006 fdd5 	bl	8007f7c <iprintf>


	// flag to say hey calibration finished
	calibration_flag=0;
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <colorHandleCalibrationSensor+0x218>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d8 	.word	0x200002d8
 80013e8:	0800ae08 	.word	0x0800ae08
 80013ec:	0800ae20 	.word	0x0800ae20
 80013f0:	0800ae4c 	.word	0x0800ae4c
 80013f4:	0800ae50 	.word	0x0800ae50
 80013f8:	0800ae64 	.word	0x0800ae64
 80013fc:	0800ae90 	.word	0x0800ae90
 8001400:	0800aea8 	.word	0x0800aea8
 8001404:	0800aed0 	.word	0x0800aed0
 8001408:	0800aee4 	.word	0x0800aee4
 800140c:	0800af00 	.word	0x0800af00
 8001410:	0800af1c 	.word	0x0800af1c
 8001414:	0800af38 	.word	0x0800af38
 8001418:	0800af54 	.word	0x0800af54
 800141c:	0800af94 	.word	0x0800af94

08001420 <colorSensorHandleInputCapture_IT>:


// --- fonction de gestion du retour capteur ---

void colorSensorHandleInputCapture_IT(h_color_sensor_t * h_color_sensor,TIM_TypeDef *TIM){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	//printf("entré dans tim2 IT\r\n");
	if(tour==0){
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <colorSensorHandleInputCapture_IT+0xb0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <colorSensorHandleInputCapture_IT+0x22>
		temps1=TIM->CNT;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	461a      	mov	r2, r3
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <colorSensorHandleInputCapture_IT+0xb4>)
 800143a:	601a      	str	r2, [r3, #0]
		tour=0;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <colorSensorHandleInputCapture_IT+0xb0>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
	}
	if(tour==1){
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <colorSensorHandleInputCapture_IT+0xb0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <colorSensorHandleInputCapture_IT+0x3a>
		temps2=TIM->CNT;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	461a      	mov	r2, r3
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <colorSensorHandleInputCapture_IT+0xb8>)
 8001452:	601a      	str	r2, [r3, #0]
		tour=1;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <colorSensorHandleInputCapture_IT+0xb0>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
	}
	tour=1-tour;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <colorSensorHandleInputCapture_IT+0xb0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1c3 0301 	rsb	r3, r3, #1
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <colorSensorHandleInputCapture_IT+0xb0>)
 8001464:	6013      	str	r3, [r2, #0]
	freq=abs(temps2-temps1);
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <colorSensorHandleInputCapture_IT+0xb8>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <colorSensorHandleInputCapture_IT+0xb4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	bfb8      	it	lt
 8001474:	425b      	neglt	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <colorSensorHandleInputCapture_IT+0xbc>)
 800147a:	601a      	str	r2, [r3, #0]
	h_color_sensor->frequence=freq;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <colorSensorHandleInputCapture_IT+0xbc>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	605a      	str	r2, [r3, #4]
		}
		printf("fin affichage\r\n");
		u=0;
	}*/

	if((calibration_flag==1)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <colorSensorHandleInputCapture_IT+0xc0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10c      	bne.n	80014a6 <colorSensorHandleInputCapture_IT+0x86>
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <colorSensorHandleInputCapture_IT+0xbc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001494:	4293      	cmp	r3, r2
 8001496:	d806      	bhi.n	80014a6 <colorSensorHandleInputCapture_IT+0x86>
		colorHandleCalibrationValues(h_color_sensor,freq);
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <colorSensorHandleInputCapture_IT+0xbc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f820 	bl	80014e4 <colorHandleCalibrationValues>
	}
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
		// Analyse des valeur pour prise de decision sur la couleur
		colorHandleRawValues(h_color_sensor, freq);
	}
}
 80014a4:	e00f      	b.n	80014c6 <colorSensorHandleInputCapture_IT+0xa6>
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <colorSensorHandleInputCapture_IT+0xc0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <colorSensorHandleInputCapture_IT+0xa6>
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <colorSensorHandleInputCapture_IT+0xbc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d805      	bhi.n	80014c6 <colorSensorHandleInputCapture_IT+0xa6>
		colorHandleRawValues(h_color_sensor, freq);
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <colorSensorHandleInputCapture_IT+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f8cd 	bl	8001660 <colorHandleRawValues>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000208 	.word	0x20000208
 80014d4:	20000200 	.word	0x20000200
 80014d8:	20000204 	.word	0x20000204
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	200002d8 	.word	0x200002d8

080014e4 <colorHandleCalibrationValues>:

static int colorHandleCalibrationValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	calib_tab[u]=freq;
 80014ee:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <colorHandleCalibrationValues+0x144>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a4e      	ldr	r2, [pc, #312]	; (800162c <colorHandleCalibrationValues+0x148>)
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	494e      	ldr	r1, [pc, #312]	; (8001630 <colorHandleCalibrationValues+0x14c>)
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u++;
 80014fc:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <colorHandleCalibrationValues+0x144>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a49      	ldr	r2, [pc, #292]	; (8001628 <colorHandleCalibrationValues+0x144>)
 8001504:	6013      	str	r3, [r2, #0]
	if(u==CALIBRATION_NB_VALUES){
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <colorHandleCalibrationValues+0x144>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b1e      	cmp	r3, #30
 800150c:	f040 8087 	bne.w	800161e <colorHandleCalibrationValues+0x13a>
		colorDisable(h_color_sensor);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fe03 	bl	800111c <colorDisable>
		uint32_t res=0;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<30;i++){
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	e012      	b.n	8001546 <colorHandleCalibrationValues+0x62>
			res=res+calib_tab[i];
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <colorHandleCalibrationValues+0x14c>)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
			printf("calib values[%d] : %ld\r\n",i,calib_tab[i]);
 800152e:	4a40      	ldr	r2, [pc, #256]	; (8001630 <colorHandleCalibrationValues+0x14c>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	461a      	mov	r2, r3
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	483e      	ldr	r0, [pc, #248]	; (8001634 <colorHandleCalibrationValues+0x150>)
 800153c:	f006 fd1e 	bl	8007f7c <iprintf>
		for(int i=0;i<30;i++){
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3301      	adds	r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b1d      	cmp	r3, #29
 800154a:	dde9      	ble.n	8001520 <colorHandleCalibrationValues+0x3c>
		}
		switch(h_color_sensor->calib_state){
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7d1b      	ldrb	r3, [r3, #20]
 8001550:	3b01      	subs	r3, #1
 8001552:	2b03      	cmp	r3, #3
 8001554:	d85a      	bhi.n	800160c <colorHandleCalibrationValues+0x128>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <colorHandleCalibrationValues+0x78>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	0800156d 	.word	0x0800156d
 8001560:	08001599 	.word	0x08001599
 8001564:	080015bd 	.word	0x080015bd
 8001568:	080015e9 	.word	0x080015e9
		case CALIB_VERT_CANETTE:
			h_color_sensor->calib_struct.calib_value_vert_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a32      	ldr	r2, [pc, #200]	; (8001638 <colorHandleCalibrationValues+0x154>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	845a      	strh	r2, [r3, #34]	; 0x22
			h_color_sensor->green_transformation.green_min_freq=h_color_sensor->calib_struct.calib_value_vert_canette;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	835a      	strh	r2, [r3, #26]
			printf("Struct calib : champ vert_canette remplie\r\n");
 8001584:	482d      	ldr	r0, [pc, #180]	; (800163c <colorHandleCalibrationValues+0x158>)
 8001586:	f006 fd7f 	bl	8008088 <puts>
			printf("Calib_value_vert_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800158e:	4619      	mov	r1, r3
 8001590:	482b      	ldr	r0, [pc, #172]	; (8001640 <colorHandleCalibrationValues+0x15c>)
 8001592:	f006 fcf3 	bl	8007f7c <iprintf>
			break;
 8001596:	e03d      	b.n	8001614 <colorHandleCalibrationValues+0x130>
		case CALIB_VERT_VIDE:
			h_color_sensor->calib_struct.calib_value_vert_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <colorHandleCalibrationValues+0x154>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	849a      	strh	r2, [r3, #36]	; 0x24
			printf("Struct calib : champ vert_vide remplie\r\n");
 80015a8:	4826      	ldr	r0, [pc, #152]	; (8001644 <colorHandleCalibrationValues+0x160>)
 80015aa:	f006 fd6d 	bl	8008088 <puts>
			printf("Calib_value_vert_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <colorHandleCalibrationValues+0x164>)
 80015b6:	f006 fce1 	bl	8007f7c <iprintf>
			break;
 80015ba:	e02b      	b.n	8001614 <colorHandleCalibrationValues+0x130>
		case CALIB_ROUGE_CANETTE:
			h_color_sensor->calib_struct.calib_value_rouge_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <colorHandleCalibrationValues+0x154>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	84da      	strh	r2, [r3, #38]	; 0x26
			h_color_sensor->red_transformation.red_min_freq=h_color_sensor->calib_struct.calib_value_rouge_canette;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	841a      	strh	r2, [r3, #32]
			printf("Struct calib : champ rouge_canette remplie\r\n");
 80015d4:	481d      	ldr	r0, [pc, #116]	; (800164c <colorHandleCalibrationValues+0x168>)
 80015d6:	f006 fd57 	bl	8008088 <puts>
			printf("Calib_value_rouge_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015de:	4619      	mov	r1, r3
 80015e0:	481b      	ldr	r0, [pc, #108]	; (8001650 <colorHandleCalibrationValues+0x16c>)
 80015e2:	f006 fccb 	bl	8007f7c <iprintf>
			break;
 80015e6:	e015      	b.n	8001614 <colorHandleCalibrationValues+0x130>
		case CALIB_ROUGE_VIDE:
			h_color_sensor->calib_struct.calib_value_rouge_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4a13      	ldr	r2, [pc, #76]	; (8001638 <colorHandleCalibrationValues+0x154>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	851a      	strh	r2, [r3, #40]	; 0x28
			printf("Struct calib : champ rouge_vide remplie\r\n");
 80015f8:	4816      	ldr	r0, [pc, #88]	; (8001654 <colorHandleCalibrationValues+0x170>)
 80015fa:	f006 fd45 	bl	8008088 <puts>
			printf("Calib_value_vert_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001602:	4619      	mov	r1, r3
 8001604:	4814      	ldr	r0, [pc, #80]	; (8001658 <colorHandleCalibrationValues+0x174>)
 8001606:	f006 fcb9 	bl	8007f7c <iprintf>
			break;
 800160a:	e003      	b.n	8001614 <colorHandleCalibrationValues+0x130>
		default:
			printf("bug dans la calibration\r\n\n");
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <colorHandleCalibrationValues+0x178>)
 800160e:	f006 fd3b 	bl	8008088 <puts>
			break;
 8001612:	bf00      	nop
		}
		u=0;
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <colorHandleCalibrationValues+0x144>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
		return 1;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <colorHandleCalibrationValues+0x13c>
	}
	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000354 	.word	0x20000354
 800162c:	200001fc 	.word	0x200001fc
 8001630:	200002dc 	.word	0x200002dc
 8001634:	0800afd8 	.word	0x0800afd8
 8001638:	88888889 	.word	0x88888889
 800163c:	0800aff4 	.word	0x0800aff4
 8001640:	0800b020 	.word	0x0800b020
 8001644:	0800b044 	.word	0x0800b044
 8001648:	0800b06c 	.word	0x0800b06c
 800164c:	0800b08c 	.word	0x0800b08c
 8001650:	0800b0b8 	.word	0x0800b0b8
 8001654:	0800b0dc 	.word	0x0800b0dc
 8001658:	0800b108 	.word	0x0800b108
 800165c:	0800b128 	.word	0x0800b128

08001660 <colorHandleRawValues>:

static int colorHandleRawValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	//printf("entre dans color_handle\r\n");
	if(raw_values_compteur<((NB_MEASURE_WANTED/2)-1)){
 800166a:	4b84      	ldr	r3, [pc, #528]	; (800187c <colorHandleRawValues+0x21c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b08      	cmp	r3, #8
 8001670:	d826      	bhi.n	80016c0 <colorHandleRawValues+0x60>
		// premieres valeurs du tableau donc on est dans le vert
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8b5b      	ldrh	r3, [r3, #26]
 8001676:	461a      	mov	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4293      	cmp	r3, r2
 800167c:	d202      	bcs.n	8001684 <colorHandleRawValues+0x24>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	8b5b      	ldrh	r3, [r3, #26]
 8001682:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <colorHandleRawValues+0x21c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	4a7d      	ldr	r2, [pc, #500]	; (8001880 <colorHandleRawValues+0x220>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	8adb      	ldrh	r3, [r3, #22]
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	8b12      	ldrh	r2, [r2, #24]
 80016a2:	4610      	mov	r0, r2
 80016a4:	4a75      	ldr	r2, [pc, #468]	; (800187c <colorHandleRawValues+0x21c>)
 80016a6:	7812      	ldrb	r2, [r2, #0]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4403      	add	r3, r0
 80016ac:	4a75      	ldr	r2, [pc, #468]	; (8001884 <colorHandleRawValues+0x224>)
 80016ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 80016b2:	4b72      	ldr	r3, [pc, #456]	; (800187c <colorHandleRawValues+0x21c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b70      	ldr	r3, [pc, #448]	; (800187c <colorHandleRawValues+0x21c>)
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e0d7      	b.n	8001870 <colorHandleRawValues+0x210>
	}

	else if(raw_values_compteur==((NB_MEASURE_WANTED/2)-1)){
 80016c0:	4b6e      	ldr	r3, [pc, #440]	; (800187c <colorHandleRawValues+0x21c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d130      	bne.n	800172a <colorHandleRawValues+0xca>
		//on est encore dans le vert mais on doit en plus changer la couleur de detection
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	8b5b      	ldrh	r3, [r3, #26]
 80016cc:	461a      	mov	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d202      	bcs.n	80016da <colorHandleRawValues+0x7a>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8b5b      	ldrh	r3, [r3, #26]
 80016d8:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80016da:	4b68      	ldr	r3, [pc, #416]	; (800187c <colorHandleRawValues+0x21c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	4a67      	ldr	r2, [pc, #412]	; (8001880 <colorHandleRawValues+0x220>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	8adb      	ldrh	r3, [r3, #22]
 80016ec:	461a      	mov	r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	8b12      	ldrh	r2, [r2, #24]
 80016f8:	4610      	mov	r0, r2
 80016fa:	4a60      	ldr	r2, [pc, #384]	; (800187c <colorHandleRawValues+0x21c>)
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	4611      	mov	r1, r2
 8001700:	4403      	add	r3, r0
 8001702:	4a60      	ldr	r2, [pc, #384]	; (8001884 <colorHandleRawValues+0x224>)
 8001704:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 8001708:	4b5c      	ldr	r3, [pc, #368]	; (800187c <colorHandleRawValues+0x21c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <colorHandleRawValues+0x21c>)
 8001712:	701a      	strb	r2, [r3, #0]

		// color change
		colorDisable(h_color_sensor);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fd01 	bl	800111c <colorDisable>
		colorSetPhotodiodeType(h_color_sensor,RED);
 800171a:	2101      	movs	r1, #1
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fc4d 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(h_color_sensor);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fd26 	bl	8001174 <colorEnable>
 8001728:	e0a2      	b.n	8001870 <colorHandleRawValues+0x210>
	}

	else if((raw_values_compteur>((NB_MEASURE_WANTED/2)-1))&&(raw_values_compteur<NB_MEASURE_WANTED)){
 800172a:	4b54      	ldr	r3, [pc, #336]	; (800187c <colorHandleRawValues+0x21c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b09      	cmp	r3, #9
 8001730:	d92a      	bls.n	8001788 <colorHandleRawValues+0x128>
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <colorHandleRawValues+0x21c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b13      	cmp	r3, #19
 8001738:	d826      	bhi.n	8001788 <colorHandleRawValues+0x128>
		// valeures rouges
		if(frequence<(h_color_sensor->red_transformation.red_min_freq)){
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	8c1b      	ldrh	r3, [r3, #32]
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4293      	cmp	r3, r2
 8001744:	d202      	bcs.n	800174c <colorHandleRawValues+0xec>
			frequence = (uint32_t)h_color_sensor->red_transformation.red_min_freq;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8c1b      	ldrh	r3, [r3, #32]
 800174a:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <colorHandleRawValues+0x21c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4a4b      	ldr	r2, [pc, #300]	; (8001880 <colorHandleRawValues+0x220>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->red_transformation.red_coef_dir)*frequence)+(h_color_sensor->red_transformation.red_ord_origin);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	8b9b      	ldrh	r3, [r3, #28]
 800175e:	461a      	mov	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	8bd2      	ldrh	r2, [r2, #30]
 800176a:	4610      	mov	r0, r2
 800176c:	4a43      	ldr	r2, [pc, #268]	; (800187c <colorHandleRawValues+0x21c>)
 800176e:	7812      	ldrb	r2, [r2, #0]
 8001770:	4611      	mov	r1, r2
 8001772:	4403      	add	r3, r0
 8001774:	4a43      	ldr	r2, [pc, #268]	; (8001884 <colorHandleRawValues+0x224>)
 8001776:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <colorHandleRawValues+0x21c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <colorHandleRawValues+0x21c>)
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e073      	b.n	8001870 <colorHandleRawValues+0x210>
	}

	else if(raw_values_compteur==NB_MEASURE_WANTED){
 8001788:	4b3c      	ldr	r3, [pc, #240]	; (800187c <colorHandleRawValues+0x21c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b14      	cmp	r3, #20
 800178e:	d16f      	bne.n	8001870 <colorHandleRawValues+0x210>
		// Pret a faire la moyenne du tableau pour plus de fiabilité
		colorDisable(h_color_sensor);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fcc3 	bl	800111c <colorDisable>
		uint32_t green_mean=0;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
		uint32_t red_mean=0;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]

		// green mean with erase of waste values (the 2 first one each time)
		//printf("calcul moyenne vert\r\n");
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 800179e:	2302      	movs	r3, #2
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e009      	b.n	80017b8 <colorHandleRawValues+0x158>
			green_mean=green_mean+color_scaled_values[i];
 80017a4:	4a37      	ldr	r2, [pc, #220]	; (8001884 <colorHandleRawValues+0x224>)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	61fb      	str	r3, [r7, #28]
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	ddf2      	ble.n	80017a4 <colorHandleRawValues+0x144>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne verte : %ld\r\n",i,color_scaled_values[i]);
			printf("green mean : %ld\r\n",green_mean);*/
		}
		green_color_value=floor(green_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe febe 	bl	8000544 <__aeabi_ui2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff fa0a 	bl	8000be8 <__aeabi_d2uiz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <colorHandleRawValues+0x228>)
 80017d8:	6013      	str	r3, [r2, #0]
		h_color_sensor->green_color=green_color_value;
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <colorHandleRawValues+0x228>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]
		//printf("green color value : %ld\r\n",green_color_value);


		//red values mean
		//printf("calcul moyenne rouge\r\n");
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017e2:	230c      	movs	r3, #12
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e009      	b.n	80017fc <colorHandleRawValues+0x19c>
			red_mean=red_mean+color_scaled_values[i];
 80017e8:	4a26      	ldr	r2, [pc, #152]	; (8001884 <colorHandleRawValues+0x224>)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3301      	adds	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b13      	cmp	r3, #19
 8001800:	ddf2      	ble.n	80017e8 <colorHandleRawValues+0x188>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne rouge : %ld\r\n",i,color_scaled_values[i]);
			printf("red mean : %ld\r\n",red_mean);*/
		}
		red_color_value=floor(red_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe9c 	bl	8000544 <__aeabi_ui2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9e8 	bl	8000be8 <__aeabi_d2uiz>
 8001818:	4603      	mov	r3, r0
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <colorHandleRawValues+0x22c>)
 800181c:	6013      	str	r3, [r2, #0]
		h_color_sensor->red_color=red_color_value;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <colorHandleRawValues+0x22c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]

		//--debug
		//printf("red color value : %ld\r\n",red_color_value);

		raw_values_compteur=0;
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <colorHandleRawValues+0x21c>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]

		//Affichage tableau
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e010      	b.n	8001854 <colorHandleRawValues+0x1f4>
			printf("color_raw_values[%d] : %ld\t->\t color_scaled_value[%d] : %ld\r\n",i,color_raw_values[i],i,color_scaled_values[i]);
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <colorHandleRawValues+0x220>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800183a:	4912      	ldr	r1, [pc, #72]	; (8001884 <colorHandleRawValues+0x224>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	4811      	ldr	r0, [pc, #68]	; (8001890 <colorHandleRawValues+0x230>)
 800184a:	f006 fb97 	bl	8007f7c <iprintf>
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b13      	cmp	r3, #19
 8001858:	ddeb      	ble.n	8001832 <colorHandleRawValues+0x1d2>
		}
		colorAnalyse(h_color_sensor,green_color_value,red_color_value);
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <colorHandleRawValues+0x228>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <colorHandleRawValues+0x22c>)
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f817 	bl	8001898 <colorAnalyse>
		printf("waiting for button press : \r\n");
 800186a:	480a      	ldr	r0, [pc, #40]	; (8001894 <colorHandleRawValues+0x234>)
 800186c:	f006 fc0c 	bl	8008088 <puts>
	}

	return 0; // fonctionnement normal
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200002cc 	.word	0x200002cc
 8001880:	2000026c 	.word	0x2000026c
 8001884:	2000020c 	.word	0x2000020c
 8001888:	200002d0 	.word	0x200002d0
 800188c:	200002d4 	.word	0x200002d4
 8001890:	0800b144 	.word	0x0800b144
 8001894:	0800b184 	.word	0x0800b184

08001898 <colorAnalyse>:


// --- fonction d'analyse et de prise de décision ---

static void colorAnalyse(h_color_sensor_t * h_color_sensor, color_t green, color_t red){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	printf("green : %ld \r\n",green);
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	480f      	ldr	r0, [pc, #60]	; (80018e4 <colorAnalyse+0x4c>)
 80018a8:	f006 fb68 	bl	8007f7c <iprintf>
	printf("red : %ld \r\n",red);
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <colorAnalyse+0x50>)
 80018b0:	f006 fb64 	bl	8007f7c <iprintf>
	if(green<red){
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d203      	bcs.n	80018c4 <colorAnalyse+0x2c>
		printf("c'est vert\r\n");
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <colorAnalyse+0x54>)
 80018be:	f006 fbe3 	bl	8008088 <puts>
		colorDoMeasureAgain(h_color_sensor);
	}
	else {
		printf("c'est rouge\r\n");
	}
}
 80018c2:	e00a      	b.n	80018da <colorAnalyse+0x42>
	else if(green==red){
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d103      	bne.n	80018d4 <colorAnalyse+0x3c>
		colorDoMeasureAgain(h_color_sensor);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f811 	bl	80018f4 <colorDoMeasureAgain>
}
 80018d2:	e002      	b.n	80018da <colorAnalyse+0x42>
		printf("c'est rouge\r\n");
 80018d4:	4806      	ldr	r0, [pc, #24]	; (80018f0 <colorAnalyse+0x58>)
 80018d6:	f006 fbd7 	bl	8008088 <puts>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800b1a4 	.word	0x0800b1a4
 80018e8:	0800b1b4 	.word	0x0800b1b4
 80018ec:	0800b1c4 	.word	0x0800b1c4
 80018f0:	0800b1d0 	.word	0x0800b1d0

080018f4 <colorDoMeasureAgain>:

static void colorDoMeasureAgain(h_color_sensor_t * h_color_sensor){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	colorEnable(h_color_sensor);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fc39 	bl	8001174 <colorEnable>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <timer_handle>:
 * tim_mode_t mode : htim configuration accirding to what is in .ioc file (INPUT_CAPTURE_IT, BASE_IT, PWM)
 * tim_status_t status : same but START,STOP
 * uint32_t channel ; the output channel of htim
 * @return none
 */
void timer_handle(TIM_HandleTypeDef htim, tim_mode_t mode, tim_status_t status,uint32_t channel){
 800190a:	b084      	sub	sp, #16
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
 8001910:	f107 0c08 	add.w	ip, r7, #8
 8001914:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(status==START){
 8001918:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800191c:	2b01      	cmp	r3, #1
 800191e:	d11b      	bne.n	8001958 <timer_handle+0x4e>
		switch(mode){
 8001920:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001924:	2b03      	cmp	r3, #3
 8001926:	d00c      	beq.n	8001942 <timer_handle+0x38>
 8001928:	2b03      	cmp	r3, #3
 800192a:	dc53      	bgt.n	80019d4 <timer_handle+0xca>
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <timer_handle+0x2c>
 8001930:	2b02      	cmp	r3, #2
 8001932:	d00c      	beq.n	800194e <timer_handle+0x44>
			break;
		case BASE_IT:
			HAL_TIM_Base_Start_IT(&htim);
			break;
		default :
			break;
 8001934:	e04e      	b.n	80019d4 <timer_handle+0xca>
			HAL_TIM_IC_Start_IT(&htim, channel);
 8001936:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001938:	f107 0008 	add.w	r0, r7, #8
 800193c:	f002 fcd0 	bl	80042e0 <HAL_TIM_IC_Start_IT>
			break;
 8001940:	e04f      	b.n	80019e2 <timer_handle+0xd8>
			HAL_TIM_PWM_Start(&htim,channel);
 8001942:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001944:	f107 0008 	add.w	r0, r7, #8
 8001948:	f002 faee 	bl	8003f28 <HAL_TIM_PWM_Start>
			break;
 800194c:	e049      	b.n	80019e2 <timer_handle+0xd8>
			HAL_TIM_Base_Start_IT(&htim);
 800194e:	f107 0008 	add.w	r0, r7, #8
 8001952:	f002 f9e1 	bl	8003d18 <HAL_TIM_Base_Start_IT>
			break;
 8001956:	e044      	b.n	80019e2 <timer_handle+0xd8>
		}
	}
	else if (status==STOP){
 8001958:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11b      	bne.n	8001998 <timer_handle+0x8e>
		switch(mode){
 8001960:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001964:	2b03      	cmp	r3, #3
 8001966:	d00c      	beq.n	8001982 <timer_handle+0x78>
 8001968:	2b03      	cmp	r3, #3
 800196a:	dc35      	bgt.n	80019d8 <timer_handle+0xce>
 800196c:	2b01      	cmp	r3, #1
 800196e:	d002      	beq.n	8001976 <timer_handle+0x6c>
 8001970:	2b02      	cmp	r3, #2
 8001972:	d00c      	beq.n	800198e <timer_handle+0x84>
			break;
		case BASE_IT:
			HAL_TIM_Base_Stop_IT(&htim);
			break;
		default :
			break;
 8001974:	e030      	b.n	80019d8 <timer_handle+0xce>
			HAL_TIM_IC_Stop_IT(&htim, channel);
 8001976:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001978:	f107 0008 	add.w	r0, r7, #8
 800197c:	f002 fe00 	bl	8004580 <HAL_TIM_IC_Stop_IT>
			break;
 8001980:	e02f      	b.n	80019e2 <timer_handle+0xd8>
			HAL_TIM_PWM_Stop(&htim,channel);
 8001982:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001984:	f107 0008 	add.w	r0, r7, #8
 8001988:	f002 fbc8 	bl	800411c <HAL_TIM_PWM_Stop>
			break;
 800198c:	e029      	b.n	80019e2 <timer_handle+0xd8>
			HAL_TIM_Base_Stop_IT(&htim);
 800198e:	f107 0008 	add.w	r0, r7, #8
 8001992:	f002 fa39 	bl	8003e08 <HAL_TIM_Base_Stop_IT>
			break;
 8001996:	e024      	b.n	80019e2 <timer_handle+0xd8>
		}
	}
	else if (status==INIT){
 8001998:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800199c:	2b02      	cmp	r3, #2
 800199e:	d11d      	bne.n	80019dc <timer_handle+0xd2>
		switch(mode){
 80019a0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d00b      	beq.n	80019c0 <timer_handle+0xb6>
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	dc19      	bgt.n	80019e0 <timer_handle+0xd6>
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d002      	beq.n	80019b6 <timer_handle+0xac>
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d00a      	beq.n	80019ca <timer_handle+0xc0>
			break;
		case BASE_IT:
			HAL_TIM_Base_Init(&htim);
			break;
		default :
			break;
 80019b4:	e014      	b.n	80019e0 <timer_handle+0xd6>
			HAL_TIM_IC_Init(&htim);
 80019b6:	f107 0008 	add.w	r0, r7, #8
 80019ba:	f002 fc2f 	bl	800421c <HAL_TIM_IC_Init>
			break;
 80019be:	e010      	b.n	80019e2 <timer_handle+0xd8>
			HAL_TIM_PWM_Init(&htim);
 80019c0:	f107 0008 	add.w	r0, r7, #8
 80019c4:	f002 fa4f 	bl	8003e66 <HAL_TIM_PWM_Init>
			break;
 80019c8:	e00b      	b.n	80019e2 <timer_handle+0xd8>
			HAL_TIM_Base_Init(&htim);
 80019ca:	f107 0008 	add.w	r0, r7, #8
 80019ce:	f002 f94b 	bl	8003c68 <HAL_TIM_Base_Init>
			break;
 80019d2:	e006      	b.n	80019e2 <timer_handle+0xd8>
			break;
 80019d4:	bf00      	nop
 80019d6:	e004      	b.n	80019e2 <timer_handle+0xd8>
			break;
 80019d8:	bf00      	nop
 80019da:	e002      	b.n	80019e2 <timer_handle+0xd8>
		}
	}
 80019dc:	bf00      	nop
 80019de:	e000      	b.n	80019e2 <timer_handle+0xd8>
			break;
 80019e0:	bf00      	nop
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019ea:	b004      	add	sp, #16
 80019ec:	4770      	bx	lr

080019ee <GPIO_write>:
 * uint16_t gpio_pin : The pin of the GPIO you want to deal with
 * GPIO_PinState gpio_PinState : the state you want your GPIO to have (1 or 0)
 *
 * @return 0 if fail else 1
 */
void GPIO_write(GPIO_TypeDef * gpio_port,uint16_t gpio_pin,GPIO_PinState gpio_PinState ){
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]
 80019fa:	4613      	mov	r3, r2
 80019fc:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(gpio_port,gpio_pin,gpio_PinState);
 80019fe:	787a      	ldrb	r2, [r7, #1]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 f801 	bl	8002a0c <HAL_GPIO_WritePin>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <vApplicationGetIdleTaskMemory+0x30>)
 8001a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000035c 	.word	0x2000035c
 8001a44:	20000410 	.word	0x20000410

08001a48 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_FREERTOS_Init+0x30>)
 8001a50:	1d3c      	adds	r4, r7, #4
 8001a52:	461d      	mov	r5, r3
 8001a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 f9e5 	bl	8005e34 <osThreadCreate>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <MX_FREERTOS_Init+0x34>)
 8001a6e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	0800b1ec 	.word	0x0800b1ec
 8001a7c:	20000358 	.word	0x20000358

08001a80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f004 fa1f 	bl	8005ecc <osDelay>
 8001a8e:	e7fb      	b.n	8001a88 <StartDefaultTask+0x8>

08001a90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a40      	ldr	r2, [pc, #256]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a3a      	ldr	r2, [pc, #232]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a34      	ldr	r2, [pc, #208]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(color_S2_GPIO_Port, color_S2_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2110      	movs	r1, #16
 8001b3a:	4829      	ldr	r0, [pc, #164]	; (8001be0 <MX_GPIO_Init+0x150>)
 8001b3c:	f000 ff66 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, color_enable_Pin|color_S0_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	21c0      	movs	r1, #192	; 0xc0
 8001b44:	4827      	ldr	r0, [pc, #156]	; (8001be4 <MX_GPIO_Init+0x154>)
 8001b46:	f000 ff61 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, color_S3_Pin|color_S1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	21c0      	movs	r1, #192	; 0xc0
 8001b4e:	4826      	ldr	r0, [pc, #152]	; (8001be8 <MX_GPIO_Init+0x158>)
 8001b50:	f000 ff5c 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = color_S2_Pin;
 8001b54:	2310      	movs	r3, #16
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(color_S2_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <MX_GPIO_Init+0x150>)
 8001b6c:	f000 fda2 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8001b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4819      	ldr	r0, [pc, #100]	; (8001bec <MX_GPIO_Init+0x15c>)
 8001b88:	f000 fd94 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = color_enable_Pin|color_S0_Pin;
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_GPIO_Init+0x154>)
 8001ba4:	f000 fd86 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = color_S3_Pin|color_S1_Pin;
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480a      	ldr	r0, [pc, #40]	; (8001be8 <MX_GPIO_Init+0x158>)
 8001bc0:	f000 fd78 	bl	80026b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	2028      	movs	r0, #40	; 0x28
 8001bca:	f000 fd49 	bl	8002660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bce:	2028      	movs	r0, #40	; 0x28
 8001bd0:	f000 fd62 	bl	8002698 <HAL_NVIC_EnableIRQ>

}
 8001bd4:	bf00      	nop
 8001bd6:	3730      	adds	r7, #48	; 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==button_Pin){
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c00:	d109      	bne.n	8001c16 <HAL_GPIO_EXTI_Callback+0x26>
		printf("----- appui bouton -----\r\n");
 8001c02:	4807      	ldr	r0, [pc, #28]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x30>)
 8001c04:	f006 fa40 	bl	8008088 <puts>
		colorSetPhotodiodeType(&color_sensor1, GREEN);
 8001c08:	2104      	movs	r1, #4
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x34>)
 8001c0c:	f7ff f9d6 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(&color_sensor1);
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x34>)
 8001c12:	f7ff faaf 	bl	8001174 <colorEnable>
	}
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800b208 	.word	0x0800b208
 8001c24:	20000610 	.word	0x20000610

08001c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2c:	f000 fc33 	bl	8002496 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c30:	f000 f832 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c34:	f7ff ff2c 	bl	8001a90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c38:	f000 fa96 	bl	8002168 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001c3c:	f000 fb50 	bl	80022e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //desactive the internal buffering for scanf, that is set by default in syscalls.c
  setvbuf(stdin, NULL, _IONBF, 0);
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <main+0x5c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6858      	ldr	r0, [r3, #4]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2202      	movs	r2, #2
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f006 fab6 	bl	80081bc <setvbuf>

	printf("---- color sensor ----\r\n");
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <main+0x60>)
 8001c52:	f006 fa19 	bl	8008088 <puts>
  color_sensor_init(&color_sensor1,GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
  printf("color sensor initialized\r\nwaiting for button press : \r\n");*/


  	// ----- test 3 : Fonction de calibration -----
  	printf("--- calibration lancée ---\r\n");
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <main+0x64>)
 8001c58:	f006 fa16 	bl	8008088 <puts>
  	colorSensorInit(&color_sensor1, GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2204      	movs	r2, #4
 8001c60:	2104      	movs	r1, #4
 8001c62:	480b      	ldr	r0, [pc, #44]	; (8001c90 <main+0x68>)
 8001c64:	f7ff fa0a 	bl	800107c <colorSensorInit>
  	colorHandleCalibrationSensor(&color_sensor1);
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <main+0x68>)
 8001c6a:	f7ff faaf 	bl	80011cc <colorHandleCalibrationSensor>
  	printf("waiting for button press to measure : \r\n");
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <main+0x6c>)
 8001c70:	f006 fa0a 	bl	8008088 <puts>


  	vTaskStartScheduler();
 8001c74:	f004 fbda 	bl	800642c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001c78:	f7ff fee6 	bl	8001a48 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c7c:	f004 f8d3 	bl	8005e26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001c80:	e7fe      	b.n	8001c80 <main+0x58>
 8001c82:	bf00      	nop
 8001c84:	20000010 	.word	0x20000010
 8001c88:	0800b224 	.word	0x0800b224
 8001c8c:	0800b23c 	.word	0x0800b23c
 8001c90:	20000610 	.word	0x20000610
 8001c94:	0800b25c 	.word	0x0800b25c

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	; 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	; 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f005 fc61 	bl	800756e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <SystemClock_Config+0xd4>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <SystemClock_Config+0xd4>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <SystemClock_Config+0xd4>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <SystemClock_Config+0xd8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <SystemClock_Config+0xd8>)
 8001cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <SystemClock_Config+0xd8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d00:	2319      	movs	r3, #25
 8001d02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001d04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001d08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001d0e:	2309      	movs	r3, #9
 8001d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fefa 	bl	8002b10 <HAL_RCC_OscConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d22:	f000 f869 	bl	8001df8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d26:	f000 fea3 	bl	8002a70 <HAL_PWREx_EnableOverDrive>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d30:	f000 f862 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d34:	230f      	movs	r3, #15
 8001d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2106      	movs	r1, #6
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f980 	bl	8003058 <HAL_RCC_ClockConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001d5e:	f000 f84b 	bl	8001df8 <Error_Handler>
  }
}
 8001d62:	bf00      	nop
 8001d64:	3750      	adds	r7, #80	; 0x50
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000

08001d74 <__io_putchar>:

/* USER CODE BEGIN 4 */

//--_ Redirection du printf
int __io_putchar(int ch){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d7c:	1d39      	adds	r1, r7, #4
 8001d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d82:	2201      	movs	r2, #1
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <__io_putchar+0x20>)
 8001d86:	f003 faeb 	bl	8005360 <HAL_UART_Transmit>
	return ch;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200006d8 	.word	0x200006d8

08001d98 <__io_getchar>:


// --- redirection du scanf
int __io_getchar(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <__io_getchar+0x38>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2208      	movs	r2, #8
 8001da8:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001daa:	1df9      	adds	r1, r7, #7
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	2201      	movs	r2, #1
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <__io_getchar+0x38>)
 8001db4:	f003 fb57 	bl	8005466 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001db8:	1df9      	adds	r1, r7, #7
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <__io_getchar+0x38>)
 8001dc2:	f003 facd 	bl	8005360 <HAL_UART_Transmit>
  return ch;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200006d8 	.word	0x200006d8

08001dd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001de6:	f000 fb63 	bl	80024b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40001000 	.word	0x40001000

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	f06f 0001 	mvn.w	r0, #1
 8001e42:	f000 fc0d 	bl	8002660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_InitTick+0xe0>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <HAL_InitTick+0xe0>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_InitTick+0xe0>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e7c:	f107 0210 	add.w	r2, r7, #16
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 facc 	bl	8003424 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e96:	f001 fa9d 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8001e9a:	6378      	str	r0, [r7, #52]	; 0x34
 8001e9c:	e004      	b.n	8001ea8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e9e:	f001 fa99 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_InitTick+0xe4>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_InitTick+0xe8>)
 8001eb8:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <HAL_InitTick+0xec>)
 8001eba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001edc:	4817      	ldr	r0, [pc, #92]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ede:	f001 fec3 	bl	8003c68 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d11b      	bne.n	8001f28 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <HAL_InitTick+0xe8>)
 8001ef2:	f001 ff11 	bl	8003d18 <HAL_TIM_Base_Start_IT>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001efc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d111      	bne.n	8001f28 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f04:	2036      	movs	r0, #54	; 0x36
 8001f06:	f000 fbc7 	bl	8002698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	d808      	bhi.n	8001f22 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	2036      	movs	r0, #54	; 0x36
 8001f16:	f000 fba3 	bl	8002660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_InitTick+0xf0>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e002      	b.n	8001f28 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3738      	adds	r7, #56	; 0x38
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	431bde83 	.word	0x431bde83
 8001f3c:	2000063c 	.word	0x2000063c
 8001f40:	40001000 	.word	0x40001000
 8001f44:	20000004 	.word	0x20000004

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	colorSensorHandleInputCapture_IT(&color_sensor1, TIM2);
 8001f78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <TIM2_IRQHandler+0x18>)
 8001f7e:	f7ff fa4f 	bl	8001420 <colorSensorHandleInputCapture_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <TIM2_IRQHandler+0x1c>)
 8001f84:	f002 fbba 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000610 	.word	0x20000610
 8001f90:	2000068c 	.word	0x2000068c

08001f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001f98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f9c:	f000 fd50 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM6_DAC_IRQHandler+0x10>)
 8001faa:	f002 fba7 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000063c 	.word	0x2000063c

08001fb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
	return 1;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_kill>:

int _kill(int pid, int sig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fd2:	f005 f97f 	bl	80072d4 <__errno>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2216      	movs	r2, #22
 8001fda:	601a      	str	r2, [r3, #0]
	return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_exit>:

void _exit (int status)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ffe7 	bl	8001fc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ffa:	e7fe      	b.n	8001ffa <_exit+0x12>

08001ffc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e00a      	b.n	8002024 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800200e:	f7ff fec3 	bl	8001d98 <__io_getchar>
 8002012:	4601      	mov	r1, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	b2ca      	uxtb	r2, r1
 800201c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf0      	blt.n	800200e <_read+0x12>
	}

return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e009      	b.n	800205c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fe8f 	bl	8001d74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	dbf1      	blt.n	8002048 <_write+0x12>
	}
	return len;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_close>:

int _close(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002096:	605a      	str	r2, [r3, #4]
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_isatty>:

int _isatty(int file)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	return 1;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002108:	f005 f8e4 	bl	80072d4 <__errno>
 800210c:	4603      	mov	r3, r0
 800210e:	220c      	movs	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20050000 	.word	0x20050000
 8002138:	00000400 	.word	0x00000400
 800213c:	20000688 	.word	0x20000688
 8002140:	200044c0 	.word	0x200044c0

08002144 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <SystemInit+0x20>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <SystemInit+0x20>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <MX_TIM2_Init+0xdc>)
 8002196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <MX_TIM2_Init+0xdc>)
 800219e:	2263      	movs	r2, #99	; 0x63
 80021a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021aa:	4a27      	ldr	r2, [pc, #156]	; (8002248 <MX_TIM2_Init+0xe0>)
 80021ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ba:	4822      	ldr	r0, [pc, #136]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021bc:	f001 fd54 	bl	8003c68 <HAL_TIM_Base_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80021c6:	f7ff fe17 	bl	8001df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021d0:	f107 0320 	add.w	r3, r7, #32
 80021d4:	4619      	mov	r1, r3
 80021d6:	481b      	ldr	r0, [pc, #108]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021d8:	f002 fc4c 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021e2:	f7ff fe09 	bl	8001df8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80021e6:	4817      	ldr	r0, [pc, #92]	; (8002244 <MX_TIM2_Init+0xdc>)
 80021e8:	f002 f818 	bl	800421c <HAL_TIM_IC_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021f2:	f7ff fe01 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	480f      	ldr	r0, [pc, #60]	; (8002244 <MX_TIM2_Init+0xdc>)
 8002206:	f002 ffb1 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002210:	f7ff fdf2 	bl	8001df8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002218:	2301      	movs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2200      	movs	r2, #0
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <MX_TIM2_Init+0xdc>)
 800222c:	f002 fb85 	bl	800493a <HAL_TIM_IC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002236:	f7ff fddf 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3730      	adds	r7, #48	; 0x30
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000068c 	.word	0x2000068c
 8002248:	000f4240 	.word	0x000f4240

0800224c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d130      	bne.n	80022d0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = color_input_freq_Pin;
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(color_input_freq_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4808      	ldr	r0, [pc, #32]	; (80022dc <HAL_TIM_Base_MspInit+0x90>)
 80022bc:	f000 f9fa 	bl	80026b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2105      	movs	r1, #5
 80022c4:	201c      	movs	r0, #28
 80022c6:	f000 f9cb 	bl	8002660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022ca:	201c      	movs	r0, #28
 80022cc:	f000 f9e4 	bl	8002698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_USART1_UART_Init+0x58>)
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <MX_USART1_UART_Init+0x5c>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_USART1_UART_Init+0x58>)
 80022ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_USART1_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_USART1_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_USART1_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_USART1_UART_Init+0x58>)
 8002306:	220c      	movs	r2, #12
 8002308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_USART1_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_USART1_UART_Init+0x58>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_USART1_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_USART1_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_USART1_UART_Init+0x58>)
 8002324:	f002 ffce 	bl	80052c4 <HAL_UART_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800232e:	f7ff fd63 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200006d8 	.word	0x200006d8
 800233c:	40011000 	.word	0x40011000

08002340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ac      	sub	sp, #176	; 0xb0
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	2284      	movs	r2, #132	; 0x84
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f005 f904 	bl	800756e <memset>
  if(uartHandle->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a32      	ldr	r2, [pc, #200]	; (8002434 <HAL_UART_MspInit+0xf4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d15c      	bne.n	800242a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002374:	2300      	movs	r3, #0
 8002376:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f883 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002388:	f7ff fd36 	bl	8001df8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_UART_MspInit+0xf8>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <HAL_UART_MspInit+0xf8>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6453      	str	r3, [r2, #68]	; 0x44
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_UART_MspInit+0xf8>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	6313      	str	r3, [r2, #48]	; 0x30
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6313      	str	r3, [r2, #48]	; 0x30
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ec:	2307      	movs	r3, #7
 80023ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f6:	4619      	mov	r1, r3
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <HAL_UART_MspInit+0xfc>)
 80023fa:	f000 f95b 	bl	80026b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002422:	4619      	mov	r1, r3
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <HAL_UART_MspInit+0x100>)
 8002426:	f000 f945 	bl	80026b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800242a:	bf00      	nop
 800242c:	37b0      	adds	r7, #176	; 0xb0
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40011000 	.word	0x40011000
 8002438:	40023800 	.word	0x40023800
 800243c:	40020400 	.word	0x40020400
 8002440:	40020000 	.word	0x40020000

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800244a:	490e      	ldr	r1, [pc, #56]	; (8002484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002460:	4c0b      	ldr	r4, [pc, #44]	; (8002490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800246e:	f7ff fe69 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f005 f847 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7ff fbd7 	bl	8001c28 <main>
  bx  lr    
 800247a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002484:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002488:	0800b6b8 	.word	0x0800b6b8
  ldr r2, =_sbss
 800248c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002490:	200044c0 	.word	0x200044c0

08002494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>

08002496 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249a:	2003      	movs	r0, #3
 800249c:	f000 f8d5 	bl	800264a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a0:	200f      	movs	r0, #15
 80024a2:	f7ff fcd7 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a6:	f7ff fcad 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000760 	.word	0x20000760

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000760 	.word	0x20000760

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <__NVIC_SetPriorityGrouping+0x40>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	4313      	orrs	r3, r2
 800251c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <__NVIC_SetPriorityGrouping+0x40>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60d3      	str	r3, [r2, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	05fa0000 	.word	0x05fa0000

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff4c 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002672:	f7ff ff61 	bl	8002538 <__NVIC_GetPriorityGrouping>
 8002676:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff ffb1 	bl	80025e4 <NVIC_EncodePriority>
 8002682:	4602      	mov	r2, r0
 8002684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff80 	bl	8002590 <__NVIC_SetPriority>
}
 8002690:	bf00      	nop
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff54 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	e175      	b.n	80029c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	f040 8164 	bne.w	80029ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d005      	beq.n	800270a <HAL_GPIO_Init+0x56>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d130      	bne.n	800276c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 0201 	and.w	r2, r3, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b03      	cmp	r3, #3
 8002776:	d017      	beq.n	80027a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d123      	bne.n	80027fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	08da      	lsrs	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3208      	adds	r2, #8
 80027bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	220f      	movs	r2, #15
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	08da      	lsrs	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	69b9      	ldr	r1, [r7, #24]
 80027f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0203 	and.w	r2, r3, #3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80be 	beq.w	80029ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_GPIO_Init+0x324>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_GPIO_Init+0x324>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_GPIO_Init+0x324>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002856:	4a61      	ldr	r2, [pc, #388]	; (80029dc <HAL_GPIO_Init+0x328>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_GPIO_Init+0x32c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d037      	beq.n	80028f2 <HAL_GPIO_Init+0x23e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <HAL_GPIO_Init+0x330>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <HAL_GPIO_Init+0x23a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a56      	ldr	r2, [pc, #344]	; (80029e8 <HAL_GPIO_Init+0x334>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02b      	beq.n	80028ea <HAL_GPIO_Init+0x236>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a55      	ldr	r2, [pc, #340]	; (80029ec <HAL_GPIO_Init+0x338>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_Init+0x232>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a54      	ldr	r2, [pc, #336]	; (80029f0 <HAL_GPIO_Init+0x33c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_Init+0x22e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a53      	ldr	r2, [pc, #332]	; (80029f4 <HAL_GPIO_Init+0x340>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_Init+0x22a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x344>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x348>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x34c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x350>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_Init+0x21a>
 80028ca:	2309      	movs	r3, #9
 80028cc:	e012      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028ce:	230a      	movs	r3, #10
 80028d0:	e010      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028d2:	2308      	movs	r3, #8
 80028d4:	e00e      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e00c      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028da:	2306      	movs	r3, #6
 80028dc:	e00a      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028de:	2305      	movs	r3, #5
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028f2:	2300      	movs	r3, #0
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	f002 0203 	and.w	r2, r2, #3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002904:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x328>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002936:	4a34      	ldr	r2, [pc, #208]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_GPIO_Init+0x354>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002960:	4a29      	ldr	r2, [pc, #164]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800298a:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_GPIO_Init+0x354>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_GPIO_Init+0x354>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3301      	adds	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	f67f ae86 	bls.w	80026d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40021400 	.word	0x40021400
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021c00 	.word	0x40021c00
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40022400 	.word	0x40022400
 8002a08:	40013c00 	.word	0x40013c00

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	619a      	str	r2, [r3, #24]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f8c6 	bl	8001bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9e:	f7ff fd1b 	bl	80024d8 <HAL_GetTick>
 8002aa2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa4:	e009      	b.n	8002aba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aa6:	f7ff fd17 	bl	80024d8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab4:	d901      	bls.n	8002aba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e022      	b.n	8002b00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7ff fd00 	bl	80024d8 <HAL_GetTick>
 8002ad8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ada:	e009      	b.n	8002af0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002adc:	f7ff fcfc 	bl	80024d8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aea:	d901      	bls.n	8002af0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e007      	b.n	8002b00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002afc:	d1ee      	bne.n	8002adc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40007000 	.word	0x40007000

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e291      	b.n	800304a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8087 	beq.w	8002c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b34:	4b96      	ldr	r3, [pc, #600]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d00c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b40:	4b93      	ldr	r3, [pc, #588]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d112      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62>
 8002b4c:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x130>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d168      	bne.n	8002c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e26b      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7a>
 8002b7c:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e02e      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x9c>
 8002b92:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7e      	ldr	r2, [pc, #504]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7b      	ldr	r2, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6b      	ldr	r2, [pc, #428]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fc72 	bl	80024d8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff fc6e 	bl	80024d8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e21f      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xe8>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff fc5e 	bl	80024d8 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff fc5a 	bl	80024d8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e20b      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x110>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d069      	beq.n	8002d22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x190>
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1df      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	493d      	ldr	r1, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e040      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d023      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7ff fc10 	bl	80024d8 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7ff fc0c 	bl	80024d8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1bd      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4929      	ldr	r1, [pc, #164]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
 8002cee:	e018      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fbec 	bl	80024d8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7ff fbe8 	bl	80024d8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e199      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d038      	beq.n	8002da0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7ff fbc9 	bl	80024d8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7ff fbc5 	bl	80024d8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e176      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x23a>
 8002d68:	e01a      	b.n	8002da0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7ff fbaf 	bl	80024d8 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7ff fbab 	bl	80024d8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d903      	bls.n	8002d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e15c      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
 8002d90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b91      	ldr	r3, [pc, #580]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a4 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b8b      	ldr	r3, [pc, #556]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a87      	ldr	r2, [pc, #540]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002de2:	4b7f      	ldr	r3, [pc, #508]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7e      	ldr	r2, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7ff fb73 	bl	80024d8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7ff fb6f 	bl	80024d8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e120      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x31a>
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	e02d      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x33c>
 8002e32:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a66      	ldr	r2, [pc, #408]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x35e>
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a5d      	ldr	r2, [pc, #372]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a5a      	ldr	r2, [pc, #360]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a57      	ldr	r2, [pc, #348]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7ff fb23 	bl	80024d8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7ff fb1f 	bl	80024d8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0ce      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCC_OscConfig+0x386>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7ff fb0d 	bl	80024d8 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7ff fb09 	bl	80024d8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a4 	beq.w	8003048 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d06b      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d149      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff fada 	bl	80024d8 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7ff fad6 	bl	80024d8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e087      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff faaa 	bl	80024d8 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7ff faa6 	bl	80024d8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e057      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x478>
 8002fa6:	e04f      	b.n	8003048 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fa90 	bl	80024d8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7ff fa8c 	bl	80024d8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e03d      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4ac>
 8002fda:	e035      	b.n	8003048 <HAL_RCC_OscConfig+0x538>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x544>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d028      	beq.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d121      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800301c:	4293      	cmp	r3, r2
 800301e:	d111      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0d0      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d910      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 020f 	bic.w	r2, r3, #15
 8003086:	4965      	ldr	r1, [pc, #404]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b8      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	494d      	ldr	r1, [pc, #308]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d040      	beq.n	800317c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e073      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06b      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4936      	ldr	r1, [pc, #216]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7ff f9c4 	bl	80024d8 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7ff f9c0 	bl	80024d8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e053      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d210      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 020f 	bic.w	r2, r3, #15
 8003192:	4922      	ldr	r1, [pc, #136]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e032      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ea:	f000 f821 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x1cc>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1d0>)
 8003204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1d4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fe22 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00
 8003220:	40023800 	.word	0x40023800
 8003224:	0800b298 	.word	0x0800b298
 8003228:	20000000 	.word	0x20000000
 800322c:	20000004 	.word	0x20000004

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003234:	b090      	sub	sp, #64	; 0x40
 8003236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	2300      	movs	r3, #0
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d00d      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x40>
 8003254:	2b08      	cmp	r3, #8
 8003256:	f200 80a1 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x16c>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x34>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x3a>
 8003262:	e09b      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003268:	e09b      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800326c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800326e:	e098      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d028      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	2200      	movs	r2, #0
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	627a      	str	r2, [r7, #36]	; 0x24
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003298:	2100      	movs	r1, #0
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329c:	fb03 f201 	mul.w	r2, r3, r1
 80032a0:	2300      	movs	r3, #0
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032aa:	fba0 1202 	umull	r1, r2, r0, r2
 80032ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b0:	460a      	mov	r2, r1
 80032b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b6:	4413      	add	r3, r2
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2200      	movs	r2, #0
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ca:	f7fd fcad 	bl	8000c28 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4613      	mov	r3, r2
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d6:	e053      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	2200      	movs	r2, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	617a      	str	r2, [r7, #20]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032ea:	f04f 0b00 	mov.w	fp, #0
 80032ee:	4652      	mov	r2, sl
 80032f0:	465b      	mov	r3, fp
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	0159      	lsls	r1, r3, #5
 80032fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003300:	0150      	lsls	r0, r2, #5
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	ebb2 080a 	subs.w	r8, r2, sl
 800330a:	eb63 090b 	sbc.w	r9, r3, fp
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800331a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800331e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003322:	ebb2 0408 	subs.w	r4, r2, r8
 8003326:	eb63 0509 	sbc.w	r5, r3, r9
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	00eb      	lsls	r3, r5, #3
 8003334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003338:	00e2      	lsls	r2, r4, #3
 800333a:	4614      	mov	r4, r2
 800333c:	461d      	mov	r5, r3
 800333e:	eb14 030a 	adds.w	r3, r4, sl
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	eb45 030b 	adc.w	r3, r5, fp
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003356:	4629      	mov	r1, r5
 8003358:	028b      	lsls	r3, r1, #10
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003360:	4621      	mov	r1, r4
 8003362:	028a      	lsls	r2, r1, #10
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	2200      	movs	r2, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003374:	f7fd fc58 	bl	8000c28 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3740      	adds	r7, #64	; 0x40
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	017d7840 	.word	0x017d7840

080033bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	0800b2a8 	.word	0x0800b2a8

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	0800b2a8 	.word	0x0800b2a8

08003424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	220f      	movs	r2, #15
 8003432:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	08db      	lsrs	r3, r3, #3
 800345e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCC_GetClockConfig+0x60>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 020f 	and.w	r2, r3, #15
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40023c00 	.word	0x40023c00

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b0:	4b69      	ldr	r3, [pc, #420]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a68      	ldr	r2, [pc, #416]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	4964      	ldr	r1, [pc, #400]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e2:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	4959      	ldr	r1, [pc, #356]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003500:	d101      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003502:	2301      	movs	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800351e:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	494a      	ldr	r1, [pc, #296]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d101      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 808b 	beq.w	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a39      	ldr	r2, [pc, #228]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
 8003578:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003590:	f7fe ffa2 	bl	80024d8 <HAL_GetTick>
 8003594:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003598:	f7fe ff9e 	bl	80024d8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e357      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d035      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d02e      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d4:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d114      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe ff66 	bl	80024d8 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fe ff62 	bl	80024d8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e319      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ee      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363e:	d111      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800364e:	400b      	ands	r3, r1
 8003650:	4901      	ldr	r1, [pc, #4]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
 8003656:	e00b      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003658:	40023800 	.word	0x40023800
 800365c:	40007000 	.word	0x40007000
 8003660:	0ffffcff 	.word	0x0ffffcff
 8003664:	4baa      	ldr	r3, [pc, #680]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4aa9      	ldr	r2, [pc, #676]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800366e:	6093      	str	r3, [r2, #8]
 8003670:	4ba7      	ldr	r3, [pc, #668]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367c:	49a4      	ldr	r1, [pc, #656]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367e:	4313      	orrs	r3, r2
 8003680:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800368e:	4ba0      	ldr	r3, [pc, #640]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	4a9e      	ldr	r2, [pc, #632]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800369e:	4b9c      	ldr	r3, [pc, #624]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	4999      	ldr	r1, [pc, #612]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036bc:	4b94      	ldr	r3, [pc, #592]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ca:	4991      	ldr	r1, [pc, #580]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036de:	4b8c      	ldr	r3, [pc, #560]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ec:	4988      	ldr	r1, [pc, #544]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003700:	4b83      	ldr	r3, [pc, #524]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370e:	4980      	ldr	r1, [pc, #512]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003722:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4977      	ldr	r1, [pc, #476]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003744:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	496f      	ldr	r1, [pc, #444]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003766:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f023 020c 	bic.w	r2, r3, #12
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	4966      	ldr	r1, [pc, #408]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	495e      	ldr	r1, [pc, #376]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	4955      	ldr	r1, [pc, #340]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	494d      	ldr	r1, [pc, #308]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037ee:	4b48      	ldr	r3, [pc, #288]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4944      	ldr	r1, [pc, #272]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003810:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	493c      	ldr	r1, [pc, #240]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	4933      	ldr	r1, [pc, #204]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003862:	492b      	ldr	r1, [pc, #172]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d011      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003884:	4922      	ldr	r1, [pc, #136]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	4912      	ldr	r1, [pc, #72]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e8:	4909      	ldr	r1, [pc, #36]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d006      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80d9 	beq.w	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a01      	ldr	r2, [pc, #4]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390e:	e001      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003910:	40023800 	.word	0x40023800
 8003914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003916:	f7fe fddf 	bl	80024d8 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800391e:	f7fe fddb 	bl	80024d8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b64      	cmp	r3, #100	; 0x64
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e194      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003930:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d021      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800395e:	4b61      	ldr	r3, [pc, #388]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	0e1b      	lsrs	r3, r3, #24
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	019a      	lsls	r2, r3, #6
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	071b      	lsls	r3, r3, #28
 8003984:	4957      	ldr	r1, [pc, #348]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02e      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b6:	d129      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039b8:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039cc:	0f1b      	lsrs	r3, r3, #28
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	019a      	lsls	r2, r3, #6
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	071b      	lsls	r3, r3, #28
 80039ec:	493d      	ldr	r1, [pc, #244]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fa:	f023 021f 	bic.w	r2, r3, #31
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	3b01      	subs	r3, #1
 8003a04:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	0e1b      	lsrs	r3, r3, #24
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2c:	0f1b      	lsrs	r3, r3, #28
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	019a      	lsls	r2, r3, #6
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	071b      	lsls	r3, r3, #28
 8003a4c:	4925      	ldr	r1, [pc, #148]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d011      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	019a      	lsls	r2, r3, #6
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	4919      	ldr	r1, [pc, #100]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fe fd22 	bl	80024d8 <HAL_GetTick>
 8003a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a98:	f7fe fd1e 	bl	80024d8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0d7      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	f040 80cd 	bne.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fe fd05 	bl	80024d8 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ad2:	f7fe fd01 	bl	80024d8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d903      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0ba      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ae4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ae8:	4b5e      	ldr	r3, [pc, #376]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af4:	d0ed      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d02e      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d12a      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b1e:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	0f1b      	lsrs	r3, r3, #28
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4944      	ldr	r1, [pc, #272]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b5a:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	493d      	ldr	r1, [pc, #244]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d022      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b88:	d11d      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	0e1b      	lsrs	r3, r3, #24
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	0f1b      	lsrs	r3, r3, #28
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	019a      	lsls	r2, r3, #6
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	4929      	ldr	r1, [pc, #164]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	019a      	lsls	r2, r3, #6
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	071b      	lsls	r3, r3, #28
 8003c06:	4917      	ldr	r1, [pc, #92]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4911      	ldr	r1, [pc, #68]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fe fc52 	bl	80024d8 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c38:	f7fe fc4e 	bl	80024d8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e007      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c56:	d1ef      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e049      	b.n	8003d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe fadc 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f000 ffd6 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e054      	b.n	8003dda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d01d      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_TIM_Base_Start_IT+0xd4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_TIM_Base_Start_IT+0xe4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d115      	bne.n	8003dc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_TIM_Base_Start_IT+0xec>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d015      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0xbe>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d011      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	e008      	b.n	8003dd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e000      	b.n	8003dd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40000c00 	.word	0x40000c00
 8003df8:	40010400 	.word	0x40010400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40001800 	.word	0x40001800
 8003e04:	00010007 	.word	0x00010007

08003e08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10f      	bne.n	8003e50 <HAL_TIM_Base_Stop_IT+0x48>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	f240 4344 	movw	r3, #1092	; 0x444
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <HAL_TIM_Base_Stop_IT+0x48>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e049      	b.n	8003f0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f841 	bl	8003f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 fed7 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_TIM_PWM_Start+0x24>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e03c      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d109      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x3e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e02f      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d109      	bne.n	8003f80 <HAL_TIM_PWM_Start+0x58>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e022      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d109      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x72>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e015      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d109      	bne.n	8003fb4 <HAL_TIM_PWM_Start+0x8c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e008      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	bf14      	ite	ne
 8003fc0:	2301      	movne	r3, #1
 8003fc2:	2300      	moveq	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e092      	b.n	80040f4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0xb6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	e023      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0xc6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fec:	e01b      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0xd6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0xe6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800400c:	e00b      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xf6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	e003      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f876 	bl	8005120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a30      	ldr	r2, [pc, #192]	; (80040fc <HAL_TIM_PWM_Start+0x1d4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_PWM_Start+0x120>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <HAL_TIM_PWM_Start+0x1d8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_TIM_PWM_Start+0x124>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_TIM_PWM_Start+0x126>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_TIM_PWM_Start+0x1d4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d01d      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_TIM_PWM_Start+0x1dc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a20      	ldr	r2, [pc, #128]	; (8004108 <HAL_TIM_PWM_Start+0x1e0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_TIM_PWM_Start+0x1e4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_TIM_PWM_Start+0x1d8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_TIM_PWM_Start+0x1e8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x18a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_TIM_PWM_Start+0x1ec>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d115      	bne.n	80040de <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_TIM_PWM_Start+0x1f0>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d015      	beq.n	80040f0 <HAL_TIM_PWM_Start+0x1c8>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d011      	beq.n	80040f0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	e008      	b.n	80040f0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40010000 	.word	0x40010000
 8004100:	40010400 	.word	0x40010400
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40014000 	.word	0x40014000
 8004114:	40001800 	.word	0x40001800
 8004118:	00010007 	.word	0x00010007

0800411c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fff6 	bl	8005120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a36      	ldr	r2, [pc, #216]	; (8004214 <HAL_TIM_PWM_Stop+0xf8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_PWM_Stop+0x2c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a35      	ldr	r2, [pc, #212]	; (8004218 <HAL_TIM_PWM_Stop+0xfc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_TIM_PWM_Stop+0x30>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_TIM_PWM_Stop+0x32>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d017      	beq.n	8004182 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	f241 1311 	movw	r3, #4369	; 0x1111
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <HAL_TIM_PWM_Stop+0x66>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	f240 4344 	movw	r3, #1092	; 0x444
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <HAL_TIM_PWM_Stop+0x66>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a1a      	ldr	r2, [r3, #32]
 8004188:	f241 1311 	movw	r3, #4369	; 0x1111
 800418c:	4013      	ands	r3, r2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <HAL_TIM_PWM_Stop+0x96>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	f240 4344 	movw	r3, #1092	; 0x444
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_PWM_Stop+0x96>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_PWM_Stop+0xa6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	e023      	b.n	800420a <HAL_TIM_PWM_Stop+0xee>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Stop+0xb6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d0:	e01b      	b.n	800420a <HAL_TIM_PWM_Stop+0xee>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Stop+0xc6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	e013      	b.n	800420a <HAL_TIM_PWM_Stop+0xee>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Stop+0xd6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f0:	e00b      	b.n	800420a <HAL_TIM_PWM_Stop+0xee>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Stop+0xe6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004200:	e003      	b.n	800420a <HAL_TIM_PWM_Stop+0xee>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400

0800421c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e049      	b.n	80042c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f841 	bl	80042ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 fcfc 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_IC_Start_IT+0x1e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e023      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x66>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d104      	bne.n	800430e <HAL_TIM_IC_Start_IT+0x2e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e01b      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x66>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d104      	bne.n	800431e <HAL_TIM_IC_Start_IT+0x3e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e013      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x66>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b0c      	cmp	r3, #12
 8004322:	d104      	bne.n	800432e <HAL_TIM_IC_Start_IT+0x4e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e00b      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x66>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b10      	cmp	r3, #16
 8004332:	d104      	bne.n	800433e <HAL_TIM_IC_Start_IT+0x5e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e003      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x66>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004344:	b2db      	uxtb	r3, r3
 8004346:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_TIM_IC_Start_IT+0x78>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e013      	b.n	8004380 <HAL_TIM_IC_Start_IT+0xa0>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d104      	bne.n	8004368 <HAL_TIM_IC_Start_IT+0x88>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e00b      	b.n	8004380 <HAL_TIM_IC_Start_IT+0xa0>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b08      	cmp	r3, #8
 800436c:	d104      	bne.n	8004378 <HAL_TIM_IC_Start_IT+0x98>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e003      	b.n	8004380 <HAL_TIM_IC_Start_IT+0xa0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800437e:	b2db      	uxtb	r3, r3
 8004380:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004382:	7bbb      	ldrb	r3, [r7, #14]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004388:	7b7b      	ldrb	r3, [r7, #13]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0e2      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_IC_Start_IT+0xc2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a0:	e023      	b.n	80043ea <HAL_TIM_IC_Start_IT+0x10a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_IC_Start_IT+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	e01b      	b.n	80043ea <HAL_TIM_IC_Start_IT+0x10a>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_IC_Start_IT+0xe2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c0:	e013      	b.n	80043ea <HAL_TIM_IC_Start_IT+0x10a>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_IC_Start_IT+0xf2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_IC_Start_IT+0x10a>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_IC_Start_IT+0x102>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	e003      	b.n	80043ea <HAL_TIM_IC_Start_IT+0x10a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_IC_Start_IT+0x11a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	e013      	b.n	8004422 <HAL_TIM_IC_Start_IT+0x142>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d104      	bne.n	800440a <HAL_TIM_IC_Start_IT+0x12a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004408:	e00b      	b.n	8004422 <HAL_TIM_IC_Start_IT+0x142>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d104      	bne.n	800441a <HAL_TIM_IC_Start_IT+0x13a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004418:	e003      	b.n	8004422 <HAL_TIM_IC_Start_IT+0x142>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d841      	bhi.n	80044ac <HAL_TIM_IC_Start_IT+0x1cc>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <HAL_TIM_IC_Start_IT+0x150>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004465 	.word	0x08004465
 8004434:	080044ad 	.word	0x080044ad
 8004438:	080044ad 	.word	0x080044ad
 800443c:	080044ad 	.word	0x080044ad
 8004440:	08004477 	.word	0x08004477
 8004444:	080044ad 	.word	0x080044ad
 8004448:	080044ad 	.word	0x080044ad
 800444c:	080044ad 	.word	0x080044ad
 8004450:	08004489 	.word	0x08004489
 8004454:	080044ad 	.word	0x080044ad
 8004458:	080044ad 	.word	0x080044ad
 800445c:	080044ad 	.word	0x080044ad
 8004460:	0800449b 	.word	0x0800449b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0202 	orr.w	r2, r2, #2
 8004472:	60da      	str	r2, [r3, #12]
      break;
 8004474:	e01d      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0204 	orr.w	r2, r2, #4
 8004484:	60da      	str	r2, [r3, #12]
      break;
 8004486:	e014      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0208 	orr.w	r2, r2, #8
 8004496:	60da      	str	r2, [r3, #12]
      break;
 8004498:	e00b      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0210 	orr.w	r2, r2, #16
 80044a8:	60da      	str	r2, [r3, #12]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      break;
 80044b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d14e      	bne.n	8004556 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2201      	movs	r2, #1
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fe2d 	bl	8005120 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a25      	ldr	r2, [pc, #148]	; (8004560 <HAL_TIM_IC_Start_IT+0x280>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d01d      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a21      	ldr	r2, [pc, #132]	; (8004564 <HAL_TIM_IC_Start_IT+0x284>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_TIM_IC_Start_IT+0x288>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_TIM_IC_Start_IT+0x28c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_TIM_IC_Start_IT+0x290>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_TIM_IC_Start_IT+0x294>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x236>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_TIM_IC_Start_IT+0x298>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d115      	bne.n	8004542 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	4b17      	ldr	r3, [pc, #92]	; (800457c <HAL_TIM_IC_Start_IT+0x29c>)
 800451e:	4013      	ands	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d015      	beq.n	8004554 <HAL_TIM_IC_Start_IT+0x274>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d011      	beq.n	8004554 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	e008      	b.n	8004554 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e000      	b.n	8004556 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004554:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40010400 	.word	0x40010400
 8004574:	40014000 	.word	0x40014000
 8004578:	40001800 	.word	0x40001800
 800457c:	00010007 	.word	0x00010007

08004580 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d841      	bhi.n	8004618 <HAL_TIM_IC_Stop_IT+0x98>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_TIM_IC_Stop_IT+0x1c>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	08004619 	.word	0x08004619
 80045a4:	08004619 	.word	0x08004619
 80045a8:	08004619 	.word	0x08004619
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	08004619 	.word	0x08004619
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004619 	.word	0x08004619
 80045bc:	080045f5 	.word	0x080045f5
 80045c0:	08004619 	.word	0x08004619
 80045c4:	08004619 	.word	0x08004619
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004607 	.word	0x08004607
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0202 	bic.w	r2, r2, #2
 80045de:	60da      	str	r2, [r3, #12]
      break;
 80045e0:	e01d      	b.n	800461e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0204 	bic.w	r2, r2, #4
 80045f0:	60da      	str	r2, [r3, #12]
      break;
 80045f2:	e014      	b.n	800461e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0208 	bic.w	r2, r2, #8
 8004602:	60da      	str	r2, [r3, #12]
      break;
 8004604:	e00b      	b.n	800461e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0210 	bic.w	r2, r2, #16
 8004614:	60da      	str	r2, [r3, #12]
      break;
 8004616:	e002      	b.n	800461e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	bf00      	nop
  }

  if (status == HAL_OK)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d166      	bne.n	80046f2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fd77 	bl	8005120 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	f241 1311 	movw	r3, #4369	; 0x1111
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10f      	bne.n	8004662 <HAL_TIM_IC_Stop_IT+0xe2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	f240 4344 	movw	r3, #1092	; 0x444
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IC_Stop_IT+0xe2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_TIM_IC_Stop_IT+0xf2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	e023      	b.n	80046ba <HAL_TIM_IC_Stop_IT+0x13a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d104      	bne.n	8004682 <HAL_TIM_IC_Stop_IT+0x102>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004680:	e01b      	b.n	80046ba <HAL_TIM_IC_Stop_IT+0x13a>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d104      	bne.n	8004692 <HAL_TIM_IC_Stop_IT+0x112>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	e013      	b.n	80046ba <HAL_TIM_IC_Stop_IT+0x13a>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_IC_Stop_IT+0x122>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a0:	e00b      	b.n	80046ba <HAL_TIM_IC_Stop_IT+0x13a>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_IC_Stop_IT+0x132>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b0:	e003      	b.n	80046ba <HAL_TIM_IC_Stop_IT+0x13a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <HAL_TIM_IC_Stop_IT+0x14a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c8:	e013      	b.n	80046f2 <HAL_TIM_IC_Stop_IT+0x172>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d104      	bne.n	80046da <HAL_TIM_IC_Stop_IT+0x15a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d8:	e00b      	b.n	80046f2 <HAL_TIM_IC_Stop_IT+0x172>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d104      	bne.n	80046ea <HAL_TIM_IC_Stop_IT+0x16a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046e8:	e003      	b.n	80046f2 <HAL_TIM_IC_Stop_IT+0x172>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0202 	mvn.w	r2, #2
 8004728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fa6c 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa5e 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fa6f 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b04      	cmp	r3, #4
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0204 	mvn.w	r2, #4
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa42 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa34 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fa45 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0208 	mvn.w	r2, #8
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2204      	movs	r2, #4
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fa18 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa0a 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fa1b 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b10      	cmp	r3, #16
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2208      	movs	r2, #8
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f9ee 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9e0 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f9f1 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0201 	mvn.w	r2, #1
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd faaa 	bl	8001dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fcf8 	bl	800529c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d10e      	bne.n	80048da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d107      	bne.n	80048da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fceb 	bl	80052b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d10e      	bne.n	8004906 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d107      	bne.n	8004906 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f99f 	bl	8004c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b20      	cmp	r3, #32
 8004912:	d10e      	bne.n	8004932 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0220 	mvn.w	r2, #32
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fcab 	bl	8005288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b086      	sub	sp, #24
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004954:	2302      	movs	r3, #2
 8004956:	e088      	b.n	8004a6a <HAL_TIM_IC_ConfigChannel+0x130>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d11b      	bne.n	800499e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f000 fa0f 	bl	8004d98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 020c 	bic.w	r2, r2, #12
 8004988:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6999      	ldr	r1, [r3, #24]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	619a      	str	r2, [r3, #24]
 800499c:	e060      	b.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d11c      	bne.n	80049de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f000 fa93 	bl	8004ede <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6999      	ldr	r1, [r3, #24]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	619a      	str	r2, [r3, #24]
 80049dc:	e040      	b.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f000 fae0 	bl	8004fb8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 020c 	bic.w	r2, r2, #12
 8004a06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69d9      	ldr	r1, [r3, #28]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	61da      	str	r2, [r3, #28]
 8004a1a:	e021      	b.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d11c      	bne.n	8004a5c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6819      	ldr	r1, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f000 fafd 	bl	8005030 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69d9      	ldr	r1, [r3, #28]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	61da      	str	r2, [r3, #28]
 8004a5a:	e001      	b.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_ConfigClockSource+0x1c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0b4      	b.n	8004bfa <HAL_TIM_ConfigClockSource+0x186>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <HAL_TIM_ConfigClockSource+0x190>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac8:	d03e      	beq.n	8004b48 <HAL_TIM_ConfigClockSource+0xd4>
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	f200 8087 	bhi.w	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	f000 8086 	beq.w	8004be6 <HAL_TIM_ConfigClockSource+0x172>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d87f      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b70      	cmp	r3, #112	; 0x70
 8004ae2:	d01a      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0xa6>
 8004ae4:	2b70      	cmp	r3, #112	; 0x70
 8004ae6:	d87b      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b60      	cmp	r3, #96	; 0x60
 8004aea:	d050      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x11a>
 8004aec:	2b60      	cmp	r3, #96	; 0x60
 8004aee:	d877      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b50      	cmp	r3, #80	; 0x50
 8004af2:	d03c      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0xfa>
 8004af4:	2b50      	cmp	r3, #80	; 0x50
 8004af6:	d873      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d058      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x13a>
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d86f      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b30      	cmp	r3, #48	; 0x30
 8004b02:	d064      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b04:	2b30      	cmp	r3, #48	; 0x30
 8004b06:	d86b      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d060      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d867      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05c      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d05a      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b18:	e062      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f000 fad9 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	609a      	str	r2, [r3, #8]
      break;
 8004b46:	e04f      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6899      	ldr	r1, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f000 fac2 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6a:	609a      	str	r2, [r3, #8]
      break;
 8004b6c:	e03c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f000 f980 	bl	8004e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2150      	movs	r1, #80	; 0x50
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fa8f 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b8c:	e02c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f000 f9dc 	bl	8004f58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2160      	movs	r1, #96	; 0x60
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa7f 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004bac:	e01c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 f960 	bl	8004e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2140      	movs	r1, #64	; 0x40
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa6f 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e00c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f000 fa66 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004bde:	e003      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      break;
 8004be4:	e000      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	fffeff88 	.word	0xfffeff88

08004c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a40      	ldr	r2, [pc, #256]	; (8004d6c <TIM_Base_SetConfig+0x114>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d00f      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <TIM_Base_SetConfig+0x118>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3c      	ldr	r2, [pc, #240]	; (8004d74 <TIM_Base_SetConfig+0x11c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3b      	ldr	r2, [pc, #236]	; (8004d78 <TIM_Base_SetConfig+0x120>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3a      	ldr	r2, [pc, #232]	; (8004d7c <TIM_Base_SetConfig+0x124>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d108      	bne.n	8004caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2f      	ldr	r2, [pc, #188]	; (8004d6c <TIM_Base_SetConfig+0x114>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02b      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb8:	d027      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2c      	ldr	r2, [pc, #176]	; (8004d70 <TIM_Base_SetConfig+0x118>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d023      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2b      	ldr	r2, [pc, #172]	; (8004d74 <TIM_Base_SetConfig+0x11c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01f      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	; (8004d78 <TIM_Base_SetConfig+0x120>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a29      	ldr	r2, [pc, #164]	; (8004d7c <TIM_Base_SetConfig+0x124>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <TIM_Base_SetConfig+0x128>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a27      	ldr	r2, [pc, #156]	; (8004d84 <TIM_Base_SetConfig+0x12c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <TIM_Base_SetConfig+0x130>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <TIM_Base_SetConfig+0x134>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <TIM_Base_SetConfig+0x138>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <TIM_Base_SetConfig+0x13c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <TIM_Base_SetConfig+0x114>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <TIM_Base_SetConfig+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d103      	bne.n	8004d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	40001800 	.word	0x40001800
 8004d90:	40001c00 	.word	0x40001c00
 8004d94:	40002000 	.word	0x40002000

08004d98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0201 	bic.w	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <TIM_TI1_SetConfig+0xcc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01b      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d017      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <TIM_TI1_SetConfig+0xd0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a24      	ldr	r2, [pc, #144]	; (8004e6c <TIM_TI1_SetConfig+0xd4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00f      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a23      	ldr	r2, [pc, #140]	; (8004e70 <TIM_TI1_SetConfig+0xd8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00b      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <TIM_TI1_SetConfig+0xdc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d007      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <TIM_TI1_SetConfig+0xe0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_TI1_SetConfig+0x66>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <TIM_TI1_SetConfig+0xe4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <TIM_TI1_SetConfig+0x6a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <TIM_TI1_SetConfig+0x6c>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e003      	b.n	8004e22 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f023 030a 	bic.w	r3, r3, #10
 8004e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f003 030a 	and.w	r3, r3, #10
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40001800 	.word	0x40001800

08004e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f023 030a 	bic.w	r3, r3, #10
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 0210 	bic.w	r2, r3, #16
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 0210 	bic.w	r2, r3, #16
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	031b      	lsls	r3, r3, #12
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f023 0303 	bic.w	r3, r3, #3
 8004fe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005008:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800506e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	031b      	lsls	r3, r3, #12
 8005074:	b29b      	uxth	r3, r3
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005082:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	031b      	lsls	r3, r3, #12
 8005088:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005180:	2302      	movs	r3, #2
 8005182:	e06d      	b.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a30      	ldr	r2, [pc, #192]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d108      	bne.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a20      	ldr	r2, [pc, #128]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d022      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d01d      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d018      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00e      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a16      	ldr	r2, [pc, #88]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800523a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	4313      	orrs	r3, r2
 8005244:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000
 8005270:	40010400 	.word	0x40010400
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800
 800527c:	40000c00 	.word	0x40000c00
 8005280:	40014000 	.word	0x40014000
 8005284:	40001800 	.word	0x40001800

08005288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e040      	b.n	8005358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fd f82a 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	; 0x24
 80052f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f974 	bl	80055f0 <UART_SetConfig>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e022      	b.n	8005358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbcc 	bl	8005ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800532e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800533e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fc53 	bl	8005bfc <UART_CheckIdleState>
 8005356:	4603      	mov	r3, r0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005374:	2b20      	cmp	r3, #32
 8005376:	d171      	bne.n	800545c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_UART_Transmit+0x24>
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e06a      	b.n	800545e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2221      	movs	r2, #33	; 0x21
 8005394:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005396:	f7fd f89f 	bl	80024d8 <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b4:	d108      	bne.n	80053c8 <HAL_UART_Transmit+0x68>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	e003      	b.n	80053d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053d0:	e02c      	b.n	800542c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	; 0x80
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fc44 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e038      	b.n	800545e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005400:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	3302      	adds	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e007      	b.n	800541a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1cc      	bne.n	80053d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	2140      	movs	r1, #64	; 0x40
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fc11 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e005      	b.n	800545e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
  }
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af02      	add	r7, sp, #8
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547c:	2b20      	cmp	r3, #32
 800547e:	f040 80b1 	bne.w	80055e4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_UART_Receive+0x28>
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0a9      	b.n	80055e6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2222      	movs	r2, #34	; 0x22
 800549e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a8:	f7fd f816 	bl	80024d8 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	88fa      	ldrh	r2, [r7, #6]
 80054ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	d10e      	bne.n	80054e6 <HAL_UART_Receive+0x80>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_UART_Receive+0x76>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054da:	e02d      	b.n	8005538 <HAL_UART_Receive+0xd2>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054e4:	e028      	b.n	8005538 <HAL_UART_Receive+0xd2>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_UART_Receive+0xa4>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <HAL_UART_Receive+0x9a>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054fe:	e01b      	b.n	8005538 <HAL_UART_Receive+0xd2>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	227f      	movs	r2, #127	; 0x7f
 8005504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005508:	e016      	b.n	8005538 <HAL_UART_Receive+0xd2>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005512:	d10d      	bne.n	8005530 <HAL_UART_Receive+0xca>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <HAL_UART_Receive+0xc0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	227f      	movs	r2, #127	; 0x7f
 8005520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005524:	e008      	b.n	8005538 <HAL_UART_Receive+0xd2>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	223f      	movs	r2, #63	; 0x3f
 800552a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552e:	e003      	b.n	8005538 <HAL_UART_Receive+0xd2>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800553e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	d108      	bne.n	800555c <HAL_UART_Receive+0xf6>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e003      	b.n	8005564 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005564:	e032      	b.n	80055cc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	2120      	movs	r1, #32
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fb7a 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e032      	b.n	80055e6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10c      	bne.n	80055a0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b29a      	uxth	r2, r3
 800558e:	8a7b      	ldrh	r3, [r7, #18]
 8005590:	4013      	ands	r3, r2
 8005592:	b29a      	uxth	r2, r3
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	3302      	adds	r3, #2
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e00c      	b.n	80055ba <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	8a7b      	ldrh	r3, [r7, #18]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	4013      	ands	r3, r2
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1c6      	bne.n	8005566 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e000      	b.n	80055e6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80055e4:	2302      	movs	r3, #2
  }
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4ba6      	ldr	r3, [pc, #664]	; (80058b4 <UART_SetConfig+0x2c4>)
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	6979      	ldr	r1, [r7, #20]
 8005624:	430b      	orrs	r3, r1
 8005626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a94      	ldr	r2, [pc, #592]	; (80058b8 <UART_SetConfig+0x2c8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d120      	bne.n	80056ae <UART_SetConfig+0xbe>
 800566c:	4b93      	ldr	r3, [pc, #588]	; (80058bc <UART_SetConfig+0x2cc>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d816      	bhi.n	80056a8 <UART_SetConfig+0xb8>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x90>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	08005691 	.word	0x08005691
 8005684:	0800569d 	.word	0x0800569d
 8005688:	08005697 	.word	0x08005697
 800568c:	080056a3 	.word	0x080056a3
 8005690:	2301      	movs	r3, #1
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e150      	b.n	8005938 <UART_SetConfig+0x348>
 8005696:	2302      	movs	r3, #2
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e14d      	b.n	8005938 <UART_SetConfig+0x348>
 800569c:	2304      	movs	r3, #4
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e14a      	b.n	8005938 <UART_SetConfig+0x348>
 80056a2:	2308      	movs	r3, #8
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e147      	b.n	8005938 <UART_SetConfig+0x348>
 80056a8:	2310      	movs	r3, #16
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e144      	b.n	8005938 <UART_SetConfig+0x348>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a83      	ldr	r2, [pc, #524]	; (80058c0 <UART_SetConfig+0x2d0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d132      	bne.n	800571e <UART_SetConfig+0x12e>
 80056b8:	4b80      	ldr	r3, [pc, #512]	; (80058bc <UART_SetConfig+0x2cc>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d828      	bhi.n	8005718 <UART_SetConfig+0x128>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0xdc>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005719 	.word	0x08005719
 80056d4:	08005719 	.word	0x08005719
 80056d8:	08005719 	.word	0x08005719
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	08005719 	.word	0x08005719
 80056e4:	08005719 	.word	0x08005719
 80056e8:	08005719 	.word	0x08005719
 80056ec:	08005707 	.word	0x08005707
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005719 	.word	0x08005719
 80056fc:	08005713 	.word	0x08005713
 8005700:	2300      	movs	r3, #0
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e118      	b.n	8005938 <UART_SetConfig+0x348>
 8005706:	2302      	movs	r3, #2
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e115      	b.n	8005938 <UART_SetConfig+0x348>
 800570c:	2304      	movs	r3, #4
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e112      	b.n	8005938 <UART_SetConfig+0x348>
 8005712:	2308      	movs	r3, #8
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e10f      	b.n	8005938 <UART_SetConfig+0x348>
 8005718:	2310      	movs	r3, #16
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e10c      	b.n	8005938 <UART_SetConfig+0x348>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a68      	ldr	r2, [pc, #416]	; (80058c4 <UART_SetConfig+0x2d4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d120      	bne.n	800576a <UART_SetConfig+0x17a>
 8005728:	4b64      	ldr	r3, [pc, #400]	; (80058bc <UART_SetConfig+0x2cc>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005732:	2b30      	cmp	r3, #48	; 0x30
 8005734:	d013      	beq.n	800575e <UART_SetConfig+0x16e>
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d814      	bhi.n	8005764 <UART_SetConfig+0x174>
 800573a:	2b20      	cmp	r3, #32
 800573c:	d009      	beq.n	8005752 <UART_SetConfig+0x162>
 800573e:	2b20      	cmp	r3, #32
 8005740:	d810      	bhi.n	8005764 <UART_SetConfig+0x174>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <UART_SetConfig+0x15c>
 8005746:	2b10      	cmp	r3, #16
 8005748:	d006      	beq.n	8005758 <UART_SetConfig+0x168>
 800574a:	e00b      	b.n	8005764 <UART_SetConfig+0x174>
 800574c:	2300      	movs	r3, #0
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e0f2      	b.n	8005938 <UART_SetConfig+0x348>
 8005752:	2302      	movs	r3, #2
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e0ef      	b.n	8005938 <UART_SetConfig+0x348>
 8005758:	2304      	movs	r3, #4
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e0ec      	b.n	8005938 <UART_SetConfig+0x348>
 800575e:	2308      	movs	r3, #8
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e0e9      	b.n	8005938 <UART_SetConfig+0x348>
 8005764:	2310      	movs	r3, #16
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e0e6      	b.n	8005938 <UART_SetConfig+0x348>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a56      	ldr	r2, [pc, #344]	; (80058c8 <UART_SetConfig+0x2d8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d120      	bne.n	80057b6 <UART_SetConfig+0x1c6>
 8005774:	4b51      	ldr	r3, [pc, #324]	; (80058bc <UART_SetConfig+0x2cc>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800577e:	2bc0      	cmp	r3, #192	; 0xc0
 8005780:	d013      	beq.n	80057aa <UART_SetConfig+0x1ba>
 8005782:	2bc0      	cmp	r3, #192	; 0xc0
 8005784:	d814      	bhi.n	80057b0 <UART_SetConfig+0x1c0>
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d009      	beq.n	800579e <UART_SetConfig+0x1ae>
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d810      	bhi.n	80057b0 <UART_SetConfig+0x1c0>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <UART_SetConfig+0x1a8>
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d006      	beq.n	80057a4 <UART_SetConfig+0x1b4>
 8005796:	e00b      	b.n	80057b0 <UART_SetConfig+0x1c0>
 8005798:	2300      	movs	r3, #0
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e0cc      	b.n	8005938 <UART_SetConfig+0x348>
 800579e:	2302      	movs	r3, #2
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e0c9      	b.n	8005938 <UART_SetConfig+0x348>
 80057a4:	2304      	movs	r3, #4
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e0c6      	b.n	8005938 <UART_SetConfig+0x348>
 80057aa:	2308      	movs	r3, #8
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e0c3      	b.n	8005938 <UART_SetConfig+0x348>
 80057b0:	2310      	movs	r3, #16
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e0c0      	b.n	8005938 <UART_SetConfig+0x348>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a44      	ldr	r2, [pc, #272]	; (80058cc <UART_SetConfig+0x2dc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d125      	bne.n	800580c <UART_SetConfig+0x21c>
 80057c0:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <UART_SetConfig+0x2cc>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ce:	d017      	beq.n	8005800 <UART_SetConfig+0x210>
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d4:	d817      	bhi.n	8005806 <UART_SetConfig+0x216>
 80057d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057da:	d00b      	beq.n	80057f4 <UART_SetConfig+0x204>
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e0:	d811      	bhi.n	8005806 <UART_SetConfig+0x216>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <UART_SetConfig+0x1fe>
 80057e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ea:	d006      	beq.n	80057fa <UART_SetConfig+0x20a>
 80057ec:	e00b      	b.n	8005806 <UART_SetConfig+0x216>
 80057ee:	2300      	movs	r3, #0
 80057f0:	77fb      	strb	r3, [r7, #31]
 80057f2:	e0a1      	b.n	8005938 <UART_SetConfig+0x348>
 80057f4:	2302      	movs	r3, #2
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e09e      	b.n	8005938 <UART_SetConfig+0x348>
 80057fa:	2304      	movs	r3, #4
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e09b      	b.n	8005938 <UART_SetConfig+0x348>
 8005800:	2308      	movs	r3, #8
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e098      	b.n	8005938 <UART_SetConfig+0x348>
 8005806:	2310      	movs	r3, #16
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e095      	b.n	8005938 <UART_SetConfig+0x348>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <UART_SetConfig+0x2e0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d125      	bne.n	8005862 <UART_SetConfig+0x272>
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <UART_SetConfig+0x2cc>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005824:	d017      	beq.n	8005856 <UART_SetConfig+0x266>
 8005826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800582a:	d817      	bhi.n	800585c <UART_SetConfig+0x26c>
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005830:	d00b      	beq.n	800584a <UART_SetConfig+0x25a>
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005836:	d811      	bhi.n	800585c <UART_SetConfig+0x26c>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <UART_SetConfig+0x254>
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d006      	beq.n	8005850 <UART_SetConfig+0x260>
 8005842:	e00b      	b.n	800585c <UART_SetConfig+0x26c>
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e076      	b.n	8005938 <UART_SetConfig+0x348>
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e073      	b.n	8005938 <UART_SetConfig+0x348>
 8005850:	2304      	movs	r3, #4
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e070      	b.n	8005938 <UART_SetConfig+0x348>
 8005856:	2308      	movs	r3, #8
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e06d      	b.n	8005938 <UART_SetConfig+0x348>
 800585c:	2310      	movs	r3, #16
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e06a      	b.n	8005938 <UART_SetConfig+0x348>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <UART_SetConfig+0x2e4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d138      	bne.n	80058de <UART_SetConfig+0x2ee>
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <UART_SetConfig+0x2cc>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800587a:	d017      	beq.n	80058ac <UART_SetConfig+0x2bc>
 800587c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005880:	d82a      	bhi.n	80058d8 <UART_SetConfig+0x2e8>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d00b      	beq.n	80058a0 <UART_SetConfig+0x2b0>
 8005888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588c:	d824      	bhi.n	80058d8 <UART_SetConfig+0x2e8>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <UART_SetConfig+0x2aa>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d006      	beq.n	80058a6 <UART_SetConfig+0x2b6>
 8005898:	e01e      	b.n	80058d8 <UART_SetConfig+0x2e8>
 800589a:	2300      	movs	r3, #0
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e04b      	b.n	8005938 <UART_SetConfig+0x348>
 80058a0:	2302      	movs	r3, #2
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e048      	b.n	8005938 <UART_SetConfig+0x348>
 80058a6:	2304      	movs	r3, #4
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e045      	b.n	8005938 <UART_SetConfig+0x348>
 80058ac:	2308      	movs	r3, #8
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e042      	b.n	8005938 <UART_SetConfig+0x348>
 80058b2:	bf00      	nop
 80058b4:	efff69f3 	.word	0xefff69f3
 80058b8:	40011000 	.word	0x40011000
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40004400 	.word	0x40004400
 80058c4:	40004800 	.word	0x40004800
 80058c8:	40004c00 	.word	0x40004c00
 80058cc:	40005000 	.word	0x40005000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	40007800 	.word	0x40007800
 80058d8:	2310      	movs	r3, #16
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e02c      	b.n	8005938 <UART_SetConfig+0x348>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a72      	ldr	r2, [pc, #456]	; (8005aac <UART_SetConfig+0x4bc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d125      	bne.n	8005934 <UART_SetConfig+0x344>
 80058e8:	4b71      	ldr	r3, [pc, #452]	; (8005ab0 <UART_SetConfig+0x4c0>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058f6:	d017      	beq.n	8005928 <UART_SetConfig+0x338>
 80058f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058fc:	d817      	bhi.n	800592e <UART_SetConfig+0x33e>
 80058fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005902:	d00b      	beq.n	800591c <UART_SetConfig+0x32c>
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005908:	d811      	bhi.n	800592e <UART_SetConfig+0x33e>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <UART_SetConfig+0x326>
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005912:	d006      	beq.n	8005922 <UART_SetConfig+0x332>
 8005914:	e00b      	b.n	800592e <UART_SetConfig+0x33e>
 8005916:	2300      	movs	r3, #0
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e00d      	b.n	8005938 <UART_SetConfig+0x348>
 800591c:	2302      	movs	r3, #2
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e00a      	b.n	8005938 <UART_SetConfig+0x348>
 8005922:	2304      	movs	r3, #4
 8005924:	77fb      	strb	r3, [r7, #31]
 8005926:	e007      	b.n	8005938 <UART_SetConfig+0x348>
 8005928:	2308      	movs	r3, #8
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e004      	b.n	8005938 <UART_SetConfig+0x348>
 800592e:	2310      	movs	r3, #16
 8005930:	77fb      	strb	r3, [r7, #31]
 8005932:	e001      	b.n	8005938 <UART_SetConfig+0x348>
 8005934:	2310      	movs	r3, #16
 8005936:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005940:	d15b      	bne.n	80059fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005942:	7ffb      	ldrb	r3, [r7, #31]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d828      	bhi.n	800599a <UART_SetConfig+0x3aa>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x360>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005975 	.word	0x08005975
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005985 	.word	0x08005985
 800595c:	0800599b 	.word	0x0800599b
 8005960:	0800598b 	.word	0x0800598b
 8005964:	0800599b 	.word	0x0800599b
 8005968:	0800599b 	.word	0x0800599b
 800596c:	0800599b 	.word	0x0800599b
 8005970:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005974:	f7fd fd2e 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005978:	61b8      	str	r0, [r7, #24]
        break;
 800597a:	e013      	b.n	80059a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fd fd3e 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005980:	61b8      	str	r0, [r7, #24]
        break;
 8005982:	e00f      	b.n	80059a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <UART_SetConfig+0x4c4>)
 8005986:	61bb      	str	r3, [r7, #24]
        break;
 8005988:	e00c      	b.n	80059a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fd fc51 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 800598e:	61b8      	str	r0, [r7, #24]
        break;
 8005990:	e008      	b.n	80059a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	61bb      	str	r3, [r7, #24]
        break;
 8005998:	e004      	b.n	80059a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	77bb      	strb	r3, [r7, #30]
        break;
 80059a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d074      	beq.n	8005a94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	005a      	lsls	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	441a      	add	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d916      	bls.n	80059f4 <UART_SetConfig+0x404>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059cc:	d212      	bcs.n	80059f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f023 030f 	bic.w	r3, r3, #15
 80059d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	89fb      	ldrh	r3, [r7, #14]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	89fa      	ldrh	r2, [r7, #14]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e04f      	b.n	8005a94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	77bb      	strb	r3, [r7, #30]
 80059f8:	e04c      	b.n	8005a94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059fa:	7ffb      	ldrb	r3, [r7, #31]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d828      	bhi.n	8005a52 <UART_SetConfig+0x462>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x418>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a53 	.word	0x08005a53
 8005a20:	08005a53 	.word	0x08005a53
 8005a24:	08005a53 	.word	0x08005a53
 8005a28:	08005a4b 	.word	0x08005a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f7fd fcd2 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005a30:	61b8      	str	r0, [r7, #24]
        break;
 8005a32:	e013      	b.n	8005a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a34:	f7fd fce2 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005a38:	61b8      	str	r0, [r7, #24]
        break;
 8005a3a:	e00f      	b.n	8005a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <UART_SetConfig+0x4c4>)
 8005a3e:	61bb      	str	r3, [r7, #24]
        break;
 8005a40:	e00c      	b.n	8005a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fd fbf5 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8005a46:	61b8      	str	r0, [r7, #24]
        break;
 8005a48:	e008      	b.n	8005a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4e:	61bb      	str	r3, [r7, #24]
        break;
 8005a50:	e004      	b.n	8005a5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	77bb      	strb	r3, [r7, #30]
        break;
 8005a5a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d018      	beq.n	8005a94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	085a      	lsrs	r2, r3, #1
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b0f      	cmp	r3, #15
 8005a7a:	d909      	bls.n	8005a90 <UART_SetConfig+0x4a0>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a82:	d205      	bcs.n	8005a90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e001      	b.n	8005a94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005aa0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40007c00 	.word	0x40007c00
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	00f42400 	.word	0x00f42400

08005ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01a      	beq.n	8005bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb6:	d10a      	bne.n	8005bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	605a      	str	r2, [r3, #4]
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c0c:	f7fc fc64 	bl	80024d8 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d10e      	bne.n	8005c3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f81b 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e011      	b.n	8005c62 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b09c      	sub	sp, #112	; 0x70
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7a:	e0a7      	b.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	f000 80a3 	beq.w	8005dcc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fc fc27 	bl	80024d8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d13f      	bne.n	8005d1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e6      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e5      	bne.n	8005cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e068      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d050      	beq.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d38:	d148      	bne.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e6      	bne.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d96:	623a      	str	r2, [r7, #32]
 8005d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e5      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e010      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69da      	ldr	r2, [r3, #28]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	f43f af48 	beq.w	8005c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3770      	adds	r7, #112	; 0x70
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e08:	2b84      	cmp	r3, #132	; 0x84
 8005e0a:	d005      	beq.n	8005e18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	3303      	adds	r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e18:	68fb      	ldr	r3, [r7, #12]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e2a:	f000 faff 	bl	800642c <vTaskStartScheduler>
  
  return osOK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af04      	add	r7, sp, #16
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d020      	beq.n	8005e88 <osThreadCreate+0x54>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01c      	beq.n	8005e88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685c      	ldr	r4, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691e      	ldr	r6, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ffc8 	bl	8005df6 <makeFreeRtosPriority>
 8005e66:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e70:	9202      	str	r2, [sp, #8]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	9100      	str	r1, [sp, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 f8ed 	bl	800605c <xTaskCreateStatic>
 8005e82:	4603      	mov	r3, r0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e01c      	b.n	8005ec2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685c      	ldr	r4, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e94:	b29e      	uxth	r6, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff ffaa 	bl	8005df6 <makeFreeRtosPriority>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	f107 030c 	add.w	r3, r7, #12
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	9200      	str	r2, [sp, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	4632      	mov	r2, r6
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 f935 	bl	8006122 <xTaskCreate>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d001      	beq.n	8005ec2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ecc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <osDelay+0x16>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	e000      	b.n	8005ee4 <osDelay+0x18>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fa6b 	bl	80063c0 <vTaskDelay>
  
  return osOK;
 8005eea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f103 0208 	add.w	r2, r3, #8
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f103 0208 	add.w	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f103 0208 	add.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d103      	bne.n	8005fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e00c      	b.n	8005fd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e002      	b.n	8005fc4 <vListInsert+0x2e>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d2f6      	bcs.n	8005fbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6892      	ldr	r2, [r2, #8]
 800601e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6852      	ldr	r2, [r2, #4]
 8006028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d103      	bne.n	800603c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	1e5a      	subs	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	; 0x38
 8006060:	af04      	add	r7, sp, #16
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10c      	bne.n	800608a <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	b672      	cpsid	i
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	b662      	cpsie	i
 8006084:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <xTaskCreateStatic+0x4e>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	b672      	cpsid	i
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	b662      	cpsie	i
 80060a4:	61fb      	str	r3, [r7, #28]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060aa:	23b4      	movs	r3, #180	; 0xb4
 80060ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2bb4      	cmp	r3, #180	; 0xb4
 80060b2:	d00c      	beq.n	80060ce <xTaskCreateStatic+0x72>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	b672      	cpsid	i
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	b662      	cpsie	i
 80060c8:	61bb      	str	r3, [r7, #24]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01e      	beq.n	8006114 <xTaskCreateStatic+0xb8>
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060ee:	2300      	movs	r3, #0
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	9302      	str	r3, [sp, #8]
 80060f6:	f107 0314 	add.w	r3, r7, #20
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f850 	bl	80061ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800610c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800610e:	f000 f8ed 	bl	80062ec <prvAddNewTaskToReadyList>
 8006112:	e001      	b.n	8006118 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006118:	697b      	ldr	r3, [r7, #20]
	}
 800611a:	4618      	mov	r0, r3
 800611c:	3728      	adds	r7, #40	; 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006122:	b580      	push	{r7, lr}
 8006124:	b08c      	sub	sp, #48	; 0x30
 8006126:	af04      	add	r7, sp, #16
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fee8 	bl	8006f0c <pvPortMalloc>
 800613c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00e      	beq.n	8006162 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006144:	20b4      	movs	r0, #180	; 0xb4
 8006146:	f000 fee1 	bl	8006f0c <pvPortMalloc>
 800614a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
 8006158:	e005      	b.n	8006166 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800615a:	6978      	ldr	r0, [r7, #20]
 800615c:	f000 ffa0 	bl	80070a0 <vPortFree>
 8006160:	e001      	b.n	8006166 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d017      	beq.n	800619c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	2300      	movs	r3, #0
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	9302      	str	r3, [sp, #8]
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f80e 	bl	80061ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006190:	69f8      	ldr	r0, [r7, #28]
 8006192:	f000 f8ab 	bl	80062ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006196:	2301      	movs	r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e002      	b.n	80061a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061a2:	69bb      	ldr	r3, [r7, #24]
	}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061c4:	440b      	add	r3, r1
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	b672      	cpsid	i
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	b662      	cpsie	i
 80061f2:	617b      	str	r3, [r7, #20]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01f      	beq.n	800623e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e012      	b.n	800622a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	3334      	adds	r3, #52	; 0x34
 8006214:	460a      	mov	r2, r1
 8006216:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d9e9      	bls.n	8006204 <prvInitialiseNewTask+0x58>
 8006230:	e000      	b.n	8006234 <prvInitialiseNewTask+0x88>
			{
				break;
 8006232:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623c:	e003      	b.n	8006246 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	2b06      	cmp	r3, #6
 800624a:	d901      	bls.n	8006250 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800624c:	2306      	movs	r3, #6
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006254:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2200      	movs	r2, #0
 8006260:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fe64 	bl	8005f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	3318      	adds	r3, #24
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fe5f 	bl	8005f34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	f1c3 0207 	rsb	r2, r3, #7
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	334c      	adds	r3, #76	; 0x4c
 80062a0:	2260      	movs	r2, #96	; 0x60
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f962 	bl	800756e <memset>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <prvInitialiseNewTask+0x134>)
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	4a0c      	ldr	r2, [pc, #48]	; (80062e4 <prvInitialiseNewTask+0x138>)
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	4a0b      	ldr	r2, [pc, #44]	; (80062e8 <prvInitialiseNewTask+0x13c>)
 80062ba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	69b8      	ldr	r0, [r7, #24]
 80062c2:	f000 fc2d 	bl	8006b20 <pxPortInitialiseStack>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d8:	bf00      	nop
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	0800b2d0 	.word	0x0800b2d0
 80062e4:	0800b2f0 	.word	0x0800b2f0
 80062e8:	0800b2b0 	.word	0x0800b2b0

080062ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062f4:	f000 fd22 	bl	8006d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062f8:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <prvAddNewTaskToReadyList+0xb8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <prvAddNewTaskToReadyList+0xb8>)
 8006300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006302:	4b29      	ldr	r3, [pc, #164]	; (80063a8 <prvAddNewTaskToReadyList+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800630a:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <prvAddNewTaskToReadyList+0xbc>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006310:	4b24      	ldr	r3, [pc, #144]	; (80063a4 <prvAddNewTaskToReadyList+0xb8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d110      	bne.n	800633a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006318:	f000 fad8 	bl	80068cc <prvInitialiseTaskLists>
 800631c:	e00d      	b.n	800633a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <prvAddNewTaskToReadyList+0xc0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006326:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <prvAddNewTaskToReadyList+0xbc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	429a      	cmp	r2, r3
 8006332:	d802      	bhi.n	800633a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006334:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <prvAddNewTaskToReadyList+0xbc>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800633a:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <prvAddNewTaskToReadyList+0xc4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	4a1b      	ldr	r2, [pc, #108]	; (80063b0 <prvAddNewTaskToReadyList+0xc4>)
 8006342:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	2201      	movs	r2, #1
 800634a:	409a      	lsls	r2, r3
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4313      	orrs	r3, r2
 8006352:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <prvAddNewTaskToReadyList+0xcc>)
 8006364:	441a      	add	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7ff fdee 	bl	8005f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006372:	f000 fd17 	bl	8006da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <prvAddNewTaskToReadyList+0xc0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <prvAddNewTaskToReadyList+0xbc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	429a      	cmp	r2, r3
 800638a:	d207      	bcs.n	800639c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <prvAddNewTaskToReadyList+0xd0>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000864 	.word	0x20000864
 80063a8:	20000764 	.word	0x20000764
 80063ac:	20000870 	.word	0x20000870
 80063b0:	20000880 	.word	0x20000880
 80063b4:	2000086c 	.word	0x2000086c
 80063b8:	20000768 	.word	0x20000768
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d019      	beq.n	8006406 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <vTaskDelay+0x64>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <vTaskDelay+0x34>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	b672      	cpsid	i
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	b662      	cpsie	i
 80063ee:	60bb      	str	r3, [r7, #8]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80063f4:	f000 f888 	bl	8006508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063f8:	2100      	movs	r1, #0
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb2a 	bl	8006a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006400:	f000 f890 	bl	8006524 <xTaskResumeAll>
 8006404:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d107      	bne.n	800641c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <vTaskDelay+0x68>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	2000088c 	.word	0x2000088c
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	; 0x28
 8006430:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800643a:	463a      	mov	r2, r7
 800643c:	1d39      	adds	r1, r7, #4
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	4618      	mov	r0, r3
 8006444:	f7fb fae6 	bl	8001a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	9202      	str	r2, [sp, #8]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	2300      	movs	r3, #0
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	460a      	mov	r2, r1
 800645a:	4923      	ldr	r1, [pc, #140]	; (80064e8 <vTaskStartScheduler+0xbc>)
 800645c:	4823      	ldr	r0, [pc, #140]	; (80064ec <vTaskStartScheduler+0xc0>)
 800645e:	f7ff fdfd 	bl	800605c <xTaskCreateStatic>
 8006462:	4603      	mov	r3, r0
 8006464:	4a22      	ldr	r2, [pc, #136]	; (80064f0 <vTaskStartScheduler+0xc4>)
 8006466:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006468:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <vTaskStartScheduler+0xc4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e001      	b.n	800647a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d11d      	bne.n	80064bc <vTaskStartScheduler+0x90>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	613b      	str	r3, [r7, #16]
}
 8006496:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <vTaskStartScheduler+0xc8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	334c      	adds	r3, #76	; 0x4c
 800649e:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <vTaskStartScheduler+0xcc>)
 80064a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064a2:	4b16      	ldr	r3, [pc, #88]	; (80064fc <vTaskStartScheduler+0xd0>)
 80064a4:	f04f 32ff 	mov.w	r2, #4294967295
 80064a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <vTaskStartScheduler+0xd4>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064b0:	4b14      	ldr	r3, [pc, #80]	; (8006504 <vTaskStartScheduler+0xd8>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064b6:	f000 fbc3 	bl	8006c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064ba:	e010      	b.n	80064de <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d10c      	bne.n	80064de <vTaskStartScheduler+0xb2>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	b672      	cpsid	i
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	b662      	cpsie	i
 80064d8:	60fb      	str	r3, [r7, #12]
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <vTaskStartScheduler+0xb0>
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	0800b284 	.word	0x0800b284
 80064ec:	0800689d 	.word	0x0800689d
 80064f0:	20000888 	.word	0x20000888
 80064f4:	20000764 	.word	0x20000764
 80064f8:	20000010 	.word	0x20000010
 80064fc:	20000884 	.word	0x20000884
 8006500:	20000870 	.word	0x20000870
 8006504:	20000868 	.word	0x20000868

08006508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800650c:	4b04      	ldr	r3, [pc, #16]	; (8006520 <vTaskSuspendAll+0x18>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	4a03      	ldr	r2, [pc, #12]	; (8006520 <vTaskSuspendAll+0x18>)
 8006514:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	2000088c 	.word	0x2000088c

08006524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006532:	4b42      	ldr	r3, [pc, #264]	; (800663c <xTaskResumeAll+0x118>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <xTaskResumeAll+0x30>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	b672      	cpsid	i
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	b662      	cpsie	i
 800654e:	603b      	str	r3, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006554:	f000 fbf2 	bl	8006d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006558:	4b38      	ldr	r3, [pc, #224]	; (800663c <xTaskResumeAll+0x118>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a37      	ldr	r2, [pc, #220]	; (800663c <xTaskResumeAll+0x118>)
 8006560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006562:	4b36      	ldr	r3, [pc, #216]	; (800663c <xTaskResumeAll+0x118>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d161      	bne.n	800662e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800656a:	4b35      	ldr	r3, [pc, #212]	; (8006640 <xTaskResumeAll+0x11c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d05d      	beq.n	800662e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006572:	e02e      	b.n	80065d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006574:	4b33      	ldr	r3, [pc, #204]	; (8006644 <xTaskResumeAll+0x120>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3318      	adds	r3, #24
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff fd41 	bl	8006008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3304      	adds	r3, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fd3c 	bl	8006008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	2201      	movs	r2, #1
 8006596:	409a      	lsls	r2, r3
 8006598:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <xTaskResumeAll+0x124>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4313      	orrs	r3, r2
 800659e:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <xTaskResumeAll+0x124>)
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4a27      	ldr	r2, [pc, #156]	; (800664c <xTaskResumeAll+0x128>)
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7ff fcc8 	bl	8005f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	4b23      	ldr	r3, [pc, #140]	; (8006650 <xTaskResumeAll+0x12c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <xTaskResumeAll+0x130>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <xTaskResumeAll+0x120>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1cc      	bne.n	8006574 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065e0:	f000 fa18 	bl	8006a14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <xTaskResumeAll+0x134>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d010      	beq.n	8006612 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065f0:	f000 f836 	bl	8006660 <xTaskIncrementTick>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <xTaskResumeAll+0x130>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3b01      	subs	r3, #1
 8006604:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f1      	bne.n	80065f0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <xTaskResumeAll+0x134>)
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <xTaskResumeAll+0x130>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <xTaskResumeAll+0x138>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800662e:	f000 fbb9 	bl	8006da4 <vPortExitCritical>

	return xAlreadyYielded;
 8006632:	68bb      	ldr	r3, [r7, #8]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	2000088c 	.word	0x2000088c
 8006640:	20000864 	.word	0x20000864
 8006644:	20000824 	.word	0x20000824
 8006648:	2000086c 	.word	0x2000086c
 800664c:	20000768 	.word	0x20000768
 8006650:	20000764 	.word	0x20000764
 8006654:	20000878 	.word	0x20000878
 8006658:	20000874 	.word	0x20000874
 800665c:	e000ed04 	.word	0xe000ed04

08006660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	4b4f      	ldr	r3, [pc, #316]	; (80067a8 <xTaskIncrementTick+0x148>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 808a 	bne.w	8006788 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006674:	4b4d      	ldr	r3, [pc, #308]	; (80067ac <xTaskIncrementTick+0x14c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800667c:	4a4b      	ldr	r2, [pc, #300]	; (80067ac <xTaskIncrementTick+0x14c>)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d122      	bne.n	80066ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006688:	4b49      	ldr	r3, [pc, #292]	; (80067b0 <xTaskIncrementTick+0x150>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <xTaskIncrementTick+0x4c>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	b672      	cpsid	i
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	b662      	cpsie	i
 80066a6:	603b      	str	r3, [r7, #0]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xTaskIncrementTick+0x4a>
 80066ac:	4b40      	ldr	r3, [pc, #256]	; (80067b0 <xTaskIncrementTick+0x150>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	4b40      	ldr	r3, [pc, #256]	; (80067b4 <xTaskIncrementTick+0x154>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a3e      	ldr	r2, [pc, #248]	; (80067b0 <xTaskIncrementTick+0x150>)
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4a3e      	ldr	r2, [pc, #248]	; (80067b4 <xTaskIncrementTick+0x154>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4b3d      	ldr	r3, [pc, #244]	; (80067b8 <xTaskIncrementTick+0x158>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a3c      	ldr	r2, [pc, #240]	; (80067b8 <xTaskIncrementTick+0x158>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	f000 f9a3 	bl	8006a14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066ce:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <xTaskIncrementTick+0x15c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d348      	bcc.n	800676a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d8:	4b35      	ldr	r3, [pc, #212]	; (80067b0 <xTaskIncrementTick+0x150>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <xTaskIncrementTick+0x15c>)
 80066e4:	f04f 32ff 	mov.w	r2, #4294967295
 80066e8:	601a      	str	r2, [r3, #0]
					break;
 80066ea:	e03e      	b.n	800676a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ec:	4b30      	ldr	r3, [pc, #192]	; (80067b0 <xTaskIncrementTick+0x150>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d203      	bcs.n	800670c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006704:	4a2d      	ldr	r2, [pc, #180]	; (80067bc <xTaskIncrementTick+0x15c>)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800670a:	e02e      	b.n	800676a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fc79 	bl	8006008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	3318      	adds	r3, #24
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fc70 	bl	8006008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	2201      	movs	r2, #1
 800672e:	409a      	lsls	r2, r3
 8006730:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <xTaskIncrementTick+0x160>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <xTaskIncrementTick+0x160>)
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4a1f      	ldr	r2, [pc, #124]	; (80067c4 <xTaskIncrementTick+0x164>)
 8006748:	441a      	add	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	3304      	adds	r3, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7ff fbfc 	bl	8005f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <xTaskIncrementTick+0x168>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	429a      	cmp	r2, r3
 8006762:	d3b9      	bcc.n	80066d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006768:	e7b6      	b.n	80066d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800676a:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <xTaskIncrementTick+0x168>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4914      	ldr	r1, [pc, #80]	; (80067c4 <xTaskIncrementTick+0x164>)
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d907      	bls.n	8006792 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e004      	b.n	8006792 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <xTaskIncrementTick+0x16c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <xTaskIncrementTick+0x16c>)
 8006790:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006792:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <xTaskIncrementTick+0x170>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800679e:	697b      	ldr	r3, [r7, #20]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	2000088c 	.word	0x2000088c
 80067ac:	20000868 	.word	0x20000868
 80067b0:	2000081c 	.word	0x2000081c
 80067b4:	20000820 	.word	0x20000820
 80067b8:	2000087c 	.word	0x2000087c
 80067bc:	20000884 	.word	0x20000884
 80067c0:	2000086c 	.word	0x2000086c
 80067c4:	20000768 	.word	0x20000768
 80067c8:	20000764 	.word	0x20000764
 80067cc:	20000874 	.word	0x20000874
 80067d0:	20000878 	.word	0x20000878

080067d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067da:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <vTaskSwitchContext+0xb0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <vTaskSwitchContext+0xb4>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067e8:	e046      	b.n	8006878 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80067ea:	4b27      	ldr	r3, [pc, #156]	; (8006888 <vTaskSwitchContext+0xb4>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f0:	4b26      	ldr	r3, [pc, #152]	; (800688c <vTaskSwitchContext+0xb8>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	f1c3 031f 	rsb	r3, r3, #31
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	4922      	ldr	r1, [pc, #136]	; (8006890 <vTaskSwitchContext+0xbc>)
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10c      	bne.n	8006834 <vTaskSwitchContext+0x60>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	b672      	cpsid	i
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	b662      	cpsie	i
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <vTaskSwitchContext+0x5e>
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4a14      	ldr	r2, [pc, #80]	; (8006890 <vTaskSwitchContext+0xbc>)
 8006840:	4413      	add	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3308      	adds	r3, #8
 8006856:	429a      	cmp	r2, r3
 8006858:	d104      	bne.n	8006864 <vTaskSwitchContext+0x90>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	605a      	str	r2, [r3, #4]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <vTaskSwitchContext+0xc0>)
 800686c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <vTaskSwitchContext+0xc0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	334c      	adds	r3, #76	; 0x4c
 8006874:	4a08      	ldr	r2, [pc, #32]	; (8006898 <vTaskSwitchContext+0xc4>)
 8006876:	6013      	str	r3, [r2, #0]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	2000088c 	.word	0x2000088c
 8006888:	20000878 	.word	0x20000878
 800688c:	2000086c 	.word	0x2000086c
 8006890:	20000768 	.word	0x20000768
 8006894:	20000764 	.word	0x20000764
 8006898:	20000010 	.word	0x20000010

0800689c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068a4:	f000 f852 	bl	800694c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <prvIdleTask+0x28>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d9f9      	bls.n	80068a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <prvIdleTask+0x2c>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068c0:	e7f0      	b.n	80068a4 <prvIdleTask+0x8>
 80068c2:	bf00      	nop
 80068c4:	20000768 	.word	0x20000768
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d2:	2300      	movs	r3, #0
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	e00c      	b.n	80068f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4a12      	ldr	r2, [pc, #72]	; (800692c <prvInitialiseTaskLists+0x60>)
 80068e4:	4413      	add	r3, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fb04 	bl	8005ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3301      	adds	r3, #1
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	d9ef      	bls.n	80068d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068f8:	480d      	ldr	r0, [pc, #52]	; (8006930 <prvInitialiseTaskLists+0x64>)
 80068fa:	f7ff fafb 	bl	8005ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068fe:	480d      	ldr	r0, [pc, #52]	; (8006934 <prvInitialiseTaskLists+0x68>)
 8006900:	f7ff faf8 	bl	8005ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006904:	480c      	ldr	r0, [pc, #48]	; (8006938 <prvInitialiseTaskLists+0x6c>)
 8006906:	f7ff faf5 	bl	8005ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800690a:	480c      	ldr	r0, [pc, #48]	; (800693c <prvInitialiseTaskLists+0x70>)
 800690c:	f7ff faf2 	bl	8005ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006910:	480b      	ldr	r0, [pc, #44]	; (8006940 <prvInitialiseTaskLists+0x74>)
 8006912:	f7ff faef 	bl	8005ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <prvInitialiseTaskLists+0x78>)
 8006918:	4a05      	ldr	r2, [pc, #20]	; (8006930 <prvInitialiseTaskLists+0x64>)
 800691a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <prvInitialiseTaskLists+0x7c>)
 800691e:	4a05      	ldr	r2, [pc, #20]	; (8006934 <prvInitialiseTaskLists+0x68>)
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000768 	.word	0x20000768
 8006930:	200007f4 	.word	0x200007f4
 8006934:	20000808 	.word	0x20000808
 8006938:	20000824 	.word	0x20000824
 800693c:	20000838 	.word	0x20000838
 8006940:	20000850 	.word	0x20000850
 8006944:	2000081c 	.word	0x2000081c
 8006948:	20000820 	.word	0x20000820

0800694c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006952:	e019      	b.n	8006988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006954:	f000 f9f2 	bl	8006d3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006958:	4b10      	ldr	r3, [pc, #64]	; (800699c <prvCheckTasksWaitingTermination+0x50>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fb4f 	bl	8006008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <prvCheckTasksWaitingTermination+0x54>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3b01      	subs	r3, #1
 8006970:	4a0b      	ldr	r2, [pc, #44]	; (80069a0 <prvCheckTasksWaitingTermination+0x54>)
 8006972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <prvCheckTasksWaitingTermination+0x58>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3b01      	subs	r3, #1
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <prvCheckTasksWaitingTermination+0x58>)
 800697c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800697e:	f000 fa11 	bl	8006da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f810 	bl	80069a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <prvCheckTasksWaitingTermination+0x58>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e1      	bne.n	8006954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000838 	.word	0x20000838
 80069a0:	20000864 	.word	0x20000864
 80069a4:	2000084c 	.word	0x2000084c

080069a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	334c      	adds	r3, #76	; 0x4c
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fb7d 	bl	80080b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fb69 	bl	80070a0 <vPortFree>
				vPortFree( pxTCB );
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fb66 	bl	80070a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069d4:	e01a      	b.n	8006a0c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d103      	bne.n	80069e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb5d 	bl	80070a0 <vPortFree>
	}
 80069e6:	e011      	b.n	8006a0c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d00c      	beq.n	8006a0c <prvDeleteTCB+0x64>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	b672      	cpsid	i
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	b662      	cpsie	i
 8006a06:	60fb      	str	r3, [r7, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <prvDeleteTCB+0x62>
	}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <prvResetNextTaskUnblockTime+0x38>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <prvResetNextTaskUnblockTime+0x3c>)
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a2c:	e008      	b.n	8006a40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <prvResetNextTaskUnblockTime+0x38>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <prvResetNextTaskUnblockTime+0x3c>)
 8006a3e:	6013      	str	r3, [r2, #0]
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000081c 	.word	0x2000081c
 8006a50:	20000884 	.word	0x20000884

08006a54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a5e:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a64:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff facc 	bl	8006008 <uxListRemove>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10b      	bne.n	8006a8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43da      	mvns	r2, r3
 8006a84:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	4a20      	ldr	r2, [pc, #128]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d10a      	bne.n	8006aac <prvAddCurrentTaskToDelayedList+0x58>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	481a      	ldr	r0, [pc, #104]	; (8006b10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006aa6:	f7ff fa52 	bl	8005f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aaa:	e026      	b.n	8006afa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ab4:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d209      	bcs.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f7ff fa60 	bl	8005f96 <vListInsert>
}
 8006ad6:	e010      	b.n	8006afa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7ff fa56 	bl	8005f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d202      	bcs.n	8006afa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006af4:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6013      	str	r3, [r2, #0]
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000868 	.word	0x20000868
 8006b08:	20000764 	.word	0x20000764
 8006b0c:	2000086c 	.word	0x2000086c
 8006b10:	20000850 	.word	0x20000850
 8006b14:	20000820 	.word	0x20000820
 8006b18:	2000081c 	.word	0x2000081c
 8006b1c:	20000884 	.word	0x20000884

08006b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <pxPortInitialiseStack+0x64>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b14      	subs	r3, #20
 8006b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f06f 0202 	mvn.w	r2, #2
 8006b6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3b20      	subs	r3, #32
 8006b74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	08006b89 	.word	0x08006b89

08006b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b92:	4b14      	ldr	r3, [pc, #80]	; (8006be4 <prvTaskExitError+0x5c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d00c      	beq.n	8006bb6 <prvTaskExitError+0x2e>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <prvTaskExitError+0x2c>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	b672      	cpsid	i
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	b662      	cpsie	i
 8006bca:	60bb      	str	r3, [r7, #8]
}
 8006bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bce:	bf00      	nop
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0fc      	beq.n	8006bd0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	2000000c 	.word	0x2000000c
	...

08006bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <pxCurrentTCBConst2>)
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	6808      	ldr	r0, [r1, #0]
 8006bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfa:	f380 8809 	msr	PSP, r0
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8811 	msr	BASEPRI, r0
 8006c0a:	4770      	bx	lr
 8006c0c:	f3af 8000 	nop.w

08006c10 <pxCurrentTCBConst2>:
 8006c10:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop

08006c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c18:	4808      	ldr	r0, [pc, #32]	; (8006c3c <prvPortStartFirstTask+0x24>)
 8006c1a:	6800      	ldr	r0, [r0, #0]
 8006c1c:	6800      	ldr	r0, [r0, #0]
 8006c1e:	f380 8808 	msr	MSP, r0
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8814 	msr	CONTROL, r0
 8006c2a:	b662      	cpsie	i
 8006c2c:	b661      	cpsie	f
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	df00      	svc	0
 8006c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c3a:	bf00      	nop
 8006c3c:	e000ed08 	.word	0xe000ed08

08006c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c46:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <xPortStartScheduler+0xe4>)
 8006c48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	22ff      	movs	r2, #255	; 0xff
 8006c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <xPortStartScheduler+0xec>)
 8006c70:	2207      	movs	r2, #7
 8006c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c74:	e009      	b.n	8006c8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c76:	4b2d      	ldr	r3, [pc, #180]	; (8006d2c <xPortStartScheduler+0xec>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	4a2b      	ldr	r2, [pc, #172]	; (8006d2c <xPortStartScheduler+0xec>)
 8006c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d0ef      	beq.n	8006c76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c96:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <xPortStartScheduler+0xec>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f1c3 0307 	rsb	r3, r3, #7
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d00c      	beq.n	8006cbc <xPortStartScheduler+0x7c>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	b672      	cpsid	i
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	b662      	cpsie	i
 8006cb6:	60bb      	str	r3, [r7, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cbc:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	4a1a      	ldr	r2, [pc, #104]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cc6:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cce:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <xPortStartScheduler+0xf0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a14      	ldr	r2, [pc, #80]	; (8006d30 <xPortStartScheduler+0xf0>)
 8006ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ce4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ce6:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <xPortStartScheduler+0xf0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a11      	ldr	r2, [pc, #68]	; (8006d30 <xPortStartScheduler+0xf0>)
 8006cec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cf0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cf2:	f000 f8dd 	bl	8006eb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <xPortStartScheduler+0xf4>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cfc:	f000 f8fc 	bl	8006ef8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <xPortStartScheduler+0xf8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <xPortStartScheduler+0xf8>)
 8006d06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d0c:	f7ff ff84 	bl	8006c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d10:	f7ff fd60 	bl	80067d4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d14:	f7ff ff38 	bl	8006b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000e400 	.word	0xe000e400
 8006d28:	20000890 	.word	0x20000890
 8006d2c:	20000894 	.word	0x20000894
 8006d30:	e000ed20 	.word	0xe000ed20
 8006d34:	2000000c 	.word	0x2000000c
 8006d38:	e000ef34 	.word	0xe000ef34

08006d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	b672      	cpsid	i
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	b662      	cpsie	i
 8006d56:	607b      	str	r3, [r7, #4]
}
 8006d58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <vPortEnterCritical+0x60>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a0e      	ldr	r2, [pc, #56]	; (8006d9c <vPortEnterCritical+0x60>)
 8006d62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d64:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <vPortEnterCritical+0x60>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d111      	bne.n	8006d90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <vPortEnterCritical+0x64>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <vPortEnterCritical+0x54>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	b672      	cpsid	i
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	b662      	cpsie	i
 8006d8a:	603b      	str	r3, [r7, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <vPortEnterCritical+0x52>
	}
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	2000000c 	.word	0x2000000c
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <vPortExitCritical+0x54>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10c      	bne.n	8006dcc <vPortExitCritical+0x28>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	b672      	cpsid	i
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	b662      	cpsie	i
 8006dc6:	607b      	str	r3, [r7, #4]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <vPortExitCritical+0x54>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	4a09      	ldr	r2, [pc, #36]	; (8006df8 <vPortExitCritical+0x54>)
 8006dd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <vPortExitCritical+0x54>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <vPortExitCritical+0x46>
 8006dde:	2300      	movs	r3, #0
 8006de0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006de8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	2000000c 	.word	0x2000000c
 8006dfc:	00000000 	.word	0x00000000

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <pxCurrentTCBConst>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f01e 0f10 	tst.w	lr, #16
 8006e10:	bf08      	it	eq
 8006e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	6010      	str	r0, [r2, #0]
 8006e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e24:	b672      	cpsid	i
 8006e26:	f380 8811 	msr	BASEPRI, r0
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	b662      	cpsie	i
 8006e34:	f7ff fcce 	bl	80067d4 <vTaskSwitchContext>
 8006e38:	f04f 0000 	mov.w	r0, #0
 8006e3c:	f380 8811 	msr	BASEPRI, r0
 8006e40:	bc09      	pop	{r0, r3}
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f01e 0f10 	tst.w	lr, #16
 8006e4e:	bf08      	it	eq
 8006e50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e54:	f380 8809 	msr	PSP, r0
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop

08006e60 <pxCurrentTCBConst>:
 8006e60:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	b672      	cpsid	i
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	b662      	cpsie	i
 8006e82:	607b      	str	r3, [r7, #4]
}
 8006e84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e86:	f7ff fbeb 	bl	8006660 <xTaskIncrementTick>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e90:	4b06      	ldr	r3, [pc, #24]	; (8006eac <SysTick_Handler+0x44>)
 8006e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ea2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <vPortSetupTimerInterrupt+0x34>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <vPortSetupTimerInterrupt+0x38>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <vPortSetupTimerInterrupt+0x3c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0a      	ldr	r2, [pc, #40]	; (8006ef0 <vPortSetupTimerInterrupt+0x40>)
 8006ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eca:	099b      	lsrs	r3, r3, #6
 8006ecc:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <vPortSetupTimerInterrupt+0x44>)
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ed2:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <vPortSetupTimerInterrupt+0x34>)
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	601a      	str	r2, [r3, #0]
}
 8006ed8:	bf00      	nop
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	e000e010 	.word	0xe000e010
 8006ee8:	e000e018 	.word	0xe000e018
 8006eec:	20000000 	.word	0x20000000
 8006ef0:	10624dd3 	.word	0x10624dd3
 8006ef4:	e000e014 	.word	0xe000e014

08006ef8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ef8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f08 <vPortEnableVFP+0x10>
 8006efc:	6801      	ldr	r1, [r0, #0]
 8006efe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f02:	6001      	str	r1, [r0, #0]
 8006f04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f06:	bf00      	nop
 8006f08:	e000ed88 	.word	0xe000ed88

08006f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f18:	f7ff faf6 	bl	8006508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f1c:	4b5b      	ldr	r3, [pc, #364]	; (800708c <pvPortMalloc+0x180>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f24:	f000 f91a 	bl	800715c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f28:	4b59      	ldr	r3, [pc, #356]	; (8007090 <pvPortMalloc+0x184>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 8092 	bne.w	800705a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01f      	beq.n	8006f7c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	3308      	adds	r3, #8
 8006f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00c      	beq.n	8006f7c <pvPortMalloc+0x70>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	b672      	cpsid	i
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	b662      	cpsie	i
 8006f76:	617b      	str	r3, [r7, #20]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d06b      	beq.n	800705a <pvPortMalloc+0x14e>
 8006f82:	4b44      	ldr	r3, [pc, #272]	; (8007094 <pvPortMalloc+0x188>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d866      	bhi.n	800705a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f8c:	4b42      	ldr	r3, [pc, #264]	; (8007098 <pvPortMalloc+0x18c>)
 8006f8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f90:	4b41      	ldr	r3, [pc, #260]	; (8007098 <pvPortMalloc+0x18c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f96:	e004      	b.n	8006fa2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d903      	bls.n	8006fb4 <pvPortMalloc+0xa8>
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f1      	bne.n	8006f98 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fb4:	4b35      	ldr	r3, [pc, #212]	; (800708c <pvPortMalloc+0x180>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d04d      	beq.n	800705a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	4413      	add	r3, r2
 8006fc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	1ad2      	subs	r2, r2, r3
 8006fd8:	2308      	movs	r3, #8
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d921      	bls.n	8007024 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <pvPortMalloc+0x100>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	b672      	cpsid	i
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	b662      	cpsie	i
 8007006:	613b      	str	r3, [r7, #16]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	1ad2      	subs	r2, r2, r3
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800701e:	69b8      	ldr	r0, [r7, #24]
 8007020:	f000 f8fe 	bl	8007220 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <pvPortMalloc+0x188>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <pvPortMalloc+0x188>)
 8007030:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007032:	4b18      	ldr	r3, [pc, #96]	; (8007094 <pvPortMalloc+0x188>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b19      	ldr	r3, [pc, #100]	; (800709c <pvPortMalloc+0x190>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d203      	bcs.n	8007046 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <pvPortMalloc+0x188>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a16      	ldr	r2, [pc, #88]	; (800709c <pvPortMalloc+0x190>)
 8007044:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <pvPortMalloc+0x184>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	431a      	orrs	r2, r3
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800705a:	f7ff fa63 	bl	8006524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <pvPortMalloc+0x176>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	b672      	cpsid	i
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	b662      	cpsie	i
 800707c:	60fb      	str	r3, [r7, #12]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <pvPortMalloc+0x174>
	return pvReturn;
 8007082:	69fb      	ldr	r3, [r7, #28]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3728      	adds	r7, #40	; 0x28
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	200044a0 	.word	0x200044a0
 8007090:	200044ac 	.word	0x200044ac
 8007094:	200044a4 	.word	0x200044a4
 8007098:	20004498 	.word	0x20004498
 800709c:	200044a8 	.word	0x200044a8

080070a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d04c      	beq.n	800714c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070b2:	2308      	movs	r3, #8
 80070b4:	425b      	negs	r3, r3
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4413      	add	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4b23      	ldr	r3, [pc, #140]	; (8007154 <vPortFree+0xb4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10c      	bne.n	80070e8 <vPortFree+0x48>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	b672      	cpsid	i
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	b662      	cpsie	i
 80070e2:	60fb      	str	r3, [r7, #12]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <vPortFree+0x6a>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	b672      	cpsid	i
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	b662      	cpsie	i
 8007104:	60bb      	str	r3, [r7, #8]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <vPortFree+0xb4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d019      	beq.n	800714c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d115      	bne.n	800714c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <vPortFree+0xb4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	43db      	mvns	r3, r3
 800712a:	401a      	ands	r2, r3
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007130:	f7ff f9ea 	bl	8006508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <vPortFree+0xb8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4413      	add	r3, r2
 800713e:	4a06      	ldr	r2, [pc, #24]	; (8007158 <vPortFree+0xb8>)
 8007140:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007142:	6938      	ldr	r0, [r7, #16]
 8007144:	f000 f86c 	bl	8007220 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007148:	f7ff f9ec 	bl	8006524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	200044ac 	.word	0x200044ac
 8007158:	200044a4 	.word	0x200044a4

0800715c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007162:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007166:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007168:	4b27      	ldr	r3, [pc, #156]	; (8007208 <prvHeapInit+0xac>)
 800716a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3307      	adds	r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0307 	bic.w	r3, r3, #7
 8007182:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <prvHeapInit+0xac>)
 800718c:	4413      	add	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007194:	4a1d      	ldr	r2, [pc, #116]	; (800720c <prvHeapInit+0xb0>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800719a:	4b1c      	ldr	r3, [pc, #112]	; (800720c <prvHeapInit+0xb0>)
 800719c:	2200      	movs	r2, #0
 800719e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4413      	add	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a8:	2208      	movs	r2, #8
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a15      	ldr	r2, [pc, #84]	; (8007210 <prvHeapInit+0xb4>)
 80071bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071be:	4b14      	ldr	r3, [pc, #80]	; (8007210 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071c6:	4b12      	ldr	r3, [pc, #72]	; (8007210 <prvHeapInit+0xb4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <prvHeapInit+0xb4>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <prvHeapInit+0xb8>)
 80071ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4a09      	ldr	r2, [pc, #36]	; (8007218 <prvHeapInit+0xbc>)
 80071f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <prvHeapInit+0xc0>)
 80071f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071fa:	601a      	str	r2, [r3, #0]
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	20000898 	.word	0x20000898
 800720c:	20004498 	.word	0x20004498
 8007210:	200044a0 	.word	0x200044a0
 8007214:	200044a8 	.word	0x200044a8
 8007218:	200044a4 	.word	0x200044a4
 800721c:	200044ac 	.word	0x200044ac

08007220 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <prvInsertBlockIntoFreeList+0xac>)
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e002      	b.n	8007234 <prvInsertBlockIntoFreeList+0x14>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d8f7      	bhi.n	800722e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d108      	bne.n	8007262 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	441a      	add	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	441a      	add	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d118      	bne.n	80072a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <prvInsertBlockIntoFreeList+0xb0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d00d      	beq.n	800729e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e008      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <prvInsertBlockIntoFreeList+0xb0>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e003      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d002      	beq.n	80072be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20004498 	.word	0x20004498
 80072d0:	200044a0 	.word	0x200044a0

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000010 	.word	0x20000010

080072e0 <std>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b510      	push	{r4, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ee:	6083      	str	r3, [r0, #8]
 80072f0:	8181      	strh	r1, [r0, #12]
 80072f2:	6643      	str	r3, [r0, #100]	; 0x64
 80072f4:	81c2      	strh	r2, [r0, #14]
 80072f6:	6183      	str	r3, [r0, #24]
 80072f8:	4619      	mov	r1, r3
 80072fa:	2208      	movs	r2, #8
 80072fc:	305c      	adds	r0, #92	; 0x5c
 80072fe:	f000 f936 	bl	800756e <memset>
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <std+0x38>)
 8007304:	6263      	str	r3, [r4, #36]	; 0x24
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <std+0x3c>)
 8007308:	62a3      	str	r3, [r4, #40]	; 0x28
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <std+0x40>)
 800730c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <std+0x44>)
 8007310:	6224      	str	r4, [r4, #32]
 8007312:	6323      	str	r3, [r4, #48]	; 0x30
 8007314:	bd10      	pop	{r4, pc}
 8007316:	bf00      	nop
 8007318:	08008349 	.word	0x08008349
 800731c:	0800836b 	.word	0x0800836b
 8007320:	080083a3 	.word	0x080083a3
 8007324:	080083c7 	.word	0x080083c7

08007328 <_cleanup_r>:
 8007328:	4901      	ldr	r1, [pc, #4]	; (8007330 <_cleanup_r+0x8>)
 800732a:	f000 b8cc 	b.w	80074c6 <_fwalk_reent>
 800732e:	bf00      	nop
 8007330:	08009399 	.word	0x08009399

08007334 <__sfmoreglue>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	2268      	movs	r2, #104	; 0x68
 8007338:	1e4d      	subs	r5, r1, #1
 800733a:	4355      	muls	r5, r2
 800733c:	460e      	mov	r6, r1
 800733e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007342:	f000 f93d 	bl	80075c0 <_malloc_r>
 8007346:	4604      	mov	r4, r0
 8007348:	b140      	cbz	r0, 800735c <__sfmoreglue+0x28>
 800734a:	2100      	movs	r1, #0
 800734c:	e9c0 1600 	strd	r1, r6, [r0]
 8007350:	300c      	adds	r0, #12
 8007352:	60a0      	str	r0, [r4, #8]
 8007354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007358:	f000 f909 	bl	800756e <memset>
 800735c:	4620      	mov	r0, r4
 800735e:	bd70      	pop	{r4, r5, r6, pc}

08007360 <__sfp_lock_acquire>:
 8007360:	4801      	ldr	r0, [pc, #4]	; (8007368 <__sfp_lock_acquire+0x8>)
 8007362:	f000 b8f4 	b.w	800754e <__retarget_lock_acquire_recursive>
 8007366:	bf00      	nop
 8007368:	200044b1 	.word	0x200044b1

0800736c <__sfp_lock_release>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__sfp_lock_release+0x8>)
 800736e:	f000 b8ef 	b.w	8007550 <__retarget_lock_release_recursive>
 8007372:	bf00      	nop
 8007374:	200044b1 	.word	0x200044b1

08007378 <__sinit_lock_acquire>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sinit_lock_acquire+0x8>)
 800737a:	f000 b8e8 	b.w	800754e <__retarget_lock_acquire_recursive>
 800737e:	bf00      	nop
 8007380:	200044b2 	.word	0x200044b2

08007384 <__sinit_lock_release>:
 8007384:	4801      	ldr	r0, [pc, #4]	; (800738c <__sinit_lock_release+0x8>)
 8007386:	f000 b8e3 	b.w	8007550 <__retarget_lock_release_recursive>
 800738a:	bf00      	nop
 800738c:	200044b2 	.word	0x200044b2

08007390 <__sinit>:
 8007390:	b510      	push	{r4, lr}
 8007392:	4604      	mov	r4, r0
 8007394:	f7ff fff0 	bl	8007378 <__sinit_lock_acquire>
 8007398:	69a3      	ldr	r3, [r4, #24]
 800739a:	b11b      	cbz	r3, 80073a4 <__sinit+0x14>
 800739c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a0:	f7ff bff0 	b.w	8007384 <__sinit_lock_release>
 80073a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073a8:	6523      	str	r3, [r4, #80]	; 0x50
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <__sinit+0x68>)
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <__sinit+0x6c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	bf04      	itt	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	61a3      	streq	r3, [r4, #24]
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f820 	bl	8007400 <__sfp>
 80073c0:	6060      	str	r0, [r4, #4]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f81c 	bl	8007400 <__sfp>
 80073c8:	60a0      	str	r0, [r4, #8]
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f818 	bl	8007400 <__sfp>
 80073d0:	2200      	movs	r2, #0
 80073d2:	60e0      	str	r0, [r4, #12]
 80073d4:	2104      	movs	r1, #4
 80073d6:	6860      	ldr	r0, [r4, #4]
 80073d8:	f7ff ff82 	bl	80072e0 <std>
 80073dc:	68a0      	ldr	r0, [r4, #8]
 80073de:	2201      	movs	r2, #1
 80073e0:	2109      	movs	r1, #9
 80073e2:	f7ff ff7d 	bl	80072e0 <std>
 80073e6:	68e0      	ldr	r0, [r4, #12]
 80073e8:	2202      	movs	r2, #2
 80073ea:	2112      	movs	r1, #18
 80073ec:	f7ff ff78 	bl	80072e0 <std>
 80073f0:	2301      	movs	r3, #1
 80073f2:	61a3      	str	r3, [r4, #24]
 80073f4:	e7d2      	b.n	800739c <__sinit+0xc>
 80073f6:	bf00      	nop
 80073f8:	0800b310 	.word	0x0800b310
 80073fc:	08007329 	.word	0x08007329

08007400 <__sfp>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	4607      	mov	r7, r0
 8007404:	f7ff ffac 	bl	8007360 <__sfp_lock_acquire>
 8007408:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <__sfp+0x84>)
 800740a:	681e      	ldr	r6, [r3, #0]
 800740c:	69b3      	ldr	r3, [r6, #24]
 800740e:	b913      	cbnz	r3, 8007416 <__sfp+0x16>
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbd 	bl	8007390 <__sinit>
 8007416:	3648      	adds	r6, #72	; 0x48
 8007418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800741c:	3b01      	subs	r3, #1
 800741e:	d503      	bpl.n	8007428 <__sfp+0x28>
 8007420:	6833      	ldr	r3, [r6, #0]
 8007422:	b30b      	cbz	r3, 8007468 <__sfp+0x68>
 8007424:	6836      	ldr	r6, [r6, #0]
 8007426:	e7f7      	b.n	8007418 <__sfp+0x18>
 8007428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800742c:	b9d5      	cbnz	r5, 8007464 <__sfp+0x64>
 800742e:	4b16      	ldr	r3, [pc, #88]	; (8007488 <__sfp+0x88>)
 8007430:	60e3      	str	r3, [r4, #12]
 8007432:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007436:	6665      	str	r5, [r4, #100]	; 0x64
 8007438:	f000 f888 	bl	800754c <__retarget_lock_init_recursive>
 800743c:	f7ff ff96 	bl	800736c <__sfp_lock_release>
 8007440:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007444:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007448:	6025      	str	r5, [r4, #0]
 800744a:	61a5      	str	r5, [r4, #24]
 800744c:	2208      	movs	r2, #8
 800744e:	4629      	mov	r1, r5
 8007450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007454:	f000 f88b 	bl	800756e <memset>
 8007458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800745c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007460:	4620      	mov	r0, r4
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007464:	3468      	adds	r4, #104	; 0x68
 8007466:	e7d9      	b.n	800741c <__sfp+0x1c>
 8007468:	2104      	movs	r1, #4
 800746a:	4638      	mov	r0, r7
 800746c:	f7ff ff62 	bl	8007334 <__sfmoreglue>
 8007470:	4604      	mov	r4, r0
 8007472:	6030      	str	r0, [r6, #0]
 8007474:	2800      	cmp	r0, #0
 8007476:	d1d5      	bne.n	8007424 <__sfp+0x24>
 8007478:	f7ff ff78 	bl	800736c <__sfp_lock_release>
 800747c:	230c      	movs	r3, #12
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	e7ee      	b.n	8007460 <__sfp+0x60>
 8007482:	bf00      	nop
 8007484:	0800b310 	.word	0x0800b310
 8007488:	ffff0001 	.word	0xffff0001

0800748c <_fwalk>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	460f      	mov	r7, r1
 8007492:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007496:	2600      	movs	r6, #0
 8007498:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800749c:	f1b8 0801 	subs.w	r8, r8, #1
 80074a0:	d505      	bpl.n	80074ae <_fwalk+0x22>
 80074a2:	6824      	ldr	r4, [r4, #0]
 80074a4:	2c00      	cmp	r4, #0
 80074a6:	d1f7      	bne.n	8007498 <_fwalk+0xc>
 80074a8:	4630      	mov	r0, r6
 80074aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ae:	89ab      	ldrh	r3, [r5, #12]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d906      	bls.n	80074c2 <_fwalk+0x36>
 80074b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074b8:	3301      	adds	r3, #1
 80074ba:	d002      	beq.n	80074c2 <_fwalk+0x36>
 80074bc:	4628      	mov	r0, r5
 80074be:	47b8      	blx	r7
 80074c0:	4306      	orrs	r6, r0
 80074c2:	3568      	adds	r5, #104	; 0x68
 80074c4:	e7ea      	b.n	800749c <_fwalk+0x10>

080074c6 <_fwalk_reent>:
 80074c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ca:	4606      	mov	r6, r0
 80074cc:	4688      	mov	r8, r1
 80074ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074d2:	2700      	movs	r7, #0
 80074d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074d8:	f1b9 0901 	subs.w	r9, r9, #1
 80074dc:	d505      	bpl.n	80074ea <_fwalk_reent+0x24>
 80074de:	6824      	ldr	r4, [r4, #0]
 80074e0:	2c00      	cmp	r4, #0
 80074e2:	d1f7      	bne.n	80074d4 <_fwalk_reent+0xe>
 80074e4:	4638      	mov	r0, r7
 80074e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d907      	bls.n	8007500 <_fwalk_reent+0x3a>
 80074f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074f4:	3301      	adds	r3, #1
 80074f6:	d003      	beq.n	8007500 <_fwalk_reent+0x3a>
 80074f8:	4629      	mov	r1, r5
 80074fa:	4630      	mov	r0, r6
 80074fc:	47c0      	blx	r8
 80074fe:	4307      	orrs	r7, r0
 8007500:	3568      	adds	r5, #104	; 0x68
 8007502:	e7e9      	b.n	80074d8 <_fwalk_reent+0x12>

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4d0d      	ldr	r5, [pc, #52]	; (800753c <__libc_init_array+0x38>)
 8007508:	4c0d      	ldr	r4, [pc, #52]	; (8007540 <__libc_init_array+0x3c>)
 800750a:	1b64      	subs	r4, r4, r5
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	2600      	movs	r6, #0
 8007510:	42a6      	cmp	r6, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	4d0b      	ldr	r5, [pc, #44]	; (8007544 <__libc_init_array+0x40>)
 8007516:	4c0c      	ldr	r4, [pc, #48]	; (8007548 <__libc_init_array+0x44>)
 8007518:	f003 fc18 	bl	800ad4c <_init>
 800751c:	1b64      	subs	r4, r4, r5
 800751e:	10a4      	asrs	r4, r4, #2
 8007520:	2600      	movs	r6, #0
 8007522:	42a6      	cmp	r6, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f855 3b04 	ldr.w	r3, [r5], #4
 800752c:	4798      	blx	r3
 800752e:	3601      	adds	r6, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f855 3b04 	ldr.w	r3, [r5], #4
 8007536:	4798      	blx	r3
 8007538:	3601      	adds	r6, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	0800b6b0 	.word	0x0800b6b0
 8007540:	0800b6b0 	.word	0x0800b6b0
 8007544:	0800b6b0 	.word	0x0800b6b0
 8007548:	0800b6b4 	.word	0x0800b6b4

0800754c <__retarget_lock_init_recursive>:
 800754c:	4770      	bx	lr

0800754e <__retarget_lock_acquire_recursive>:
 800754e:	4770      	bx	lr

08007550 <__retarget_lock_release_recursive>:
 8007550:	4770      	bx	lr

08007552 <memcpy>:
 8007552:	440a      	add	r2, r1
 8007554:	4291      	cmp	r1, r2
 8007556:	f100 33ff 	add.w	r3, r0, #4294967295
 800755a:	d100      	bne.n	800755e <memcpy+0xc>
 800755c:	4770      	bx	lr
 800755e:	b510      	push	{r4, lr}
 8007560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007568:	4291      	cmp	r1, r2
 800756a:	d1f9      	bne.n	8007560 <memcpy+0xe>
 800756c:	bd10      	pop	{r4, pc}

0800756e <memset>:
 800756e:	4402      	add	r2, r0
 8007570:	4603      	mov	r3, r0
 8007572:	4293      	cmp	r3, r2
 8007574:	d100      	bne.n	8007578 <memset+0xa>
 8007576:	4770      	bx	lr
 8007578:	f803 1b01 	strb.w	r1, [r3], #1
 800757c:	e7f9      	b.n	8007572 <memset+0x4>
	...

08007580 <sbrk_aligned>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4e0e      	ldr	r6, [pc, #56]	; (80075bc <sbrk_aligned+0x3c>)
 8007584:	460c      	mov	r4, r1
 8007586:	6831      	ldr	r1, [r6, #0]
 8007588:	4605      	mov	r5, r0
 800758a:	b911      	cbnz	r1, 8007592 <sbrk_aligned+0x12>
 800758c:	f000 fdee 	bl	800816c <_sbrk_r>
 8007590:	6030      	str	r0, [r6, #0]
 8007592:	4621      	mov	r1, r4
 8007594:	4628      	mov	r0, r5
 8007596:	f000 fde9 	bl	800816c <_sbrk_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d00a      	beq.n	80075b4 <sbrk_aligned+0x34>
 800759e:	1cc4      	adds	r4, r0, #3
 80075a0:	f024 0403 	bic.w	r4, r4, #3
 80075a4:	42a0      	cmp	r0, r4
 80075a6:	d007      	beq.n	80075b8 <sbrk_aligned+0x38>
 80075a8:	1a21      	subs	r1, r4, r0
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 fdde 	bl	800816c <_sbrk_r>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d101      	bne.n	80075b8 <sbrk_aligned+0x38>
 80075b4:	f04f 34ff 	mov.w	r4, #4294967295
 80075b8:	4620      	mov	r0, r4
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	200044b8 	.word	0x200044b8

080075c0 <_malloc_r>:
 80075c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	1ccd      	adds	r5, r1, #3
 80075c6:	f025 0503 	bic.w	r5, r5, #3
 80075ca:	3508      	adds	r5, #8
 80075cc:	2d0c      	cmp	r5, #12
 80075ce:	bf38      	it	cc
 80075d0:	250c      	movcc	r5, #12
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	4607      	mov	r7, r0
 80075d6:	db01      	blt.n	80075dc <_malloc_r+0x1c>
 80075d8:	42a9      	cmp	r1, r5
 80075da:	d905      	bls.n	80075e8 <_malloc_r+0x28>
 80075dc:	230c      	movs	r3, #12
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	2600      	movs	r6, #0
 80075e2:	4630      	mov	r0, r6
 80075e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e8:	4e2e      	ldr	r6, [pc, #184]	; (80076a4 <_malloc_r+0xe4>)
 80075ea:	f001 ffa7 	bl	800953c <__malloc_lock>
 80075ee:	6833      	ldr	r3, [r6, #0]
 80075f0:	461c      	mov	r4, r3
 80075f2:	bb34      	cbnz	r4, 8007642 <_malloc_r+0x82>
 80075f4:	4629      	mov	r1, r5
 80075f6:	4638      	mov	r0, r7
 80075f8:	f7ff ffc2 	bl	8007580 <sbrk_aligned>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	4604      	mov	r4, r0
 8007600:	d14d      	bne.n	800769e <_malloc_r+0xde>
 8007602:	6834      	ldr	r4, [r6, #0]
 8007604:	4626      	mov	r6, r4
 8007606:	2e00      	cmp	r6, #0
 8007608:	d140      	bne.n	800768c <_malloc_r+0xcc>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	4631      	mov	r1, r6
 800760e:	4638      	mov	r0, r7
 8007610:	eb04 0803 	add.w	r8, r4, r3
 8007614:	f000 fdaa 	bl	800816c <_sbrk_r>
 8007618:	4580      	cmp	r8, r0
 800761a:	d13a      	bne.n	8007692 <_malloc_r+0xd2>
 800761c:	6821      	ldr	r1, [r4, #0]
 800761e:	3503      	adds	r5, #3
 8007620:	1a6d      	subs	r5, r5, r1
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	4629      	mov	r1, r5
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff ffa5 	bl	8007580 <sbrk_aligned>
 8007636:	3001      	adds	r0, #1
 8007638:	d02b      	beq.n	8007692 <_malloc_r+0xd2>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	442b      	add	r3, r5
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	e00e      	b.n	8007660 <_malloc_r+0xa0>
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	1b52      	subs	r2, r2, r5
 8007646:	d41e      	bmi.n	8007686 <_malloc_r+0xc6>
 8007648:	2a0b      	cmp	r2, #11
 800764a:	d916      	bls.n	800767a <_malloc_r+0xba>
 800764c:	1961      	adds	r1, r4, r5
 800764e:	42a3      	cmp	r3, r4
 8007650:	6025      	str	r5, [r4, #0]
 8007652:	bf18      	it	ne
 8007654:	6059      	strne	r1, [r3, #4]
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	bf08      	it	eq
 800765a:	6031      	streq	r1, [r6, #0]
 800765c:	5162      	str	r2, [r4, r5]
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	4638      	mov	r0, r7
 8007662:	f104 060b 	add.w	r6, r4, #11
 8007666:	f001 ff6f 	bl	8009548 <__malloc_unlock>
 800766a:	f026 0607 	bic.w	r6, r6, #7
 800766e:	1d23      	adds	r3, r4, #4
 8007670:	1af2      	subs	r2, r6, r3
 8007672:	d0b6      	beq.n	80075e2 <_malloc_r+0x22>
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	50a3      	str	r3, [r4, r2]
 8007678:	e7b3      	b.n	80075e2 <_malloc_r+0x22>
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	42a3      	cmp	r3, r4
 800767e:	bf0c      	ite	eq
 8007680:	6032      	streq	r2, [r6, #0]
 8007682:	605a      	strne	r2, [r3, #4]
 8007684:	e7ec      	b.n	8007660 <_malloc_r+0xa0>
 8007686:	4623      	mov	r3, r4
 8007688:	6864      	ldr	r4, [r4, #4]
 800768a:	e7b2      	b.n	80075f2 <_malloc_r+0x32>
 800768c:	4634      	mov	r4, r6
 800768e:	6876      	ldr	r6, [r6, #4]
 8007690:	e7b9      	b.n	8007606 <_malloc_r+0x46>
 8007692:	230c      	movs	r3, #12
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	4638      	mov	r0, r7
 8007698:	f001 ff56 	bl	8009548 <__malloc_unlock>
 800769c:	e7a1      	b.n	80075e2 <_malloc_r+0x22>
 800769e:	6025      	str	r5, [r4, #0]
 80076a0:	e7de      	b.n	8007660 <_malloc_r+0xa0>
 80076a2:	bf00      	nop
 80076a4:	200044b4 	.word	0x200044b4

080076a8 <__cvt>:
 80076a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	ec55 4b10 	vmov	r4, r5, d0
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	460e      	mov	r6, r1
 80076b4:	4619      	mov	r1, r3
 80076b6:	462b      	mov	r3, r5
 80076b8:	bfbb      	ittet	lt
 80076ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076be:	461d      	movlt	r5, r3
 80076c0:	2300      	movge	r3, #0
 80076c2:	232d      	movlt	r3, #45	; 0x2d
 80076c4:	700b      	strb	r3, [r1, #0]
 80076c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076cc:	4691      	mov	r9, r2
 80076ce:	f023 0820 	bic.w	r8, r3, #32
 80076d2:	bfbc      	itt	lt
 80076d4:	4622      	movlt	r2, r4
 80076d6:	4614      	movlt	r4, r2
 80076d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076dc:	d005      	beq.n	80076ea <__cvt+0x42>
 80076de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076e2:	d100      	bne.n	80076e6 <__cvt+0x3e>
 80076e4:	3601      	adds	r6, #1
 80076e6:	2102      	movs	r1, #2
 80076e8:	e000      	b.n	80076ec <__cvt+0x44>
 80076ea:	2103      	movs	r1, #3
 80076ec:	ab03      	add	r3, sp, #12
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	ab02      	add	r3, sp, #8
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	ec45 4b10 	vmov	d0, r4, r5
 80076f8:	4653      	mov	r3, sl
 80076fa:	4632      	mov	r2, r6
 80076fc:	f000 ffd8 	bl	80086b0 <_dtoa_r>
 8007700:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007704:	4607      	mov	r7, r0
 8007706:	d102      	bne.n	800770e <__cvt+0x66>
 8007708:	f019 0f01 	tst.w	r9, #1
 800770c:	d022      	beq.n	8007754 <__cvt+0xac>
 800770e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007712:	eb07 0906 	add.w	r9, r7, r6
 8007716:	d110      	bne.n	800773a <__cvt+0x92>
 8007718:	783b      	ldrb	r3, [r7, #0]
 800771a:	2b30      	cmp	r3, #48	; 0x30
 800771c:	d10a      	bne.n	8007734 <__cvt+0x8c>
 800771e:	2200      	movs	r2, #0
 8007720:	2300      	movs	r3, #0
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f9 f9ef 	bl	8000b08 <__aeabi_dcmpeq>
 800772a:	b918      	cbnz	r0, 8007734 <__cvt+0x8c>
 800772c:	f1c6 0601 	rsb	r6, r6, #1
 8007730:	f8ca 6000 	str.w	r6, [sl]
 8007734:	f8da 3000 	ldr.w	r3, [sl]
 8007738:	4499      	add	r9, r3
 800773a:	2200      	movs	r2, #0
 800773c:	2300      	movs	r3, #0
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f9 f9e1 	bl	8000b08 <__aeabi_dcmpeq>
 8007746:	b108      	cbz	r0, 800774c <__cvt+0xa4>
 8007748:	f8cd 900c 	str.w	r9, [sp, #12]
 800774c:	2230      	movs	r2, #48	; 0x30
 800774e:	9b03      	ldr	r3, [sp, #12]
 8007750:	454b      	cmp	r3, r9
 8007752:	d307      	bcc.n	8007764 <__cvt+0xbc>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007758:	1bdb      	subs	r3, r3, r7
 800775a:	4638      	mov	r0, r7
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	b004      	add	sp, #16
 8007760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007764:	1c59      	adds	r1, r3, #1
 8007766:	9103      	str	r1, [sp, #12]
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e7f0      	b.n	800774e <__cvt+0xa6>

0800776c <__exponent>:
 800776c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776e:	4603      	mov	r3, r0
 8007770:	2900      	cmp	r1, #0
 8007772:	bfb8      	it	lt
 8007774:	4249      	neglt	r1, r1
 8007776:	f803 2b02 	strb.w	r2, [r3], #2
 800777a:	bfb4      	ite	lt
 800777c:	222d      	movlt	r2, #45	; 0x2d
 800777e:	222b      	movge	r2, #43	; 0x2b
 8007780:	2909      	cmp	r1, #9
 8007782:	7042      	strb	r2, [r0, #1]
 8007784:	dd2a      	ble.n	80077dc <__exponent+0x70>
 8007786:	f10d 0407 	add.w	r4, sp, #7
 800778a:	46a4      	mov	ip, r4
 800778c:	270a      	movs	r7, #10
 800778e:	46a6      	mov	lr, r4
 8007790:	460a      	mov	r2, r1
 8007792:	fb91 f6f7 	sdiv	r6, r1, r7
 8007796:	fb07 1516 	mls	r5, r7, r6, r1
 800779a:	3530      	adds	r5, #48	; 0x30
 800779c:	2a63      	cmp	r2, #99	; 0x63
 800779e:	f104 34ff 	add.w	r4, r4, #4294967295
 80077a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077a6:	4631      	mov	r1, r6
 80077a8:	dcf1      	bgt.n	800778e <__exponent+0x22>
 80077aa:	3130      	adds	r1, #48	; 0x30
 80077ac:	f1ae 0502 	sub.w	r5, lr, #2
 80077b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077b4:	1c44      	adds	r4, r0, #1
 80077b6:	4629      	mov	r1, r5
 80077b8:	4561      	cmp	r1, ip
 80077ba:	d30a      	bcc.n	80077d2 <__exponent+0x66>
 80077bc:	f10d 0209 	add.w	r2, sp, #9
 80077c0:	eba2 020e 	sub.w	r2, r2, lr
 80077c4:	4565      	cmp	r5, ip
 80077c6:	bf88      	it	hi
 80077c8:	2200      	movhi	r2, #0
 80077ca:	4413      	add	r3, r2
 80077cc:	1a18      	subs	r0, r3, r0
 80077ce:	b003      	add	sp, #12
 80077d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077da:	e7ed      	b.n	80077b8 <__exponent+0x4c>
 80077dc:	2330      	movs	r3, #48	; 0x30
 80077de:	3130      	adds	r1, #48	; 0x30
 80077e0:	7083      	strb	r3, [r0, #2]
 80077e2:	70c1      	strb	r1, [r0, #3]
 80077e4:	1d03      	adds	r3, r0, #4
 80077e6:	e7f1      	b.n	80077cc <__exponent+0x60>

080077e8 <_printf_float>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ed2d 8b02 	vpush	{d8}
 80077f0:	b08d      	sub	sp, #52	; 0x34
 80077f2:	460c      	mov	r4, r1
 80077f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077f8:	4616      	mov	r6, r2
 80077fa:	461f      	mov	r7, r3
 80077fc:	4605      	mov	r5, r0
 80077fe:	f001 fe19 	bl	8009434 <_localeconv_r>
 8007802:	f8d0 a000 	ldr.w	sl, [r0]
 8007806:	4650      	mov	r0, sl
 8007808:	f7f8 fd02 	bl	8000210 <strlen>
 800780c:	2300      	movs	r3, #0
 800780e:	930a      	str	r3, [sp, #40]	; 0x28
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8d8 3000 	ldr.w	r3, [r8]
 8007818:	f894 b018 	ldrb.w	fp, [r4, #24]
 800781c:	3307      	adds	r3, #7
 800781e:	f023 0307 	bic.w	r3, r3, #7
 8007822:	f103 0208 	add.w	r2, r3, #8
 8007826:	f8c8 2000 	str.w	r2, [r8]
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007832:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800783a:	9307      	str	r3, [sp, #28]
 800783c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007840:	ee08 0a10 	vmov	s16, r0
 8007844:	4b9f      	ldr	r3, [pc, #636]	; (8007ac4 <_printf_float+0x2dc>)
 8007846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	f7f9 f98d 	bl	8000b6c <__aeabi_dcmpun>
 8007852:	bb88      	cbnz	r0, 80078b8 <_printf_float+0xd0>
 8007854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007858:	4b9a      	ldr	r3, [pc, #616]	; (8007ac4 <_printf_float+0x2dc>)
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	f7f9 f967 	bl	8000b30 <__aeabi_dcmple>
 8007862:	bb48      	cbnz	r0, 80078b8 <_printf_float+0xd0>
 8007864:	2200      	movs	r2, #0
 8007866:	2300      	movs	r3, #0
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f9 f956 	bl	8000b1c <__aeabi_dcmplt>
 8007870:	b110      	cbz	r0, 8007878 <_printf_float+0x90>
 8007872:	232d      	movs	r3, #45	; 0x2d
 8007874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007878:	4b93      	ldr	r3, [pc, #588]	; (8007ac8 <_printf_float+0x2e0>)
 800787a:	4894      	ldr	r0, [pc, #592]	; (8007acc <_printf_float+0x2e4>)
 800787c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007880:	bf94      	ite	ls
 8007882:	4698      	movls	r8, r3
 8007884:	4680      	movhi	r8, r0
 8007886:	2303      	movs	r3, #3
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	9b05      	ldr	r3, [sp, #20]
 800788c:	f023 0204 	bic.w	r2, r3, #4
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	f04f 0900 	mov.w	r9, #0
 8007896:	9700      	str	r7, [sp, #0]
 8007898:	4633      	mov	r3, r6
 800789a:	aa0b      	add	r2, sp, #44	; 0x2c
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f9d8 	bl	8007c54 <_printf_common>
 80078a4:	3001      	adds	r0, #1
 80078a6:	f040 8090 	bne.w	80079ca <_printf_float+0x1e2>
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	b00d      	add	sp, #52	; 0x34
 80078b0:	ecbd 8b02 	vpop	{d8}
 80078b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b8:	4642      	mov	r2, r8
 80078ba:	464b      	mov	r3, r9
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f954 	bl	8000b6c <__aeabi_dcmpun>
 80078c4:	b140      	cbz	r0, 80078d8 <_printf_float+0xf0>
 80078c6:	464b      	mov	r3, r9
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bfbc      	itt	lt
 80078cc:	232d      	movlt	r3, #45	; 0x2d
 80078ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078d2:	487f      	ldr	r0, [pc, #508]	; (8007ad0 <_printf_float+0x2e8>)
 80078d4:	4b7f      	ldr	r3, [pc, #508]	; (8007ad4 <_printf_float+0x2ec>)
 80078d6:	e7d1      	b.n	800787c <_printf_float+0x94>
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078de:	9206      	str	r2, [sp, #24]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	d13f      	bne.n	8007964 <_printf_float+0x17c>
 80078e4:	2306      	movs	r3, #6
 80078e6:	6063      	str	r3, [r4, #4]
 80078e8:	9b05      	ldr	r3, [sp, #20]
 80078ea:	6861      	ldr	r1, [r4, #4]
 80078ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078f0:	2300      	movs	r3, #0
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	ab0a      	add	r3, sp, #40	; 0x28
 80078f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078fa:	ab09      	add	r3, sp, #36	; 0x24
 80078fc:	ec49 8b10 	vmov	d0, r8, r9
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	6022      	str	r2, [r4, #0]
 8007904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007908:	4628      	mov	r0, r5
 800790a:	f7ff fecd 	bl	80076a8 <__cvt>
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007912:	2b47      	cmp	r3, #71	; 0x47
 8007914:	4680      	mov	r8, r0
 8007916:	d108      	bne.n	800792a <_printf_float+0x142>
 8007918:	1cc8      	adds	r0, r1, #3
 800791a:	db02      	blt.n	8007922 <_printf_float+0x13a>
 800791c:	6863      	ldr	r3, [r4, #4]
 800791e:	4299      	cmp	r1, r3
 8007920:	dd41      	ble.n	80079a6 <_printf_float+0x1be>
 8007922:	f1ab 0b02 	sub.w	fp, fp, #2
 8007926:	fa5f fb8b 	uxtb.w	fp, fp
 800792a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800792e:	d820      	bhi.n	8007972 <_printf_float+0x18a>
 8007930:	3901      	subs	r1, #1
 8007932:	465a      	mov	r2, fp
 8007934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007938:	9109      	str	r1, [sp, #36]	; 0x24
 800793a:	f7ff ff17 	bl	800776c <__exponent>
 800793e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007940:	1813      	adds	r3, r2, r0
 8007942:	2a01      	cmp	r2, #1
 8007944:	4681      	mov	r9, r0
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	dc02      	bgt.n	8007950 <_printf_float+0x168>
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	07d2      	lsls	r2, r2, #31
 800794e:	d501      	bpl.n	8007954 <_printf_float+0x16c>
 8007950:	3301      	adds	r3, #1
 8007952:	6123      	str	r3, [r4, #16]
 8007954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007958:	2b00      	cmp	r3, #0
 800795a:	d09c      	beq.n	8007896 <_printf_float+0xae>
 800795c:	232d      	movs	r3, #45	; 0x2d
 800795e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007962:	e798      	b.n	8007896 <_printf_float+0xae>
 8007964:	9a06      	ldr	r2, [sp, #24]
 8007966:	2a47      	cmp	r2, #71	; 0x47
 8007968:	d1be      	bne.n	80078e8 <_printf_float+0x100>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1bc      	bne.n	80078e8 <_printf_float+0x100>
 800796e:	2301      	movs	r3, #1
 8007970:	e7b9      	b.n	80078e6 <_printf_float+0xfe>
 8007972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007976:	d118      	bne.n	80079aa <_printf_float+0x1c2>
 8007978:	2900      	cmp	r1, #0
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	dd0b      	ble.n	8007996 <_printf_float+0x1ae>
 800797e:	6121      	str	r1, [r4, #16]
 8007980:	b913      	cbnz	r3, 8007988 <_printf_float+0x1a0>
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	07d0      	lsls	r0, r2, #31
 8007986:	d502      	bpl.n	800798e <_printf_float+0x1a6>
 8007988:	3301      	adds	r3, #1
 800798a:	440b      	add	r3, r1
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007990:	f04f 0900 	mov.w	r9, #0
 8007994:	e7de      	b.n	8007954 <_printf_float+0x16c>
 8007996:	b913      	cbnz	r3, 800799e <_printf_float+0x1b6>
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	07d2      	lsls	r2, r2, #31
 800799c:	d501      	bpl.n	80079a2 <_printf_float+0x1ba>
 800799e:	3302      	adds	r3, #2
 80079a0:	e7f4      	b.n	800798c <_printf_float+0x1a4>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e7f2      	b.n	800798c <_printf_float+0x1a4>
 80079a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ac:	4299      	cmp	r1, r3
 80079ae:	db05      	blt.n	80079bc <_printf_float+0x1d4>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	6121      	str	r1, [r4, #16]
 80079b4:	07d8      	lsls	r0, r3, #31
 80079b6:	d5ea      	bpl.n	800798e <_printf_float+0x1a6>
 80079b8:	1c4b      	adds	r3, r1, #1
 80079ba:	e7e7      	b.n	800798c <_printf_float+0x1a4>
 80079bc:	2900      	cmp	r1, #0
 80079be:	bfd4      	ite	le
 80079c0:	f1c1 0202 	rsble	r2, r1, #2
 80079c4:	2201      	movgt	r2, #1
 80079c6:	4413      	add	r3, r2
 80079c8:	e7e0      	b.n	800798c <_printf_float+0x1a4>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	055a      	lsls	r2, r3, #21
 80079ce:	d407      	bmi.n	80079e0 <_printf_float+0x1f8>
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	4642      	mov	r2, r8
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	d12c      	bne.n	8007a38 <_printf_float+0x250>
 80079de:	e764      	b.n	80078aa <_printf_float+0xc2>
 80079e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079e4:	f240 80e0 	bls.w	8007ba8 <_printf_float+0x3c0>
 80079e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079ec:	2200      	movs	r2, #0
 80079ee:	2300      	movs	r3, #0
 80079f0:	f7f9 f88a 	bl	8000b08 <__aeabi_dcmpeq>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d034      	beq.n	8007a62 <_printf_float+0x27a>
 80079f8:	4a37      	ldr	r2, [pc, #220]	; (8007ad8 <_printf_float+0x2f0>)
 80079fa:	2301      	movs	r3, #1
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f af51 	beq.w	80078aa <_printf_float+0xc2>
 8007a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	db02      	blt.n	8007a16 <_printf_float+0x22e>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	07d8      	lsls	r0, r3, #31
 8007a14:	d510      	bpl.n	8007a38 <_printf_float+0x250>
 8007a16:	ee18 3a10 	vmov	r3, s16
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f af41 	beq.w	80078aa <_printf_float+0xc2>
 8007a28:	f04f 0800 	mov.w	r8, #0
 8007a2c:	f104 091a 	add.w	r9, r4, #26
 8007a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a32:	3b01      	subs	r3, #1
 8007a34:	4543      	cmp	r3, r8
 8007a36:	dc09      	bgt.n	8007a4c <_printf_float+0x264>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	079b      	lsls	r3, r3, #30
 8007a3c:	f100 8105 	bmi.w	8007c4a <_printf_float+0x462>
 8007a40:	68e0      	ldr	r0, [r4, #12]
 8007a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a44:	4298      	cmp	r0, r3
 8007a46:	bfb8      	it	lt
 8007a48:	4618      	movlt	r0, r3
 8007a4a:	e730      	b.n	80078ae <_printf_float+0xc6>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	464a      	mov	r2, r9
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af27 	beq.w	80078aa <_printf_float+0xc2>
 8007a5c:	f108 0801 	add.w	r8, r8, #1
 8007a60:	e7e6      	b.n	8007a30 <_printf_float+0x248>
 8007a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dc39      	bgt.n	8007adc <_printf_float+0x2f4>
 8007a68:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <_printf_float+0x2f0>)
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f af19 	beq.w	80078aa <_printf_float+0xc2>
 8007a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	d102      	bne.n	8007a86 <_printf_float+0x29e>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d5d8      	bpl.n	8007a38 <_printf_float+0x250>
 8007a86:	ee18 3a10 	vmov	r3, s16
 8007a8a:	4652      	mov	r2, sl
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	f43f af09 	beq.w	80078aa <_printf_float+0xc2>
 8007a98:	f04f 0900 	mov.w	r9, #0
 8007a9c:	f104 0a1a 	add.w	sl, r4, #26
 8007aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa2:	425b      	negs	r3, r3
 8007aa4:	454b      	cmp	r3, r9
 8007aa6:	dc01      	bgt.n	8007aac <_printf_float+0x2c4>
 8007aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aaa:	e792      	b.n	80079d2 <_printf_float+0x1ea>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f aef7 	beq.w	80078aa <_printf_float+0xc2>
 8007abc:	f109 0901 	add.w	r9, r9, #1
 8007ac0:	e7ee      	b.n	8007aa0 <_printf_float+0x2b8>
 8007ac2:	bf00      	nop
 8007ac4:	7fefffff 	.word	0x7fefffff
 8007ac8:	0800b314 	.word	0x0800b314
 8007acc:	0800b318 	.word	0x0800b318
 8007ad0:	0800b320 	.word	0x0800b320
 8007ad4:	0800b31c 	.word	0x0800b31c
 8007ad8:	0800b549 	.word	0x0800b549
 8007adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	bfa8      	it	ge
 8007ae4:	461a      	movge	r2, r3
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	4691      	mov	r9, r2
 8007aea:	dc37      	bgt.n	8007b5c <_printf_float+0x374>
 8007aec:	f04f 0b00 	mov.w	fp, #0
 8007af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af4:	f104 021a 	add.w	r2, r4, #26
 8007af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	eba3 0309 	sub.w	r3, r3, r9
 8007b00:	455b      	cmp	r3, fp
 8007b02:	dc33      	bgt.n	8007b6c <_printf_float+0x384>
 8007b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	db3b      	blt.n	8007b84 <_printf_float+0x39c>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	07da      	lsls	r2, r3, #31
 8007b10:	d438      	bmi.n	8007b84 <_printf_float+0x39c>
 8007b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b14:	9a05      	ldr	r2, [sp, #20]
 8007b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b18:	1a9a      	subs	r2, r3, r2
 8007b1a:	eba3 0901 	sub.w	r9, r3, r1
 8007b1e:	4591      	cmp	r9, r2
 8007b20:	bfa8      	it	ge
 8007b22:	4691      	movge	r9, r2
 8007b24:	f1b9 0f00 	cmp.w	r9, #0
 8007b28:	dc35      	bgt.n	8007b96 <_printf_float+0x3ae>
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b32:	f104 0a1a 	add.w	sl, r4, #26
 8007b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	eba3 0309 	sub.w	r3, r3, r9
 8007b40:	4543      	cmp	r3, r8
 8007b42:	f77f af79 	ble.w	8007a38 <_printf_float+0x250>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4652      	mov	r2, sl
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f aeaa 	beq.w	80078aa <_printf_float+0xc2>
 8007b56:	f108 0801 	add.w	r8, r8, #1
 8007b5a:	e7ec      	b.n	8007b36 <_printf_float+0x34e>
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4642      	mov	r2, r8
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	d1c0      	bne.n	8007aec <_printf_float+0x304>
 8007b6a:	e69e      	b.n	80078aa <_printf_float+0xc2>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	9205      	str	r2, [sp, #20]
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f ae97 	beq.w	80078aa <_printf_float+0xc2>
 8007b7c:	9a05      	ldr	r2, [sp, #20]
 8007b7e:	f10b 0b01 	add.w	fp, fp, #1
 8007b82:	e7b9      	b.n	8007af8 <_printf_float+0x310>
 8007b84:	ee18 3a10 	vmov	r3, s16
 8007b88:	4652      	mov	r2, sl
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	d1be      	bne.n	8007b12 <_printf_float+0x32a>
 8007b94:	e689      	b.n	80078aa <_printf_float+0xc2>
 8007b96:	9a05      	ldr	r2, [sp, #20]
 8007b98:	464b      	mov	r3, r9
 8007b9a:	4442      	add	r2, r8
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d1c1      	bne.n	8007b2a <_printf_float+0x342>
 8007ba6:	e680      	b.n	80078aa <_printf_float+0xc2>
 8007ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	dc01      	bgt.n	8007bb2 <_printf_float+0x3ca>
 8007bae:	07db      	lsls	r3, r3, #31
 8007bb0:	d538      	bpl.n	8007c24 <_printf_float+0x43c>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae74 	beq.w	80078aa <_printf_float+0xc2>
 8007bc2:	ee18 3a10 	vmov	r3, s16
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f ae6b 	beq.w	80078aa <_printf_float+0xc2>
 8007bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f7f8 ff94 	bl	8000b08 <__aeabi_dcmpeq>
 8007be0:	b9d8      	cbnz	r0, 8007c1a <_printf_float+0x432>
 8007be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be4:	f108 0201 	add.w	r2, r8, #1
 8007be8:	3b01      	subs	r3, #1
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d10e      	bne.n	8007c12 <_printf_float+0x42a>
 8007bf4:	e659      	b.n	80078aa <_printf_float+0xc2>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f ae52 	beq.w	80078aa <_printf_float+0xc2>
 8007c06:	f108 0801 	add.w	r8, r8, #1
 8007c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	4543      	cmp	r3, r8
 8007c10:	dcf1      	bgt.n	8007bf6 <_printf_float+0x40e>
 8007c12:	464b      	mov	r3, r9
 8007c14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c18:	e6dc      	b.n	80079d4 <_printf_float+0x1ec>
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	f104 0a1a 	add.w	sl, r4, #26
 8007c22:	e7f2      	b.n	8007c0a <_printf_float+0x422>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4642      	mov	r2, r8
 8007c28:	e7df      	b.n	8007bea <_printf_float+0x402>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	464a      	mov	r2, r9
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	f43f ae38 	beq.w	80078aa <_printf_float+0xc2>
 8007c3a:	f108 0801 	add.w	r8, r8, #1
 8007c3e:	68e3      	ldr	r3, [r4, #12]
 8007c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c42:	1a5b      	subs	r3, r3, r1
 8007c44:	4543      	cmp	r3, r8
 8007c46:	dcf0      	bgt.n	8007c2a <_printf_float+0x442>
 8007c48:	e6fa      	b.n	8007a40 <_printf_float+0x258>
 8007c4a:	f04f 0800 	mov.w	r8, #0
 8007c4e:	f104 0919 	add.w	r9, r4, #25
 8007c52:	e7f4      	b.n	8007c3e <_printf_float+0x456>

08007c54 <_printf_common>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	4616      	mov	r6, r2
 8007c5a:	4699      	mov	r9, r3
 8007c5c:	688a      	ldr	r2, [r1, #8]
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	bfb8      	it	lt
 8007c68:	4613      	movlt	r3, r2
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c70:	4607      	mov	r7, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	b10a      	cbz	r2, 8007c7a <_printf_common+0x26>
 8007c76:	3301      	adds	r3, #1
 8007c78:	6033      	str	r3, [r6, #0]
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	0699      	lsls	r1, r3, #26
 8007c7e:	bf42      	ittt	mi
 8007c80:	6833      	ldrmi	r3, [r6, #0]
 8007c82:	3302      	addmi	r3, #2
 8007c84:	6033      	strmi	r3, [r6, #0]
 8007c86:	6825      	ldr	r5, [r4, #0]
 8007c88:	f015 0506 	ands.w	r5, r5, #6
 8007c8c:	d106      	bne.n	8007c9c <_printf_common+0x48>
 8007c8e:	f104 0a19 	add.w	sl, r4, #25
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	6832      	ldr	r2, [r6, #0]
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dc26      	bgt.n	8007cea <_printf_common+0x96>
 8007c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ca0:	1e13      	subs	r3, r2, #0
 8007ca2:	6822      	ldr	r2, [r4, #0]
 8007ca4:	bf18      	it	ne
 8007ca6:	2301      	movne	r3, #1
 8007ca8:	0692      	lsls	r2, r2, #26
 8007caa:	d42b      	bmi.n	8007d04 <_printf_common+0xb0>
 8007cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c0      	blx	r8
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d01e      	beq.n	8007cf8 <_printf_common+0xa4>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	68e5      	ldr	r5, [r4, #12]
 8007cbe:	6832      	ldr	r2, [r6, #0]
 8007cc0:	f003 0306 	and.w	r3, r3, #6
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	bf08      	it	eq
 8007cc8:	1aad      	subeq	r5, r5, r2
 8007cca:	68a3      	ldr	r3, [r4, #8]
 8007ccc:	6922      	ldr	r2, [r4, #16]
 8007cce:	bf0c      	ite	eq
 8007cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd4:	2500      	movne	r5, #0
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	bfc4      	itt	gt
 8007cda:	1a9b      	subgt	r3, r3, r2
 8007cdc:	18ed      	addgt	r5, r5, r3
 8007cde:	2600      	movs	r6, #0
 8007ce0:	341a      	adds	r4, #26
 8007ce2:	42b5      	cmp	r5, r6
 8007ce4:	d11a      	bne.n	8007d1c <_printf_common+0xc8>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e008      	b.n	8007cfc <_printf_common+0xa8>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4652      	mov	r2, sl
 8007cee:	4649      	mov	r1, r9
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	47c0      	blx	r8
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d103      	bne.n	8007d00 <_printf_common+0xac>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d00:	3501      	adds	r5, #1
 8007d02:	e7c6      	b.n	8007c92 <_printf_common+0x3e>
 8007d04:	18e1      	adds	r1, r4, r3
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	2030      	movs	r0, #48	; 0x30
 8007d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d0e:	4422      	add	r2, r4
 8007d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d18:	3302      	adds	r3, #2
 8007d1a:	e7c7      	b.n	8007cac <_printf_common+0x58>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4622      	mov	r2, r4
 8007d20:	4649      	mov	r1, r9
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c0      	blx	r8
 8007d26:	3001      	adds	r0, #1
 8007d28:	d0e6      	beq.n	8007cf8 <_printf_common+0xa4>
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	e7d9      	b.n	8007ce2 <_printf_common+0x8e>
	...

08007d30 <_printf_i>:
 8007d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	7e0f      	ldrb	r7, [r1, #24]
 8007d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d38:	2f78      	cmp	r7, #120	; 0x78
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	469a      	mov	sl, r3
 8007d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d46:	d807      	bhi.n	8007d58 <_printf_i+0x28>
 8007d48:	2f62      	cmp	r7, #98	; 0x62
 8007d4a:	d80a      	bhi.n	8007d62 <_printf_i+0x32>
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	f000 80d8 	beq.w	8007f02 <_printf_i+0x1d2>
 8007d52:	2f58      	cmp	r7, #88	; 0x58
 8007d54:	f000 80a3 	beq.w	8007e9e <_printf_i+0x16e>
 8007d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d60:	e03a      	b.n	8007dd8 <_printf_i+0xa8>
 8007d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d66:	2b15      	cmp	r3, #21
 8007d68:	d8f6      	bhi.n	8007d58 <_printf_i+0x28>
 8007d6a:	a101      	add	r1, pc, #4	; (adr r1, 8007d70 <_printf_i+0x40>)
 8007d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007ddd 	.word	0x08007ddd
 8007d78:	08007d59 	.word	0x08007d59
 8007d7c:	08007d59 	.word	0x08007d59
 8007d80:	08007d59 	.word	0x08007d59
 8007d84:	08007d59 	.word	0x08007d59
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007d59 	.word	0x08007d59
 8007d90:	08007d59 	.word	0x08007d59
 8007d94:	08007d59 	.word	0x08007d59
 8007d98:	08007d59 	.word	0x08007d59
 8007d9c:	08007ee9 	.word	0x08007ee9
 8007da0:	08007e0d 	.word	0x08007e0d
 8007da4:	08007ecb 	.word	0x08007ecb
 8007da8:	08007d59 	.word	0x08007d59
 8007dac:	08007d59 	.word	0x08007d59
 8007db0:	08007f0b 	.word	0x08007f0b
 8007db4:	08007d59 	.word	0x08007d59
 8007db8:	08007e0d 	.word	0x08007e0d
 8007dbc:	08007d59 	.word	0x08007d59
 8007dc0:	08007d59 	.word	0x08007d59
 8007dc4:	08007ed3 	.word	0x08007ed3
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	1d1a      	adds	r2, r3, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	602a      	str	r2, [r5, #0]
 8007dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0a3      	b.n	8007f24 <_printf_i+0x1f4>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	6829      	ldr	r1, [r5, #0]
 8007de0:	0606      	lsls	r6, r0, #24
 8007de2:	f101 0304 	add.w	r3, r1, #4
 8007de6:	d50a      	bpl.n	8007dfe <_printf_i+0xce>
 8007de8:	680e      	ldr	r6, [r1, #0]
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	2e00      	cmp	r6, #0
 8007dee:	da03      	bge.n	8007df8 <_printf_i+0xc8>
 8007df0:	232d      	movs	r3, #45	; 0x2d
 8007df2:	4276      	negs	r6, r6
 8007df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df8:	485e      	ldr	r0, [pc, #376]	; (8007f74 <_printf_i+0x244>)
 8007dfa:	230a      	movs	r3, #10
 8007dfc:	e019      	b.n	8007e32 <_printf_i+0x102>
 8007dfe:	680e      	ldr	r6, [r1, #0]
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e06:	bf18      	it	ne
 8007e08:	b236      	sxthne	r6, r6
 8007e0a:	e7ef      	b.n	8007dec <_printf_i+0xbc>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	6820      	ldr	r0, [r4, #0]
 8007e10:	1d19      	adds	r1, r3, #4
 8007e12:	6029      	str	r1, [r5, #0]
 8007e14:	0601      	lsls	r1, r0, #24
 8007e16:	d501      	bpl.n	8007e1c <_printf_i+0xec>
 8007e18:	681e      	ldr	r6, [r3, #0]
 8007e1a:	e002      	b.n	8007e22 <_printf_i+0xf2>
 8007e1c:	0646      	lsls	r6, r0, #25
 8007e1e:	d5fb      	bpl.n	8007e18 <_printf_i+0xe8>
 8007e20:	881e      	ldrh	r6, [r3, #0]
 8007e22:	4854      	ldr	r0, [pc, #336]	; (8007f74 <_printf_i+0x244>)
 8007e24:	2f6f      	cmp	r7, #111	; 0x6f
 8007e26:	bf0c      	ite	eq
 8007e28:	2308      	moveq	r3, #8
 8007e2a:	230a      	movne	r3, #10
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e32:	6865      	ldr	r5, [r4, #4]
 8007e34:	60a5      	str	r5, [r4, #8]
 8007e36:	2d00      	cmp	r5, #0
 8007e38:	bfa2      	ittt	ge
 8007e3a:	6821      	ldrge	r1, [r4, #0]
 8007e3c:	f021 0104 	bicge.w	r1, r1, #4
 8007e40:	6021      	strge	r1, [r4, #0]
 8007e42:	b90e      	cbnz	r6, 8007e48 <_printf_i+0x118>
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	d04d      	beq.n	8007ee4 <_printf_i+0x1b4>
 8007e48:	4615      	mov	r5, r2
 8007e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e52:	5dc7      	ldrb	r7, [r0, r7]
 8007e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e58:	4637      	mov	r7, r6
 8007e5a:	42bb      	cmp	r3, r7
 8007e5c:	460e      	mov	r6, r1
 8007e5e:	d9f4      	bls.n	8007e4a <_printf_i+0x11a>
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d10b      	bne.n	8007e7c <_printf_i+0x14c>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	07de      	lsls	r6, r3, #31
 8007e68:	d508      	bpl.n	8007e7c <_printf_i+0x14c>
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	6861      	ldr	r1, [r4, #4]
 8007e6e:	4299      	cmp	r1, r3
 8007e70:	bfde      	ittt	le
 8007e72:	2330      	movle	r3, #48	; 0x30
 8007e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e7c:	1b52      	subs	r2, r2, r5
 8007e7e:	6122      	str	r2, [r4, #16]
 8007e80:	f8cd a000 	str.w	sl, [sp]
 8007e84:	464b      	mov	r3, r9
 8007e86:	aa03      	add	r2, sp, #12
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	f7ff fee2 	bl	8007c54 <_printf_common>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d14c      	bne.n	8007f2e <_printf_i+0x1fe>
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	b004      	add	sp, #16
 8007e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9e:	4835      	ldr	r0, [pc, #212]	; (8007f74 <_printf_i+0x244>)
 8007ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ea4:	6829      	ldr	r1, [r5, #0]
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007eac:	6029      	str	r1, [r5, #0]
 8007eae:	061d      	lsls	r5, r3, #24
 8007eb0:	d514      	bpl.n	8007edc <_printf_i+0x1ac>
 8007eb2:	07df      	lsls	r7, r3, #31
 8007eb4:	bf44      	itt	mi
 8007eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eba:	6023      	strmi	r3, [r4, #0]
 8007ebc:	b91e      	cbnz	r6, 8007ec6 <_printf_i+0x196>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	f023 0320 	bic.w	r3, r3, #32
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	2310      	movs	r3, #16
 8007ec8:	e7b0      	b.n	8007e2c <_printf_i+0xfc>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	f043 0320 	orr.w	r3, r3, #32
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	2378      	movs	r3, #120	; 0x78
 8007ed4:	4828      	ldr	r0, [pc, #160]	; (8007f78 <_printf_i+0x248>)
 8007ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eda:	e7e3      	b.n	8007ea4 <_printf_i+0x174>
 8007edc:	0659      	lsls	r1, r3, #25
 8007ede:	bf48      	it	mi
 8007ee0:	b2b6      	uxthmi	r6, r6
 8007ee2:	e7e6      	b.n	8007eb2 <_printf_i+0x182>
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	e7bb      	b.n	8007e60 <_printf_i+0x130>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	6826      	ldr	r6, [r4, #0]
 8007eec:	6961      	ldr	r1, [r4, #20]
 8007eee:	1d18      	adds	r0, r3, #4
 8007ef0:	6028      	str	r0, [r5, #0]
 8007ef2:	0635      	lsls	r5, r6, #24
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	d501      	bpl.n	8007efc <_printf_i+0x1cc>
 8007ef8:	6019      	str	r1, [r3, #0]
 8007efa:	e002      	b.n	8007f02 <_printf_i+0x1d2>
 8007efc:	0670      	lsls	r0, r6, #25
 8007efe:	d5fb      	bpl.n	8007ef8 <_printf_i+0x1c8>
 8007f00:	8019      	strh	r1, [r3, #0]
 8007f02:	2300      	movs	r3, #0
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	4615      	mov	r5, r2
 8007f08:	e7ba      	b.n	8007e80 <_printf_i+0x150>
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	1d1a      	adds	r2, r3, #4
 8007f0e:	602a      	str	r2, [r5, #0]
 8007f10:	681d      	ldr	r5, [r3, #0]
 8007f12:	6862      	ldr	r2, [r4, #4]
 8007f14:	2100      	movs	r1, #0
 8007f16:	4628      	mov	r0, r5
 8007f18:	f7f8 f982 	bl	8000220 <memchr>
 8007f1c:	b108      	cbz	r0, 8007f22 <_printf_i+0x1f2>
 8007f1e:	1b40      	subs	r0, r0, r5
 8007f20:	6060      	str	r0, [r4, #4]
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	2300      	movs	r3, #0
 8007f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f2c:	e7a8      	b.n	8007e80 <_printf_i+0x150>
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	462a      	mov	r2, r5
 8007f32:	4649      	mov	r1, r9
 8007f34:	4640      	mov	r0, r8
 8007f36:	47d0      	blx	sl
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d0ab      	beq.n	8007e94 <_printf_i+0x164>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	079b      	lsls	r3, r3, #30
 8007f40:	d413      	bmi.n	8007f6a <_printf_i+0x23a>
 8007f42:	68e0      	ldr	r0, [r4, #12]
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	4298      	cmp	r0, r3
 8007f48:	bfb8      	it	lt
 8007f4a:	4618      	movlt	r0, r3
 8007f4c:	e7a4      	b.n	8007e98 <_printf_i+0x168>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4632      	mov	r2, r6
 8007f52:	4649      	mov	r1, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	47d0      	blx	sl
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d09b      	beq.n	8007e94 <_printf_i+0x164>
 8007f5c:	3501      	adds	r5, #1
 8007f5e:	68e3      	ldr	r3, [r4, #12]
 8007f60:	9903      	ldr	r1, [sp, #12]
 8007f62:	1a5b      	subs	r3, r3, r1
 8007f64:	42ab      	cmp	r3, r5
 8007f66:	dcf2      	bgt.n	8007f4e <_printf_i+0x21e>
 8007f68:	e7eb      	b.n	8007f42 <_printf_i+0x212>
 8007f6a:	2500      	movs	r5, #0
 8007f6c:	f104 0619 	add.w	r6, r4, #25
 8007f70:	e7f5      	b.n	8007f5e <_printf_i+0x22e>
 8007f72:	bf00      	nop
 8007f74:	0800b324 	.word	0x0800b324
 8007f78:	0800b335 	.word	0x0800b335

08007f7c <iprintf>:
 8007f7c:	b40f      	push	{r0, r1, r2, r3}
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <iprintf+0x2c>)
 8007f80:	b513      	push	{r0, r1, r4, lr}
 8007f82:	681c      	ldr	r4, [r3, #0]
 8007f84:	b124      	cbz	r4, 8007f90 <iprintf+0x14>
 8007f86:	69a3      	ldr	r3, [r4, #24]
 8007f88:	b913      	cbnz	r3, 8007f90 <iprintf+0x14>
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fa00 	bl	8007390 <__sinit>
 8007f90:	ab05      	add	r3, sp, #20
 8007f92:	9a04      	ldr	r2, [sp, #16]
 8007f94:	68a1      	ldr	r1, [r4, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f001 feeb 	bl	8009d74 <_vfiprintf_r>
 8007f9e:	b002      	add	sp, #8
 8007fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa4:	b004      	add	sp, #16
 8007fa6:	4770      	bx	lr
 8007fa8:	20000010 	.word	0x20000010

08007fac <_puts_r>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	460e      	mov	r6, r1
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	b118      	cbz	r0, 8007fbc <_puts_r+0x10>
 8007fb4:	6983      	ldr	r3, [r0, #24]
 8007fb6:	b90b      	cbnz	r3, 8007fbc <_puts_r+0x10>
 8007fb8:	f7ff f9ea 	bl	8007390 <__sinit>
 8007fbc:	69ab      	ldr	r3, [r5, #24]
 8007fbe:	68ac      	ldr	r4, [r5, #8]
 8007fc0:	b913      	cbnz	r3, 8007fc8 <_puts_r+0x1c>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7ff f9e4 	bl	8007390 <__sinit>
 8007fc8:	4b2c      	ldr	r3, [pc, #176]	; (800807c <_puts_r+0xd0>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d120      	bne.n	8008010 <_puts_r+0x64>
 8007fce:	686c      	ldr	r4, [r5, #4]
 8007fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fd2:	07db      	lsls	r3, r3, #31
 8007fd4:	d405      	bmi.n	8007fe2 <_puts_r+0x36>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0598      	lsls	r0, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_puts_r+0x36>
 8007fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fde:	f7ff fab6 	bl	800754e <__retarget_lock_acquire_recursive>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	0719      	lsls	r1, r3, #28
 8007fe6:	d51d      	bpl.n	8008024 <_puts_r+0x78>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	b1db      	cbz	r3, 8008024 <_puts_r+0x78>
 8007fec:	3e01      	subs	r6, #1
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	60a3      	str	r3, [r4, #8]
 8007ff8:	bb39      	cbnz	r1, 800804a <_puts_r+0x9e>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	da38      	bge.n	8008070 <_puts_r+0xc4>
 8007ffe:	4622      	mov	r2, r4
 8008000:	210a      	movs	r1, #10
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f9e4 	bl	80083d0 <__swbuf_r>
 8008008:	3001      	adds	r0, #1
 800800a:	d011      	beq.n	8008030 <_puts_r+0x84>
 800800c:	250a      	movs	r5, #10
 800800e:	e011      	b.n	8008034 <_puts_r+0x88>
 8008010:	4b1b      	ldr	r3, [pc, #108]	; (8008080 <_puts_r+0xd4>)
 8008012:	429c      	cmp	r4, r3
 8008014:	d101      	bne.n	800801a <_puts_r+0x6e>
 8008016:	68ac      	ldr	r4, [r5, #8]
 8008018:	e7da      	b.n	8007fd0 <_puts_r+0x24>
 800801a:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <_puts_r+0xd8>)
 800801c:	429c      	cmp	r4, r3
 800801e:	bf08      	it	eq
 8008020:	68ec      	ldreq	r4, [r5, #12]
 8008022:	e7d5      	b.n	8007fd0 <_puts_r+0x24>
 8008024:	4621      	mov	r1, r4
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fa36 	bl	8008498 <__swsetup_r>
 800802c:	2800      	cmp	r0, #0
 800802e:	d0dd      	beq.n	8007fec <_puts_r+0x40>
 8008030:	f04f 35ff 	mov.w	r5, #4294967295
 8008034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008036:	07da      	lsls	r2, r3, #31
 8008038:	d405      	bmi.n	8008046 <_puts_r+0x9a>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	059b      	lsls	r3, r3, #22
 800803e:	d402      	bmi.n	8008046 <_puts_r+0x9a>
 8008040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008042:	f7ff fa85 	bl	8007550 <__retarget_lock_release_recursive>
 8008046:	4628      	mov	r0, r5
 8008048:	bd70      	pop	{r4, r5, r6, pc}
 800804a:	2b00      	cmp	r3, #0
 800804c:	da04      	bge.n	8008058 <_puts_r+0xac>
 800804e:	69a2      	ldr	r2, [r4, #24]
 8008050:	429a      	cmp	r2, r3
 8008052:	dc06      	bgt.n	8008062 <_puts_r+0xb6>
 8008054:	290a      	cmp	r1, #10
 8008056:	d004      	beq.n	8008062 <_puts_r+0xb6>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	6022      	str	r2, [r4, #0]
 800805e:	7019      	strb	r1, [r3, #0]
 8008060:	e7c5      	b.n	8007fee <_puts_r+0x42>
 8008062:	4622      	mov	r2, r4
 8008064:	4628      	mov	r0, r5
 8008066:	f000 f9b3 	bl	80083d0 <__swbuf_r>
 800806a:	3001      	adds	r0, #1
 800806c:	d1bf      	bne.n	8007fee <_puts_r+0x42>
 800806e:	e7df      	b.n	8008030 <_puts_r+0x84>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	250a      	movs	r5, #10
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	701d      	strb	r5, [r3, #0]
 800807a:	e7db      	b.n	8008034 <_puts_r+0x88>
 800807c:	0800b2d0 	.word	0x0800b2d0
 8008080:	0800b2f0 	.word	0x0800b2f0
 8008084:	0800b2b0 	.word	0x0800b2b0

08008088 <puts>:
 8008088:	4b02      	ldr	r3, [pc, #8]	; (8008094 <puts+0xc>)
 800808a:	4601      	mov	r1, r0
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f7ff bf8d 	b.w	8007fac <_puts_r>
 8008092:	bf00      	nop
 8008094:	20000010 	.word	0x20000010

08008098 <cleanup_glue>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	6809      	ldr	r1, [r1, #0]
 800809e:	4605      	mov	r5, r0
 80080a0:	b109      	cbz	r1, 80080a6 <cleanup_glue+0xe>
 80080a2:	f7ff fff9 	bl	8008098 <cleanup_glue>
 80080a6:	4621      	mov	r1, r4
 80080a8:	4628      	mov	r0, r5
 80080aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ae:	f001 bdeb 	b.w	8009c88 <_free_r>
	...

080080b4 <_reclaim_reent>:
 80080b4:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <_reclaim_reent+0xb4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4283      	cmp	r3, r0
 80080ba:	b570      	push	{r4, r5, r6, lr}
 80080bc:	4604      	mov	r4, r0
 80080be:	d051      	beq.n	8008164 <_reclaim_reent+0xb0>
 80080c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80080c2:	b143      	cbz	r3, 80080d6 <_reclaim_reent+0x22>
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d14a      	bne.n	8008160 <_reclaim_reent+0xac>
 80080ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080cc:	6819      	ldr	r1, [r3, #0]
 80080ce:	b111      	cbz	r1, 80080d6 <_reclaim_reent+0x22>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f001 fdd9 	bl	8009c88 <_free_r>
 80080d6:	6961      	ldr	r1, [r4, #20]
 80080d8:	b111      	cbz	r1, 80080e0 <_reclaim_reent+0x2c>
 80080da:	4620      	mov	r0, r4
 80080dc:	f001 fdd4 	bl	8009c88 <_free_r>
 80080e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080e2:	b111      	cbz	r1, 80080ea <_reclaim_reent+0x36>
 80080e4:	4620      	mov	r0, r4
 80080e6:	f001 fdcf 	bl	8009c88 <_free_r>
 80080ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080ec:	b111      	cbz	r1, 80080f4 <_reclaim_reent+0x40>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f001 fdca 	bl	8009c88 <_free_r>
 80080f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x4a>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f001 fdc5 	bl	8009c88 <_free_r>
 80080fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x54>
 8008102:	4620      	mov	r0, r4
 8008104:	f001 fdc0 	bl	8009c88 <_free_r>
 8008108:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x5e>
 800810c:	4620      	mov	r0, r4
 800810e:	f001 fdbb 	bl	8009c88 <_free_r>
 8008112:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008114:	b111      	cbz	r1, 800811c <_reclaim_reent+0x68>
 8008116:	4620      	mov	r0, r4
 8008118:	f001 fdb6 	bl	8009c88 <_free_r>
 800811c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x72>
 8008120:	4620      	mov	r0, r4
 8008122:	f001 fdb1 	bl	8009c88 <_free_r>
 8008126:	69a3      	ldr	r3, [r4, #24]
 8008128:	b1e3      	cbz	r3, 8008164 <_reclaim_reent+0xb0>
 800812a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800812c:	4620      	mov	r0, r4
 800812e:	4798      	blx	r3
 8008130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008132:	b1b9      	cbz	r1, 8008164 <_reclaim_reent+0xb0>
 8008134:	4620      	mov	r0, r4
 8008136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800813a:	f7ff bfad 	b.w	8008098 <cleanup_glue>
 800813e:	5949      	ldr	r1, [r1, r5]
 8008140:	b941      	cbnz	r1, 8008154 <_reclaim_reent+0xa0>
 8008142:	3504      	adds	r5, #4
 8008144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008146:	2d80      	cmp	r5, #128	; 0x80
 8008148:	68d9      	ldr	r1, [r3, #12]
 800814a:	d1f8      	bne.n	800813e <_reclaim_reent+0x8a>
 800814c:	4620      	mov	r0, r4
 800814e:	f001 fd9b 	bl	8009c88 <_free_r>
 8008152:	e7ba      	b.n	80080ca <_reclaim_reent+0x16>
 8008154:	680e      	ldr	r6, [r1, #0]
 8008156:	4620      	mov	r0, r4
 8008158:	f001 fd96 	bl	8009c88 <_free_r>
 800815c:	4631      	mov	r1, r6
 800815e:	e7ef      	b.n	8008140 <_reclaim_reent+0x8c>
 8008160:	2500      	movs	r5, #0
 8008162:	e7ef      	b.n	8008144 <_reclaim_reent+0x90>
 8008164:	bd70      	pop	{r4, r5, r6, pc}
 8008166:	bf00      	nop
 8008168:	20000010 	.word	0x20000010

0800816c <_sbrk_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d06      	ldr	r5, [pc, #24]	; (8008188 <_sbrk_r+0x1c>)
 8008170:	2300      	movs	r3, #0
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f7f9 ffae 	bl	80020d8 <_sbrk>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_sbrk_r+0x1a>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_sbrk_r+0x1a>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	200044bc 	.word	0x200044bc

0800818c <iscanf>:
 800818c:	b40f      	push	{r0, r1, r2, r3}
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <iscanf+0x2c>)
 8008190:	b513      	push	{r0, r1, r4, lr}
 8008192:	681c      	ldr	r4, [r3, #0]
 8008194:	b124      	cbz	r4, 80081a0 <iscanf+0x14>
 8008196:	69a3      	ldr	r3, [r4, #24]
 8008198:	b913      	cbnz	r3, 80081a0 <iscanf+0x14>
 800819a:	4620      	mov	r0, r4
 800819c:	f7ff f8f8 	bl	8007390 <__sinit>
 80081a0:	ab05      	add	r3, sp, #20
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	6861      	ldr	r1, [r4, #4]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f002 f8b9 	bl	800a320 <_vfiscanf_r>
 80081ae:	b002      	add	sp, #8
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	b004      	add	sp, #16
 80081b6:	4770      	bx	lr
 80081b8:	20000010 	.word	0x20000010

080081bc <setvbuf>:
 80081bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081c0:	461d      	mov	r5, r3
 80081c2:	4b5d      	ldr	r3, [pc, #372]	; (8008338 <setvbuf+0x17c>)
 80081c4:	681f      	ldr	r7, [r3, #0]
 80081c6:	4604      	mov	r4, r0
 80081c8:	460e      	mov	r6, r1
 80081ca:	4690      	mov	r8, r2
 80081cc:	b127      	cbz	r7, 80081d8 <setvbuf+0x1c>
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	b913      	cbnz	r3, 80081d8 <setvbuf+0x1c>
 80081d2:	4638      	mov	r0, r7
 80081d4:	f7ff f8dc 	bl	8007390 <__sinit>
 80081d8:	4b58      	ldr	r3, [pc, #352]	; (800833c <setvbuf+0x180>)
 80081da:	429c      	cmp	r4, r3
 80081dc:	d167      	bne.n	80082ae <setvbuf+0xf2>
 80081de:	687c      	ldr	r4, [r7, #4]
 80081e0:	f1b8 0f02 	cmp.w	r8, #2
 80081e4:	d006      	beq.n	80081f4 <setvbuf+0x38>
 80081e6:	f1b8 0f01 	cmp.w	r8, #1
 80081ea:	f200 809f 	bhi.w	800832c <setvbuf+0x170>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	f2c0 809c 	blt.w	800832c <setvbuf+0x170>
 80081f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081f6:	07db      	lsls	r3, r3, #31
 80081f8:	d405      	bmi.n	8008206 <setvbuf+0x4a>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	0598      	lsls	r0, r3, #22
 80081fe:	d402      	bmi.n	8008206 <setvbuf+0x4a>
 8008200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008202:	f7ff f9a4 	bl	800754e <__retarget_lock_acquire_recursive>
 8008206:	4621      	mov	r1, r4
 8008208:	4638      	mov	r0, r7
 800820a:	f001 f8c5 	bl	8009398 <_fflush_r>
 800820e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008210:	b141      	cbz	r1, 8008224 <setvbuf+0x68>
 8008212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008216:	4299      	cmp	r1, r3
 8008218:	d002      	beq.n	8008220 <setvbuf+0x64>
 800821a:	4638      	mov	r0, r7
 800821c:	f001 fd34 	bl	8009c88 <_free_r>
 8008220:	2300      	movs	r3, #0
 8008222:	6363      	str	r3, [r4, #52]	; 0x34
 8008224:	2300      	movs	r3, #0
 8008226:	61a3      	str	r3, [r4, #24]
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	0619      	lsls	r1, r3, #24
 800822e:	d503      	bpl.n	8008238 <setvbuf+0x7c>
 8008230:	6921      	ldr	r1, [r4, #16]
 8008232:	4638      	mov	r0, r7
 8008234:	f001 fd28 	bl	8009c88 <_free_r>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800823e:	f023 0303 	bic.w	r3, r3, #3
 8008242:	f1b8 0f02 	cmp.w	r8, #2
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	d06c      	beq.n	8008324 <setvbuf+0x168>
 800824a:	ab01      	add	r3, sp, #4
 800824c:	466a      	mov	r2, sp
 800824e:	4621      	mov	r1, r4
 8008250:	4638      	mov	r0, r7
 8008252:	f001 f905 	bl	8009460 <__swhatbuf_r>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	4318      	orrs	r0, r3
 800825a:	81a0      	strh	r0, [r4, #12]
 800825c:	2d00      	cmp	r5, #0
 800825e:	d130      	bne.n	80082c2 <setvbuf+0x106>
 8008260:	9d00      	ldr	r5, [sp, #0]
 8008262:	4628      	mov	r0, r5
 8008264:	f001 f962 	bl	800952c <malloc>
 8008268:	4606      	mov	r6, r0
 800826a:	2800      	cmp	r0, #0
 800826c:	d155      	bne.n	800831a <setvbuf+0x15e>
 800826e:	f8dd 9000 	ldr.w	r9, [sp]
 8008272:	45a9      	cmp	r9, r5
 8008274:	d14a      	bne.n	800830c <setvbuf+0x150>
 8008276:	f04f 35ff 	mov.w	r5, #4294967295
 800827a:	2200      	movs	r2, #0
 800827c:	60a2      	str	r2, [r4, #8]
 800827e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	6122      	str	r2, [r4, #16]
 8008286:	2201      	movs	r2, #1
 8008288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828c:	6162      	str	r2, [r4, #20]
 800828e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008290:	f043 0302 	orr.w	r3, r3, #2
 8008294:	07d2      	lsls	r2, r2, #31
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	d405      	bmi.n	80082a6 <setvbuf+0xea>
 800829a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800829e:	d102      	bne.n	80082a6 <setvbuf+0xea>
 80082a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082a2:	f7ff f955 	bl	8007550 <__retarget_lock_release_recursive>
 80082a6:	4628      	mov	r0, r5
 80082a8:	b003      	add	sp, #12
 80082aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <setvbuf+0x184>)
 80082b0:	429c      	cmp	r4, r3
 80082b2:	d101      	bne.n	80082b8 <setvbuf+0xfc>
 80082b4:	68bc      	ldr	r4, [r7, #8]
 80082b6:	e793      	b.n	80081e0 <setvbuf+0x24>
 80082b8:	4b22      	ldr	r3, [pc, #136]	; (8008344 <setvbuf+0x188>)
 80082ba:	429c      	cmp	r4, r3
 80082bc:	bf08      	it	eq
 80082be:	68fc      	ldreq	r4, [r7, #12]
 80082c0:	e78e      	b.n	80081e0 <setvbuf+0x24>
 80082c2:	2e00      	cmp	r6, #0
 80082c4:	d0cd      	beq.n	8008262 <setvbuf+0xa6>
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	b913      	cbnz	r3, 80082d0 <setvbuf+0x114>
 80082ca:	4638      	mov	r0, r7
 80082cc:	f7ff f860 	bl	8007390 <__sinit>
 80082d0:	f1b8 0f01 	cmp.w	r8, #1
 80082d4:	bf08      	it	eq
 80082d6:	89a3      	ldrheq	r3, [r4, #12]
 80082d8:	6026      	str	r6, [r4, #0]
 80082da:	bf04      	itt	eq
 80082dc:	f043 0301 	orreq.w	r3, r3, #1
 80082e0:	81a3      	strheq	r3, [r4, #12]
 80082e2:	89a2      	ldrh	r2, [r4, #12]
 80082e4:	f012 0308 	ands.w	r3, r2, #8
 80082e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80082ec:	d01c      	beq.n	8008328 <setvbuf+0x16c>
 80082ee:	07d3      	lsls	r3, r2, #31
 80082f0:	bf41      	itttt	mi
 80082f2:	2300      	movmi	r3, #0
 80082f4:	426d      	negmi	r5, r5
 80082f6:	60a3      	strmi	r3, [r4, #8]
 80082f8:	61a5      	strmi	r5, [r4, #24]
 80082fa:	bf58      	it	pl
 80082fc:	60a5      	strpl	r5, [r4, #8]
 80082fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008300:	f015 0501 	ands.w	r5, r5, #1
 8008304:	d115      	bne.n	8008332 <setvbuf+0x176>
 8008306:	f412 7f00 	tst.w	r2, #512	; 0x200
 800830a:	e7c8      	b.n	800829e <setvbuf+0xe2>
 800830c:	4648      	mov	r0, r9
 800830e:	f001 f90d 	bl	800952c <malloc>
 8008312:	4606      	mov	r6, r0
 8008314:	2800      	cmp	r0, #0
 8008316:	d0ae      	beq.n	8008276 <setvbuf+0xba>
 8008318:	464d      	mov	r5, r9
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	e7d0      	b.n	80082c6 <setvbuf+0x10a>
 8008324:	2500      	movs	r5, #0
 8008326:	e7a8      	b.n	800827a <setvbuf+0xbe>
 8008328:	60a3      	str	r3, [r4, #8]
 800832a:	e7e8      	b.n	80082fe <setvbuf+0x142>
 800832c:	f04f 35ff 	mov.w	r5, #4294967295
 8008330:	e7b9      	b.n	80082a6 <setvbuf+0xea>
 8008332:	2500      	movs	r5, #0
 8008334:	e7b7      	b.n	80082a6 <setvbuf+0xea>
 8008336:	bf00      	nop
 8008338:	20000010 	.word	0x20000010
 800833c:	0800b2d0 	.word	0x0800b2d0
 8008340:	0800b2f0 	.word	0x0800b2f0
 8008344:	0800b2b0 	.word	0x0800b2b0

08008348 <__sread>:
 8008348:	b510      	push	{r4, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008350:	f002 f960 	bl	800a614 <_read_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	bfab      	itete	ge
 8008358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800835a:	89a3      	ldrhlt	r3, [r4, #12]
 800835c:	181b      	addge	r3, r3, r0
 800835e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008362:	bfac      	ite	ge
 8008364:	6563      	strge	r3, [r4, #84]	; 0x54
 8008366:	81a3      	strhlt	r3, [r4, #12]
 8008368:	bd10      	pop	{r4, pc}

0800836a <__swrite>:
 800836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836e:	461f      	mov	r7, r3
 8008370:	898b      	ldrh	r3, [r1, #12]
 8008372:	05db      	lsls	r3, r3, #23
 8008374:	4605      	mov	r5, r0
 8008376:	460c      	mov	r4, r1
 8008378:	4616      	mov	r6, r2
 800837a:	d505      	bpl.n	8008388 <__swrite+0x1e>
 800837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008380:	2302      	movs	r3, #2
 8008382:	2200      	movs	r2, #0
 8008384:	f001 f85a 	bl	800943c <_lseek_r>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800838e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	4632      	mov	r2, r6
 8008396:	463b      	mov	r3, r7
 8008398:	4628      	mov	r0, r5
 800839a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	f000 b869 	b.w	8008474 <_write_r>

080083a2 <__sseek>:
 80083a2:	b510      	push	{r4, lr}
 80083a4:	460c      	mov	r4, r1
 80083a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083aa:	f001 f847 	bl	800943c <_lseek_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	bf15      	itete	ne
 80083b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083be:	81a3      	strheq	r3, [r4, #12]
 80083c0:	bf18      	it	ne
 80083c2:	81a3      	strhne	r3, [r4, #12]
 80083c4:	bd10      	pop	{r4, pc}

080083c6 <__sclose>:
 80083c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ca:	f000 b8d3 	b.w	8008574 <_close_r>
	...

080083d0 <__swbuf_r>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	4605      	mov	r5, r0
 80083d8:	b118      	cbz	r0, 80083e2 <__swbuf_r+0x12>
 80083da:	6983      	ldr	r3, [r0, #24]
 80083dc:	b90b      	cbnz	r3, 80083e2 <__swbuf_r+0x12>
 80083de:	f7fe ffd7 	bl	8007390 <__sinit>
 80083e2:	4b21      	ldr	r3, [pc, #132]	; (8008468 <__swbuf_r+0x98>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	d12b      	bne.n	8008440 <__swbuf_r+0x70>
 80083e8:	686c      	ldr	r4, [r5, #4]
 80083ea:	69a3      	ldr	r3, [r4, #24]
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	071a      	lsls	r2, r3, #28
 80083f2:	d52f      	bpl.n	8008454 <__swbuf_r+0x84>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b36b      	cbz	r3, 8008454 <__swbuf_r+0x84>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	1ac0      	subs	r0, r0, r3
 80083fe:	6963      	ldr	r3, [r4, #20]
 8008400:	b2f6      	uxtb	r6, r6
 8008402:	4283      	cmp	r3, r0
 8008404:	4637      	mov	r7, r6
 8008406:	dc04      	bgt.n	8008412 <__swbuf_r+0x42>
 8008408:	4621      	mov	r1, r4
 800840a:	4628      	mov	r0, r5
 800840c:	f000 ffc4 	bl	8009398 <_fflush_r>
 8008410:	bb30      	cbnz	r0, 8008460 <__swbuf_r+0x90>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	3b01      	subs	r3, #1
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	701e      	strb	r6, [r3, #0]
 8008420:	6963      	ldr	r3, [r4, #20]
 8008422:	3001      	adds	r0, #1
 8008424:	4283      	cmp	r3, r0
 8008426:	d004      	beq.n	8008432 <__swbuf_r+0x62>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	07db      	lsls	r3, r3, #31
 800842c:	d506      	bpl.n	800843c <__swbuf_r+0x6c>
 800842e:	2e0a      	cmp	r6, #10
 8008430:	d104      	bne.n	800843c <__swbuf_r+0x6c>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	f000 ffaf 	bl	8009398 <_fflush_r>
 800843a:	b988      	cbnz	r0, 8008460 <__swbuf_r+0x90>
 800843c:	4638      	mov	r0, r7
 800843e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008440:	4b0a      	ldr	r3, [pc, #40]	; (800846c <__swbuf_r+0x9c>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d101      	bne.n	800844a <__swbuf_r+0x7a>
 8008446:	68ac      	ldr	r4, [r5, #8]
 8008448:	e7cf      	b.n	80083ea <__swbuf_r+0x1a>
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <__swbuf_r+0xa0>)
 800844c:	429c      	cmp	r4, r3
 800844e:	bf08      	it	eq
 8008450:	68ec      	ldreq	r4, [r5, #12]
 8008452:	e7ca      	b.n	80083ea <__swbuf_r+0x1a>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f81e 	bl	8008498 <__swsetup_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	d0cb      	beq.n	80083f8 <__swbuf_r+0x28>
 8008460:	f04f 37ff 	mov.w	r7, #4294967295
 8008464:	e7ea      	b.n	800843c <__swbuf_r+0x6c>
 8008466:	bf00      	nop
 8008468:	0800b2d0 	.word	0x0800b2d0
 800846c:	0800b2f0 	.word	0x0800b2f0
 8008470:	0800b2b0 	.word	0x0800b2b0

08008474 <_write_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d07      	ldr	r5, [pc, #28]	; (8008494 <_write_r+0x20>)
 8008478:	4604      	mov	r4, r0
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	2200      	movs	r2, #0
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7f9 fdd7 	bl	8002036 <_write>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_write_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_write_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	200044bc 	.word	0x200044bc

08008498 <__swsetup_r>:
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <__swsetup_r+0xcc>)
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	4606      	mov	r6, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	b125      	cbz	r5, 80084ae <__swsetup_r+0x16>
 80084a4:	69ab      	ldr	r3, [r5, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__swsetup_r+0x16>
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7fe ff71 	bl	8007390 <__sinit>
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <__swsetup_r+0xd0>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d10f      	bne.n	80084d4 <__swsetup_r+0x3c>
 80084b4:	686c      	ldr	r4, [r5, #4]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084bc:	0719      	lsls	r1, r3, #28
 80084be:	d42c      	bmi.n	800851a <__swsetup_r+0x82>
 80084c0:	06dd      	lsls	r5, r3, #27
 80084c2:	d411      	bmi.n	80084e8 <__swsetup_r+0x50>
 80084c4:	2309      	movs	r3, #9
 80084c6:	6033      	str	r3, [r6, #0]
 80084c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e03e      	b.n	8008552 <__swsetup_r+0xba>
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <__swsetup_r+0xd4>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swsetup_r+0x46>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7eb      	b.n	80084b6 <__swsetup_r+0x1e>
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <__swsetup_r+0xd8>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7e6      	b.n	80084b6 <__swsetup_r+0x1e>
 80084e8:	0758      	lsls	r0, r3, #29
 80084ea:	d512      	bpl.n	8008512 <__swsetup_r+0x7a>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b141      	cbz	r1, 8008502 <__swsetup_r+0x6a>
 80084f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f4:	4299      	cmp	r1, r3
 80084f6:	d002      	beq.n	80084fe <__swsetup_r+0x66>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f001 fbc5 	bl	8009c88 <_free_r>
 80084fe:	2300      	movs	r3, #0
 8008500:	6363      	str	r3, [r4, #52]	; 0x34
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b94b      	cbnz	r3, 8008532 <__swsetup_r+0x9a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d003      	beq.n	8008532 <__swsetup_r+0x9a>
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f000 ffbd 	bl	80094ac <__smakebuf_r>
 8008532:	89a0      	ldrh	r0, [r4, #12]
 8008534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008538:	f010 0301 	ands.w	r3, r0, #1
 800853c:	d00a      	beq.n	8008554 <__swsetup_r+0xbc>
 800853e:	2300      	movs	r3, #0
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	6963      	ldr	r3, [r4, #20]
 8008544:	425b      	negs	r3, r3
 8008546:	61a3      	str	r3, [r4, #24]
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	b943      	cbnz	r3, 800855e <__swsetup_r+0xc6>
 800854c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008550:	d1ba      	bne.n	80084c8 <__swsetup_r+0x30>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0781      	lsls	r1, r0, #30
 8008556:	bf58      	it	pl
 8008558:	6963      	ldrpl	r3, [r4, #20]
 800855a:	60a3      	str	r3, [r4, #8]
 800855c:	e7f4      	b.n	8008548 <__swsetup_r+0xb0>
 800855e:	2000      	movs	r0, #0
 8008560:	e7f7      	b.n	8008552 <__swsetup_r+0xba>
 8008562:	bf00      	nop
 8008564:	20000010 	.word	0x20000010
 8008568:	0800b2d0 	.word	0x0800b2d0
 800856c:	0800b2f0 	.word	0x0800b2f0
 8008570:	0800b2b0 	.word	0x0800b2b0

08008574 <_close_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d06      	ldr	r5, [pc, #24]	; (8008590 <_close_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7f9 fd75 	bl	800206e <_close>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_close_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_close_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200044bc 	.word	0x200044bc

08008594 <quorem>:
 8008594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	6903      	ldr	r3, [r0, #16]
 800859a:	690c      	ldr	r4, [r1, #16]
 800859c:	42a3      	cmp	r3, r4
 800859e:	4607      	mov	r7, r0
 80085a0:	f2c0 8081 	blt.w	80086a6 <quorem+0x112>
 80085a4:	3c01      	subs	r4, #1
 80085a6:	f101 0814 	add.w	r8, r1, #20
 80085aa:	f100 0514 	add.w	r5, r0, #20
 80085ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085bc:	3301      	adds	r3, #1
 80085be:	429a      	cmp	r2, r3
 80085c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80085cc:	d331      	bcc.n	8008632 <quorem+0x9e>
 80085ce:	f04f 0e00 	mov.w	lr, #0
 80085d2:	4640      	mov	r0, r8
 80085d4:	46ac      	mov	ip, r5
 80085d6:	46f2      	mov	sl, lr
 80085d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80085dc:	b293      	uxth	r3, r2
 80085de:	fb06 e303 	mla	r3, r6, r3, lr
 80085e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	ebaa 0303 	sub.w	r3, sl, r3
 80085ec:	f8dc a000 	ldr.w	sl, [ip]
 80085f0:	0c12      	lsrs	r2, r2, #16
 80085f2:	fa13 f38a 	uxtah	r3, r3, sl
 80085f6:	fb06 e202 	mla	r2, r6, r2, lr
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008602:	b292      	uxth	r2, r2
 8008604:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800860c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008610:	4581      	cmp	r9, r0
 8008612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008616:	f84c 3b04 	str.w	r3, [ip], #4
 800861a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800861e:	d2db      	bcs.n	80085d8 <quorem+0x44>
 8008620:	f855 300b 	ldr.w	r3, [r5, fp]
 8008624:	b92b      	cbnz	r3, 8008632 <quorem+0x9e>
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	3b04      	subs	r3, #4
 800862a:	429d      	cmp	r5, r3
 800862c:	461a      	mov	r2, r3
 800862e:	d32e      	bcc.n	800868e <quorem+0xfa>
 8008630:	613c      	str	r4, [r7, #16]
 8008632:	4638      	mov	r0, r7
 8008634:	f001 fa10 	bl	8009a58 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	db24      	blt.n	8008686 <quorem+0xf2>
 800863c:	3601      	adds	r6, #1
 800863e:	4628      	mov	r0, r5
 8008640:	f04f 0c00 	mov.w	ip, #0
 8008644:	f858 2b04 	ldr.w	r2, [r8], #4
 8008648:	f8d0 e000 	ldr.w	lr, [r0]
 800864c:	b293      	uxth	r3, r2
 800864e:	ebac 0303 	sub.w	r3, ip, r3
 8008652:	0c12      	lsrs	r2, r2, #16
 8008654:	fa13 f38e 	uxtah	r3, r3, lr
 8008658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800865c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008660:	b29b      	uxth	r3, r3
 8008662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008666:	45c1      	cmp	r9, r8
 8008668:	f840 3b04 	str.w	r3, [r0], #4
 800866c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008670:	d2e8      	bcs.n	8008644 <quorem+0xb0>
 8008672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800867a:	b922      	cbnz	r2, 8008686 <quorem+0xf2>
 800867c:	3b04      	subs	r3, #4
 800867e:	429d      	cmp	r5, r3
 8008680:	461a      	mov	r2, r3
 8008682:	d30a      	bcc.n	800869a <quorem+0x106>
 8008684:	613c      	str	r4, [r7, #16]
 8008686:	4630      	mov	r0, r6
 8008688:	b003      	add	sp, #12
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	3b04      	subs	r3, #4
 8008692:	2a00      	cmp	r2, #0
 8008694:	d1cc      	bne.n	8008630 <quorem+0x9c>
 8008696:	3c01      	subs	r4, #1
 8008698:	e7c7      	b.n	800862a <quorem+0x96>
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	3b04      	subs	r3, #4
 800869e:	2a00      	cmp	r2, #0
 80086a0:	d1f0      	bne.n	8008684 <quorem+0xf0>
 80086a2:	3c01      	subs	r4, #1
 80086a4:	e7eb      	b.n	800867e <quorem+0xea>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e7ee      	b.n	8008688 <quorem+0xf4>
 80086aa:	0000      	movs	r0, r0
 80086ac:	0000      	movs	r0, r0
	...

080086b0 <_dtoa_r>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	ed2d 8b04 	vpush	{d8-d9}
 80086b8:	ec57 6b10 	vmov	r6, r7, d0
 80086bc:	b093      	sub	sp, #76	; 0x4c
 80086be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086c4:	9106      	str	r1, [sp, #24]
 80086c6:	ee10 aa10 	vmov	sl, s0
 80086ca:	4604      	mov	r4, r0
 80086cc:	9209      	str	r2, [sp, #36]	; 0x24
 80086ce:	930c      	str	r3, [sp, #48]	; 0x30
 80086d0:	46bb      	mov	fp, r7
 80086d2:	b975      	cbnz	r5, 80086f2 <_dtoa_r+0x42>
 80086d4:	2010      	movs	r0, #16
 80086d6:	f000 ff29 	bl	800952c <malloc>
 80086da:	4602      	mov	r2, r0
 80086dc:	6260      	str	r0, [r4, #36]	; 0x24
 80086de:	b920      	cbnz	r0, 80086ea <_dtoa_r+0x3a>
 80086e0:	4ba7      	ldr	r3, [pc, #668]	; (8008980 <_dtoa_r+0x2d0>)
 80086e2:	21ea      	movs	r1, #234	; 0xea
 80086e4:	48a7      	ldr	r0, [pc, #668]	; (8008984 <_dtoa_r+0x2d4>)
 80086e6:	f002 fa3d 	bl	800ab64 <__assert_func>
 80086ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086ee:	6005      	str	r5, [r0, #0]
 80086f0:	60c5      	str	r5, [r0, #12]
 80086f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f4:	6819      	ldr	r1, [r3, #0]
 80086f6:	b151      	cbz	r1, 800870e <_dtoa_r+0x5e>
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	604a      	str	r2, [r1, #4]
 80086fc:	2301      	movs	r3, #1
 80086fe:	4093      	lsls	r3, r2
 8008700:	608b      	str	r3, [r1, #8]
 8008702:	4620      	mov	r0, r4
 8008704:	f000 ff66 	bl	80095d4 <_Bfree>
 8008708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	1e3b      	subs	r3, r7, #0
 8008710:	bfaa      	itet	ge
 8008712:	2300      	movge	r3, #0
 8008714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008718:	f8c8 3000 	strge.w	r3, [r8]
 800871c:	4b9a      	ldr	r3, [pc, #616]	; (8008988 <_dtoa_r+0x2d8>)
 800871e:	bfbc      	itt	lt
 8008720:	2201      	movlt	r2, #1
 8008722:	f8c8 2000 	strlt.w	r2, [r8]
 8008726:	ea33 030b 	bics.w	r3, r3, fp
 800872a:	d11b      	bne.n	8008764 <_dtoa_r+0xb4>
 800872c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800872e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008738:	4333      	orrs	r3, r6
 800873a:	f000 8592 	beq.w	8009262 <_dtoa_r+0xbb2>
 800873e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008740:	b963      	cbnz	r3, 800875c <_dtoa_r+0xac>
 8008742:	4b92      	ldr	r3, [pc, #584]	; (800898c <_dtoa_r+0x2dc>)
 8008744:	e022      	b.n	800878c <_dtoa_r+0xdc>
 8008746:	4b92      	ldr	r3, [pc, #584]	; (8008990 <_dtoa_r+0x2e0>)
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	3308      	adds	r3, #8
 800874c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	9801      	ldr	r0, [sp, #4]
 8008752:	b013      	add	sp, #76	; 0x4c
 8008754:	ecbd 8b04 	vpop	{d8-d9}
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	4b8b      	ldr	r3, [pc, #556]	; (800898c <_dtoa_r+0x2dc>)
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	3303      	adds	r3, #3
 8008762:	e7f3      	b.n	800874c <_dtoa_r+0x9c>
 8008764:	2200      	movs	r2, #0
 8008766:	2300      	movs	r3, #0
 8008768:	4650      	mov	r0, sl
 800876a:	4659      	mov	r1, fp
 800876c:	f7f8 f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 8008770:	ec4b ab19 	vmov	d9, sl, fp
 8008774:	4680      	mov	r8, r0
 8008776:	b158      	cbz	r0, 8008790 <_dtoa_r+0xe0>
 8008778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800877a:	2301      	movs	r3, #1
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 856b 	beq.w	800925c <_dtoa_r+0xbac>
 8008786:	4883      	ldr	r0, [pc, #524]	; (8008994 <_dtoa_r+0x2e4>)
 8008788:	6018      	str	r0, [r3, #0]
 800878a:	1e43      	subs	r3, r0, #1
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	e7df      	b.n	8008750 <_dtoa_r+0xa0>
 8008790:	ec4b ab10 	vmov	d0, sl, fp
 8008794:	aa10      	add	r2, sp, #64	; 0x40
 8008796:	a911      	add	r1, sp, #68	; 0x44
 8008798:	4620      	mov	r0, r4
 800879a:	f001 fa03 	bl	8009ba4 <__d2b>
 800879e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80087a2:	ee08 0a10 	vmov	s16, r0
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	f000 8084 	beq.w	80088b4 <_dtoa_r+0x204>
 80087ac:	ee19 3a90 	vmov	r3, s19
 80087b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087b8:	4656      	mov	r6, sl
 80087ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80087c6:	4b74      	ldr	r3, [pc, #464]	; (8008998 <_dtoa_r+0x2e8>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f7 fd7b 	bl	80002c8 <__aeabi_dsub>
 80087d2:	a365      	add	r3, pc, #404	; (adr r3, 8008968 <_dtoa_r+0x2b8>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 ff2e 	bl	8000638 <__aeabi_dmul>
 80087dc:	a364      	add	r3, pc, #400	; (adr r3, 8008970 <_dtoa_r+0x2c0>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f7f7 fd73 	bl	80002cc <__adddf3>
 80087e6:	4606      	mov	r6, r0
 80087e8:	4628      	mov	r0, r5
 80087ea:	460f      	mov	r7, r1
 80087ec:	f7f7 feba 	bl	8000564 <__aeabi_i2d>
 80087f0:	a361      	add	r3, pc, #388	; (adr r3, 8008978 <_dtoa_r+0x2c8>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f7 ff1f 	bl	8000638 <__aeabi_dmul>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4630      	mov	r0, r6
 8008800:	4639      	mov	r1, r7
 8008802:	f7f7 fd63 	bl	80002cc <__adddf3>
 8008806:	4606      	mov	r6, r0
 8008808:	460f      	mov	r7, r1
 800880a:	f7f8 f9c5 	bl	8000b98 <__aeabi_d2iz>
 800880e:	2200      	movs	r2, #0
 8008810:	9000      	str	r0, [sp, #0]
 8008812:	2300      	movs	r3, #0
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	f7f8 f980 	bl	8000b1c <__aeabi_dcmplt>
 800881c:	b150      	cbz	r0, 8008834 <_dtoa_r+0x184>
 800881e:	9800      	ldr	r0, [sp, #0]
 8008820:	f7f7 fea0 	bl	8000564 <__aeabi_i2d>
 8008824:	4632      	mov	r2, r6
 8008826:	463b      	mov	r3, r7
 8008828:	f7f8 f96e 	bl	8000b08 <__aeabi_dcmpeq>
 800882c:	b910      	cbnz	r0, 8008834 <_dtoa_r+0x184>
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	3b01      	subs	r3, #1
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	2b16      	cmp	r3, #22
 8008838:	d85a      	bhi.n	80088f0 <_dtoa_r+0x240>
 800883a:	9a00      	ldr	r2, [sp, #0]
 800883c:	4b57      	ldr	r3, [pc, #348]	; (800899c <_dtoa_r+0x2ec>)
 800883e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	ec51 0b19 	vmov	r0, r1, d9
 800884a:	f7f8 f967 	bl	8000b1c <__aeabi_dcmplt>
 800884e:	2800      	cmp	r0, #0
 8008850:	d050      	beq.n	80088f4 <_dtoa_r+0x244>
 8008852:	9b00      	ldr	r3, [sp, #0]
 8008854:	3b01      	subs	r3, #1
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	930b      	str	r3, [sp, #44]	; 0x2c
 800885c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800885e:	1b5d      	subs	r5, r3, r5
 8008860:	1e6b      	subs	r3, r5, #1
 8008862:	9305      	str	r3, [sp, #20]
 8008864:	bf45      	ittet	mi
 8008866:	f1c5 0301 	rsbmi	r3, r5, #1
 800886a:	9304      	strmi	r3, [sp, #16]
 800886c:	2300      	movpl	r3, #0
 800886e:	2300      	movmi	r3, #0
 8008870:	bf4c      	ite	mi
 8008872:	9305      	strmi	r3, [sp, #20]
 8008874:	9304      	strpl	r3, [sp, #16]
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	db3d      	blt.n	80088f8 <_dtoa_r+0x248>
 800887c:	9b05      	ldr	r3, [sp, #20]
 800887e:	9a00      	ldr	r2, [sp, #0]
 8008880:	920a      	str	r2, [sp, #40]	; 0x28
 8008882:	4413      	add	r3, r2
 8008884:	9305      	str	r3, [sp, #20]
 8008886:	2300      	movs	r3, #0
 8008888:	9307      	str	r3, [sp, #28]
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	2b09      	cmp	r3, #9
 800888e:	f200 8089 	bhi.w	80089a4 <_dtoa_r+0x2f4>
 8008892:	2b05      	cmp	r3, #5
 8008894:	bfc4      	itt	gt
 8008896:	3b04      	subgt	r3, #4
 8008898:	9306      	strgt	r3, [sp, #24]
 800889a:	9b06      	ldr	r3, [sp, #24]
 800889c:	f1a3 0302 	sub.w	r3, r3, #2
 80088a0:	bfcc      	ite	gt
 80088a2:	2500      	movgt	r5, #0
 80088a4:	2501      	movle	r5, #1
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	f200 8087 	bhi.w	80089ba <_dtoa_r+0x30a>
 80088ac:	e8df f003 	tbb	[pc, r3]
 80088b0:	59383a2d 	.word	0x59383a2d
 80088b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80088b8:	441d      	add	r5, r3
 80088ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088be:	2b20      	cmp	r3, #32
 80088c0:	bfc1      	itttt	gt
 80088c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80088ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088d2:	bfda      	itte	le
 80088d4:	f1c3 0320 	rsble	r3, r3, #32
 80088d8:	fa06 f003 	lslle.w	r0, r6, r3
 80088dc:	4318      	orrgt	r0, r3
 80088de:	f7f7 fe31 	bl	8000544 <__aeabi_ui2d>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4606      	mov	r6, r0
 80088e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80088ea:	3d01      	subs	r5, #1
 80088ec:	930e      	str	r3, [sp, #56]	; 0x38
 80088ee:	e76a      	b.n	80087c6 <_dtoa_r+0x116>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e7b2      	b.n	800885a <_dtoa_r+0x1aa>
 80088f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80088f6:	e7b1      	b.n	800885c <_dtoa_r+0x1ac>
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	9a00      	ldr	r2, [sp, #0]
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	4253      	negs	r3, r2
 8008902:	9307      	str	r3, [sp, #28]
 8008904:	2300      	movs	r3, #0
 8008906:	930a      	str	r3, [sp, #40]	; 0x28
 8008908:	e7bf      	b.n	800888a <_dtoa_r+0x1da>
 800890a:	2300      	movs	r3, #0
 800890c:	9308      	str	r3, [sp, #32]
 800890e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008910:	2b00      	cmp	r3, #0
 8008912:	dc55      	bgt.n	80089c0 <_dtoa_r+0x310>
 8008914:	2301      	movs	r3, #1
 8008916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800891a:	461a      	mov	r2, r3
 800891c:	9209      	str	r2, [sp, #36]	; 0x24
 800891e:	e00c      	b.n	800893a <_dtoa_r+0x28a>
 8008920:	2301      	movs	r3, #1
 8008922:	e7f3      	b.n	800890c <_dtoa_r+0x25c>
 8008924:	2300      	movs	r3, #0
 8008926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008928:	9308      	str	r3, [sp, #32]
 800892a:	9b00      	ldr	r3, [sp, #0]
 800892c:	4413      	add	r3, r2
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	3301      	adds	r3, #1
 8008932:	2b01      	cmp	r3, #1
 8008934:	9303      	str	r3, [sp, #12]
 8008936:	bfb8      	it	lt
 8008938:	2301      	movlt	r3, #1
 800893a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800893c:	2200      	movs	r2, #0
 800893e:	6042      	str	r2, [r0, #4]
 8008940:	2204      	movs	r2, #4
 8008942:	f102 0614 	add.w	r6, r2, #20
 8008946:	429e      	cmp	r6, r3
 8008948:	6841      	ldr	r1, [r0, #4]
 800894a:	d93d      	bls.n	80089c8 <_dtoa_r+0x318>
 800894c:	4620      	mov	r0, r4
 800894e:	f000 fe01 	bl	8009554 <_Balloc>
 8008952:	9001      	str	r0, [sp, #4]
 8008954:	2800      	cmp	r0, #0
 8008956:	d13b      	bne.n	80089d0 <_dtoa_r+0x320>
 8008958:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <_dtoa_r+0x2f0>)
 800895a:	4602      	mov	r2, r0
 800895c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008960:	e6c0      	b.n	80086e4 <_dtoa_r+0x34>
 8008962:	2301      	movs	r3, #1
 8008964:	e7df      	b.n	8008926 <_dtoa_r+0x276>
 8008966:	bf00      	nop
 8008968:	636f4361 	.word	0x636f4361
 800896c:	3fd287a7 	.word	0x3fd287a7
 8008970:	8b60c8b3 	.word	0x8b60c8b3
 8008974:	3fc68a28 	.word	0x3fc68a28
 8008978:	509f79fb 	.word	0x509f79fb
 800897c:	3fd34413 	.word	0x3fd34413
 8008980:	0800b353 	.word	0x0800b353
 8008984:	0800b36a 	.word	0x0800b36a
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	0800b34f 	.word	0x0800b34f
 8008990:	0800b346 	.word	0x0800b346
 8008994:	0800b54a 	.word	0x0800b54a
 8008998:	3ff80000 	.word	0x3ff80000
 800899c:	0800b460 	.word	0x0800b460
 80089a0:	0800b3c5 	.word	0x0800b3c5
 80089a4:	2501      	movs	r5, #1
 80089a6:	2300      	movs	r3, #0
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	9508      	str	r5, [sp, #32]
 80089ac:	f04f 33ff 	mov.w	r3, #4294967295
 80089b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	2312      	movs	r3, #18
 80089b8:	e7b0      	b.n	800891c <_dtoa_r+0x26c>
 80089ba:	2301      	movs	r3, #1
 80089bc:	9308      	str	r3, [sp, #32]
 80089be:	e7f5      	b.n	80089ac <_dtoa_r+0x2fc>
 80089c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089c6:	e7b8      	b.n	800893a <_dtoa_r+0x28a>
 80089c8:	3101      	adds	r1, #1
 80089ca:	6041      	str	r1, [r0, #4]
 80089cc:	0052      	lsls	r2, r2, #1
 80089ce:	e7b8      	b.n	8008942 <_dtoa_r+0x292>
 80089d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d2:	9a01      	ldr	r2, [sp, #4]
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	2b0e      	cmp	r3, #14
 80089da:	f200 809d 	bhi.w	8008b18 <_dtoa_r+0x468>
 80089de:	2d00      	cmp	r5, #0
 80089e0:	f000 809a 	beq.w	8008b18 <_dtoa_r+0x468>
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd32      	ble.n	8008a50 <_dtoa_r+0x3a0>
 80089ea:	4ab7      	ldr	r2, [pc, #732]	; (8008cc8 <_dtoa_r+0x618>)
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089f8:	9b00      	ldr	r3, [sp, #0]
 80089fa:	05d8      	lsls	r0, r3, #23
 80089fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008a00:	d516      	bpl.n	8008a30 <_dtoa_r+0x380>
 8008a02:	4bb2      	ldr	r3, [pc, #712]	; (8008ccc <_dtoa_r+0x61c>)
 8008a04:	ec51 0b19 	vmov	r0, r1, d9
 8008a08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a0c:	f7f7 ff3e 	bl	800088c <__aeabi_ddiv>
 8008a10:	f007 070f 	and.w	r7, r7, #15
 8008a14:	4682      	mov	sl, r0
 8008a16:	468b      	mov	fp, r1
 8008a18:	2503      	movs	r5, #3
 8008a1a:	4eac      	ldr	r6, [pc, #688]	; (8008ccc <_dtoa_r+0x61c>)
 8008a1c:	b957      	cbnz	r7, 8008a34 <_dtoa_r+0x384>
 8008a1e:	4642      	mov	r2, r8
 8008a20:	464b      	mov	r3, r9
 8008a22:	4650      	mov	r0, sl
 8008a24:	4659      	mov	r1, fp
 8008a26:	f7f7 ff31 	bl	800088c <__aeabi_ddiv>
 8008a2a:	4682      	mov	sl, r0
 8008a2c:	468b      	mov	fp, r1
 8008a2e:	e028      	b.n	8008a82 <_dtoa_r+0x3d2>
 8008a30:	2502      	movs	r5, #2
 8008a32:	e7f2      	b.n	8008a1a <_dtoa_r+0x36a>
 8008a34:	07f9      	lsls	r1, r7, #31
 8008a36:	d508      	bpl.n	8008a4a <_dtoa_r+0x39a>
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a40:	f7f7 fdfa 	bl	8000638 <__aeabi_dmul>
 8008a44:	3501      	adds	r5, #1
 8008a46:	4680      	mov	r8, r0
 8008a48:	4689      	mov	r9, r1
 8008a4a:	107f      	asrs	r7, r7, #1
 8008a4c:	3608      	adds	r6, #8
 8008a4e:	e7e5      	b.n	8008a1c <_dtoa_r+0x36c>
 8008a50:	f000 809b 	beq.w	8008b8a <_dtoa_r+0x4da>
 8008a54:	9b00      	ldr	r3, [sp, #0]
 8008a56:	4f9d      	ldr	r7, [pc, #628]	; (8008ccc <_dtoa_r+0x61c>)
 8008a58:	425e      	negs	r6, r3
 8008a5a:	4b9b      	ldr	r3, [pc, #620]	; (8008cc8 <_dtoa_r+0x618>)
 8008a5c:	f006 020f 	and.w	r2, r6, #15
 8008a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	ec51 0b19 	vmov	r0, r1, d9
 8008a6c:	f7f7 fde4 	bl	8000638 <__aeabi_dmul>
 8008a70:	1136      	asrs	r6, r6, #4
 8008a72:	4682      	mov	sl, r0
 8008a74:	468b      	mov	fp, r1
 8008a76:	2300      	movs	r3, #0
 8008a78:	2502      	movs	r5, #2
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d17a      	bne.n	8008b74 <_dtoa_r+0x4c4>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1d3      	bne.n	8008a2a <_dtoa_r+0x37a>
 8008a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8082 	beq.w	8008b8e <_dtoa_r+0x4de>
 8008a8a:	4b91      	ldr	r3, [pc, #580]	; (8008cd0 <_dtoa_r+0x620>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4650      	mov	r0, sl
 8008a90:	4659      	mov	r1, fp
 8008a92:	f7f8 f843 	bl	8000b1c <__aeabi_dcmplt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d079      	beq.n	8008b8e <_dtoa_r+0x4de>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d076      	beq.n	8008b8e <_dtoa_r+0x4de>
 8008aa0:	9b02      	ldr	r3, [sp, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dd36      	ble.n	8008b14 <_dtoa_r+0x464>
 8008aa6:	9b00      	ldr	r3, [sp, #0]
 8008aa8:	4650      	mov	r0, sl
 8008aaa:	4659      	mov	r1, fp
 8008aac:	1e5f      	subs	r7, r3, #1
 8008aae:	2200      	movs	r2, #0
 8008ab0:	4b88      	ldr	r3, [pc, #544]	; (8008cd4 <_dtoa_r+0x624>)
 8008ab2:	f7f7 fdc1 	bl	8000638 <__aeabi_dmul>
 8008ab6:	9e02      	ldr	r6, [sp, #8]
 8008ab8:	4682      	mov	sl, r0
 8008aba:	468b      	mov	fp, r1
 8008abc:	3501      	adds	r5, #1
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7f7 fd50 	bl	8000564 <__aeabi_i2d>
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	465b      	mov	r3, fp
 8008ac8:	f7f7 fdb6 	bl	8000638 <__aeabi_dmul>
 8008acc:	4b82      	ldr	r3, [pc, #520]	; (8008cd8 <_dtoa_r+0x628>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f7 fbfc 	bl	80002cc <__adddf3>
 8008ad4:	46d0      	mov	r8, sl
 8008ad6:	46d9      	mov	r9, fp
 8008ad8:	4682      	mov	sl, r0
 8008ada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008ade:	2e00      	cmp	r6, #0
 8008ae0:	d158      	bne.n	8008b94 <_dtoa_r+0x4e4>
 8008ae2:	4b7e      	ldr	r3, [pc, #504]	; (8008cdc <_dtoa_r+0x62c>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 fbed 	bl	80002c8 <__aeabi_dsub>
 8008aee:	4652      	mov	r2, sl
 8008af0:	465b      	mov	r3, fp
 8008af2:	4680      	mov	r8, r0
 8008af4:	4689      	mov	r9, r1
 8008af6:	f7f8 f82f 	bl	8000b58 <__aeabi_dcmpgt>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f040 8295 	bne.w	800902a <_dtoa_r+0x97a>
 8008b00:	4652      	mov	r2, sl
 8008b02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f8 f807 	bl	8000b1c <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f040 8289 	bne.w	8009026 <_dtoa_r+0x976>
 8008b14:	ec5b ab19 	vmov	sl, fp, d9
 8008b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f2c0 8148 	blt.w	8008db0 <_dtoa_r+0x700>
 8008b20:	9a00      	ldr	r2, [sp, #0]
 8008b22:	2a0e      	cmp	r2, #14
 8008b24:	f300 8144 	bgt.w	8008db0 <_dtoa_r+0x700>
 8008b28:	4b67      	ldr	r3, [pc, #412]	; (8008cc8 <_dtoa_r+0x618>)
 8008b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f280 80d5 	bge.w	8008ce4 <_dtoa_r+0x634>
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f300 80d1 	bgt.w	8008ce4 <_dtoa_r+0x634>
 8008b42:	f040 826f 	bne.w	8009024 <_dtoa_r+0x974>
 8008b46:	4b65      	ldr	r3, [pc, #404]	; (8008cdc <_dtoa_r+0x62c>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fd73 	bl	8000638 <__aeabi_dmul>
 8008b52:	4652      	mov	r2, sl
 8008b54:	465b      	mov	r3, fp
 8008b56:	f7f7 fff5 	bl	8000b44 <__aeabi_dcmpge>
 8008b5a:	9e03      	ldr	r6, [sp, #12]
 8008b5c:	4637      	mov	r7, r6
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f040 8245 	bne.w	8008fee <_dtoa_r+0x93e>
 8008b64:	9d01      	ldr	r5, [sp, #4]
 8008b66:	2331      	movs	r3, #49	; 0x31
 8008b68:	f805 3b01 	strb.w	r3, [r5], #1
 8008b6c:	9b00      	ldr	r3, [sp, #0]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	e240      	b.n	8008ff6 <_dtoa_r+0x946>
 8008b74:	07f2      	lsls	r2, r6, #31
 8008b76:	d505      	bpl.n	8008b84 <_dtoa_r+0x4d4>
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	f7f7 fd5c 	bl	8000638 <__aeabi_dmul>
 8008b80:	3501      	adds	r5, #1
 8008b82:	2301      	movs	r3, #1
 8008b84:	1076      	asrs	r6, r6, #1
 8008b86:	3708      	adds	r7, #8
 8008b88:	e777      	b.n	8008a7a <_dtoa_r+0x3ca>
 8008b8a:	2502      	movs	r5, #2
 8008b8c:	e779      	b.n	8008a82 <_dtoa_r+0x3d2>
 8008b8e:	9f00      	ldr	r7, [sp, #0]
 8008b90:	9e03      	ldr	r6, [sp, #12]
 8008b92:	e794      	b.n	8008abe <_dtoa_r+0x40e>
 8008b94:	9901      	ldr	r1, [sp, #4]
 8008b96:	4b4c      	ldr	r3, [pc, #304]	; (8008cc8 <_dtoa_r+0x618>)
 8008b98:	4431      	add	r1, r6
 8008b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b9c:	9908      	ldr	r1, [sp, #32]
 8008b9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	d043      	beq.n	8008c32 <_dtoa_r+0x582>
 8008baa:	494d      	ldr	r1, [pc, #308]	; (8008ce0 <_dtoa_r+0x630>)
 8008bac:	2000      	movs	r0, #0
 8008bae:	f7f7 fe6d 	bl	800088c <__aeabi_ddiv>
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	f7f7 fb87 	bl	80002c8 <__aeabi_dsub>
 8008bba:	9d01      	ldr	r5, [sp, #4]
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	468b      	mov	fp, r1
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	f7f7 ffe8 	bl	8000b98 <__aeabi_d2iz>
 8008bc8:	4606      	mov	r6, r0
 8008bca:	f7f7 fccb 	bl	8000564 <__aeabi_i2d>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 fb77 	bl	80002c8 <__aeabi_dsub>
 8008bda:	3630      	adds	r6, #48	; 0x30
 8008bdc:	f805 6b01 	strb.w	r6, [r5], #1
 8008be0:	4652      	mov	r2, sl
 8008be2:	465b      	mov	r3, fp
 8008be4:	4680      	mov	r8, r0
 8008be6:	4689      	mov	r9, r1
 8008be8:	f7f7 ff98 	bl	8000b1c <__aeabi_dcmplt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d163      	bne.n	8008cb8 <_dtoa_r+0x608>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	4936      	ldr	r1, [pc, #216]	; (8008cd0 <_dtoa_r+0x620>)
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f7f7 fb66 	bl	80002c8 <__aeabi_dsub>
 8008bfc:	4652      	mov	r2, sl
 8008bfe:	465b      	mov	r3, fp
 8008c00:	f7f7 ff8c 	bl	8000b1c <__aeabi_dcmplt>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	f040 80b5 	bne.w	8008d74 <_dtoa_r+0x6c4>
 8008c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	d081      	beq.n	8008b14 <_dtoa_r+0x464>
 8008c10:	4b30      	ldr	r3, [pc, #192]	; (8008cd4 <_dtoa_r+0x624>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	4650      	mov	r0, sl
 8008c16:	4659      	mov	r1, fp
 8008c18:	f7f7 fd0e 	bl	8000638 <__aeabi_dmul>
 8008c1c:	4b2d      	ldr	r3, [pc, #180]	; (8008cd4 <_dtoa_r+0x624>)
 8008c1e:	4682      	mov	sl, r0
 8008c20:	468b      	mov	fp, r1
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	2200      	movs	r2, #0
 8008c28:	f7f7 fd06 	bl	8000638 <__aeabi_dmul>
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	4689      	mov	r9, r1
 8008c30:	e7c6      	b.n	8008bc0 <_dtoa_r+0x510>
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	f7f7 fcff 	bl	8000638 <__aeabi_dmul>
 8008c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c3c:	9d01      	ldr	r5, [sp, #4]
 8008c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c40:	4682      	mov	sl, r0
 8008c42:	468b      	mov	fp, r1
 8008c44:	4649      	mov	r1, r9
 8008c46:	4640      	mov	r0, r8
 8008c48:	f7f7 ffa6 	bl	8000b98 <__aeabi_d2iz>
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	f7f7 fc89 	bl	8000564 <__aeabi_i2d>
 8008c52:	3630      	adds	r6, #48	; 0x30
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4640      	mov	r0, r8
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	f7f7 fb34 	bl	80002c8 <__aeabi_dsub>
 8008c60:	f805 6b01 	strb.w	r6, [r5], #1
 8008c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c66:	429d      	cmp	r5, r3
 8008c68:	4680      	mov	r8, r0
 8008c6a:	4689      	mov	r9, r1
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	d124      	bne.n	8008cbc <_dtoa_r+0x60c>
 8008c72:	4b1b      	ldr	r3, [pc, #108]	; (8008ce0 <_dtoa_r+0x630>)
 8008c74:	4650      	mov	r0, sl
 8008c76:	4659      	mov	r1, fp
 8008c78:	f7f7 fb28 	bl	80002cc <__adddf3>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4640      	mov	r0, r8
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 ff68 	bl	8000b58 <__aeabi_dcmpgt>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d173      	bne.n	8008d74 <_dtoa_r+0x6c4>
 8008c8c:	4652      	mov	r2, sl
 8008c8e:	465b      	mov	r3, fp
 8008c90:	4913      	ldr	r1, [pc, #76]	; (8008ce0 <_dtoa_r+0x630>)
 8008c92:	2000      	movs	r0, #0
 8008c94:	f7f7 fb18 	bl	80002c8 <__aeabi_dsub>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f43f af35 	beq.w	8008b14 <_dtoa_r+0x464>
 8008caa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008cac:	1e6b      	subs	r3, r5, #1
 8008cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cb4:	2b30      	cmp	r3, #48	; 0x30
 8008cb6:	d0f8      	beq.n	8008caa <_dtoa_r+0x5fa>
 8008cb8:	9700      	str	r7, [sp, #0]
 8008cba:	e049      	b.n	8008d50 <_dtoa_r+0x6a0>
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <_dtoa_r+0x624>)
 8008cbe:	f7f7 fcbb 	bl	8000638 <__aeabi_dmul>
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	4689      	mov	r9, r1
 8008cc6:	e7bd      	b.n	8008c44 <_dtoa_r+0x594>
 8008cc8:	0800b460 	.word	0x0800b460
 8008ccc:	0800b438 	.word	0x0800b438
 8008cd0:	3ff00000 	.word	0x3ff00000
 8008cd4:	40240000 	.word	0x40240000
 8008cd8:	401c0000 	.word	0x401c0000
 8008cdc:	40140000 	.word	0x40140000
 8008ce0:	3fe00000 	.word	0x3fe00000
 8008ce4:	9d01      	ldr	r5, [sp, #4]
 8008ce6:	4656      	mov	r6, sl
 8008ce8:	465f      	mov	r7, fp
 8008cea:	4642      	mov	r2, r8
 8008cec:	464b      	mov	r3, r9
 8008cee:	4630      	mov	r0, r6
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	f7f7 fdcb 	bl	800088c <__aeabi_ddiv>
 8008cf6:	f7f7 ff4f 	bl	8000b98 <__aeabi_d2iz>
 8008cfa:	4682      	mov	sl, r0
 8008cfc:	f7f7 fc32 	bl	8000564 <__aeabi_i2d>
 8008d00:	4642      	mov	r2, r8
 8008d02:	464b      	mov	r3, r9
 8008d04:	f7f7 fc98 	bl	8000638 <__aeabi_dmul>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008d14:	f7f7 fad8 	bl	80002c8 <__aeabi_dsub>
 8008d18:	f805 6b01 	strb.w	r6, [r5], #1
 8008d1c:	9e01      	ldr	r6, [sp, #4]
 8008d1e:	9f03      	ldr	r7, [sp, #12]
 8008d20:	1bae      	subs	r6, r5, r6
 8008d22:	42b7      	cmp	r7, r6
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	d135      	bne.n	8008d96 <_dtoa_r+0x6e6>
 8008d2a:	f7f7 facf 	bl	80002cc <__adddf3>
 8008d2e:	4642      	mov	r2, r8
 8008d30:	464b      	mov	r3, r9
 8008d32:	4606      	mov	r6, r0
 8008d34:	460f      	mov	r7, r1
 8008d36:	f7f7 ff0f 	bl	8000b58 <__aeabi_dcmpgt>
 8008d3a:	b9d0      	cbnz	r0, 8008d72 <_dtoa_r+0x6c2>
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	4630      	mov	r0, r6
 8008d42:	4639      	mov	r1, r7
 8008d44:	f7f7 fee0 	bl	8000b08 <__aeabi_dcmpeq>
 8008d48:	b110      	cbz	r0, 8008d50 <_dtoa_r+0x6a0>
 8008d4a:	f01a 0f01 	tst.w	sl, #1
 8008d4e:	d110      	bne.n	8008d72 <_dtoa_r+0x6c2>
 8008d50:	4620      	mov	r0, r4
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	f000 fc3d 	bl	80095d4 <_Bfree>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9800      	ldr	r0, [sp, #0]
 8008d5e:	702b      	strb	r3, [r5, #0]
 8008d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d62:	3001      	adds	r0, #1
 8008d64:	6018      	str	r0, [r3, #0]
 8008d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f43f acf1 	beq.w	8008750 <_dtoa_r+0xa0>
 8008d6e:	601d      	str	r5, [r3, #0]
 8008d70:	e4ee      	b.n	8008750 <_dtoa_r+0xa0>
 8008d72:	9f00      	ldr	r7, [sp, #0]
 8008d74:	462b      	mov	r3, r5
 8008d76:	461d      	mov	r5, r3
 8008d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d7c:	2a39      	cmp	r2, #57	; 0x39
 8008d7e:	d106      	bne.n	8008d8e <_dtoa_r+0x6de>
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d1f7      	bne.n	8008d76 <_dtoa_r+0x6c6>
 8008d86:	9901      	ldr	r1, [sp, #4]
 8008d88:	2230      	movs	r2, #48	; 0x30
 8008d8a:	3701      	adds	r7, #1
 8008d8c:	700a      	strb	r2, [r1, #0]
 8008d8e:	781a      	ldrb	r2, [r3, #0]
 8008d90:	3201      	adds	r2, #1
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	e790      	b.n	8008cb8 <_dtoa_r+0x608>
 8008d96:	4ba6      	ldr	r3, [pc, #664]	; (8009030 <_dtoa_r+0x980>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f7f7 fc4d 	bl	8000638 <__aeabi_dmul>
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2300      	movs	r3, #0
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	f7f7 feaf 	bl	8000b08 <__aeabi_dcmpeq>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d09d      	beq.n	8008cea <_dtoa_r+0x63a>
 8008dae:	e7cf      	b.n	8008d50 <_dtoa_r+0x6a0>
 8008db0:	9a08      	ldr	r2, [sp, #32]
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	f000 80d7 	beq.w	8008f66 <_dtoa_r+0x8b6>
 8008db8:	9a06      	ldr	r2, [sp, #24]
 8008dba:	2a01      	cmp	r2, #1
 8008dbc:	f300 80ba 	bgt.w	8008f34 <_dtoa_r+0x884>
 8008dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	f000 80b2 	beq.w	8008f2c <_dtoa_r+0x87c>
 8008dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008dcc:	9e07      	ldr	r6, [sp, #28]
 8008dce:	9d04      	ldr	r5, [sp, #16]
 8008dd0:	9a04      	ldr	r2, [sp, #16]
 8008dd2:	441a      	add	r2, r3
 8008dd4:	9204      	str	r2, [sp, #16]
 8008dd6:	9a05      	ldr	r2, [sp, #20]
 8008dd8:	2101      	movs	r1, #1
 8008dda:	441a      	add	r2, r3
 8008ddc:	4620      	mov	r0, r4
 8008dde:	9205      	str	r2, [sp, #20]
 8008de0:	f000 fcb0 	bl	8009744 <__i2b>
 8008de4:	4607      	mov	r7, r0
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	dd0c      	ble.n	8008e04 <_dtoa_r+0x754>
 8008dea:	9b05      	ldr	r3, [sp, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dd09      	ble.n	8008e04 <_dtoa_r+0x754>
 8008df0:	42ab      	cmp	r3, r5
 8008df2:	9a04      	ldr	r2, [sp, #16]
 8008df4:	bfa8      	it	ge
 8008df6:	462b      	movge	r3, r5
 8008df8:	1ad2      	subs	r2, r2, r3
 8008dfa:	9204      	str	r2, [sp, #16]
 8008dfc:	9a05      	ldr	r2, [sp, #20]
 8008dfe:	1aed      	subs	r5, r5, r3
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	9305      	str	r3, [sp, #20]
 8008e04:	9b07      	ldr	r3, [sp, #28]
 8008e06:	b31b      	cbz	r3, 8008e50 <_dtoa_r+0x7a0>
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 80af 	beq.w	8008f6e <_dtoa_r+0x8be>
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	dd13      	ble.n	8008e3c <_dtoa_r+0x78c>
 8008e14:	4639      	mov	r1, r7
 8008e16:	4632      	mov	r2, r6
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fd53 	bl	80098c4 <__pow5mult>
 8008e1e:	ee18 2a10 	vmov	r2, s16
 8008e22:	4601      	mov	r1, r0
 8008e24:	4607      	mov	r7, r0
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fca2 	bl	8009770 <__multiply>
 8008e2c:	ee18 1a10 	vmov	r1, s16
 8008e30:	4680      	mov	r8, r0
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fbce 	bl	80095d4 <_Bfree>
 8008e38:	ee08 8a10 	vmov	s16, r8
 8008e3c:	9b07      	ldr	r3, [sp, #28]
 8008e3e:	1b9a      	subs	r2, r3, r6
 8008e40:	d006      	beq.n	8008e50 <_dtoa_r+0x7a0>
 8008e42:	ee18 1a10 	vmov	r1, s16
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 fd3c 	bl	80098c4 <__pow5mult>
 8008e4c:	ee08 0a10 	vmov	s16, r0
 8008e50:	2101      	movs	r1, #1
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fc76 	bl	8009744 <__i2b>
 8008e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	f340 8088 	ble.w	8008f72 <_dtoa_r+0x8c2>
 8008e62:	461a      	mov	r2, r3
 8008e64:	4601      	mov	r1, r0
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fd2c 	bl	80098c4 <__pow5mult>
 8008e6c:	9b06      	ldr	r3, [sp, #24]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	4606      	mov	r6, r0
 8008e72:	f340 8081 	ble.w	8008f78 <_dtoa_r+0x8c8>
 8008e76:	f04f 0800 	mov.w	r8, #0
 8008e7a:	6933      	ldr	r3, [r6, #16]
 8008e7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e80:	6918      	ldr	r0, [r3, #16]
 8008e82:	f000 fc0f 	bl	80096a4 <__hi0bits>
 8008e86:	f1c0 0020 	rsb	r0, r0, #32
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	4418      	add	r0, r3
 8008e8e:	f010 001f 	ands.w	r0, r0, #31
 8008e92:	f000 8092 	beq.w	8008fba <_dtoa_r+0x90a>
 8008e96:	f1c0 0320 	rsb	r3, r0, #32
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	f340 808a 	ble.w	8008fb4 <_dtoa_r+0x904>
 8008ea0:	f1c0 001c 	rsb	r0, r0, #28
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	4403      	add	r3, r0
 8008ea8:	9304      	str	r3, [sp, #16]
 8008eaa:	9b05      	ldr	r3, [sp, #20]
 8008eac:	4403      	add	r3, r0
 8008eae:	4405      	add	r5, r0
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dd07      	ble.n	8008ec8 <_dtoa_r+0x818>
 8008eb8:	ee18 1a10 	vmov	r1, s16
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 fd5a 	bl	8009978 <__lshift>
 8008ec4:	ee08 0a10 	vmov	s16, r0
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dd05      	ble.n	8008eda <_dtoa_r+0x82a>
 8008ece:	4631      	mov	r1, r6
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 fd50 	bl	8009978 <__lshift>
 8008ed8:	4606      	mov	r6, r0
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d06e      	beq.n	8008fbe <_dtoa_r+0x90e>
 8008ee0:	ee18 0a10 	vmov	r0, s16
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	f000 fdb7 	bl	8009a58 <__mcmp>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	da67      	bge.n	8008fbe <_dtoa_r+0x90e>
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	ee18 1a10 	vmov	r1, s16
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	220a      	movs	r2, #10
 8008efa:	2300      	movs	r3, #0
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fb8b 	bl	8009618 <__multadd>
 8008f02:	9b08      	ldr	r3, [sp, #32]
 8008f04:	ee08 0a10 	vmov	s16, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 81b1 	beq.w	8009270 <_dtoa_r+0xbc0>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4639      	mov	r1, r7
 8008f12:	220a      	movs	r2, #10
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 fb7f 	bl	8009618 <__multadd>
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	4607      	mov	r7, r0
 8008f20:	f300 808e 	bgt.w	8009040 <_dtoa_r+0x990>
 8008f24:	9b06      	ldr	r3, [sp, #24]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	dc51      	bgt.n	8008fce <_dtoa_r+0x91e>
 8008f2a:	e089      	b.n	8009040 <_dtoa_r+0x990>
 8008f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f32:	e74b      	b.n	8008dcc <_dtoa_r+0x71c>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	1e5e      	subs	r6, r3, #1
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	42b3      	cmp	r3, r6
 8008f3c:	bfbf      	itttt	lt
 8008f3e:	9b07      	ldrlt	r3, [sp, #28]
 8008f40:	9607      	strlt	r6, [sp, #28]
 8008f42:	1af2      	sublt	r2, r6, r3
 8008f44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f46:	bfb6      	itet	lt
 8008f48:	189b      	addlt	r3, r3, r2
 8008f4a:	1b9e      	subge	r6, r3, r6
 8008f4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	bfb8      	it	lt
 8008f52:	2600      	movlt	r6, #0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bfb7      	itett	lt
 8008f58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008f5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008f60:	1a9d      	sublt	r5, r3, r2
 8008f62:	2300      	movlt	r3, #0
 8008f64:	e734      	b.n	8008dd0 <_dtoa_r+0x720>
 8008f66:	9e07      	ldr	r6, [sp, #28]
 8008f68:	9d04      	ldr	r5, [sp, #16]
 8008f6a:	9f08      	ldr	r7, [sp, #32]
 8008f6c:	e73b      	b.n	8008de6 <_dtoa_r+0x736>
 8008f6e:	9a07      	ldr	r2, [sp, #28]
 8008f70:	e767      	b.n	8008e42 <_dtoa_r+0x792>
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	dc18      	bgt.n	8008faa <_dtoa_r+0x8fa>
 8008f78:	f1ba 0f00 	cmp.w	sl, #0
 8008f7c:	d115      	bne.n	8008faa <_dtoa_r+0x8fa>
 8008f7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f82:	b993      	cbnz	r3, 8008faa <_dtoa_r+0x8fa>
 8008f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f88:	0d1b      	lsrs	r3, r3, #20
 8008f8a:	051b      	lsls	r3, r3, #20
 8008f8c:	b183      	cbz	r3, 8008fb0 <_dtoa_r+0x900>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	9b05      	ldr	r3, [sp, #20]
 8008f96:	3301      	adds	r3, #1
 8008f98:	9305      	str	r3, [sp, #20]
 8008f9a:	f04f 0801 	mov.w	r8, #1
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f af6a 	bne.w	8008e7a <_dtoa_r+0x7ca>
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	e76f      	b.n	8008e8a <_dtoa_r+0x7da>
 8008faa:	f04f 0800 	mov.w	r8, #0
 8008fae:	e7f6      	b.n	8008f9e <_dtoa_r+0x8ee>
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	e7f4      	b.n	8008f9e <_dtoa_r+0x8ee>
 8008fb4:	f43f af7d 	beq.w	8008eb2 <_dtoa_r+0x802>
 8008fb8:	4618      	mov	r0, r3
 8008fba:	301c      	adds	r0, #28
 8008fbc:	e772      	b.n	8008ea4 <_dtoa_r+0x7f4>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dc37      	bgt.n	8009034 <_dtoa_r+0x984>
 8008fc4:	9b06      	ldr	r3, [sp, #24]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	dd34      	ble.n	8009034 <_dtoa_r+0x984>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	9302      	str	r3, [sp, #8]
 8008fce:	9b02      	ldr	r3, [sp, #8]
 8008fd0:	b96b      	cbnz	r3, 8008fee <_dtoa_r+0x93e>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	2205      	movs	r2, #5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 fb1e 	bl	8009618 <__multadd>
 8008fdc:	4601      	mov	r1, r0
 8008fde:	4606      	mov	r6, r0
 8008fe0:	ee18 0a10 	vmov	r0, s16
 8008fe4:	f000 fd38 	bl	8009a58 <__mcmp>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f73f adbb 	bgt.w	8008b64 <_dtoa_r+0x4b4>
 8008fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff0:	9d01      	ldr	r5, [sp, #4]
 8008ff2:	43db      	mvns	r3, r3
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fae9 	bl	80095d4 <_Bfree>
 8009002:	2f00      	cmp	r7, #0
 8009004:	f43f aea4 	beq.w	8008d50 <_dtoa_r+0x6a0>
 8009008:	f1b8 0f00 	cmp.w	r8, #0
 800900c:	d005      	beq.n	800901a <_dtoa_r+0x96a>
 800900e:	45b8      	cmp	r8, r7
 8009010:	d003      	beq.n	800901a <_dtoa_r+0x96a>
 8009012:	4641      	mov	r1, r8
 8009014:	4620      	mov	r0, r4
 8009016:	f000 fadd 	bl	80095d4 <_Bfree>
 800901a:	4639      	mov	r1, r7
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fad9 	bl	80095d4 <_Bfree>
 8009022:	e695      	b.n	8008d50 <_dtoa_r+0x6a0>
 8009024:	2600      	movs	r6, #0
 8009026:	4637      	mov	r7, r6
 8009028:	e7e1      	b.n	8008fee <_dtoa_r+0x93e>
 800902a:	9700      	str	r7, [sp, #0]
 800902c:	4637      	mov	r7, r6
 800902e:	e599      	b.n	8008b64 <_dtoa_r+0x4b4>
 8009030:	40240000 	.word	0x40240000
 8009034:	9b08      	ldr	r3, [sp, #32]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 80ca 	beq.w	80091d0 <_dtoa_r+0xb20>
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	9302      	str	r3, [sp, #8]
 8009040:	2d00      	cmp	r5, #0
 8009042:	dd05      	ble.n	8009050 <_dtoa_r+0x9a0>
 8009044:	4639      	mov	r1, r7
 8009046:	462a      	mov	r2, r5
 8009048:	4620      	mov	r0, r4
 800904a:	f000 fc95 	bl	8009978 <__lshift>
 800904e:	4607      	mov	r7, r0
 8009050:	f1b8 0f00 	cmp.w	r8, #0
 8009054:	d05b      	beq.n	800910e <_dtoa_r+0xa5e>
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fa7b 	bl	8009554 <_Balloc>
 800905e:	4605      	mov	r5, r0
 8009060:	b928      	cbnz	r0, 800906e <_dtoa_r+0x9be>
 8009062:	4b87      	ldr	r3, [pc, #540]	; (8009280 <_dtoa_r+0xbd0>)
 8009064:	4602      	mov	r2, r0
 8009066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800906a:	f7ff bb3b 	b.w	80086e4 <_dtoa_r+0x34>
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	3202      	adds	r2, #2
 8009072:	0092      	lsls	r2, r2, #2
 8009074:	f107 010c 	add.w	r1, r7, #12
 8009078:	300c      	adds	r0, #12
 800907a:	f7fe fa6a 	bl	8007552 <memcpy>
 800907e:	2201      	movs	r2, #1
 8009080:	4629      	mov	r1, r5
 8009082:	4620      	mov	r0, r4
 8009084:	f000 fc78 	bl	8009978 <__lshift>
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	f103 0901 	add.w	r9, r3, #1
 800908e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009092:	4413      	add	r3, r2
 8009094:	9305      	str	r3, [sp, #20]
 8009096:	f00a 0301 	and.w	r3, sl, #1
 800909a:	46b8      	mov	r8, r7
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	4607      	mov	r7, r0
 80090a0:	4631      	mov	r1, r6
 80090a2:	ee18 0a10 	vmov	r0, s16
 80090a6:	f7ff fa75 	bl	8008594 <quorem>
 80090aa:	4641      	mov	r1, r8
 80090ac:	9002      	str	r0, [sp, #8]
 80090ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80090b2:	ee18 0a10 	vmov	r0, s16
 80090b6:	f000 fccf 	bl	8009a58 <__mcmp>
 80090ba:	463a      	mov	r2, r7
 80090bc:	9003      	str	r0, [sp, #12]
 80090be:	4631      	mov	r1, r6
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fce5 	bl	8009a90 <__mdiff>
 80090c6:	68c2      	ldr	r2, [r0, #12]
 80090c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80090cc:	4605      	mov	r5, r0
 80090ce:	bb02      	cbnz	r2, 8009112 <_dtoa_r+0xa62>
 80090d0:	4601      	mov	r1, r0
 80090d2:	ee18 0a10 	vmov	r0, s16
 80090d6:	f000 fcbf 	bl	8009a58 <__mcmp>
 80090da:	4602      	mov	r2, r0
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	9207      	str	r2, [sp, #28]
 80090e2:	f000 fa77 	bl	80095d4 <_Bfree>
 80090e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80090ea:	ea43 0102 	orr.w	r1, r3, r2
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	430b      	orrs	r3, r1
 80090f2:	464d      	mov	r5, r9
 80090f4:	d10f      	bne.n	8009116 <_dtoa_r+0xa66>
 80090f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090fa:	d02a      	beq.n	8009152 <_dtoa_r+0xaa2>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dd02      	ble.n	8009108 <_dtoa_r+0xa58>
 8009102:	9b02      	ldr	r3, [sp, #8]
 8009104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009108:	f88b a000 	strb.w	sl, [fp]
 800910c:	e775      	b.n	8008ffa <_dtoa_r+0x94a>
 800910e:	4638      	mov	r0, r7
 8009110:	e7ba      	b.n	8009088 <_dtoa_r+0x9d8>
 8009112:	2201      	movs	r2, #1
 8009114:	e7e2      	b.n	80090dc <_dtoa_r+0xa2c>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	db04      	blt.n	8009126 <_dtoa_r+0xa76>
 800911c:	9906      	ldr	r1, [sp, #24]
 800911e:	430b      	orrs	r3, r1
 8009120:	9904      	ldr	r1, [sp, #16]
 8009122:	430b      	orrs	r3, r1
 8009124:	d122      	bne.n	800916c <_dtoa_r+0xabc>
 8009126:	2a00      	cmp	r2, #0
 8009128:	ddee      	ble.n	8009108 <_dtoa_r+0xa58>
 800912a:	ee18 1a10 	vmov	r1, s16
 800912e:	2201      	movs	r2, #1
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fc21 	bl	8009978 <__lshift>
 8009136:	4631      	mov	r1, r6
 8009138:	ee08 0a10 	vmov	s16, r0
 800913c:	f000 fc8c 	bl	8009a58 <__mcmp>
 8009140:	2800      	cmp	r0, #0
 8009142:	dc03      	bgt.n	800914c <_dtoa_r+0xa9c>
 8009144:	d1e0      	bne.n	8009108 <_dtoa_r+0xa58>
 8009146:	f01a 0f01 	tst.w	sl, #1
 800914a:	d0dd      	beq.n	8009108 <_dtoa_r+0xa58>
 800914c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009150:	d1d7      	bne.n	8009102 <_dtoa_r+0xa52>
 8009152:	2339      	movs	r3, #57	; 0x39
 8009154:	f88b 3000 	strb.w	r3, [fp]
 8009158:	462b      	mov	r3, r5
 800915a:	461d      	mov	r5, r3
 800915c:	3b01      	subs	r3, #1
 800915e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009162:	2a39      	cmp	r2, #57	; 0x39
 8009164:	d071      	beq.n	800924a <_dtoa_r+0xb9a>
 8009166:	3201      	adds	r2, #1
 8009168:	701a      	strb	r2, [r3, #0]
 800916a:	e746      	b.n	8008ffa <_dtoa_r+0x94a>
 800916c:	2a00      	cmp	r2, #0
 800916e:	dd07      	ble.n	8009180 <_dtoa_r+0xad0>
 8009170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009174:	d0ed      	beq.n	8009152 <_dtoa_r+0xaa2>
 8009176:	f10a 0301 	add.w	r3, sl, #1
 800917a:	f88b 3000 	strb.w	r3, [fp]
 800917e:	e73c      	b.n	8008ffa <_dtoa_r+0x94a>
 8009180:	9b05      	ldr	r3, [sp, #20]
 8009182:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009186:	4599      	cmp	r9, r3
 8009188:	d047      	beq.n	800921a <_dtoa_r+0xb6a>
 800918a:	ee18 1a10 	vmov	r1, s16
 800918e:	2300      	movs	r3, #0
 8009190:	220a      	movs	r2, #10
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fa40 	bl	8009618 <__multadd>
 8009198:	45b8      	cmp	r8, r7
 800919a:	ee08 0a10 	vmov	s16, r0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	f04f 020a 	mov.w	r2, #10
 80091a6:	4641      	mov	r1, r8
 80091a8:	4620      	mov	r0, r4
 80091aa:	d106      	bne.n	80091ba <_dtoa_r+0xb0a>
 80091ac:	f000 fa34 	bl	8009618 <__multadd>
 80091b0:	4680      	mov	r8, r0
 80091b2:	4607      	mov	r7, r0
 80091b4:	f109 0901 	add.w	r9, r9, #1
 80091b8:	e772      	b.n	80090a0 <_dtoa_r+0x9f0>
 80091ba:	f000 fa2d 	bl	8009618 <__multadd>
 80091be:	4639      	mov	r1, r7
 80091c0:	4680      	mov	r8, r0
 80091c2:	2300      	movs	r3, #0
 80091c4:	220a      	movs	r2, #10
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 fa26 	bl	8009618 <__multadd>
 80091cc:	4607      	mov	r7, r0
 80091ce:	e7f1      	b.n	80091b4 <_dtoa_r+0xb04>
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	9302      	str	r3, [sp, #8]
 80091d4:	9d01      	ldr	r5, [sp, #4]
 80091d6:	ee18 0a10 	vmov	r0, s16
 80091da:	4631      	mov	r1, r6
 80091dc:	f7ff f9da 	bl	8008594 <quorem>
 80091e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	f805 ab01 	strb.w	sl, [r5], #1
 80091ea:	1aea      	subs	r2, r5, r3
 80091ec:	9b02      	ldr	r3, [sp, #8]
 80091ee:	4293      	cmp	r3, r2
 80091f0:	dd09      	ble.n	8009206 <_dtoa_r+0xb56>
 80091f2:	ee18 1a10 	vmov	r1, s16
 80091f6:	2300      	movs	r3, #0
 80091f8:	220a      	movs	r2, #10
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fa0c 	bl	8009618 <__multadd>
 8009200:	ee08 0a10 	vmov	s16, r0
 8009204:	e7e7      	b.n	80091d6 <_dtoa_r+0xb26>
 8009206:	9b02      	ldr	r3, [sp, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfc8      	it	gt
 800920c:	461d      	movgt	r5, r3
 800920e:	9b01      	ldr	r3, [sp, #4]
 8009210:	bfd8      	it	le
 8009212:	2501      	movle	r5, #1
 8009214:	441d      	add	r5, r3
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	ee18 1a10 	vmov	r1, s16
 800921e:	2201      	movs	r2, #1
 8009220:	4620      	mov	r0, r4
 8009222:	f000 fba9 	bl	8009978 <__lshift>
 8009226:	4631      	mov	r1, r6
 8009228:	ee08 0a10 	vmov	s16, r0
 800922c:	f000 fc14 	bl	8009a58 <__mcmp>
 8009230:	2800      	cmp	r0, #0
 8009232:	dc91      	bgt.n	8009158 <_dtoa_r+0xaa8>
 8009234:	d102      	bne.n	800923c <_dtoa_r+0xb8c>
 8009236:	f01a 0f01 	tst.w	sl, #1
 800923a:	d18d      	bne.n	8009158 <_dtoa_r+0xaa8>
 800923c:	462b      	mov	r3, r5
 800923e:	461d      	mov	r5, r3
 8009240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009244:	2a30      	cmp	r2, #48	; 0x30
 8009246:	d0fa      	beq.n	800923e <_dtoa_r+0xb8e>
 8009248:	e6d7      	b.n	8008ffa <_dtoa_r+0x94a>
 800924a:	9a01      	ldr	r2, [sp, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d184      	bne.n	800915a <_dtoa_r+0xaaa>
 8009250:	9b00      	ldr	r3, [sp, #0]
 8009252:	3301      	adds	r3, #1
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	2331      	movs	r3, #49	; 0x31
 8009258:	7013      	strb	r3, [r2, #0]
 800925a:	e6ce      	b.n	8008ffa <_dtoa_r+0x94a>
 800925c:	4b09      	ldr	r3, [pc, #36]	; (8009284 <_dtoa_r+0xbd4>)
 800925e:	f7ff ba95 	b.w	800878c <_dtoa_r+0xdc>
 8009262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009264:	2b00      	cmp	r3, #0
 8009266:	f47f aa6e 	bne.w	8008746 <_dtoa_r+0x96>
 800926a:	4b07      	ldr	r3, [pc, #28]	; (8009288 <_dtoa_r+0xbd8>)
 800926c:	f7ff ba8e 	b.w	800878c <_dtoa_r+0xdc>
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	dcae      	bgt.n	80091d4 <_dtoa_r+0xb24>
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	2b02      	cmp	r3, #2
 800927a:	f73f aea8 	bgt.w	8008fce <_dtoa_r+0x91e>
 800927e:	e7a9      	b.n	80091d4 <_dtoa_r+0xb24>
 8009280:	0800b3c5 	.word	0x0800b3c5
 8009284:	0800b549 	.word	0x0800b549
 8009288:	0800b346 	.word	0x0800b346

0800928c <__sflush_r>:
 800928c:	898a      	ldrh	r2, [r1, #12]
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	4605      	mov	r5, r0
 8009294:	0710      	lsls	r0, r2, #28
 8009296:	460c      	mov	r4, r1
 8009298:	d458      	bmi.n	800934c <__sflush_r+0xc0>
 800929a:	684b      	ldr	r3, [r1, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc05      	bgt.n	80092ac <__sflush_r+0x20>
 80092a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dc02      	bgt.n	80092ac <__sflush_r+0x20>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d0f9      	beq.n	80092a6 <__sflush_r+0x1a>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092b8:	682f      	ldr	r7, [r5, #0]
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	d032      	beq.n	8009324 <__sflush_r+0x98>
 80092be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	075a      	lsls	r2, r3, #29
 80092c4:	d505      	bpl.n	80092d2 <__sflush_r+0x46>
 80092c6:	6863      	ldr	r3, [r4, #4]
 80092c8:	1ac0      	subs	r0, r0, r3
 80092ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092cc:	b10b      	cbz	r3, 80092d2 <__sflush_r+0x46>
 80092ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092d0:	1ac0      	subs	r0, r0, r3
 80092d2:	2300      	movs	r3, #0
 80092d4:	4602      	mov	r2, r0
 80092d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d8:	6a21      	ldr	r1, [r4, #32]
 80092da:	4628      	mov	r0, r5
 80092dc:	47b0      	blx	r6
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	d106      	bne.n	80092f2 <__sflush_r+0x66>
 80092e4:	6829      	ldr	r1, [r5, #0]
 80092e6:	291d      	cmp	r1, #29
 80092e8:	d82c      	bhi.n	8009344 <__sflush_r+0xb8>
 80092ea:	4a2a      	ldr	r2, [pc, #168]	; (8009394 <__sflush_r+0x108>)
 80092ec:	40ca      	lsrs	r2, r1
 80092ee:	07d6      	lsls	r6, r2, #31
 80092f0:	d528      	bpl.n	8009344 <__sflush_r+0xb8>
 80092f2:	2200      	movs	r2, #0
 80092f4:	6062      	str	r2, [r4, #4]
 80092f6:	04d9      	lsls	r1, r3, #19
 80092f8:	6922      	ldr	r2, [r4, #16]
 80092fa:	6022      	str	r2, [r4, #0]
 80092fc:	d504      	bpl.n	8009308 <__sflush_r+0x7c>
 80092fe:	1c42      	adds	r2, r0, #1
 8009300:	d101      	bne.n	8009306 <__sflush_r+0x7a>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	b903      	cbnz	r3, 8009308 <__sflush_r+0x7c>
 8009306:	6560      	str	r0, [r4, #84]	; 0x54
 8009308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800930a:	602f      	str	r7, [r5, #0]
 800930c:	2900      	cmp	r1, #0
 800930e:	d0ca      	beq.n	80092a6 <__sflush_r+0x1a>
 8009310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009314:	4299      	cmp	r1, r3
 8009316:	d002      	beq.n	800931e <__sflush_r+0x92>
 8009318:	4628      	mov	r0, r5
 800931a:	f000 fcb5 	bl	8009c88 <_free_r>
 800931e:	2000      	movs	r0, #0
 8009320:	6360      	str	r0, [r4, #52]	; 0x34
 8009322:	e7c1      	b.n	80092a8 <__sflush_r+0x1c>
 8009324:	6a21      	ldr	r1, [r4, #32]
 8009326:	2301      	movs	r3, #1
 8009328:	4628      	mov	r0, r5
 800932a:	47b0      	blx	r6
 800932c:	1c41      	adds	r1, r0, #1
 800932e:	d1c7      	bne.n	80092c0 <__sflush_r+0x34>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0c4      	beq.n	80092c0 <__sflush_r+0x34>
 8009336:	2b1d      	cmp	r3, #29
 8009338:	d001      	beq.n	800933e <__sflush_r+0xb2>
 800933a:	2b16      	cmp	r3, #22
 800933c:	d101      	bne.n	8009342 <__sflush_r+0xb6>
 800933e:	602f      	str	r7, [r5, #0]
 8009340:	e7b1      	b.n	80092a6 <__sflush_r+0x1a>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	e7ad      	b.n	80092a8 <__sflush_r+0x1c>
 800934c:	690f      	ldr	r7, [r1, #16]
 800934e:	2f00      	cmp	r7, #0
 8009350:	d0a9      	beq.n	80092a6 <__sflush_r+0x1a>
 8009352:	0793      	lsls	r3, r2, #30
 8009354:	680e      	ldr	r6, [r1, #0]
 8009356:	bf08      	it	eq
 8009358:	694b      	ldreq	r3, [r1, #20]
 800935a:	600f      	str	r7, [r1, #0]
 800935c:	bf18      	it	ne
 800935e:	2300      	movne	r3, #0
 8009360:	eba6 0807 	sub.w	r8, r6, r7
 8009364:	608b      	str	r3, [r1, #8]
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	dd9c      	ble.n	80092a6 <__sflush_r+0x1a>
 800936c:	6a21      	ldr	r1, [r4, #32]
 800936e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009370:	4643      	mov	r3, r8
 8009372:	463a      	mov	r2, r7
 8009374:	4628      	mov	r0, r5
 8009376:	47b0      	blx	r6
 8009378:	2800      	cmp	r0, #0
 800937a:	dc06      	bgt.n	800938a <__sflush_r+0xfe>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	e78e      	b.n	80092a8 <__sflush_r+0x1c>
 800938a:	4407      	add	r7, r0
 800938c:	eba8 0800 	sub.w	r8, r8, r0
 8009390:	e7e9      	b.n	8009366 <__sflush_r+0xda>
 8009392:	bf00      	nop
 8009394:	20400001 	.word	0x20400001

08009398 <_fflush_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	b913      	cbnz	r3, 80093a8 <_fflush_r+0x10>
 80093a2:	2500      	movs	r5, #0
 80093a4:	4628      	mov	r0, r5
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	b118      	cbz	r0, 80093b2 <_fflush_r+0x1a>
 80093aa:	6983      	ldr	r3, [r0, #24]
 80093ac:	b90b      	cbnz	r3, 80093b2 <_fflush_r+0x1a>
 80093ae:	f7fd ffef 	bl	8007390 <__sinit>
 80093b2:	4b14      	ldr	r3, [pc, #80]	; (8009404 <_fflush_r+0x6c>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	d11b      	bne.n	80093f0 <_fflush_r+0x58>
 80093b8:	686c      	ldr	r4, [r5, #4]
 80093ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0ef      	beq.n	80093a2 <_fflush_r+0xa>
 80093c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093c4:	07d0      	lsls	r0, r2, #31
 80093c6:	d404      	bmi.n	80093d2 <_fflush_r+0x3a>
 80093c8:	0599      	lsls	r1, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_fflush_r+0x3a>
 80093cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ce:	f7fe f8be 	bl	800754e <__retarget_lock_acquire_recursive>
 80093d2:	4628      	mov	r0, r5
 80093d4:	4621      	mov	r1, r4
 80093d6:	f7ff ff59 	bl	800928c <__sflush_r>
 80093da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093dc:	07da      	lsls	r2, r3, #31
 80093de:	4605      	mov	r5, r0
 80093e0:	d4e0      	bmi.n	80093a4 <_fflush_r+0xc>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	059b      	lsls	r3, r3, #22
 80093e6:	d4dd      	bmi.n	80093a4 <_fflush_r+0xc>
 80093e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ea:	f7fe f8b1 	bl	8007550 <__retarget_lock_release_recursive>
 80093ee:	e7d9      	b.n	80093a4 <_fflush_r+0xc>
 80093f0:	4b05      	ldr	r3, [pc, #20]	; (8009408 <_fflush_r+0x70>)
 80093f2:	429c      	cmp	r4, r3
 80093f4:	d101      	bne.n	80093fa <_fflush_r+0x62>
 80093f6:	68ac      	ldr	r4, [r5, #8]
 80093f8:	e7df      	b.n	80093ba <_fflush_r+0x22>
 80093fa:	4b04      	ldr	r3, [pc, #16]	; (800940c <_fflush_r+0x74>)
 80093fc:	429c      	cmp	r4, r3
 80093fe:	bf08      	it	eq
 8009400:	68ec      	ldreq	r4, [r5, #12]
 8009402:	e7da      	b.n	80093ba <_fflush_r+0x22>
 8009404:	0800b2d0 	.word	0x0800b2d0
 8009408:	0800b2f0 	.word	0x0800b2f0
 800940c:	0800b2b0 	.word	0x0800b2b0

08009410 <fflush>:
 8009410:	4601      	mov	r1, r0
 8009412:	b920      	cbnz	r0, 800941e <fflush+0xe>
 8009414:	4b04      	ldr	r3, [pc, #16]	; (8009428 <fflush+0x18>)
 8009416:	4905      	ldr	r1, [pc, #20]	; (800942c <fflush+0x1c>)
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	f7fe b854 	b.w	80074c6 <_fwalk_reent>
 800941e:	4b04      	ldr	r3, [pc, #16]	; (8009430 <fflush+0x20>)
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f7ff bfb9 	b.w	8009398 <_fflush_r>
 8009426:	bf00      	nop
 8009428:	0800b310 	.word	0x0800b310
 800942c:	08009399 	.word	0x08009399
 8009430:	20000010 	.word	0x20000010

08009434 <_localeconv_r>:
 8009434:	4800      	ldr	r0, [pc, #0]	; (8009438 <_localeconv_r+0x4>)
 8009436:	4770      	bx	lr
 8009438:	20000164 	.word	0x20000164

0800943c <_lseek_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d07      	ldr	r5, [pc, #28]	; (800945c <_lseek_r+0x20>)
 8009440:	4604      	mov	r4, r0
 8009442:	4608      	mov	r0, r1
 8009444:	4611      	mov	r1, r2
 8009446:	2200      	movs	r2, #0
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f7f8 fe36 	bl	80020bc <_lseek>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_lseek_r+0x1e>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_lseek_r+0x1e>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	200044bc 	.word	0x200044bc

08009460 <__swhatbuf_r>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	460e      	mov	r6, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	2900      	cmp	r1, #0
 800946a:	b096      	sub	sp, #88	; 0x58
 800946c:	4614      	mov	r4, r2
 800946e:	461d      	mov	r5, r3
 8009470:	da08      	bge.n	8009484 <__swhatbuf_r+0x24>
 8009472:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	061a      	lsls	r2, r3, #24
 800947c:	d410      	bmi.n	80094a0 <__swhatbuf_r+0x40>
 800947e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009482:	e00e      	b.n	80094a2 <__swhatbuf_r+0x42>
 8009484:	466a      	mov	r2, sp
 8009486:	f001 fb9d 	bl	800abc4 <_fstat_r>
 800948a:	2800      	cmp	r0, #0
 800948c:	dbf1      	blt.n	8009472 <__swhatbuf_r+0x12>
 800948e:	9a01      	ldr	r2, [sp, #4]
 8009490:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009494:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009498:	425a      	negs	r2, r3
 800949a:	415a      	adcs	r2, r3
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	e7ee      	b.n	800947e <__swhatbuf_r+0x1e>
 80094a0:	2340      	movs	r3, #64	; 0x40
 80094a2:	2000      	movs	r0, #0
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	b016      	add	sp, #88	; 0x58
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080094ac <__smakebuf_r>:
 80094ac:	898b      	ldrh	r3, [r1, #12]
 80094ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094b0:	079d      	lsls	r5, r3, #30
 80094b2:	4606      	mov	r6, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	d507      	bpl.n	80094c8 <__smakebuf_r+0x1c>
 80094b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	2301      	movs	r3, #1
 80094c2:	6163      	str	r3, [r4, #20]
 80094c4:	b002      	add	sp, #8
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	ab01      	add	r3, sp, #4
 80094ca:	466a      	mov	r2, sp
 80094cc:	f7ff ffc8 	bl	8009460 <__swhatbuf_r>
 80094d0:	9900      	ldr	r1, [sp, #0]
 80094d2:	4605      	mov	r5, r0
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7fe f873 	bl	80075c0 <_malloc_r>
 80094da:	b948      	cbnz	r0, 80094f0 <__smakebuf_r+0x44>
 80094dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e0:	059a      	lsls	r2, r3, #22
 80094e2:	d4ef      	bmi.n	80094c4 <__smakebuf_r+0x18>
 80094e4:	f023 0303 	bic.w	r3, r3, #3
 80094e8:	f043 0302 	orr.w	r3, r3, #2
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	e7e3      	b.n	80094b8 <__smakebuf_r+0xc>
 80094f0:	4b0d      	ldr	r3, [pc, #52]	; (8009528 <__smakebuf_r+0x7c>)
 80094f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	6163      	str	r3, [r4, #20]
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	6120      	str	r0, [r4, #16]
 8009506:	b15b      	cbz	r3, 8009520 <__smakebuf_r+0x74>
 8009508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800950c:	4630      	mov	r0, r6
 800950e:	f001 fb6b 	bl	800abe8 <_isatty_r>
 8009512:	b128      	cbz	r0, 8009520 <__smakebuf_r+0x74>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	f023 0303 	bic.w	r3, r3, #3
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	89a0      	ldrh	r0, [r4, #12]
 8009522:	4305      	orrs	r5, r0
 8009524:	81a5      	strh	r5, [r4, #12]
 8009526:	e7cd      	b.n	80094c4 <__smakebuf_r+0x18>
 8009528:	08007329 	.word	0x08007329

0800952c <malloc>:
 800952c:	4b02      	ldr	r3, [pc, #8]	; (8009538 <malloc+0xc>)
 800952e:	4601      	mov	r1, r0
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	f7fe b845 	b.w	80075c0 <_malloc_r>
 8009536:	bf00      	nop
 8009538:	20000010 	.word	0x20000010

0800953c <__malloc_lock>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__malloc_lock+0x8>)
 800953e:	f7fe b806 	b.w	800754e <__retarget_lock_acquire_recursive>
 8009542:	bf00      	nop
 8009544:	200044b0 	.word	0x200044b0

08009548 <__malloc_unlock>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__malloc_unlock+0x8>)
 800954a:	f7fe b801 	b.w	8007550 <__retarget_lock_release_recursive>
 800954e:	bf00      	nop
 8009550:	200044b0 	.word	0x200044b0

08009554 <_Balloc>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009558:	4604      	mov	r4, r0
 800955a:	460d      	mov	r5, r1
 800955c:	b976      	cbnz	r6, 800957c <_Balloc+0x28>
 800955e:	2010      	movs	r0, #16
 8009560:	f7ff ffe4 	bl	800952c <malloc>
 8009564:	4602      	mov	r2, r0
 8009566:	6260      	str	r0, [r4, #36]	; 0x24
 8009568:	b920      	cbnz	r0, 8009574 <_Balloc+0x20>
 800956a:	4b18      	ldr	r3, [pc, #96]	; (80095cc <_Balloc+0x78>)
 800956c:	4818      	ldr	r0, [pc, #96]	; (80095d0 <_Balloc+0x7c>)
 800956e:	2166      	movs	r1, #102	; 0x66
 8009570:	f001 faf8 	bl	800ab64 <__assert_func>
 8009574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009578:	6006      	str	r6, [r0, #0]
 800957a:	60c6      	str	r6, [r0, #12]
 800957c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800957e:	68f3      	ldr	r3, [r6, #12]
 8009580:	b183      	cbz	r3, 80095a4 <_Balloc+0x50>
 8009582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800958a:	b9b8      	cbnz	r0, 80095bc <_Balloc+0x68>
 800958c:	2101      	movs	r1, #1
 800958e:	fa01 f605 	lsl.w	r6, r1, r5
 8009592:	1d72      	adds	r2, r6, #5
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	4620      	mov	r0, r4
 8009598:	f000 fb60 	bl	8009c5c <_calloc_r>
 800959c:	b160      	cbz	r0, 80095b8 <_Balloc+0x64>
 800959e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095a2:	e00e      	b.n	80095c2 <_Balloc+0x6e>
 80095a4:	2221      	movs	r2, #33	; 0x21
 80095a6:	2104      	movs	r1, #4
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fb57 	bl	8009c5c <_calloc_r>
 80095ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b0:	60f0      	str	r0, [r6, #12]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e4      	bne.n	8009582 <_Balloc+0x2e>
 80095b8:	2000      	movs	r0, #0
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	6802      	ldr	r2, [r0, #0]
 80095be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095c2:	2300      	movs	r3, #0
 80095c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095c8:	e7f7      	b.n	80095ba <_Balloc+0x66>
 80095ca:	bf00      	nop
 80095cc:	0800b353 	.word	0x0800b353
 80095d0:	0800b3d6 	.word	0x0800b3d6

080095d4 <_Bfree>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095d8:	4605      	mov	r5, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b976      	cbnz	r6, 80095fc <_Bfree+0x28>
 80095de:	2010      	movs	r0, #16
 80095e0:	f7ff ffa4 	bl	800952c <malloc>
 80095e4:	4602      	mov	r2, r0
 80095e6:	6268      	str	r0, [r5, #36]	; 0x24
 80095e8:	b920      	cbnz	r0, 80095f4 <_Bfree+0x20>
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <_Bfree+0x3c>)
 80095ec:	4809      	ldr	r0, [pc, #36]	; (8009614 <_Bfree+0x40>)
 80095ee:	218a      	movs	r1, #138	; 0x8a
 80095f0:	f001 fab8 	bl	800ab64 <__assert_func>
 80095f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095f8:	6006      	str	r6, [r0, #0]
 80095fa:	60c6      	str	r6, [r0, #12]
 80095fc:	b13c      	cbz	r4, 800960e <_Bfree+0x3a>
 80095fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009600:	6862      	ldr	r2, [r4, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009608:	6021      	str	r1, [r4, #0]
 800960a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	0800b353 	.word	0x0800b353
 8009614:	0800b3d6 	.word	0x0800b3d6

08009618 <__multadd>:
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	690d      	ldr	r5, [r1, #16]
 800961e:	4607      	mov	r7, r0
 8009620:	460c      	mov	r4, r1
 8009622:	461e      	mov	r6, r3
 8009624:	f101 0c14 	add.w	ip, r1, #20
 8009628:	2000      	movs	r0, #0
 800962a:	f8dc 3000 	ldr.w	r3, [ip]
 800962e:	b299      	uxth	r1, r3
 8009630:	fb02 6101 	mla	r1, r2, r1, r6
 8009634:	0c1e      	lsrs	r6, r3, #16
 8009636:	0c0b      	lsrs	r3, r1, #16
 8009638:	fb02 3306 	mla	r3, r2, r6, r3
 800963c:	b289      	uxth	r1, r1
 800963e:	3001      	adds	r0, #1
 8009640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009644:	4285      	cmp	r5, r0
 8009646:	f84c 1b04 	str.w	r1, [ip], #4
 800964a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800964e:	dcec      	bgt.n	800962a <__multadd+0x12>
 8009650:	b30e      	cbz	r6, 8009696 <__multadd+0x7e>
 8009652:	68a3      	ldr	r3, [r4, #8]
 8009654:	42ab      	cmp	r3, r5
 8009656:	dc19      	bgt.n	800968c <__multadd+0x74>
 8009658:	6861      	ldr	r1, [r4, #4]
 800965a:	4638      	mov	r0, r7
 800965c:	3101      	adds	r1, #1
 800965e:	f7ff ff79 	bl	8009554 <_Balloc>
 8009662:	4680      	mov	r8, r0
 8009664:	b928      	cbnz	r0, 8009672 <__multadd+0x5a>
 8009666:	4602      	mov	r2, r0
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <__multadd+0x84>)
 800966a:	480d      	ldr	r0, [pc, #52]	; (80096a0 <__multadd+0x88>)
 800966c:	21b5      	movs	r1, #181	; 0xb5
 800966e:	f001 fa79 	bl	800ab64 <__assert_func>
 8009672:	6922      	ldr	r2, [r4, #16]
 8009674:	3202      	adds	r2, #2
 8009676:	f104 010c 	add.w	r1, r4, #12
 800967a:	0092      	lsls	r2, r2, #2
 800967c:	300c      	adds	r0, #12
 800967e:	f7fd ff68 	bl	8007552 <memcpy>
 8009682:	4621      	mov	r1, r4
 8009684:	4638      	mov	r0, r7
 8009686:	f7ff ffa5 	bl	80095d4 <_Bfree>
 800968a:	4644      	mov	r4, r8
 800968c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009690:	3501      	adds	r5, #1
 8009692:	615e      	str	r6, [r3, #20]
 8009694:	6125      	str	r5, [r4, #16]
 8009696:	4620      	mov	r0, r4
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	0800b3c5 	.word	0x0800b3c5
 80096a0:	0800b3d6 	.word	0x0800b3d6

080096a4 <__hi0bits>:
 80096a4:	0c03      	lsrs	r3, r0, #16
 80096a6:	041b      	lsls	r3, r3, #16
 80096a8:	b9d3      	cbnz	r3, 80096e0 <__hi0bits+0x3c>
 80096aa:	0400      	lsls	r0, r0, #16
 80096ac:	2310      	movs	r3, #16
 80096ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096b2:	bf04      	itt	eq
 80096b4:	0200      	lsleq	r0, r0, #8
 80096b6:	3308      	addeq	r3, #8
 80096b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096bc:	bf04      	itt	eq
 80096be:	0100      	lsleq	r0, r0, #4
 80096c0:	3304      	addeq	r3, #4
 80096c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096c6:	bf04      	itt	eq
 80096c8:	0080      	lsleq	r0, r0, #2
 80096ca:	3302      	addeq	r3, #2
 80096cc:	2800      	cmp	r0, #0
 80096ce:	db05      	blt.n	80096dc <__hi0bits+0x38>
 80096d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096d4:	f103 0301 	add.w	r3, r3, #1
 80096d8:	bf08      	it	eq
 80096da:	2320      	moveq	r3, #32
 80096dc:	4618      	mov	r0, r3
 80096de:	4770      	bx	lr
 80096e0:	2300      	movs	r3, #0
 80096e2:	e7e4      	b.n	80096ae <__hi0bits+0xa>

080096e4 <__lo0bits>:
 80096e4:	6803      	ldr	r3, [r0, #0]
 80096e6:	f013 0207 	ands.w	r2, r3, #7
 80096ea:	4601      	mov	r1, r0
 80096ec:	d00b      	beq.n	8009706 <__lo0bits+0x22>
 80096ee:	07da      	lsls	r2, r3, #31
 80096f0:	d423      	bmi.n	800973a <__lo0bits+0x56>
 80096f2:	0798      	lsls	r0, r3, #30
 80096f4:	bf49      	itett	mi
 80096f6:	085b      	lsrmi	r3, r3, #1
 80096f8:	089b      	lsrpl	r3, r3, #2
 80096fa:	2001      	movmi	r0, #1
 80096fc:	600b      	strmi	r3, [r1, #0]
 80096fe:	bf5c      	itt	pl
 8009700:	600b      	strpl	r3, [r1, #0]
 8009702:	2002      	movpl	r0, #2
 8009704:	4770      	bx	lr
 8009706:	b298      	uxth	r0, r3
 8009708:	b9a8      	cbnz	r0, 8009736 <__lo0bits+0x52>
 800970a:	0c1b      	lsrs	r3, r3, #16
 800970c:	2010      	movs	r0, #16
 800970e:	b2da      	uxtb	r2, r3
 8009710:	b90a      	cbnz	r2, 8009716 <__lo0bits+0x32>
 8009712:	3008      	adds	r0, #8
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	071a      	lsls	r2, r3, #28
 8009718:	bf04      	itt	eq
 800971a:	091b      	lsreq	r3, r3, #4
 800971c:	3004      	addeq	r0, #4
 800971e:	079a      	lsls	r2, r3, #30
 8009720:	bf04      	itt	eq
 8009722:	089b      	lsreq	r3, r3, #2
 8009724:	3002      	addeq	r0, #2
 8009726:	07da      	lsls	r2, r3, #31
 8009728:	d403      	bmi.n	8009732 <__lo0bits+0x4e>
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	f100 0001 	add.w	r0, r0, #1
 8009730:	d005      	beq.n	800973e <__lo0bits+0x5a>
 8009732:	600b      	str	r3, [r1, #0]
 8009734:	4770      	bx	lr
 8009736:	4610      	mov	r0, r2
 8009738:	e7e9      	b.n	800970e <__lo0bits+0x2a>
 800973a:	2000      	movs	r0, #0
 800973c:	4770      	bx	lr
 800973e:	2020      	movs	r0, #32
 8009740:	4770      	bx	lr
	...

08009744 <__i2b>:
 8009744:	b510      	push	{r4, lr}
 8009746:	460c      	mov	r4, r1
 8009748:	2101      	movs	r1, #1
 800974a:	f7ff ff03 	bl	8009554 <_Balloc>
 800974e:	4602      	mov	r2, r0
 8009750:	b928      	cbnz	r0, 800975e <__i2b+0x1a>
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <__i2b+0x24>)
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <__i2b+0x28>)
 8009756:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800975a:	f001 fa03 	bl	800ab64 <__assert_func>
 800975e:	2301      	movs	r3, #1
 8009760:	6144      	str	r4, [r0, #20]
 8009762:	6103      	str	r3, [r0, #16]
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop
 8009768:	0800b3c5 	.word	0x0800b3c5
 800976c:	0800b3d6 	.word	0x0800b3d6

08009770 <__multiply>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	4691      	mov	r9, r2
 8009776:	690a      	ldr	r2, [r1, #16]
 8009778:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800977c:	429a      	cmp	r2, r3
 800977e:	bfb8      	it	lt
 8009780:	460b      	movlt	r3, r1
 8009782:	460c      	mov	r4, r1
 8009784:	bfbc      	itt	lt
 8009786:	464c      	movlt	r4, r9
 8009788:	4699      	movlt	r9, r3
 800978a:	6927      	ldr	r7, [r4, #16]
 800978c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009790:	68a3      	ldr	r3, [r4, #8]
 8009792:	6861      	ldr	r1, [r4, #4]
 8009794:	eb07 060a 	add.w	r6, r7, sl
 8009798:	42b3      	cmp	r3, r6
 800979a:	b085      	sub	sp, #20
 800979c:	bfb8      	it	lt
 800979e:	3101      	addlt	r1, #1
 80097a0:	f7ff fed8 	bl	8009554 <_Balloc>
 80097a4:	b930      	cbnz	r0, 80097b4 <__multiply+0x44>
 80097a6:	4602      	mov	r2, r0
 80097a8:	4b44      	ldr	r3, [pc, #272]	; (80098bc <__multiply+0x14c>)
 80097aa:	4845      	ldr	r0, [pc, #276]	; (80098c0 <__multiply+0x150>)
 80097ac:	f240 115d 	movw	r1, #349	; 0x15d
 80097b0:	f001 f9d8 	bl	800ab64 <__assert_func>
 80097b4:	f100 0514 	add.w	r5, r0, #20
 80097b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097bc:	462b      	mov	r3, r5
 80097be:	2200      	movs	r2, #0
 80097c0:	4543      	cmp	r3, r8
 80097c2:	d321      	bcc.n	8009808 <__multiply+0x98>
 80097c4:	f104 0314 	add.w	r3, r4, #20
 80097c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80097cc:	f109 0314 	add.w	r3, r9, #20
 80097d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80097d4:	9202      	str	r2, [sp, #8]
 80097d6:	1b3a      	subs	r2, r7, r4
 80097d8:	3a15      	subs	r2, #21
 80097da:	f022 0203 	bic.w	r2, r2, #3
 80097de:	3204      	adds	r2, #4
 80097e0:	f104 0115 	add.w	r1, r4, #21
 80097e4:	428f      	cmp	r7, r1
 80097e6:	bf38      	it	cc
 80097e8:	2204      	movcc	r2, #4
 80097ea:	9201      	str	r2, [sp, #4]
 80097ec:	9a02      	ldr	r2, [sp, #8]
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d80c      	bhi.n	800980e <__multiply+0x9e>
 80097f4:	2e00      	cmp	r6, #0
 80097f6:	dd03      	ble.n	8009800 <__multiply+0x90>
 80097f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d05a      	beq.n	80098b6 <__multiply+0x146>
 8009800:	6106      	str	r6, [r0, #16]
 8009802:	b005      	add	sp, #20
 8009804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009808:	f843 2b04 	str.w	r2, [r3], #4
 800980c:	e7d8      	b.n	80097c0 <__multiply+0x50>
 800980e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009812:	f1ba 0f00 	cmp.w	sl, #0
 8009816:	d024      	beq.n	8009862 <__multiply+0xf2>
 8009818:	f104 0e14 	add.w	lr, r4, #20
 800981c:	46a9      	mov	r9, r5
 800981e:	f04f 0c00 	mov.w	ip, #0
 8009822:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009826:	f8d9 1000 	ldr.w	r1, [r9]
 800982a:	fa1f fb82 	uxth.w	fp, r2
 800982e:	b289      	uxth	r1, r1
 8009830:	fb0a 110b 	mla	r1, sl, fp, r1
 8009834:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009838:	f8d9 2000 	ldr.w	r2, [r9]
 800983c:	4461      	add	r1, ip
 800983e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009842:	fb0a c20b 	mla	r2, sl, fp, ip
 8009846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800984a:	b289      	uxth	r1, r1
 800984c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009850:	4577      	cmp	r7, lr
 8009852:	f849 1b04 	str.w	r1, [r9], #4
 8009856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800985a:	d8e2      	bhi.n	8009822 <__multiply+0xb2>
 800985c:	9a01      	ldr	r2, [sp, #4]
 800985e:	f845 c002 	str.w	ip, [r5, r2]
 8009862:	9a03      	ldr	r2, [sp, #12]
 8009864:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009868:	3304      	adds	r3, #4
 800986a:	f1b9 0f00 	cmp.w	r9, #0
 800986e:	d020      	beq.n	80098b2 <__multiply+0x142>
 8009870:	6829      	ldr	r1, [r5, #0]
 8009872:	f104 0c14 	add.w	ip, r4, #20
 8009876:	46ae      	mov	lr, r5
 8009878:	f04f 0a00 	mov.w	sl, #0
 800987c:	f8bc b000 	ldrh.w	fp, [ip]
 8009880:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009884:	fb09 220b 	mla	r2, r9, fp, r2
 8009888:	4492      	add	sl, r2
 800988a:	b289      	uxth	r1, r1
 800988c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009890:	f84e 1b04 	str.w	r1, [lr], #4
 8009894:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009898:	f8be 1000 	ldrh.w	r1, [lr]
 800989c:	0c12      	lsrs	r2, r2, #16
 800989e:	fb09 1102 	mla	r1, r9, r2, r1
 80098a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80098a6:	4567      	cmp	r7, ip
 80098a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098ac:	d8e6      	bhi.n	800987c <__multiply+0x10c>
 80098ae:	9a01      	ldr	r2, [sp, #4]
 80098b0:	50a9      	str	r1, [r5, r2]
 80098b2:	3504      	adds	r5, #4
 80098b4:	e79a      	b.n	80097ec <__multiply+0x7c>
 80098b6:	3e01      	subs	r6, #1
 80098b8:	e79c      	b.n	80097f4 <__multiply+0x84>
 80098ba:	bf00      	nop
 80098bc:	0800b3c5 	.word	0x0800b3c5
 80098c0:	0800b3d6 	.word	0x0800b3d6

080098c4 <__pow5mult>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	4615      	mov	r5, r2
 80098ca:	f012 0203 	ands.w	r2, r2, #3
 80098ce:	4606      	mov	r6, r0
 80098d0:	460f      	mov	r7, r1
 80098d2:	d007      	beq.n	80098e4 <__pow5mult+0x20>
 80098d4:	4c25      	ldr	r4, [pc, #148]	; (800996c <__pow5mult+0xa8>)
 80098d6:	3a01      	subs	r2, #1
 80098d8:	2300      	movs	r3, #0
 80098da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098de:	f7ff fe9b 	bl	8009618 <__multadd>
 80098e2:	4607      	mov	r7, r0
 80098e4:	10ad      	asrs	r5, r5, #2
 80098e6:	d03d      	beq.n	8009964 <__pow5mult+0xa0>
 80098e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098ea:	b97c      	cbnz	r4, 800990c <__pow5mult+0x48>
 80098ec:	2010      	movs	r0, #16
 80098ee:	f7ff fe1d 	bl	800952c <malloc>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6270      	str	r0, [r6, #36]	; 0x24
 80098f6:	b928      	cbnz	r0, 8009904 <__pow5mult+0x40>
 80098f8:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <__pow5mult+0xac>)
 80098fa:	481e      	ldr	r0, [pc, #120]	; (8009974 <__pow5mult+0xb0>)
 80098fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009900:	f001 f930 	bl	800ab64 <__assert_func>
 8009904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009908:	6004      	str	r4, [r0, #0]
 800990a:	60c4      	str	r4, [r0, #12]
 800990c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009914:	b94c      	cbnz	r4, 800992a <__pow5mult+0x66>
 8009916:	f240 2171 	movw	r1, #625	; 0x271
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ff12 	bl	8009744 <__i2b>
 8009920:	2300      	movs	r3, #0
 8009922:	f8c8 0008 	str.w	r0, [r8, #8]
 8009926:	4604      	mov	r4, r0
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	f04f 0900 	mov.w	r9, #0
 800992e:	07eb      	lsls	r3, r5, #31
 8009930:	d50a      	bpl.n	8009948 <__pow5mult+0x84>
 8009932:	4639      	mov	r1, r7
 8009934:	4622      	mov	r2, r4
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ff1a 	bl	8009770 <__multiply>
 800993c:	4639      	mov	r1, r7
 800993e:	4680      	mov	r8, r0
 8009940:	4630      	mov	r0, r6
 8009942:	f7ff fe47 	bl	80095d4 <_Bfree>
 8009946:	4647      	mov	r7, r8
 8009948:	106d      	asrs	r5, r5, #1
 800994a:	d00b      	beq.n	8009964 <__pow5mult+0xa0>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	b938      	cbnz	r0, 8009960 <__pow5mult+0x9c>
 8009950:	4622      	mov	r2, r4
 8009952:	4621      	mov	r1, r4
 8009954:	4630      	mov	r0, r6
 8009956:	f7ff ff0b 	bl	8009770 <__multiply>
 800995a:	6020      	str	r0, [r4, #0]
 800995c:	f8c0 9000 	str.w	r9, [r0]
 8009960:	4604      	mov	r4, r0
 8009962:	e7e4      	b.n	800992e <__pow5mult+0x6a>
 8009964:	4638      	mov	r0, r7
 8009966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800996a:	bf00      	nop
 800996c:	0800b528 	.word	0x0800b528
 8009970:	0800b353 	.word	0x0800b353
 8009974:	0800b3d6 	.word	0x0800b3d6

08009978 <__lshift>:
 8009978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800997c:	460c      	mov	r4, r1
 800997e:	6849      	ldr	r1, [r1, #4]
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	4607      	mov	r7, r0
 800998a:	4691      	mov	r9, r2
 800998c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009990:	f108 0601 	add.w	r6, r8, #1
 8009994:	42b3      	cmp	r3, r6
 8009996:	db0b      	blt.n	80099b0 <__lshift+0x38>
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff fddb 	bl	8009554 <_Balloc>
 800999e:	4605      	mov	r5, r0
 80099a0:	b948      	cbnz	r0, 80099b6 <__lshift+0x3e>
 80099a2:	4602      	mov	r2, r0
 80099a4:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <__lshift+0xd8>)
 80099a6:	482b      	ldr	r0, [pc, #172]	; (8009a54 <__lshift+0xdc>)
 80099a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099ac:	f001 f8da 	bl	800ab64 <__assert_func>
 80099b0:	3101      	adds	r1, #1
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	e7ee      	b.n	8009994 <__lshift+0x1c>
 80099b6:	2300      	movs	r3, #0
 80099b8:	f100 0114 	add.w	r1, r0, #20
 80099bc:	f100 0210 	add.w	r2, r0, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	4553      	cmp	r3, sl
 80099c4:	db37      	blt.n	8009a36 <__lshift+0xbe>
 80099c6:	6920      	ldr	r0, [r4, #16]
 80099c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099cc:	f104 0314 	add.w	r3, r4, #20
 80099d0:	f019 091f 	ands.w	r9, r9, #31
 80099d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80099dc:	d02f      	beq.n	8009a3e <__lshift+0xc6>
 80099de:	f1c9 0e20 	rsb	lr, r9, #32
 80099e2:	468a      	mov	sl, r1
 80099e4:	f04f 0c00 	mov.w	ip, #0
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	fa02 f209 	lsl.w	r2, r2, r9
 80099ee:	ea42 020c 	orr.w	r2, r2, ip
 80099f2:	f84a 2b04 	str.w	r2, [sl], #4
 80099f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fa:	4298      	cmp	r0, r3
 80099fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a00:	d8f2      	bhi.n	80099e8 <__lshift+0x70>
 8009a02:	1b03      	subs	r3, r0, r4
 8009a04:	3b15      	subs	r3, #21
 8009a06:	f023 0303 	bic.w	r3, r3, #3
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	f104 0215 	add.w	r2, r4, #21
 8009a10:	4290      	cmp	r0, r2
 8009a12:	bf38      	it	cc
 8009a14:	2304      	movcc	r3, #4
 8009a16:	f841 c003 	str.w	ip, [r1, r3]
 8009a1a:	f1bc 0f00 	cmp.w	ip, #0
 8009a1e:	d001      	beq.n	8009a24 <__lshift+0xac>
 8009a20:	f108 0602 	add.w	r6, r8, #2
 8009a24:	3e01      	subs	r6, #1
 8009a26:	4638      	mov	r0, r7
 8009a28:	612e      	str	r6, [r5, #16]
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	f7ff fdd2 	bl	80095d4 <_Bfree>
 8009a30:	4628      	mov	r0, r5
 8009a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	e7c1      	b.n	80099c2 <__lshift+0x4a>
 8009a3e:	3904      	subs	r1, #4
 8009a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a48:	4298      	cmp	r0, r3
 8009a4a:	d8f9      	bhi.n	8009a40 <__lshift+0xc8>
 8009a4c:	e7ea      	b.n	8009a24 <__lshift+0xac>
 8009a4e:	bf00      	nop
 8009a50:	0800b3c5 	.word	0x0800b3c5
 8009a54:	0800b3d6 	.word	0x0800b3d6

08009a58 <__mcmp>:
 8009a58:	b530      	push	{r4, r5, lr}
 8009a5a:	6902      	ldr	r2, [r0, #16]
 8009a5c:	690c      	ldr	r4, [r1, #16]
 8009a5e:	1b12      	subs	r2, r2, r4
 8009a60:	d10e      	bne.n	8009a80 <__mcmp+0x28>
 8009a62:	f100 0314 	add.w	r3, r0, #20
 8009a66:	3114      	adds	r1, #20
 8009a68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a78:	42a5      	cmp	r5, r4
 8009a7a:	d003      	beq.n	8009a84 <__mcmp+0x2c>
 8009a7c:	d305      	bcc.n	8009a8a <__mcmp+0x32>
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4610      	mov	r0, r2
 8009a82:	bd30      	pop	{r4, r5, pc}
 8009a84:	4283      	cmp	r3, r0
 8009a86:	d3f3      	bcc.n	8009a70 <__mcmp+0x18>
 8009a88:	e7fa      	b.n	8009a80 <__mcmp+0x28>
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	e7f7      	b.n	8009a80 <__mcmp+0x28>

08009a90 <__mdiff>:
 8009a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	460c      	mov	r4, r1
 8009a96:	4606      	mov	r6, r0
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4690      	mov	r8, r2
 8009a9e:	f7ff ffdb 	bl	8009a58 <__mcmp>
 8009aa2:	1e05      	subs	r5, r0, #0
 8009aa4:	d110      	bne.n	8009ac8 <__mdiff+0x38>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff fd53 	bl	8009554 <_Balloc>
 8009aae:	b930      	cbnz	r0, 8009abe <__mdiff+0x2e>
 8009ab0:	4b3a      	ldr	r3, [pc, #232]	; (8009b9c <__mdiff+0x10c>)
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f240 2132 	movw	r1, #562	; 0x232
 8009ab8:	4839      	ldr	r0, [pc, #228]	; (8009ba0 <__mdiff+0x110>)
 8009aba:	f001 f853 	bl	800ab64 <__assert_func>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac8:	bfa4      	itt	ge
 8009aca:	4643      	movge	r3, r8
 8009acc:	46a0      	movge	r8, r4
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ad4:	bfa6      	itte	ge
 8009ad6:	461c      	movge	r4, r3
 8009ad8:	2500      	movge	r5, #0
 8009ada:	2501      	movlt	r5, #1
 8009adc:	f7ff fd3a 	bl	8009554 <_Balloc>
 8009ae0:	b920      	cbnz	r0, 8009aec <__mdiff+0x5c>
 8009ae2:	4b2e      	ldr	r3, [pc, #184]	; (8009b9c <__mdiff+0x10c>)
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009aea:	e7e5      	b.n	8009ab8 <__mdiff+0x28>
 8009aec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009af0:	6926      	ldr	r6, [r4, #16]
 8009af2:	60c5      	str	r5, [r0, #12]
 8009af4:	f104 0914 	add.w	r9, r4, #20
 8009af8:	f108 0514 	add.w	r5, r8, #20
 8009afc:	f100 0e14 	add.w	lr, r0, #20
 8009b00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b08:	f108 0210 	add.w	r2, r8, #16
 8009b0c:	46f2      	mov	sl, lr
 8009b0e:	2100      	movs	r1, #0
 8009b10:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b18:	fa1f f883 	uxth.w	r8, r3
 8009b1c:	fa11 f18b 	uxtah	r1, r1, fp
 8009b20:	0c1b      	lsrs	r3, r3, #16
 8009b22:	eba1 0808 	sub.w	r8, r1, r8
 8009b26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b2e:	fa1f f888 	uxth.w	r8, r8
 8009b32:	1419      	asrs	r1, r3, #16
 8009b34:	454e      	cmp	r6, r9
 8009b36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b3a:	f84a 3b04 	str.w	r3, [sl], #4
 8009b3e:	d8e7      	bhi.n	8009b10 <__mdiff+0x80>
 8009b40:	1b33      	subs	r3, r6, r4
 8009b42:	3b15      	subs	r3, #21
 8009b44:	f023 0303 	bic.w	r3, r3, #3
 8009b48:	3304      	adds	r3, #4
 8009b4a:	3415      	adds	r4, #21
 8009b4c:	42a6      	cmp	r6, r4
 8009b4e:	bf38      	it	cc
 8009b50:	2304      	movcc	r3, #4
 8009b52:	441d      	add	r5, r3
 8009b54:	4473      	add	r3, lr
 8009b56:	469e      	mov	lr, r3
 8009b58:	462e      	mov	r6, r5
 8009b5a:	4566      	cmp	r6, ip
 8009b5c:	d30e      	bcc.n	8009b7c <__mdiff+0xec>
 8009b5e:	f10c 0203 	add.w	r2, ip, #3
 8009b62:	1b52      	subs	r2, r2, r5
 8009b64:	f022 0203 	bic.w	r2, r2, #3
 8009b68:	3d03      	subs	r5, #3
 8009b6a:	45ac      	cmp	ip, r5
 8009b6c:	bf38      	it	cc
 8009b6e:	2200      	movcc	r2, #0
 8009b70:	441a      	add	r2, r3
 8009b72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b76:	b17b      	cbz	r3, 8009b98 <__mdiff+0x108>
 8009b78:	6107      	str	r7, [r0, #16]
 8009b7a:	e7a3      	b.n	8009ac4 <__mdiff+0x34>
 8009b7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b80:	fa11 f288 	uxtah	r2, r1, r8
 8009b84:	1414      	asrs	r4, r2, #16
 8009b86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b8a:	b292      	uxth	r2, r2
 8009b8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b90:	f84e 2b04 	str.w	r2, [lr], #4
 8009b94:	1421      	asrs	r1, r4, #16
 8009b96:	e7e0      	b.n	8009b5a <__mdiff+0xca>
 8009b98:	3f01      	subs	r7, #1
 8009b9a:	e7ea      	b.n	8009b72 <__mdiff+0xe2>
 8009b9c:	0800b3c5 	.word	0x0800b3c5
 8009ba0:	0800b3d6 	.word	0x0800b3d6

08009ba4 <__d2b>:
 8009ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4689      	mov	r9, r1
 8009baa:	2101      	movs	r1, #1
 8009bac:	ec57 6b10 	vmov	r6, r7, d0
 8009bb0:	4690      	mov	r8, r2
 8009bb2:	f7ff fccf 	bl	8009554 <_Balloc>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	b930      	cbnz	r0, 8009bc8 <__d2b+0x24>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <__d2b+0xb0>)
 8009bbe:	4826      	ldr	r0, [pc, #152]	; (8009c58 <__d2b+0xb4>)
 8009bc0:	f240 310a 	movw	r1, #778	; 0x30a
 8009bc4:	f000 ffce 	bl	800ab64 <__assert_func>
 8009bc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bd0:	bb35      	cbnz	r5, 8009c20 <__d2b+0x7c>
 8009bd2:	2e00      	cmp	r6, #0
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	d028      	beq.n	8009c2a <__d2b+0x86>
 8009bd8:	4668      	mov	r0, sp
 8009bda:	9600      	str	r6, [sp, #0]
 8009bdc:	f7ff fd82 	bl	80096e4 <__lo0bits>
 8009be0:	9900      	ldr	r1, [sp, #0]
 8009be2:	b300      	cbz	r0, 8009c26 <__d2b+0x82>
 8009be4:	9a01      	ldr	r2, [sp, #4]
 8009be6:	f1c0 0320 	rsb	r3, r0, #32
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	40c2      	lsrs	r2, r0
 8009bf2:	6163      	str	r3, [r4, #20]
 8009bf4:	9201      	str	r2, [sp, #4]
 8009bf6:	9b01      	ldr	r3, [sp, #4]
 8009bf8:	61a3      	str	r3, [r4, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf14      	ite	ne
 8009bfe:	2202      	movne	r2, #2
 8009c00:	2201      	moveq	r2, #1
 8009c02:	6122      	str	r2, [r4, #16]
 8009c04:	b1d5      	cbz	r5, 8009c3c <__d2b+0x98>
 8009c06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c0a:	4405      	add	r5, r0
 8009c0c:	f8c9 5000 	str.w	r5, [r9]
 8009c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c14:	f8c8 0000 	str.w	r0, [r8]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	b003      	add	sp, #12
 8009c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c24:	e7d5      	b.n	8009bd2 <__d2b+0x2e>
 8009c26:	6161      	str	r1, [r4, #20]
 8009c28:	e7e5      	b.n	8009bf6 <__d2b+0x52>
 8009c2a:	a801      	add	r0, sp, #4
 8009c2c:	f7ff fd5a 	bl	80096e4 <__lo0bits>
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	6163      	str	r3, [r4, #20]
 8009c34:	2201      	movs	r2, #1
 8009c36:	6122      	str	r2, [r4, #16]
 8009c38:	3020      	adds	r0, #32
 8009c3a:	e7e3      	b.n	8009c04 <__d2b+0x60>
 8009c3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c44:	f8c9 0000 	str.w	r0, [r9]
 8009c48:	6918      	ldr	r0, [r3, #16]
 8009c4a:	f7ff fd2b 	bl	80096a4 <__hi0bits>
 8009c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c52:	e7df      	b.n	8009c14 <__d2b+0x70>
 8009c54:	0800b3c5 	.word	0x0800b3c5
 8009c58:	0800b3d6 	.word	0x0800b3d6

08009c5c <_calloc_r>:
 8009c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c5e:	fba1 2402 	umull	r2, r4, r1, r2
 8009c62:	b94c      	cbnz	r4, 8009c78 <_calloc_r+0x1c>
 8009c64:	4611      	mov	r1, r2
 8009c66:	9201      	str	r2, [sp, #4]
 8009c68:	f7fd fcaa 	bl	80075c0 <_malloc_r>
 8009c6c:	9a01      	ldr	r2, [sp, #4]
 8009c6e:	4605      	mov	r5, r0
 8009c70:	b930      	cbnz	r0, 8009c80 <_calloc_r+0x24>
 8009c72:	4628      	mov	r0, r5
 8009c74:	b003      	add	sp, #12
 8009c76:	bd30      	pop	{r4, r5, pc}
 8009c78:	220c      	movs	r2, #12
 8009c7a:	6002      	str	r2, [r0, #0]
 8009c7c:	2500      	movs	r5, #0
 8009c7e:	e7f8      	b.n	8009c72 <_calloc_r+0x16>
 8009c80:	4621      	mov	r1, r4
 8009c82:	f7fd fc74 	bl	800756e <memset>
 8009c86:	e7f4      	b.n	8009c72 <_calloc_r+0x16>

08009c88 <_free_r>:
 8009c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d044      	beq.n	8009d18 <_free_r+0x90>
 8009c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c92:	9001      	str	r0, [sp, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f1a1 0404 	sub.w	r4, r1, #4
 8009c9a:	bfb8      	it	lt
 8009c9c:	18e4      	addlt	r4, r4, r3
 8009c9e:	f7ff fc4d 	bl	800953c <__malloc_lock>
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	; (8009d1c <_free_r+0x94>)
 8009ca4:	9801      	ldr	r0, [sp, #4]
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	b933      	cbnz	r3, 8009cb8 <_free_r+0x30>
 8009caa:	6063      	str	r3, [r4, #4]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cb4:	f7ff bc48 	b.w	8009548 <__malloc_unlock>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d908      	bls.n	8009cce <_free_r+0x46>
 8009cbc:	6825      	ldr	r5, [r4, #0]
 8009cbe:	1961      	adds	r1, r4, r5
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf01      	itttt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	1949      	addeq	r1, r1, r5
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	e7ed      	b.n	8009caa <_free_r+0x22>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x50>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x46>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1855      	adds	r5, r2, r1
 8009cdc:	42a5      	cmp	r5, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x70>
 8009ce0:	6824      	ldr	r4, [r4, #0]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	1854      	adds	r4, r2, r1
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	d1e0      	bne.n	8009cae <_free_r+0x26>
 8009cec:	681c      	ldr	r4, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	6053      	str	r3, [r2, #4]
 8009cf2:	4421      	add	r1, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	e7da      	b.n	8009cae <_free_r+0x26>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x78>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	e7d6      	b.n	8009cae <_free_r+0x26>
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1961      	adds	r1, r4, r5
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf04      	itt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	bf04      	itt	eq
 8009d10:	1949      	addeq	r1, r1, r5
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	6054      	str	r4, [r2, #4]
 8009d16:	e7ca      	b.n	8009cae <_free_r+0x26>
 8009d18:	b003      	add	sp, #12
 8009d1a:	bd30      	pop	{r4, r5, pc}
 8009d1c:	200044b4 	.word	0x200044b4

08009d20 <__sfputc_r>:
 8009d20:	6893      	ldr	r3, [r2, #8]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	b410      	push	{r4}
 8009d28:	6093      	str	r3, [r2, #8]
 8009d2a:	da08      	bge.n	8009d3e <__sfputc_r+0x1e>
 8009d2c:	6994      	ldr	r4, [r2, #24]
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	db01      	blt.n	8009d36 <__sfputc_r+0x16>
 8009d32:	290a      	cmp	r1, #10
 8009d34:	d103      	bne.n	8009d3e <__sfputc_r+0x1e>
 8009d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d3a:	f7fe bb49 	b.w	80083d0 <__swbuf_r>
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	1c58      	adds	r0, r3, #1
 8009d42:	6010      	str	r0, [r2, #0]
 8009d44:	7019      	strb	r1, [r3, #0]
 8009d46:	4608      	mov	r0, r1
 8009d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <__sfputs_r>:
 8009d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d50:	4606      	mov	r6, r0
 8009d52:	460f      	mov	r7, r1
 8009d54:	4614      	mov	r4, r2
 8009d56:	18d5      	adds	r5, r2, r3
 8009d58:	42ac      	cmp	r4, r5
 8009d5a:	d101      	bne.n	8009d60 <__sfputs_r+0x12>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e007      	b.n	8009d70 <__sfputs_r+0x22>
 8009d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d64:	463a      	mov	r2, r7
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7ff ffda 	bl	8009d20 <__sfputc_r>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d1f3      	bne.n	8009d58 <__sfputs_r+0xa>
 8009d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d74 <_vfiprintf_r>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	460d      	mov	r5, r1
 8009d7a:	b09d      	sub	sp, #116	; 0x74
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	4698      	mov	r8, r3
 8009d80:	4606      	mov	r6, r0
 8009d82:	b118      	cbz	r0, 8009d8c <_vfiprintf_r+0x18>
 8009d84:	6983      	ldr	r3, [r0, #24]
 8009d86:	b90b      	cbnz	r3, 8009d8c <_vfiprintf_r+0x18>
 8009d88:	f7fd fb02 	bl	8007390 <__sinit>
 8009d8c:	4b89      	ldr	r3, [pc, #548]	; (8009fb4 <_vfiprintf_r+0x240>)
 8009d8e:	429d      	cmp	r5, r3
 8009d90:	d11b      	bne.n	8009dca <_vfiprintf_r+0x56>
 8009d92:	6875      	ldr	r5, [r6, #4]
 8009d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d96:	07d9      	lsls	r1, r3, #31
 8009d98:	d405      	bmi.n	8009da6 <_vfiprintf_r+0x32>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	059a      	lsls	r2, r3, #22
 8009d9e:	d402      	bmi.n	8009da6 <_vfiprintf_r+0x32>
 8009da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009da2:	f7fd fbd4 	bl	800754e <__retarget_lock_acquire_recursive>
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	071b      	lsls	r3, r3, #28
 8009daa:	d501      	bpl.n	8009db0 <_vfiprintf_r+0x3c>
 8009dac:	692b      	ldr	r3, [r5, #16]
 8009dae:	b9eb      	cbnz	r3, 8009dec <_vfiprintf_r+0x78>
 8009db0:	4629      	mov	r1, r5
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7fe fb70 	bl	8008498 <__swsetup_r>
 8009db8:	b1c0      	cbz	r0, 8009dec <_vfiprintf_r+0x78>
 8009dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dbc:	07dc      	lsls	r4, r3, #31
 8009dbe:	d50e      	bpl.n	8009dde <_vfiprintf_r+0x6a>
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	b01d      	add	sp, #116	; 0x74
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	4b7b      	ldr	r3, [pc, #492]	; (8009fb8 <_vfiprintf_r+0x244>)
 8009dcc:	429d      	cmp	r5, r3
 8009dce:	d101      	bne.n	8009dd4 <_vfiprintf_r+0x60>
 8009dd0:	68b5      	ldr	r5, [r6, #8]
 8009dd2:	e7df      	b.n	8009d94 <_vfiprintf_r+0x20>
 8009dd4:	4b79      	ldr	r3, [pc, #484]	; (8009fbc <_vfiprintf_r+0x248>)
 8009dd6:	429d      	cmp	r5, r3
 8009dd8:	bf08      	it	eq
 8009dda:	68f5      	ldreq	r5, [r6, #12]
 8009ddc:	e7da      	b.n	8009d94 <_vfiprintf_r+0x20>
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	0598      	lsls	r0, r3, #22
 8009de2:	d4ed      	bmi.n	8009dc0 <_vfiprintf_r+0x4c>
 8009de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de6:	f7fd fbb3 	bl	8007550 <__retarget_lock_release_recursive>
 8009dea:	e7e9      	b.n	8009dc0 <_vfiprintf_r+0x4c>
 8009dec:	2300      	movs	r3, #0
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	2320      	movs	r3, #32
 8009df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfa:	2330      	movs	r3, #48	; 0x30
 8009dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fc0 <_vfiprintf_r+0x24c>
 8009e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e04:	f04f 0901 	mov.w	r9, #1
 8009e08:	4623      	mov	r3, r4
 8009e0a:	469a      	mov	sl, r3
 8009e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e10:	b10a      	cbz	r2, 8009e16 <_vfiprintf_r+0xa2>
 8009e12:	2a25      	cmp	r2, #37	; 0x25
 8009e14:	d1f9      	bne.n	8009e0a <_vfiprintf_r+0x96>
 8009e16:	ebba 0b04 	subs.w	fp, sl, r4
 8009e1a:	d00b      	beq.n	8009e34 <_vfiprintf_r+0xc0>
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4629      	mov	r1, r5
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ff93 	bl	8009d4e <__sfputs_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f000 80aa 	beq.w	8009f82 <_vfiprintf_r+0x20e>
 8009e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e30:	445a      	add	r2, fp
 8009e32:	9209      	str	r2, [sp, #36]	; 0x24
 8009e34:	f89a 3000 	ldrb.w	r3, [sl]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 80a2 	beq.w	8009f82 <_vfiprintf_r+0x20e>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e48:	f10a 0a01 	add.w	sl, sl, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	9307      	str	r3, [sp, #28]
 8009e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e54:	931a      	str	r3, [sp, #104]	; 0x68
 8009e56:	4654      	mov	r4, sl
 8009e58:	2205      	movs	r2, #5
 8009e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5e:	4858      	ldr	r0, [pc, #352]	; (8009fc0 <_vfiprintf_r+0x24c>)
 8009e60:	f7f6 f9de 	bl	8000220 <memchr>
 8009e64:	9a04      	ldr	r2, [sp, #16]
 8009e66:	b9d8      	cbnz	r0, 8009ea0 <_vfiprintf_r+0x12c>
 8009e68:	06d1      	lsls	r1, r2, #27
 8009e6a:	bf44      	itt	mi
 8009e6c:	2320      	movmi	r3, #32
 8009e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e72:	0713      	lsls	r3, r2, #28
 8009e74:	bf44      	itt	mi
 8009e76:	232b      	movmi	r3, #43	; 0x2b
 8009e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b2a      	cmp	r3, #42	; 0x2a
 8009e82:	d015      	beq.n	8009eb0 <_vfiprintf_r+0x13c>
 8009e84:	9a07      	ldr	r2, [sp, #28]
 8009e86:	4654      	mov	r4, sl
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f04f 0c0a 	mov.w	ip, #10
 8009e8e:	4621      	mov	r1, r4
 8009e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e94:	3b30      	subs	r3, #48	; 0x30
 8009e96:	2b09      	cmp	r3, #9
 8009e98:	d94e      	bls.n	8009f38 <_vfiprintf_r+0x1c4>
 8009e9a:	b1b0      	cbz	r0, 8009eca <_vfiprintf_r+0x156>
 8009e9c:	9207      	str	r2, [sp, #28]
 8009e9e:	e014      	b.n	8009eca <_vfiprintf_r+0x156>
 8009ea0:	eba0 0308 	sub.w	r3, r0, r8
 8009ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	46a2      	mov	sl, r4
 8009eae:	e7d2      	b.n	8009e56 <_vfiprintf_r+0xe2>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	1d19      	adds	r1, r3, #4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	9103      	str	r1, [sp, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfbb      	ittet	lt
 8009ebc:	425b      	neglt	r3, r3
 8009ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec2:	9307      	strge	r3, [sp, #28]
 8009ec4:	9307      	strlt	r3, [sp, #28]
 8009ec6:	bfb8      	it	lt
 8009ec8:	9204      	strlt	r2, [sp, #16]
 8009eca:	7823      	ldrb	r3, [r4, #0]
 8009ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ece:	d10c      	bne.n	8009eea <_vfiprintf_r+0x176>
 8009ed0:	7863      	ldrb	r3, [r4, #1]
 8009ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed4:	d135      	bne.n	8009f42 <_vfiprintf_r+0x1ce>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	1d1a      	adds	r2, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9203      	str	r2, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfb8      	it	lt
 8009ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee6:	3402      	adds	r4, #2
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fd0 <_vfiprintf_r+0x25c>
 8009eee:	7821      	ldrb	r1, [r4, #0]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	f7f6 f994 	bl	8000220 <memchr>
 8009ef8:	b140      	cbz	r0, 8009f0c <_vfiprintf_r+0x198>
 8009efa:	2340      	movs	r3, #64	; 0x40
 8009efc:	eba0 000a 	sub.w	r0, r0, sl
 8009f00:	fa03 f000 	lsl.w	r0, r3, r0
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	4303      	orrs	r3, r0
 8009f08:	3401      	adds	r4, #1
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f10:	482c      	ldr	r0, [pc, #176]	; (8009fc4 <_vfiprintf_r+0x250>)
 8009f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f16:	2206      	movs	r2, #6
 8009f18:	f7f6 f982 	bl	8000220 <memchr>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d03f      	beq.n	8009fa0 <_vfiprintf_r+0x22c>
 8009f20:	4b29      	ldr	r3, [pc, #164]	; (8009fc8 <_vfiprintf_r+0x254>)
 8009f22:	bb1b      	cbnz	r3, 8009f6c <_vfiprintf_r+0x1f8>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	3307      	adds	r3, #7
 8009f28:	f023 0307 	bic.w	r3, r3, #7
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f32:	443b      	add	r3, r7
 8009f34:	9309      	str	r3, [sp, #36]	; 0x24
 8009f36:	e767      	b.n	8009e08 <_vfiprintf_r+0x94>
 8009f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	2001      	movs	r0, #1
 8009f40:	e7a5      	b.n	8009e8e <_vfiprintf_r+0x11a>
 8009f42:	2300      	movs	r3, #0
 8009f44:	3401      	adds	r4, #1
 8009f46:	9305      	str	r3, [sp, #20]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	f04f 0c0a 	mov.w	ip, #10
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f54:	3a30      	subs	r2, #48	; 0x30
 8009f56:	2a09      	cmp	r2, #9
 8009f58:	d903      	bls.n	8009f62 <_vfiprintf_r+0x1ee>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0c5      	beq.n	8009eea <_vfiprintf_r+0x176>
 8009f5e:	9105      	str	r1, [sp, #20]
 8009f60:	e7c3      	b.n	8009eea <_vfiprintf_r+0x176>
 8009f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f66:	4604      	mov	r4, r0
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e7f0      	b.n	8009f4e <_vfiprintf_r+0x1da>
 8009f6c:	ab03      	add	r3, sp, #12
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	462a      	mov	r2, r5
 8009f72:	4b16      	ldr	r3, [pc, #88]	; (8009fcc <_vfiprintf_r+0x258>)
 8009f74:	a904      	add	r1, sp, #16
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7fd fc36 	bl	80077e8 <_printf_float>
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	1c78      	adds	r0, r7, #1
 8009f80:	d1d6      	bne.n	8009f30 <_vfiprintf_r+0x1bc>
 8009f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f84:	07d9      	lsls	r1, r3, #31
 8009f86:	d405      	bmi.n	8009f94 <_vfiprintf_r+0x220>
 8009f88:	89ab      	ldrh	r3, [r5, #12]
 8009f8a:	059a      	lsls	r2, r3, #22
 8009f8c:	d402      	bmi.n	8009f94 <_vfiprintf_r+0x220>
 8009f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f90:	f7fd fade 	bl	8007550 <__retarget_lock_release_recursive>
 8009f94:	89ab      	ldrh	r3, [r5, #12]
 8009f96:	065b      	lsls	r3, r3, #25
 8009f98:	f53f af12 	bmi.w	8009dc0 <_vfiprintf_r+0x4c>
 8009f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f9e:	e711      	b.n	8009dc4 <_vfiprintf_r+0x50>
 8009fa0:	ab03      	add	r3, sp, #12
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	462a      	mov	r2, r5
 8009fa6:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <_vfiprintf_r+0x258>)
 8009fa8:	a904      	add	r1, sp, #16
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7fd fec0 	bl	8007d30 <_printf_i>
 8009fb0:	e7e4      	b.n	8009f7c <_vfiprintf_r+0x208>
 8009fb2:	bf00      	nop
 8009fb4:	0800b2d0 	.word	0x0800b2d0
 8009fb8:	0800b2f0 	.word	0x0800b2f0
 8009fbc:	0800b2b0 	.word	0x0800b2b0
 8009fc0:	0800b534 	.word	0x0800b534
 8009fc4:	0800b53e 	.word	0x0800b53e
 8009fc8:	080077e9 	.word	0x080077e9
 8009fcc:	08009d4f 	.word	0x08009d4f
 8009fd0:	0800b53a 	.word	0x0800b53a

08009fd4 <__svfiscanf_r>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	461d      	mov	r5, r3
 8009fda:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009fdc:	07df      	lsls	r7, r3, #31
 8009fde:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	4692      	mov	sl, r2
 8009fe8:	d405      	bmi.n	8009ff6 <__svfiscanf_r+0x22>
 8009fea:	898b      	ldrh	r3, [r1, #12]
 8009fec:	0598      	lsls	r0, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <__svfiscanf_r+0x22>
 8009ff0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8009ff2:	f7fd faac 	bl	800754e <__retarget_lock_acquire_recursive>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8009ffc:	4ba6      	ldr	r3, [pc, #664]	; (800a298 <__svfiscanf_r+0x2c4>)
 8009ffe:	93a0      	str	r3, [sp, #640]	; 0x280
 800a000:	f10d 0804 	add.w	r8, sp, #4
 800a004:	4ba5      	ldr	r3, [pc, #660]	; (800a29c <__svfiscanf_r+0x2c8>)
 800a006:	4fa6      	ldr	r7, [pc, #664]	; (800a2a0 <__svfiscanf_r+0x2cc>)
 800a008:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a2a4 <__svfiscanf_r+0x2d0>
 800a00c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a010:	93a1      	str	r3, [sp, #644]	; 0x284
 800a012:	9500      	str	r5, [sp, #0]
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 8173 	beq.w	800a304 <__svfiscanf_r+0x330>
 800a01e:	5dd9      	ldrb	r1, [r3, r7]
 800a020:	f011 0108 	ands.w	r1, r1, #8
 800a024:	f10a 0501 	add.w	r5, sl, #1
 800a028:	d019      	beq.n	800a05e <__svfiscanf_r+0x8a>
 800a02a:	6863      	ldr	r3, [r4, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd0f      	ble.n	800a050 <__svfiscanf_r+0x7c>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	5cba      	ldrb	r2, [r7, r2]
 800a036:	0711      	lsls	r1, r2, #28
 800a038:	d401      	bmi.n	800a03e <__svfiscanf_r+0x6a>
 800a03a:	46aa      	mov	sl, r5
 800a03c:	e7ea      	b.n	800a014 <__svfiscanf_r+0x40>
 800a03e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a040:	3201      	adds	r2, #1
 800a042:	9245      	str	r2, [sp, #276]	; 0x114
 800a044:	6862      	ldr	r2, [r4, #4]
 800a046:	3301      	adds	r3, #1
 800a048:	3a01      	subs	r2, #1
 800a04a:	6062      	str	r2, [r4, #4]
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	e7ec      	b.n	800a02a <__svfiscanf_r+0x56>
 800a050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a052:	4621      	mov	r1, r4
 800a054:	4630      	mov	r0, r6
 800a056:	4798      	blx	r3
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0e9      	beq.n	800a030 <__svfiscanf_r+0x5c>
 800a05c:	e7ed      	b.n	800a03a <__svfiscanf_r+0x66>
 800a05e:	2b25      	cmp	r3, #37	; 0x25
 800a060:	d012      	beq.n	800a088 <__svfiscanf_r+0xb4>
 800a062:	469a      	mov	sl, r3
 800a064:	6863      	ldr	r3, [r4, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f340 8095 	ble.w	800a196 <__svfiscanf_r+0x1c2>
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	7813      	ldrb	r3, [r2, #0]
 800a070:	4553      	cmp	r3, sl
 800a072:	f040 8147 	bne.w	800a304 <__svfiscanf_r+0x330>
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	3b01      	subs	r3, #1
 800a07a:	6063      	str	r3, [r4, #4]
 800a07c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a07e:	3201      	adds	r2, #1
 800a080:	3301      	adds	r3, #1
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	9345      	str	r3, [sp, #276]	; 0x114
 800a086:	e7d8      	b.n	800a03a <__svfiscanf_r+0x66>
 800a088:	9141      	str	r1, [sp, #260]	; 0x104
 800a08a:	9143      	str	r1, [sp, #268]	; 0x10c
 800a08c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a090:	2b2a      	cmp	r3, #42	; 0x2a
 800a092:	bf02      	ittt	eq
 800a094:	2310      	moveq	r3, #16
 800a096:	9341      	streq	r3, [sp, #260]	; 0x104
 800a098:	f10a 0502 	addeq.w	r5, sl, #2
 800a09c:	220a      	movs	r2, #10
 800a09e:	46aa      	mov	sl, r5
 800a0a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a0a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d91e      	bls.n	800a0ea <__svfiscanf_r+0x116>
 800a0ac:	487d      	ldr	r0, [pc, #500]	; (800a2a4 <__svfiscanf_r+0x2d0>)
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	f7f6 f8b6 	bl	8000220 <memchr>
 800a0b4:	b140      	cbz	r0, 800a0c8 <__svfiscanf_r+0xf4>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	eba0 0009 	sub.w	r0, r0, r9
 800a0bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a0c2:	4318      	orrs	r0, r3
 800a0c4:	9041      	str	r0, [sp, #260]	; 0x104
 800a0c6:	4655      	mov	r5, sl
 800a0c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0cc:	2b78      	cmp	r3, #120	; 0x78
 800a0ce:	d807      	bhi.n	800a0e0 <__svfiscanf_r+0x10c>
 800a0d0:	2b57      	cmp	r3, #87	; 0x57
 800a0d2:	d811      	bhi.n	800a0f8 <__svfiscanf_r+0x124>
 800a0d4:	2b25      	cmp	r3, #37	; 0x25
 800a0d6:	d0c4      	beq.n	800a062 <__svfiscanf_r+0x8e>
 800a0d8:	d858      	bhi.n	800a18c <__svfiscanf_r+0x1b8>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 80c8 	beq.w	800a270 <__svfiscanf_r+0x29c>
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a0e4:	230a      	movs	r3, #10
 800a0e6:	9342      	str	r3, [sp, #264]	; 0x108
 800a0e8:	e07c      	b.n	800a1e4 <__svfiscanf_r+0x210>
 800a0ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a0ec:	fb02 1103 	mla	r1, r2, r3, r1
 800a0f0:	3930      	subs	r1, #48	; 0x30
 800a0f2:	9143      	str	r1, [sp, #268]	; 0x10c
 800a0f4:	4655      	mov	r5, sl
 800a0f6:	e7d2      	b.n	800a09e <__svfiscanf_r+0xca>
 800a0f8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a0fc:	2a20      	cmp	r2, #32
 800a0fe:	d8ef      	bhi.n	800a0e0 <__svfiscanf_r+0x10c>
 800a100:	a101      	add	r1, pc, #4	; (adr r1, 800a108 <__svfiscanf_r+0x134>)
 800a102:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a1cf 	.word	0x0800a1cf
 800a10c:	0800a0e1 	.word	0x0800a0e1
 800a110:	0800a0e1 	.word	0x0800a0e1
 800a114:	0800a22d 	.word	0x0800a22d
 800a118:	0800a0e1 	.word	0x0800a0e1
 800a11c:	0800a0e1 	.word	0x0800a0e1
 800a120:	0800a0e1 	.word	0x0800a0e1
 800a124:	0800a0e1 	.word	0x0800a0e1
 800a128:	0800a0e1 	.word	0x0800a0e1
 800a12c:	0800a0e1 	.word	0x0800a0e1
 800a130:	0800a0e1 	.word	0x0800a0e1
 800a134:	0800a243 	.word	0x0800a243
 800a138:	0800a219 	.word	0x0800a219
 800a13c:	0800a193 	.word	0x0800a193
 800a140:	0800a193 	.word	0x0800a193
 800a144:	0800a193 	.word	0x0800a193
 800a148:	0800a0e1 	.word	0x0800a0e1
 800a14c:	0800a21d 	.word	0x0800a21d
 800a150:	0800a0e1 	.word	0x0800a0e1
 800a154:	0800a0e1 	.word	0x0800a0e1
 800a158:	0800a0e1 	.word	0x0800a0e1
 800a15c:	0800a0e1 	.word	0x0800a0e1
 800a160:	0800a253 	.word	0x0800a253
 800a164:	0800a225 	.word	0x0800a225
 800a168:	0800a1c7 	.word	0x0800a1c7
 800a16c:	0800a0e1 	.word	0x0800a0e1
 800a170:	0800a0e1 	.word	0x0800a0e1
 800a174:	0800a24f 	.word	0x0800a24f
 800a178:	0800a0e1 	.word	0x0800a0e1
 800a17c:	0800a219 	.word	0x0800a219
 800a180:	0800a0e1 	.word	0x0800a0e1
 800a184:	0800a0e1 	.word	0x0800a0e1
 800a188:	0800a1cf 	.word	0x0800a1cf
 800a18c:	3b45      	subs	r3, #69	; 0x45
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d8a6      	bhi.n	800a0e0 <__svfiscanf_r+0x10c>
 800a192:	2305      	movs	r3, #5
 800a194:	e025      	b.n	800a1e2 <__svfiscanf_r+0x20e>
 800a196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a198:	4621      	mov	r1, r4
 800a19a:	4630      	mov	r0, r6
 800a19c:	4798      	blx	r3
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f43f af64 	beq.w	800a06c <__svfiscanf_r+0x98>
 800a1a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a6:	07da      	lsls	r2, r3, #31
 800a1a8:	f140 80a4 	bpl.w	800a2f4 <__svfiscanf_r+0x320>
 800a1ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d067      	beq.n	800a282 <__svfiscanf_r+0x2ae>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a1b8:	bf18      	it	ne
 800a1ba:	f04f 30ff 	movne.w	r0, #4294967295
 800a1be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a1c8:	f042 0220 	orr.w	r2, r2, #32
 800a1cc:	9241      	str	r2, [sp, #260]	; 0x104
 800a1ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d4:	9241      	str	r2, [sp, #260]	; 0x104
 800a1d6:	2210      	movs	r2, #16
 800a1d8:	2b6f      	cmp	r3, #111	; 0x6f
 800a1da:	9242      	str	r2, [sp, #264]	; 0x108
 800a1dc:	bf34      	ite	cc
 800a1de:	2303      	movcc	r3, #3
 800a1e0:	2304      	movcs	r3, #4
 800a1e2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a1e4:	6863      	ldr	r3, [r4, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dd4e      	ble.n	800a288 <__svfiscanf_r+0x2b4>
 800a1ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1ec:	065b      	lsls	r3, r3, #25
 800a1ee:	d404      	bmi.n	800a1fa <__svfiscanf_r+0x226>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	5cba      	ldrb	r2, [r7, r2]
 800a1f6:	0710      	lsls	r0, r2, #28
 800a1f8:	d456      	bmi.n	800a2a8 <__svfiscanf_r+0x2d4>
 800a1fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	dc65      	bgt.n	800a2cc <__svfiscanf_r+0x2f8>
 800a200:	466b      	mov	r3, sp
 800a202:	4622      	mov	r2, r4
 800a204:	a941      	add	r1, sp, #260	; 0x104
 800a206:	4630      	mov	r0, r6
 800a208:	f000 f8b2 	bl	800a370 <_scanf_chars>
 800a20c:	2801      	cmp	r0, #1
 800a20e:	d079      	beq.n	800a304 <__svfiscanf_r+0x330>
 800a210:	2802      	cmp	r0, #2
 800a212:	f47f af12 	bne.w	800a03a <__svfiscanf_r+0x66>
 800a216:	e7c5      	b.n	800a1a4 <__svfiscanf_r+0x1d0>
 800a218:	220a      	movs	r2, #10
 800a21a:	e7dd      	b.n	800a1d8 <__svfiscanf_r+0x204>
 800a21c:	2300      	movs	r3, #0
 800a21e:	9342      	str	r3, [sp, #264]	; 0x108
 800a220:	2303      	movs	r3, #3
 800a222:	e7de      	b.n	800a1e2 <__svfiscanf_r+0x20e>
 800a224:	2308      	movs	r3, #8
 800a226:	9342      	str	r3, [sp, #264]	; 0x108
 800a228:	2304      	movs	r3, #4
 800a22a:	e7da      	b.n	800a1e2 <__svfiscanf_r+0x20e>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4640      	mov	r0, r8
 800a230:	f000 fa96 	bl	800a760 <__sccl>
 800a234:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a23a:	9341      	str	r3, [sp, #260]	; 0x104
 800a23c:	4605      	mov	r5, r0
 800a23e:	2301      	movs	r3, #1
 800a240:	e7cf      	b.n	800a1e2 <__svfiscanf_r+0x20e>
 800a242:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a248:	9341      	str	r3, [sp, #260]	; 0x104
 800a24a:	2300      	movs	r3, #0
 800a24c:	e7c9      	b.n	800a1e2 <__svfiscanf_r+0x20e>
 800a24e:	2302      	movs	r3, #2
 800a250:	e7c7      	b.n	800a1e2 <__svfiscanf_r+0x20e>
 800a252:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a254:	06c3      	lsls	r3, r0, #27
 800a256:	f53f aef0 	bmi.w	800a03a <__svfiscanf_r+0x66>
 800a25a:	9b00      	ldr	r3, [sp, #0]
 800a25c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a25e:	1d19      	adds	r1, r3, #4
 800a260:	9100      	str	r1, [sp, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f010 0f01 	tst.w	r0, #1
 800a268:	bf14      	ite	ne
 800a26a:	801a      	strhne	r2, [r3, #0]
 800a26c:	601a      	streq	r2, [r3, #0]
 800a26e:	e6e4      	b.n	800a03a <__svfiscanf_r+0x66>
 800a270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a272:	07d8      	lsls	r0, r3, #31
 800a274:	d405      	bmi.n	800a282 <__svfiscanf_r+0x2ae>
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	0599      	lsls	r1, r3, #22
 800a27a:	d402      	bmi.n	800a282 <__svfiscanf_r+0x2ae>
 800a27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27e:	f7fd f967 	bl	8007550 <__retarget_lock_release_recursive>
 800a282:	f04f 30ff 	mov.w	r0, #4294967295
 800a286:	e79a      	b.n	800a1be <__svfiscanf_r+0x1ea>
 800a288:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a28a:	4621      	mov	r1, r4
 800a28c:	4630      	mov	r0, r6
 800a28e:	4798      	blx	r3
 800a290:	2800      	cmp	r0, #0
 800a292:	d0aa      	beq.n	800a1ea <__svfiscanf_r+0x216>
 800a294:	e786      	b.n	800a1a4 <__svfiscanf_r+0x1d0>
 800a296:	bf00      	nop
 800a298:	0800aa35 	.word	0x0800aa35
 800a29c:	0800a64d 	.word	0x0800a64d
 800a2a0:	0800b59d 	.word	0x0800b59d
 800a2a4:	0800b53a 	.word	0x0800b53a
 800a2a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2aa:	3201      	adds	r2, #1
 800a2ac:	9245      	str	r2, [sp, #276]	; 0x114
 800a2ae:	6862      	ldr	r2, [r4, #4]
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	6062      	str	r2, [r4, #4]
 800a2b6:	dd02      	ble.n	800a2be <__svfiscanf_r+0x2ea>
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	e798      	b.n	800a1f0 <__svfiscanf_r+0x21c>
 800a2be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	4798      	blx	r3
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d092      	beq.n	800a1f0 <__svfiscanf_r+0x21c>
 800a2ca:	e76b      	b.n	800a1a4 <__svfiscanf_r+0x1d0>
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	dc06      	bgt.n	800a2de <__svfiscanf_r+0x30a>
 800a2d0:	466b      	mov	r3, sp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	a941      	add	r1, sp, #260	; 0x104
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f000 f8a4 	bl	800a424 <_scanf_i>
 800a2dc:	e796      	b.n	800a20c <__svfiscanf_r+0x238>
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <__svfiscanf_r+0x348>)
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f43f aeaa 	beq.w	800a03a <__svfiscanf_r+0x66>
 800a2e6:	466b      	mov	r3, sp
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	a941      	add	r1, sp, #260	; 0x104
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f3af 8000 	nop.w
 800a2f2:	e78b      	b.n	800a20c <__svfiscanf_r+0x238>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	0599      	lsls	r1, r3, #22
 800a2f8:	f53f af58 	bmi.w	800a1ac <__svfiscanf_r+0x1d8>
 800a2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2fe:	f7fd f927 	bl	8007550 <__retarget_lock_release_recursive>
 800a302:	e753      	b.n	800a1ac <__svfiscanf_r+0x1d8>
 800a304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a306:	07da      	lsls	r2, r3, #31
 800a308:	d405      	bmi.n	800a316 <__svfiscanf_r+0x342>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	059b      	lsls	r3, r3, #22
 800a30e:	d402      	bmi.n	800a316 <__svfiscanf_r+0x342>
 800a310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a312:	f7fd f91d 	bl	8007550 <__retarget_lock_release_recursive>
 800a316:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a318:	e751      	b.n	800a1be <__svfiscanf_r+0x1ea>
 800a31a:	bf00      	nop
 800a31c:	00000000 	.word	0x00000000

0800a320 <_vfiscanf_r>:
 800a320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a322:	460c      	mov	r4, r1
 800a324:	4605      	mov	r5, r0
 800a326:	b138      	cbz	r0, 800a338 <_vfiscanf_r+0x18>
 800a328:	6981      	ldr	r1, [r0, #24]
 800a32a:	b929      	cbnz	r1, 800a338 <_vfiscanf_r+0x18>
 800a32c:	e9cd 2300 	strd	r2, r3, [sp]
 800a330:	f7fd f82e 	bl	8007390 <__sinit>
 800a334:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a338:	490a      	ldr	r1, [pc, #40]	; (800a364 <_vfiscanf_r+0x44>)
 800a33a:	428c      	cmp	r4, r1
 800a33c:	d107      	bne.n	800a34e <_vfiscanf_r+0x2e>
 800a33e:	686c      	ldr	r4, [r5, #4]
 800a340:	4621      	mov	r1, r4
 800a342:	4628      	mov	r0, r5
 800a344:	b003      	add	sp, #12
 800a346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a34a:	f7ff be43 	b.w	8009fd4 <__svfiscanf_r>
 800a34e:	4906      	ldr	r1, [pc, #24]	; (800a368 <_vfiscanf_r+0x48>)
 800a350:	428c      	cmp	r4, r1
 800a352:	d101      	bne.n	800a358 <_vfiscanf_r+0x38>
 800a354:	68ac      	ldr	r4, [r5, #8]
 800a356:	e7f3      	b.n	800a340 <_vfiscanf_r+0x20>
 800a358:	4904      	ldr	r1, [pc, #16]	; (800a36c <_vfiscanf_r+0x4c>)
 800a35a:	428c      	cmp	r4, r1
 800a35c:	bf08      	it	eq
 800a35e:	68ec      	ldreq	r4, [r5, #12]
 800a360:	e7ee      	b.n	800a340 <_vfiscanf_r+0x20>
 800a362:	bf00      	nop
 800a364:	0800b2d0 	.word	0x0800b2d0
 800a368:	0800b2f0 	.word	0x0800b2f0
 800a36c:	0800b2b0 	.word	0x0800b2b0

0800a370 <_scanf_chars>:
 800a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a374:	4615      	mov	r5, r2
 800a376:	688a      	ldr	r2, [r1, #8]
 800a378:	4680      	mov	r8, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	b932      	cbnz	r2, 800a38c <_scanf_chars+0x1c>
 800a37e:	698a      	ldr	r2, [r1, #24]
 800a380:	2a00      	cmp	r2, #0
 800a382:	bf0c      	ite	eq
 800a384:	2201      	moveq	r2, #1
 800a386:	f04f 32ff 	movne.w	r2, #4294967295
 800a38a:	608a      	str	r2, [r1, #8]
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a420 <_scanf_chars+0xb0>
 800a392:	06d1      	lsls	r1, r2, #27
 800a394:	bf5f      	itttt	pl
 800a396:	681a      	ldrpl	r2, [r3, #0]
 800a398:	1d11      	addpl	r1, r2, #4
 800a39a:	6019      	strpl	r1, [r3, #0]
 800a39c:	6816      	ldrpl	r6, [r2, #0]
 800a39e:	2700      	movs	r7, #0
 800a3a0:	69a0      	ldr	r0, [r4, #24]
 800a3a2:	b188      	cbz	r0, 800a3c8 <_scanf_chars+0x58>
 800a3a4:	2801      	cmp	r0, #1
 800a3a6:	d107      	bne.n	800a3b8 <_scanf_chars+0x48>
 800a3a8:	682a      	ldr	r2, [r5, #0]
 800a3aa:	7811      	ldrb	r1, [r2, #0]
 800a3ac:	6962      	ldr	r2, [r4, #20]
 800a3ae:	5c52      	ldrb	r2, [r2, r1]
 800a3b0:	b952      	cbnz	r2, 800a3c8 <_scanf_chars+0x58>
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	d031      	beq.n	800a41a <_scanf_chars+0xaa>
 800a3b6:	e022      	b.n	800a3fe <_scanf_chars+0x8e>
 800a3b8:	2802      	cmp	r0, #2
 800a3ba:	d120      	bne.n	800a3fe <_scanf_chars+0x8e>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a3c4:	071b      	lsls	r3, r3, #28
 800a3c6:	d41a      	bmi.n	800a3fe <_scanf_chars+0x8e>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	06da      	lsls	r2, r3, #27
 800a3cc:	bf5e      	ittt	pl
 800a3ce:	682b      	ldrpl	r3, [r5, #0]
 800a3d0:	781b      	ldrbpl	r3, [r3, #0]
 800a3d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a3d6:	682a      	ldr	r2, [r5, #0]
 800a3d8:	686b      	ldr	r3, [r5, #4]
 800a3da:	3201      	adds	r2, #1
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	68a2      	ldr	r2, [r4, #8]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	3a01      	subs	r2, #1
 800a3e4:	606b      	str	r3, [r5, #4]
 800a3e6:	3701      	adds	r7, #1
 800a3e8:	60a2      	str	r2, [r4, #8]
 800a3ea:	b142      	cbz	r2, 800a3fe <_scanf_chars+0x8e>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dcd7      	bgt.n	800a3a0 <_scanf_chars+0x30>
 800a3f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4798      	blx	r3
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d0d0      	beq.n	800a3a0 <_scanf_chars+0x30>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	f013 0310 	ands.w	r3, r3, #16
 800a404:	d105      	bne.n	800a412 <_scanf_chars+0xa2>
 800a406:	68e2      	ldr	r2, [r4, #12]
 800a408:	3201      	adds	r2, #1
 800a40a:	60e2      	str	r2, [r4, #12]
 800a40c:	69a2      	ldr	r2, [r4, #24]
 800a40e:	b102      	cbz	r2, 800a412 <_scanf_chars+0xa2>
 800a410:	7033      	strb	r3, [r6, #0]
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	443b      	add	r3, r7
 800a416:	6123      	str	r3, [r4, #16]
 800a418:	2000      	movs	r0, #0
 800a41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a41e:	bf00      	nop
 800a420:	0800b59d 	.word	0x0800b59d

0800a424 <_scanf_i>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4698      	mov	r8, r3
 800a42a:	4b76      	ldr	r3, [pc, #472]	; (800a604 <_scanf_i+0x1e0>)
 800a42c:	460c      	mov	r4, r1
 800a42e:	4682      	mov	sl, r0
 800a430:	4616      	mov	r6, r2
 800a432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a436:	b087      	sub	sp, #28
 800a438:	ab03      	add	r3, sp, #12
 800a43a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a43e:	4b72      	ldr	r3, [pc, #456]	; (800a608 <_scanf_i+0x1e4>)
 800a440:	69a1      	ldr	r1, [r4, #24]
 800a442:	4a72      	ldr	r2, [pc, #456]	; (800a60c <_scanf_i+0x1e8>)
 800a444:	2903      	cmp	r1, #3
 800a446:	bf18      	it	ne
 800a448:	461a      	movne	r2, r3
 800a44a:	68a3      	ldr	r3, [r4, #8]
 800a44c:	9201      	str	r2, [sp, #4]
 800a44e:	1e5a      	subs	r2, r3, #1
 800a450:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a454:	bf88      	it	hi
 800a456:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a45a:	4627      	mov	r7, r4
 800a45c:	bf82      	ittt	hi
 800a45e:	eb03 0905 	addhi.w	r9, r3, r5
 800a462:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a466:	60a3      	strhi	r3, [r4, #8]
 800a468:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a46c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a470:	bf98      	it	ls
 800a472:	f04f 0900 	movls.w	r9, #0
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	463d      	mov	r5, r7
 800a47a:	f04f 0b00 	mov.w	fp, #0
 800a47e:	6831      	ldr	r1, [r6, #0]
 800a480:	ab03      	add	r3, sp, #12
 800a482:	7809      	ldrb	r1, [r1, #0]
 800a484:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a488:	2202      	movs	r2, #2
 800a48a:	f7f5 fec9 	bl	8000220 <memchr>
 800a48e:	b328      	cbz	r0, 800a4dc <_scanf_i+0xb8>
 800a490:	f1bb 0f01 	cmp.w	fp, #1
 800a494:	d159      	bne.n	800a54a <_scanf_i+0x126>
 800a496:	6862      	ldr	r2, [r4, #4]
 800a498:	b92a      	cbnz	r2, 800a4a6 <_scanf_i+0x82>
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	2308      	movs	r3, #8
 800a49e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4a2:	6063      	str	r3, [r4, #4]
 800a4a4:	6022      	str	r2, [r4, #0]
 800a4a6:	6822      	ldr	r2, [r4, #0]
 800a4a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	68a2      	ldr	r2, [r4, #8]
 800a4b0:	1e51      	subs	r1, r2, #1
 800a4b2:	60a1      	str	r1, [r4, #8]
 800a4b4:	b192      	cbz	r2, 800a4dc <_scanf_i+0xb8>
 800a4b6:	6832      	ldr	r2, [r6, #0]
 800a4b8:	1c51      	adds	r1, r2, #1
 800a4ba:	6031      	str	r1, [r6, #0]
 800a4bc:	7812      	ldrb	r2, [r2, #0]
 800a4be:	f805 2b01 	strb.w	r2, [r5], #1
 800a4c2:	6872      	ldr	r2, [r6, #4]
 800a4c4:	3a01      	subs	r2, #1
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	6072      	str	r2, [r6, #4]
 800a4ca:	dc07      	bgt.n	800a4dc <_scanf_i+0xb8>
 800a4cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4650      	mov	r0, sl
 800a4d4:	4790      	blx	r2
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f040 8085 	bne.w	800a5e6 <_scanf_i+0x1c2>
 800a4dc:	f10b 0b01 	add.w	fp, fp, #1
 800a4e0:	f1bb 0f03 	cmp.w	fp, #3
 800a4e4:	d1cb      	bne.n	800a47e <_scanf_i+0x5a>
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	b90b      	cbnz	r3, 800a4ee <_scanf_i+0xca>
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	6063      	str	r3, [r4, #4]
 800a4ee:	6863      	ldr	r3, [r4, #4]
 800a4f0:	4947      	ldr	r1, [pc, #284]	; (800a610 <_scanf_i+0x1ec>)
 800a4f2:	6960      	ldr	r0, [r4, #20]
 800a4f4:	1ac9      	subs	r1, r1, r3
 800a4f6:	f000 f933 	bl	800a760 <__sccl>
 800a4fa:	f04f 0b00 	mov.w	fp, #0
 800a4fe:	68a3      	ldr	r3, [r4, #8]
 800a500:	6822      	ldr	r2, [r4, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d03d      	beq.n	800a582 <_scanf_i+0x15e>
 800a506:	6831      	ldr	r1, [r6, #0]
 800a508:	6960      	ldr	r0, [r4, #20]
 800a50a:	f891 c000 	ldrb.w	ip, [r1]
 800a50e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a512:	2800      	cmp	r0, #0
 800a514:	d035      	beq.n	800a582 <_scanf_i+0x15e>
 800a516:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a51a:	d124      	bne.n	800a566 <_scanf_i+0x142>
 800a51c:	0510      	lsls	r0, r2, #20
 800a51e:	d522      	bpl.n	800a566 <_scanf_i+0x142>
 800a520:	f10b 0b01 	add.w	fp, fp, #1
 800a524:	f1b9 0f00 	cmp.w	r9, #0
 800a528:	d003      	beq.n	800a532 <_scanf_i+0x10e>
 800a52a:	3301      	adds	r3, #1
 800a52c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a530:	60a3      	str	r3, [r4, #8]
 800a532:	6873      	ldr	r3, [r6, #4]
 800a534:	3b01      	subs	r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	6073      	str	r3, [r6, #4]
 800a53a:	dd1b      	ble.n	800a574 <_scanf_i+0x150>
 800a53c:	6833      	ldr	r3, [r6, #0]
 800a53e:	3301      	adds	r3, #1
 800a540:	6033      	str	r3, [r6, #0]
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	3b01      	subs	r3, #1
 800a546:	60a3      	str	r3, [r4, #8]
 800a548:	e7d9      	b.n	800a4fe <_scanf_i+0xda>
 800a54a:	f1bb 0f02 	cmp.w	fp, #2
 800a54e:	d1ae      	bne.n	800a4ae <_scanf_i+0x8a>
 800a550:	6822      	ldr	r2, [r4, #0]
 800a552:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a556:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a55a:	d1bf      	bne.n	800a4dc <_scanf_i+0xb8>
 800a55c:	2310      	movs	r3, #16
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a564:	e7a2      	b.n	800a4ac <_scanf_i+0x88>
 800a566:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	780b      	ldrb	r3, [r1, #0]
 800a56e:	f805 3b01 	strb.w	r3, [r5], #1
 800a572:	e7de      	b.n	800a532 <_scanf_i+0x10e>
 800a574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a578:	4631      	mov	r1, r6
 800a57a:	4650      	mov	r0, sl
 800a57c:	4798      	blx	r3
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0df      	beq.n	800a542 <_scanf_i+0x11e>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	05db      	lsls	r3, r3, #23
 800a586:	d50d      	bpl.n	800a5a4 <_scanf_i+0x180>
 800a588:	42bd      	cmp	r5, r7
 800a58a:	d909      	bls.n	800a5a0 <_scanf_i+0x17c>
 800a58c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a594:	4632      	mov	r2, r6
 800a596:	4650      	mov	r0, sl
 800a598:	4798      	blx	r3
 800a59a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a59e:	464d      	mov	r5, r9
 800a5a0:	42bd      	cmp	r5, r7
 800a5a2:	d02d      	beq.n	800a600 <_scanf_i+0x1dc>
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	f012 0210 	ands.w	r2, r2, #16
 800a5aa:	d113      	bne.n	800a5d4 <_scanf_i+0x1b0>
 800a5ac:	702a      	strb	r2, [r5, #0]
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	9e01      	ldr	r6, [sp, #4]
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	4650      	mov	r0, sl
 800a5b6:	47b0      	blx	r6
 800a5b8:	6821      	ldr	r1, [r4, #0]
 800a5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a5be:	f011 0f20 	tst.w	r1, #32
 800a5c2:	d013      	beq.n	800a5ec <_scanf_i+0x1c8>
 800a5c4:	1d1a      	adds	r2, r3, #4
 800a5c6:	f8c8 2000 	str.w	r2, [r8]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6018      	str	r0, [r3, #0]
 800a5ce:	68e3      	ldr	r3, [r4, #12]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	60e3      	str	r3, [r4, #12]
 800a5d4:	1bed      	subs	r5, r5, r7
 800a5d6:	44ab      	add	fp, r5
 800a5d8:	6925      	ldr	r5, [r4, #16]
 800a5da:	445d      	add	r5, fp
 800a5dc:	6125      	str	r5, [r4, #16]
 800a5de:	2000      	movs	r0, #0
 800a5e0:	b007      	add	sp, #28
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	f04f 0b00 	mov.w	fp, #0
 800a5ea:	e7ca      	b.n	800a582 <_scanf_i+0x15e>
 800a5ec:	1d1a      	adds	r2, r3, #4
 800a5ee:	f8c8 2000 	str.w	r2, [r8]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f011 0f01 	tst.w	r1, #1
 800a5f8:	bf14      	ite	ne
 800a5fa:	8018      	strhne	r0, [r3, #0]
 800a5fc:	6018      	streq	r0, [r3, #0]
 800a5fe:	e7e6      	b.n	800a5ce <_scanf_i+0x1aa>
 800a600:	2001      	movs	r0, #1
 800a602:	e7ed      	b.n	800a5e0 <_scanf_i+0x1bc>
 800a604:	0800b28c 	.word	0x0800b28c
 800a608:	0800a9bd 	.word	0x0800a9bd
 800a60c:	0800a8d5 	.word	0x0800a8d5
 800a610:	0800b55e 	.word	0x0800b55e

0800a614 <_read_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d07      	ldr	r5, [pc, #28]	; (800a634 <_read_r+0x20>)
 800a618:	4604      	mov	r4, r0
 800a61a:	4608      	mov	r0, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	2200      	movs	r2, #0
 800a620:	602a      	str	r2, [r5, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	f7f7 fcea 	bl	8001ffc <_read>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_read_r+0x1e>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_read_r+0x1e>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	200044bc 	.word	0x200044bc

0800a638 <lflush>:
 800a638:	8983      	ldrh	r3, [r0, #12]
 800a63a:	f003 0309 	and.w	r3, r3, #9
 800a63e:	2b09      	cmp	r3, #9
 800a640:	d101      	bne.n	800a646 <lflush+0xe>
 800a642:	f7fe bee5 	b.w	8009410 <fflush>
 800a646:	2000      	movs	r0, #0
 800a648:	4770      	bx	lr
	...

0800a64c <__srefill_r>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	460c      	mov	r4, r1
 800a650:	4605      	mov	r5, r0
 800a652:	b118      	cbz	r0, 800a65c <__srefill_r+0x10>
 800a654:	6983      	ldr	r3, [r0, #24]
 800a656:	b90b      	cbnz	r3, 800a65c <__srefill_r+0x10>
 800a658:	f7fc fe9a 	bl	8007390 <__sinit>
 800a65c:	4b3b      	ldr	r3, [pc, #236]	; (800a74c <__srefill_r+0x100>)
 800a65e:	429c      	cmp	r4, r3
 800a660:	d10a      	bne.n	800a678 <__srefill_r+0x2c>
 800a662:	686c      	ldr	r4, [r5, #4]
 800a664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a668:	2300      	movs	r3, #0
 800a66a:	6063      	str	r3, [r4, #4]
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	069e      	lsls	r6, r3, #26
 800a670:	d50c      	bpl.n	800a68c <__srefill_r+0x40>
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	e066      	b.n	800a746 <__srefill_r+0xfa>
 800a678:	4b35      	ldr	r3, [pc, #212]	; (800a750 <__srefill_r+0x104>)
 800a67a:	429c      	cmp	r4, r3
 800a67c:	d101      	bne.n	800a682 <__srefill_r+0x36>
 800a67e:	68ac      	ldr	r4, [r5, #8]
 800a680:	e7f0      	b.n	800a664 <__srefill_r+0x18>
 800a682:	4b34      	ldr	r3, [pc, #208]	; (800a754 <__srefill_r+0x108>)
 800a684:	429c      	cmp	r4, r3
 800a686:	bf08      	it	eq
 800a688:	68ec      	ldreq	r4, [r5, #12]
 800a68a:	e7eb      	b.n	800a664 <__srefill_r+0x18>
 800a68c:	0758      	lsls	r0, r3, #29
 800a68e:	d448      	bmi.n	800a722 <__srefill_r+0xd6>
 800a690:	06d9      	lsls	r1, r3, #27
 800a692:	d405      	bmi.n	800a6a0 <__srefill_r+0x54>
 800a694:	2309      	movs	r3, #9
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	e7e8      	b.n	800a672 <__srefill_r+0x26>
 800a6a0:	071a      	lsls	r2, r3, #28
 800a6a2:	d50b      	bpl.n	800a6bc <__srefill_r+0x70>
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7fe fe76 	bl	8009398 <_fflush_r>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d1e0      	bne.n	800a672 <__srefill_r+0x26>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	60a0      	str	r0, [r4, #8]
 800a6b4:	f023 0308 	bic.w	r3, r3, #8
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	61a0      	str	r0, [r4, #24]
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f043 0304 	orr.w	r3, r3, #4
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	b91b      	cbnz	r3, 800a6d0 <__srefill_r+0x84>
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7fe feee 	bl	80094ac <__smakebuf_r>
 800a6d0:	89a6      	ldrh	r6, [r4, #12]
 800a6d2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a6d6:	07b3      	lsls	r3, r6, #30
 800a6d8:	d00f      	beq.n	800a6fa <__srefill_r+0xae>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	4b1e      	ldr	r3, [pc, #120]	; (800a758 <__srefill_r+0x10c>)
 800a6e0:	491e      	ldr	r1, [pc, #120]	; (800a75c <__srefill_r+0x110>)
 800a6e2:	6818      	ldr	r0, [r3, #0]
 800a6e4:	f006 0609 	and.w	r6, r6, #9
 800a6e8:	f7fc fed0 	bl	800748c <_fwalk>
 800a6ec:	2e09      	cmp	r6, #9
 800a6ee:	81a7      	strh	r7, [r4, #12]
 800a6f0:	d103      	bne.n	800a6fa <__srefill_r+0xae>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f7fe fdc9 	bl	800928c <__sflush_r>
 800a6fa:	6922      	ldr	r2, [r4, #16]
 800a6fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6fe:	6963      	ldr	r3, [r4, #20]
 800a700:	6a21      	ldr	r1, [r4, #32]
 800a702:	6022      	str	r2, [r4, #0]
 800a704:	4628      	mov	r0, r5
 800a706:	47b0      	blx	r6
 800a708:	2800      	cmp	r0, #0
 800a70a:	6060      	str	r0, [r4, #4]
 800a70c:	dc1c      	bgt.n	800a748 <__srefill_r+0xfc>
 800a70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a712:	bf17      	itett	ne
 800a714:	2200      	movne	r2, #0
 800a716:	f043 0320 	orreq.w	r3, r3, #32
 800a71a:	6062      	strne	r2, [r4, #4]
 800a71c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a720:	e7bc      	b.n	800a69c <__srefill_r+0x50>
 800a722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a724:	2900      	cmp	r1, #0
 800a726:	d0cd      	beq.n	800a6c4 <__srefill_r+0x78>
 800a728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a72c:	4299      	cmp	r1, r3
 800a72e:	d002      	beq.n	800a736 <__srefill_r+0xea>
 800a730:	4628      	mov	r0, r5
 800a732:	f7ff faa9 	bl	8009c88 <_free_r>
 800a736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a738:	6063      	str	r3, [r4, #4]
 800a73a:	2000      	movs	r0, #0
 800a73c:	6360      	str	r0, [r4, #52]	; 0x34
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0c0      	beq.n	800a6c4 <__srefill_r+0x78>
 800a742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	2000      	movs	r0, #0
 800a74a:	e7fc      	b.n	800a746 <__srefill_r+0xfa>
 800a74c:	0800b2d0 	.word	0x0800b2d0
 800a750:	0800b2f0 	.word	0x0800b2f0
 800a754:	0800b2b0 	.word	0x0800b2b0
 800a758:	0800b310 	.word	0x0800b310
 800a75c:	0800a639 	.word	0x0800a639

0800a760 <__sccl>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	780b      	ldrb	r3, [r1, #0]
 800a764:	4604      	mov	r4, r0
 800a766:	2b5e      	cmp	r3, #94	; 0x5e
 800a768:	bf0b      	itete	eq
 800a76a:	784b      	ldrbeq	r3, [r1, #1]
 800a76c:	1c48      	addne	r0, r1, #1
 800a76e:	1c88      	addeq	r0, r1, #2
 800a770:	2200      	movne	r2, #0
 800a772:	bf08      	it	eq
 800a774:	2201      	moveq	r2, #1
 800a776:	1e61      	subs	r1, r4, #1
 800a778:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a77c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a780:	42a9      	cmp	r1, r5
 800a782:	d1fb      	bne.n	800a77c <__sccl+0x1c>
 800a784:	b90b      	cbnz	r3, 800a78a <__sccl+0x2a>
 800a786:	3801      	subs	r0, #1
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	f082 0201 	eor.w	r2, r2, #1
 800a78e:	54e2      	strb	r2, [r4, r3]
 800a790:	4605      	mov	r5, r0
 800a792:	4628      	mov	r0, r5
 800a794:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a798:	292d      	cmp	r1, #45	; 0x2d
 800a79a:	d006      	beq.n	800a7aa <__sccl+0x4a>
 800a79c:	295d      	cmp	r1, #93	; 0x5d
 800a79e:	d0f3      	beq.n	800a788 <__sccl+0x28>
 800a7a0:	b909      	cbnz	r1, 800a7a6 <__sccl+0x46>
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	e7f0      	b.n	800a788 <__sccl+0x28>
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	e7f1      	b.n	800a78e <__sccl+0x2e>
 800a7aa:	786e      	ldrb	r6, [r5, #1]
 800a7ac:	2e5d      	cmp	r6, #93	; 0x5d
 800a7ae:	d0fa      	beq.n	800a7a6 <__sccl+0x46>
 800a7b0:	42b3      	cmp	r3, r6
 800a7b2:	dcf8      	bgt.n	800a7a6 <__sccl+0x46>
 800a7b4:	3502      	adds	r5, #2
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	3101      	adds	r1, #1
 800a7ba:	428e      	cmp	r6, r1
 800a7bc:	5462      	strb	r2, [r4, r1]
 800a7be:	dcfb      	bgt.n	800a7b8 <__sccl+0x58>
 800a7c0:	1af1      	subs	r1, r6, r3
 800a7c2:	3901      	subs	r1, #1
 800a7c4:	1c58      	adds	r0, r3, #1
 800a7c6:	42b3      	cmp	r3, r6
 800a7c8:	bfa8      	it	ge
 800a7ca:	2100      	movge	r1, #0
 800a7cc:	1843      	adds	r3, r0, r1
 800a7ce:	e7e0      	b.n	800a792 <__sccl+0x32>

0800a7d0 <_strtol_l.constprop.0>:
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d6:	d001      	beq.n	800a7dc <_strtol_l.constprop.0+0xc>
 800a7d8:	2b24      	cmp	r3, #36	; 0x24
 800a7da:	d906      	bls.n	800a7ea <_strtol_l.constprop.0+0x1a>
 800a7dc:	f7fc fd7a 	bl	80072d4 <__errno>
 800a7e0:	2316      	movs	r3, #22
 800a7e2:	6003      	str	r3, [r0, #0]
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a8d0 <_strtol_l.constprop.0+0x100>
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	462e      	mov	r6, r5
 800a7f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a7fa:	f017 0708 	ands.w	r7, r7, #8
 800a7fe:	d1f7      	bne.n	800a7f0 <_strtol_l.constprop.0+0x20>
 800a800:	2c2d      	cmp	r4, #45	; 0x2d
 800a802:	d132      	bne.n	800a86a <_strtol_l.constprop.0+0x9a>
 800a804:	782c      	ldrb	r4, [r5, #0]
 800a806:	2701      	movs	r7, #1
 800a808:	1cb5      	adds	r5, r6, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d05b      	beq.n	800a8c6 <_strtol_l.constprop.0+0xf6>
 800a80e:	2b10      	cmp	r3, #16
 800a810:	d109      	bne.n	800a826 <_strtol_l.constprop.0+0x56>
 800a812:	2c30      	cmp	r4, #48	; 0x30
 800a814:	d107      	bne.n	800a826 <_strtol_l.constprop.0+0x56>
 800a816:	782c      	ldrb	r4, [r5, #0]
 800a818:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a81c:	2c58      	cmp	r4, #88	; 0x58
 800a81e:	d14d      	bne.n	800a8bc <_strtol_l.constprop.0+0xec>
 800a820:	786c      	ldrb	r4, [r5, #1]
 800a822:	2310      	movs	r3, #16
 800a824:	3502      	adds	r5, #2
 800a826:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a82a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a82e:	f04f 0c00 	mov.w	ip, #0
 800a832:	fbb8 f9f3 	udiv	r9, r8, r3
 800a836:	4666      	mov	r6, ip
 800a838:	fb03 8a19 	mls	sl, r3, r9, r8
 800a83c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a840:	f1be 0f09 	cmp.w	lr, #9
 800a844:	d816      	bhi.n	800a874 <_strtol_l.constprop.0+0xa4>
 800a846:	4674      	mov	r4, lr
 800a848:	42a3      	cmp	r3, r4
 800a84a:	dd24      	ble.n	800a896 <_strtol_l.constprop.0+0xc6>
 800a84c:	f1bc 0f00 	cmp.w	ip, #0
 800a850:	db1e      	blt.n	800a890 <_strtol_l.constprop.0+0xc0>
 800a852:	45b1      	cmp	r9, r6
 800a854:	d31c      	bcc.n	800a890 <_strtol_l.constprop.0+0xc0>
 800a856:	d101      	bne.n	800a85c <_strtol_l.constprop.0+0x8c>
 800a858:	45a2      	cmp	sl, r4
 800a85a:	db19      	blt.n	800a890 <_strtol_l.constprop.0+0xc0>
 800a85c:	fb06 4603 	mla	r6, r6, r3, r4
 800a860:	f04f 0c01 	mov.w	ip, #1
 800a864:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a868:	e7e8      	b.n	800a83c <_strtol_l.constprop.0+0x6c>
 800a86a:	2c2b      	cmp	r4, #43	; 0x2b
 800a86c:	bf04      	itt	eq
 800a86e:	782c      	ldrbeq	r4, [r5, #0]
 800a870:	1cb5      	addeq	r5, r6, #2
 800a872:	e7ca      	b.n	800a80a <_strtol_l.constprop.0+0x3a>
 800a874:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a878:	f1be 0f19 	cmp.w	lr, #25
 800a87c:	d801      	bhi.n	800a882 <_strtol_l.constprop.0+0xb2>
 800a87e:	3c37      	subs	r4, #55	; 0x37
 800a880:	e7e2      	b.n	800a848 <_strtol_l.constprop.0+0x78>
 800a882:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a886:	f1be 0f19 	cmp.w	lr, #25
 800a88a:	d804      	bhi.n	800a896 <_strtol_l.constprop.0+0xc6>
 800a88c:	3c57      	subs	r4, #87	; 0x57
 800a88e:	e7db      	b.n	800a848 <_strtol_l.constprop.0+0x78>
 800a890:	f04f 3cff 	mov.w	ip, #4294967295
 800a894:	e7e6      	b.n	800a864 <_strtol_l.constprop.0+0x94>
 800a896:	f1bc 0f00 	cmp.w	ip, #0
 800a89a:	da05      	bge.n	800a8a8 <_strtol_l.constprop.0+0xd8>
 800a89c:	2322      	movs	r3, #34	; 0x22
 800a89e:	6003      	str	r3, [r0, #0]
 800a8a0:	4646      	mov	r6, r8
 800a8a2:	b942      	cbnz	r2, 800a8b6 <_strtol_l.constprop.0+0xe6>
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	e79e      	b.n	800a7e6 <_strtol_l.constprop.0+0x16>
 800a8a8:	b107      	cbz	r7, 800a8ac <_strtol_l.constprop.0+0xdc>
 800a8aa:	4276      	negs	r6, r6
 800a8ac:	2a00      	cmp	r2, #0
 800a8ae:	d0f9      	beq.n	800a8a4 <_strtol_l.constprop.0+0xd4>
 800a8b0:	f1bc 0f00 	cmp.w	ip, #0
 800a8b4:	d000      	beq.n	800a8b8 <_strtol_l.constprop.0+0xe8>
 800a8b6:	1e69      	subs	r1, r5, #1
 800a8b8:	6011      	str	r1, [r2, #0]
 800a8ba:	e7f3      	b.n	800a8a4 <_strtol_l.constprop.0+0xd4>
 800a8bc:	2430      	movs	r4, #48	; 0x30
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1b1      	bne.n	800a826 <_strtol_l.constprop.0+0x56>
 800a8c2:	2308      	movs	r3, #8
 800a8c4:	e7af      	b.n	800a826 <_strtol_l.constprop.0+0x56>
 800a8c6:	2c30      	cmp	r4, #48	; 0x30
 800a8c8:	d0a5      	beq.n	800a816 <_strtol_l.constprop.0+0x46>
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	e7ab      	b.n	800a826 <_strtol_l.constprop.0+0x56>
 800a8ce:	bf00      	nop
 800a8d0:	0800b59d 	.word	0x0800b59d

0800a8d4 <_strtol_r>:
 800a8d4:	f7ff bf7c 	b.w	800a7d0 <_strtol_l.constprop.0>

0800a8d8 <_strtoul_l.constprop.0>:
 800a8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8dc:	4f36      	ldr	r7, [pc, #216]	; (800a9b8 <_strtoul_l.constprop.0+0xe0>)
 800a8de:	4686      	mov	lr, r0
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8e8:	5de6      	ldrb	r6, [r4, r7]
 800a8ea:	f016 0608 	ands.w	r6, r6, #8
 800a8ee:	d1f8      	bne.n	800a8e2 <_strtoul_l.constprop.0+0xa>
 800a8f0:	2c2d      	cmp	r4, #45	; 0x2d
 800a8f2:	d12f      	bne.n	800a954 <_strtoul_l.constprop.0+0x7c>
 800a8f4:	782c      	ldrb	r4, [r5, #0]
 800a8f6:	2601      	movs	r6, #1
 800a8f8:	1c85      	adds	r5, r0, #2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d057      	beq.n	800a9ae <_strtoul_l.constprop.0+0xd6>
 800a8fe:	2b10      	cmp	r3, #16
 800a900:	d109      	bne.n	800a916 <_strtoul_l.constprop.0+0x3e>
 800a902:	2c30      	cmp	r4, #48	; 0x30
 800a904:	d107      	bne.n	800a916 <_strtoul_l.constprop.0+0x3e>
 800a906:	7828      	ldrb	r0, [r5, #0]
 800a908:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a90c:	2858      	cmp	r0, #88	; 0x58
 800a90e:	d149      	bne.n	800a9a4 <_strtoul_l.constprop.0+0xcc>
 800a910:	786c      	ldrb	r4, [r5, #1]
 800a912:	2310      	movs	r3, #16
 800a914:	3502      	adds	r5, #2
 800a916:	f04f 38ff 	mov.w	r8, #4294967295
 800a91a:	2700      	movs	r7, #0
 800a91c:	fbb8 f8f3 	udiv	r8, r8, r3
 800a920:	fb03 f908 	mul.w	r9, r3, r8
 800a924:	ea6f 0909 	mvn.w	r9, r9
 800a928:	4638      	mov	r0, r7
 800a92a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a92e:	f1bc 0f09 	cmp.w	ip, #9
 800a932:	d814      	bhi.n	800a95e <_strtoul_l.constprop.0+0x86>
 800a934:	4664      	mov	r4, ip
 800a936:	42a3      	cmp	r3, r4
 800a938:	dd22      	ble.n	800a980 <_strtoul_l.constprop.0+0xa8>
 800a93a:	2f00      	cmp	r7, #0
 800a93c:	db1d      	blt.n	800a97a <_strtoul_l.constprop.0+0xa2>
 800a93e:	4580      	cmp	r8, r0
 800a940:	d31b      	bcc.n	800a97a <_strtoul_l.constprop.0+0xa2>
 800a942:	d101      	bne.n	800a948 <_strtoul_l.constprop.0+0x70>
 800a944:	45a1      	cmp	r9, r4
 800a946:	db18      	blt.n	800a97a <_strtoul_l.constprop.0+0xa2>
 800a948:	fb00 4003 	mla	r0, r0, r3, r4
 800a94c:	2701      	movs	r7, #1
 800a94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a952:	e7ea      	b.n	800a92a <_strtoul_l.constprop.0+0x52>
 800a954:	2c2b      	cmp	r4, #43	; 0x2b
 800a956:	bf04      	itt	eq
 800a958:	782c      	ldrbeq	r4, [r5, #0]
 800a95a:	1c85      	addeq	r5, r0, #2
 800a95c:	e7cd      	b.n	800a8fa <_strtoul_l.constprop.0+0x22>
 800a95e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a962:	f1bc 0f19 	cmp.w	ip, #25
 800a966:	d801      	bhi.n	800a96c <_strtoul_l.constprop.0+0x94>
 800a968:	3c37      	subs	r4, #55	; 0x37
 800a96a:	e7e4      	b.n	800a936 <_strtoul_l.constprop.0+0x5e>
 800a96c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a970:	f1bc 0f19 	cmp.w	ip, #25
 800a974:	d804      	bhi.n	800a980 <_strtoul_l.constprop.0+0xa8>
 800a976:	3c57      	subs	r4, #87	; 0x57
 800a978:	e7dd      	b.n	800a936 <_strtoul_l.constprop.0+0x5e>
 800a97a:	f04f 37ff 	mov.w	r7, #4294967295
 800a97e:	e7e6      	b.n	800a94e <_strtoul_l.constprop.0+0x76>
 800a980:	2f00      	cmp	r7, #0
 800a982:	da07      	bge.n	800a994 <_strtoul_l.constprop.0+0xbc>
 800a984:	2322      	movs	r3, #34	; 0x22
 800a986:	f8ce 3000 	str.w	r3, [lr]
 800a98a:	f04f 30ff 	mov.w	r0, #4294967295
 800a98e:	b932      	cbnz	r2, 800a99e <_strtoul_l.constprop.0+0xc6>
 800a990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a994:	b106      	cbz	r6, 800a998 <_strtoul_l.constprop.0+0xc0>
 800a996:	4240      	negs	r0, r0
 800a998:	2a00      	cmp	r2, #0
 800a99a:	d0f9      	beq.n	800a990 <_strtoul_l.constprop.0+0xb8>
 800a99c:	b107      	cbz	r7, 800a9a0 <_strtoul_l.constprop.0+0xc8>
 800a99e:	1e69      	subs	r1, r5, #1
 800a9a0:	6011      	str	r1, [r2, #0]
 800a9a2:	e7f5      	b.n	800a990 <_strtoul_l.constprop.0+0xb8>
 800a9a4:	2430      	movs	r4, #48	; 0x30
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1b5      	bne.n	800a916 <_strtoul_l.constprop.0+0x3e>
 800a9aa:	2308      	movs	r3, #8
 800a9ac:	e7b3      	b.n	800a916 <_strtoul_l.constprop.0+0x3e>
 800a9ae:	2c30      	cmp	r4, #48	; 0x30
 800a9b0:	d0a9      	beq.n	800a906 <_strtoul_l.constprop.0+0x2e>
 800a9b2:	230a      	movs	r3, #10
 800a9b4:	e7af      	b.n	800a916 <_strtoul_l.constprop.0+0x3e>
 800a9b6:	bf00      	nop
 800a9b8:	0800b59d 	.word	0x0800b59d

0800a9bc <_strtoul_r>:
 800a9bc:	f7ff bf8c 	b.w	800a8d8 <_strtoul_l.constprop.0>

0800a9c0 <__submore>:
 800a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	d11d      	bne.n	800aa0c <__submore+0x4c>
 800a9d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9d4:	f7fc fdf4 	bl	80075c0 <_malloc_r>
 800a9d8:	b918      	cbnz	r0, 800a9e2 <__submore+0x22>
 800a9da:	f04f 30ff 	mov.w	r0, #4294967295
 800a9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9e6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a9ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a9f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a9f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a9fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a9fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aa02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa06:	6020      	str	r0, [r4, #0]
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7e8      	b.n	800a9de <__submore+0x1e>
 800aa0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aa0e:	0077      	lsls	r7, r6, #1
 800aa10:	463a      	mov	r2, r7
 800aa12:	f000 f90b 	bl	800ac2c <_realloc_r>
 800aa16:	4605      	mov	r5, r0
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d0de      	beq.n	800a9da <__submore+0x1a>
 800aa1c:	eb00 0806 	add.w	r8, r0, r6
 800aa20:	4601      	mov	r1, r0
 800aa22:	4632      	mov	r2, r6
 800aa24:	4640      	mov	r0, r8
 800aa26:	f7fc fd94 	bl	8007552 <memcpy>
 800aa2a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aa2e:	f8c4 8000 	str.w	r8, [r4]
 800aa32:	e7e9      	b.n	800aa08 <__submore+0x48>

0800aa34 <_ungetc_r>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4614      	mov	r4, r2
 800aa38:	1c4a      	adds	r2, r1, #1
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	d103      	bne.n	800aa48 <_ungetc_r+0x14>
 800aa40:	f04f 35ff 	mov.w	r5, #4294967295
 800aa44:	4628      	mov	r0, r5
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	b118      	cbz	r0, 800aa52 <_ungetc_r+0x1e>
 800aa4a:	6983      	ldr	r3, [r0, #24]
 800aa4c:	b90b      	cbnz	r3, 800aa52 <_ungetc_r+0x1e>
 800aa4e:	f7fc fc9f 	bl	8007390 <__sinit>
 800aa52:	4b41      	ldr	r3, [pc, #260]	; (800ab58 <_ungetc_r+0x124>)
 800aa54:	429c      	cmp	r4, r3
 800aa56:	d11d      	bne.n	800aa94 <_ungetc_r+0x60>
 800aa58:	6874      	ldr	r4, [r6, #4]
 800aa5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa5c:	07db      	lsls	r3, r3, #31
 800aa5e:	d405      	bmi.n	800aa6c <_ungetc_r+0x38>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	0598      	lsls	r0, r3, #22
 800aa64:	d402      	bmi.n	800aa6c <_ungetc_r+0x38>
 800aa66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa68:	f7fc fd71 	bl	800754e <__retarget_lock_acquire_recursive>
 800aa6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa70:	f023 0320 	bic.w	r3, r3, #32
 800aa74:	0759      	lsls	r1, r3, #29
 800aa76:	81a3      	strh	r3, [r4, #12]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	d42d      	bmi.n	800aad8 <_ungetc_r+0xa4>
 800aa7c:	06d3      	lsls	r3, r2, #27
 800aa7e:	d413      	bmi.n	800aaa8 <_ungetc_r+0x74>
 800aa80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa82:	07dd      	lsls	r5, r3, #31
 800aa84:	d4dc      	bmi.n	800aa40 <_ungetc_r+0xc>
 800aa86:	f412 7f00 	tst.w	r2, #512	; 0x200
 800aa8a:	d1d9      	bne.n	800aa40 <_ungetc_r+0xc>
 800aa8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa8e:	f7fc fd5f 	bl	8007550 <__retarget_lock_release_recursive>
 800aa92:	e7d5      	b.n	800aa40 <_ungetc_r+0xc>
 800aa94:	4b31      	ldr	r3, [pc, #196]	; (800ab5c <_ungetc_r+0x128>)
 800aa96:	429c      	cmp	r4, r3
 800aa98:	d101      	bne.n	800aa9e <_ungetc_r+0x6a>
 800aa9a:	68b4      	ldr	r4, [r6, #8]
 800aa9c:	e7dd      	b.n	800aa5a <_ungetc_r+0x26>
 800aa9e:	4b30      	ldr	r3, [pc, #192]	; (800ab60 <_ungetc_r+0x12c>)
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	bf08      	it	eq
 800aaa4:	68f4      	ldreq	r4, [r6, #12]
 800aaa6:	e7d8      	b.n	800aa5a <_ungetc_r+0x26>
 800aaa8:	0710      	lsls	r0, r2, #28
 800aaaa:	d511      	bpl.n	800aad0 <_ungetc_r+0x9c>
 800aaac:	4621      	mov	r1, r4
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7fe fc72 	bl	8009398 <_fflush_r>
 800aab4:	b130      	cbz	r0, 800aac4 <_ungetc_r+0x90>
 800aab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	d4c1      	bmi.n	800aa40 <_ungetc_r+0xc>
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aac2:	e7e2      	b.n	800aa8a <_ungetc_r+0x56>
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	60a0      	str	r0, [r4, #8]
 800aac8:	f023 0308 	bic.w	r3, r3, #8
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	61a0      	str	r0, [r4, #24]
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f043 0304 	orr.w	r3, r3, #4
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	b2ed      	uxtb	r5, r5
 800aade:	b1d3      	cbz	r3, 800ab16 <_ungetc_r+0xe2>
 800aae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aae2:	4293      	cmp	r3, r2
 800aae4:	dc05      	bgt.n	800aaf2 <_ungetc_r+0xbe>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff ff69 	bl	800a9c0 <__submore>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1e1      	bne.n	800aab6 <_ungetc_r+0x82>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	1e5a      	subs	r2, r3, #1
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	3301      	adds	r3, #1
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab04:	07da      	lsls	r2, r3, #31
 800ab06:	d49d      	bmi.n	800aa44 <_ungetc_r+0x10>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	059b      	lsls	r3, r3, #22
 800ab0c:	d49a      	bmi.n	800aa44 <_ungetc_r+0x10>
 800ab0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab10:	f7fc fd1e 	bl	8007550 <__retarget_lock_release_recursive>
 800ab14:	e796      	b.n	800aa44 <_ungetc_r+0x10>
 800ab16:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ab18:	6920      	ldr	r0, [r4, #16]
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	f001 0101 	and.w	r1, r1, #1
 800ab20:	b160      	cbz	r0, 800ab3c <_ungetc_r+0x108>
 800ab22:	4298      	cmp	r0, r3
 800ab24:	d20a      	bcs.n	800ab3c <_ungetc_r+0x108>
 800ab26:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800ab2a:	42a8      	cmp	r0, r5
 800ab2c:	d106      	bne.n	800ab3c <_ungetc_r+0x108>
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	3201      	adds	r2, #1
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	6062      	str	r2, [r4, #4]
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d184      	bne.n	800aa44 <_ungetc_r+0x10>
 800ab3a:	e7e5      	b.n	800ab08 <_ungetc_r+0xd4>
 800ab3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ab40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab44:	6363      	str	r3, [r4, #52]	; 0x34
 800ab46:	2303      	movs	r3, #3
 800ab48:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	2301      	movs	r3, #1
 800ab54:	6063      	str	r3, [r4, #4]
 800ab56:	e7ee      	b.n	800ab36 <_ungetc_r+0x102>
 800ab58:	0800b2d0 	.word	0x0800b2d0
 800ab5c:	0800b2f0 	.word	0x0800b2f0
 800ab60:	0800b2b0 	.word	0x0800b2b0

0800ab64 <__assert_func>:
 800ab64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab66:	4614      	mov	r4, r2
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <__assert_func+0x2c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	68d8      	ldr	r0, [r3, #12]
 800ab72:	b14c      	cbz	r4, 800ab88 <__assert_func+0x24>
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <__assert_func+0x30>)
 800ab76:	9100      	str	r1, [sp, #0]
 800ab78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab7c:	4906      	ldr	r1, [pc, #24]	; (800ab98 <__assert_func+0x34>)
 800ab7e:	462b      	mov	r3, r5
 800ab80:	f000 f80e 	bl	800aba0 <fiprintf>
 800ab84:	f000 f88e 	bl	800aca4 <abort>
 800ab88:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <__assert_func+0x38>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	e7f3      	b.n	800ab76 <__assert_func+0x12>
 800ab8e:	bf00      	nop
 800ab90:	20000010 	.word	0x20000010
 800ab94:	0800b560 	.word	0x0800b560
 800ab98:	0800b56d 	.word	0x0800b56d
 800ab9c:	0800b59b 	.word	0x0800b59b

0800aba0 <fiprintf>:
 800aba0:	b40e      	push	{r1, r2, r3}
 800aba2:	b503      	push	{r0, r1, lr}
 800aba4:	4601      	mov	r1, r0
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	4805      	ldr	r0, [pc, #20]	; (800abc0 <fiprintf+0x20>)
 800abaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800abae:	6800      	ldr	r0, [r0, #0]
 800abb0:	9301      	str	r3, [sp, #4]
 800abb2:	f7ff f8df 	bl	8009d74 <_vfiprintf_r>
 800abb6:	b002      	add	sp, #8
 800abb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abbc:	b003      	add	sp, #12
 800abbe:	4770      	bx	lr
 800abc0:	20000010 	.word	0x20000010

0800abc4 <_fstat_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d07      	ldr	r5, [pc, #28]	; (800abe4 <_fstat_r+0x20>)
 800abc8:	2300      	movs	r3, #0
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	4611      	mov	r1, r2
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	f7f7 fa58 	bl	8002086 <_fstat>
 800abd6:	1c43      	adds	r3, r0, #1
 800abd8:	d102      	bne.n	800abe0 <_fstat_r+0x1c>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	b103      	cbz	r3, 800abe0 <_fstat_r+0x1c>
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	bd38      	pop	{r3, r4, r5, pc}
 800abe2:	bf00      	nop
 800abe4:	200044bc 	.word	0x200044bc

0800abe8 <_isatty_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d06      	ldr	r5, [pc, #24]	; (800ac04 <_isatty_r+0x1c>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f7f7 fa57 	bl	80020a6 <_isatty>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_isatty_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_isatty_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	200044bc 	.word	0x200044bc

0800ac08 <__ascii_mbtowc>:
 800ac08:	b082      	sub	sp, #8
 800ac0a:	b901      	cbnz	r1, 800ac0e <__ascii_mbtowc+0x6>
 800ac0c:	a901      	add	r1, sp, #4
 800ac0e:	b142      	cbz	r2, 800ac22 <__ascii_mbtowc+0x1a>
 800ac10:	b14b      	cbz	r3, 800ac26 <__ascii_mbtowc+0x1e>
 800ac12:	7813      	ldrb	r3, [r2, #0]
 800ac14:	600b      	str	r3, [r1, #0]
 800ac16:	7812      	ldrb	r2, [r2, #0]
 800ac18:	1e10      	subs	r0, r2, #0
 800ac1a:	bf18      	it	ne
 800ac1c:	2001      	movne	r0, #1
 800ac1e:	b002      	add	sp, #8
 800ac20:	4770      	bx	lr
 800ac22:	4610      	mov	r0, r2
 800ac24:	e7fb      	b.n	800ac1e <__ascii_mbtowc+0x16>
 800ac26:	f06f 0001 	mvn.w	r0, #1
 800ac2a:	e7f8      	b.n	800ac1e <__ascii_mbtowc+0x16>

0800ac2c <_realloc_r>:
 800ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac30:	4680      	mov	r8, r0
 800ac32:	4614      	mov	r4, r2
 800ac34:	460e      	mov	r6, r1
 800ac36:	b921      	cbnz	r1, 800ac42 <_realloc_r+0x16>
 800ac38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	f7fc bcbf 	b.w	80075c0 <_malloc_r>
 800ac42:	b92a      	cbnz	r2, 800ac50 <_realloc_r+0x24>
 800ac44:	f7ff f820 	bl	8009c88 <_free_r>
 800ac48:	4625      	mov	r5, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	f000 f82f 	bl	800acb2 <_malloc_usable_size_r>
 800ac54:	4284      	cmp	r4, r0
 800ac56:	4607      	mov	r7, r0
 800ac58:	d802      	bhi.n	800ac60 <_realloc_r+0x34>
 800ac5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac5e:	d812      	bhi.n	800ac86 <_realloc_r+0x5a>
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7fc fcac 	bl	80075c0 <_malloc_r>
 800ac68:	4605      	mov	r5, r0
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0ed      	beq.n	800ac4a <_realloc_r+0x1e>
 800ac6e:	42bc      	cmp	r4, r7
 800ac70:	4622      	mov	r2, r4
 800ac72:	4631      	mov	r1, r6
 800ac74:	bf28      	it	cs
 800ac76:	463a      	movcs	r2, r7
 800ac78:	f7fc fc6b 	bl	8007552 <memcpy>
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f7ff f802 	bl	8009c88 <_free_r>
 800ac84:	e7e1      	b.n	800ac4a <_realloc_r+0x1e>
 800ac86:	4635      	mov	r5, r6
 800ac88:	e7df      	b.n	800ac4a <_realloc_r+0x1e>

0800ac8a <__ascii_wctomb>:
 800ac8a:	b149      	cbz	r1, 800aca0 <__ascii_wctomb+0x16>
 800ac8c:	2aff      	cmp	r2, #255	; 0xff
 800ac8e:	bf85      	ittet	hi
 800ac90:	238a      	movhi	r3, #138	; 0x8a
 800ac92:	6003      	strhi	r3, [r0, #0]
 800ac94:	700a      	strbls	r2, [r1, #0]
 800ac96:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac9a:	bf98      	it	ls
 800ac9c:	2001      	movls	r0, #1
 800ac9e:	4770      	bx	lr
 800aca0:	4608      	mov	r0, r1
 800aca2:	4770      	bx	lr

0800aca4 <abort>:
 800aca4:	b508      	push	{r3, lr}
 800aca6:	2006      	movs	r0, #6
 800aca8:	f000 f834 	bl	800ad14 <raise>
 800acac:	2001      	movs	r0, #1
 800acae:	f7f7 f99b 	bl	8001fe8 <_exit>

0800acb2 <_malloc_usable_size_r>:
 800acb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb6:	1f18      	subs	r0, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bfbc      	itt	lt
 800acbc:	580b      	ldrlt	r3, [r1, r0]
 800acbe:	18c0      	addlt	r0, r0, r3
 800acc0:	4770      	bx	lr

0800acc2 <_raise_r>:
 800acc2:	291f      	cmp	r1, #31
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4604      	mov	r4, r0
 800acc8:	460d      	mov	r5, r1
 800acca:	d904      	bls.n	800acd6 <_raise_r+0x14>
 800accc:	2316      	movs	r3, #22
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acd8:	b112      	cbz	r2, 800ace0 <_raise_r+0x1e>
 800acda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acde:	b94b      	cbnz	r3, 800acf4 <_raise_r+0x32>
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f831 	bl	800ad48 <_getpid_r>
 800ace6:	462a      	mov	r2, r5
 800ace8:	4601      	mov	r1, r0
 800acea:	4620      	mov	r0, r4
 800acec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf0:	f000 b818 	b.w	800ad24 <_kill_r>
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d00a      	beq.n	800ad0e <_raise_r+0x4c>
 800acf8:	1c59      	adds	r1, r3, #1
 800acfa:	d103      	bne.n	800ad04 <_raise_r+0x42>
 800acfc:	2316      	movs	r3, #22
 800acfe:	6003      	str	r3, [r0, #0]
 800ad00:	2001      	movs	r0, #1
 800ad02:	e7e7      	b.n	800acd4 <_raise_r+0x12>
 800ad04:	2400      	movs	r4, #0
 800ad06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	4798      	blx	r3
 800ad0e:	2000      	movs	r0, #0
 800ad10:	e7e0      	b.n	800acd4 <_raise_r+0x12>
	...

0800ad14 <raise>:
 800ad14:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <raise+0xc>)
 800ad16:	4601      	mov	r1, r0
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	f7ff bfd2 	b.w	800acc2 <_raise_r>
 800ad1e:	bf00      	nop
 800ad20:	20000010 	.word	0x20000010

0800ad24 <_kill_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	; (800ad44 <_kill_r+0x20>)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	4611      	mov	r1, r2
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	f7f7 f949 	bl	8001fc8 <_kill>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	d102      	bne.n	800ad40 <_kill_r+0x1c>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	b103      	cbz	r3, 800ad40 <_kill_r+0x1c>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
 800ad42:	bf00      	nop
 800ad44:	200044bc 	.word	0x200044bc

0800ad48 <_getpid_r>:
 800ad48:	f7f7 b936 	b.w	8001fb8 <_getpid>

0800ad4c <_init>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	bf00      	nop
 800ad50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad52:	bc08      	pop	{r3}
 800ad54:	469e      	mov	lr, r3
 800ad56:	4770      	bx	lr

0800ad58 <_fini>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	bf00      	nop
 800ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5e:	bc08      	pop	{r3}
 800ad60:	469e      	mov	lr, r3
 800ad62:	4770      	bx	lr
