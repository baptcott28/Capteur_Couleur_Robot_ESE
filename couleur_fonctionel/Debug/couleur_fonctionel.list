
couleur_fonctionel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0800bc88  0800bc88  0001bc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c678  0800c678  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c680  0800c680  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c680  0800c680  0001c680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f4  200001e0  0800c868  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044d4  0800c868  000244d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b613  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be0  00000000  00000000  0003b823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003f408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  00040868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299bf  00000000  00000000  00041b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fbe  00000000  00000000  0006b4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb5e7  00000000  00000000  000844bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017faa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006814  00000000  00000000  0017faf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc6c 	.word	0x0800bc6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bc6c 	.word	0x0800bc6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <colorSetOutputFreqScaling>:
// ----- Global Fonctions -----


// --- fonctions de gestion du hardware ---

static void colorSetOutputFreqScaling(h_color_sensor_t * h_color_sensor){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	switch(h_color_sensor->ouput_scale){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d836      	bhi.n	8000fac <colorSetOutputFreqScaling+0x80>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <colorSetOutputFreqScaling+0x18>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f97 	.word	0x08000f97
 8000f48:	08000f81 	.word	0x08000f81
 8000f4c:	08000f6b 	.word	0x08000f6b
 8000f50:	08000f55 	.word	0x08000f55
	case 4:
		// 100%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f5a:	f000 fd79 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f64:	f000 fd74 	bl	8001a50 <GPIO_write>
		break;
 8000f68:	e020      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 3:
		// 20%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f70:	f000 fd6e 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f7a:	f000 fd69 	bl	8001a50 <GPIO_write>
		break;
 8000f7e:	e015      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 2:
		// 2%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f86:	f000 fd63 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f90:	f000 fd5e 	bl	8001a50 <GPIO_write>
		break;
 8000f94:	e00a      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 1:
		// Power_down
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f9c:	f000 fd58 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000fa6:	f000 fd53 	bl	8001a50 <GPIO_write>
		break;
 8000faa:	bf00      	nop
	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021800 	.word	0x40021800

08000fbc <colorSetPhotodiodeType>:

void colorSetPhotodiodeType(h_color_sensor_t * h_color_sensor,color_sensor_color_t color){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	h_color_sensor->color=color;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	701a      	strb	r2, [r3, #0]
	switch(color){
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d836      	bhi.n	8001044 <colorSetPhotodiodeType+0x88>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <colorSetPhotodiodeType+0x20>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	0800102f 	.word	0x0800102f
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001003 	.word	0x08001003
 8000fe8:	08000fed 	.word	0x08000fed
	case GREEN:
		//GREEN
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4816      	ldr	r0, [pc, #88]	; (800104c <colorSetPhotodiodeType+0x90>)
 8000ff2:	f000 fd2d 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	4815      	ldr	r0, [pc, #84]	; (8001050 <colorSetPhotodiodeType+0x94>)
 8000ffc:	f000 fd28 	bl	8001a50 <GPIO_write>
		//printf("\n--- photosensor set vert ---\r\n\n");
		break;
 8001000:	e020      	b.n	8001044 <colorSetPhotodiodeType+0x88>
	case CLEAR:
		//clear
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8001002:	2201      	movs	r2, #1
 8001004:	2110      	movs	r1, #16
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <colorSetPhotodiodeType+0x90>)
 8001008:	f000 fd22 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 800100c:	2200      	movs	r2, #0
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <colorSetPhotodiodeType+0x94>)
 8001012:	f000 fd1d 	bl	8001a50 <GPIO_write>
		//printf("\n--- photosensor set clear ---\r\n\n");
		break;
 8001016:	e015      	b.n	8001044 <colorSetPhotodiodeType+0x88>
	case BLUE:
		//BLUE
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001018:	2200      	movs	r2, #0
 800101a:	2110      	movs	r1, #16
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <colorSetPhotodiodeType+0x90>)
 800101e:	f000 fd17 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8001022:	2201      	movs	r2, #1
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <colorSetPhotodiodeType+0x94>)
 8001028:	f000 fd12 	bl	8001a50 <GPIO_write>
		//printf("\n--- photosensor set blue ---\r\n\n");
		break;
 800102c:	e00a      	b.n	8001044 <colorSetPhotodiodeType+0x88>
	case RED:
		//RED
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 800102e:	2200      	movs	r2, #0
 8001030:	2110      	movs	r1, #16
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <colorSetPhotodiodeType+0x90>)
 8001034:	f000 fd0c 	bl	8001a50 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <colorSetPhotodiodeType+0x94>)
 800103e:	f000 fd07 	bl	8001a50 <GPIO_write>
		//printf("\n--- photosensor set rouge ---\r\n\n");
		break;
 8001042:	bf00      	nop
	}
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020400 	.word	0x40020400
 8001050:	40021800 	.word	0x40021800

08001054 <colorSensorInit>:

void colorSensorInit(h_color_sensor_t *h_color_sensor, color_sensor_color_t color, color_sensor_output_scale_t output_scale, color_sensor_state_t state){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4608      	mov	r0, r1
 800105e:	4611      	mov	r1, r2
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	70fb      	strb	r3, [r7, #3]
 8001066:	460b      	mov	r3, r1
 8001068:	70bb      	strb	r3, [r7, #2]
 800106a:	4613      	mov	r3, r2
 800106c:	707b      	strb	r3, [r7, #1]
	h_color_sensor->color=color;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	701a      	strb	r2, [r3, #0]
	h_color_sensor->ouput_scale=output_scale;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	78ba      	ldrb	r2, [r7, #2]
 8001078:	705a      	strb	r2, [r3, #1]
	h_color_sensor->sensor_state=state;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	787a      	ldrb	r2, [r7, #1]
 800107e:	709a      	strb	r2, [r3, #2]
	h_color_sensor->frequence=0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
	h_color_sensor->blue_color=0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
	h_color_sensor->green_color=0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
	h_color_sensor->red_color=0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]

	h_color_sensor->green_transformation.green_coef_dir=1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_min_freq=1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	835a      	strh	r2, [r3, #26]
	h_color_sensor->green_transformation.green_ord_origin=1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	831a      	strh	r2, [r3, #24]

	h_color_sensor->red_transformation.red_coef_dir=1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_min_freq=1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	841a      	strh	r2, [r3, #32]
	h_color_sensor->red_transformation.red_ord_origin=1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	83da      	strh	r2, [r3, #30]

	h_color_sensor->calib_state=WAINTING_FOR_CALIB;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	751a      	strb	r2, [r3, #20]
	h_color_sensor->calib_struct.calib_value_rouge_canette=1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	84da      	strh	r2, [r3, #38]	; 0x26
	h_color_sensor->calib_struct.calib_value_rouge_vide=1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	851a      	strh	r2, [r3, #40]	; 0x28
	h_color_sensor->calib_struct.calib_value_vert_canette=1;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	845a      	strh	r2, [r3, #34]	; 0x22
	h_color_sensor->calib_struct.calib_value_vert_vide=1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	849a      	strh	r2, [r3, #36]	; 0x24
	colorSetOutputFreqScaling(h_color_sensor);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff26 	bl	8000f2c <colorSetOutputFreqScaling>
	colorSetPhotodiodeType(h_color_sensor,color);
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	4619      	mov	r1, r3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff69 	bl	8000fbc <colorSetPhotodiodeType>
	colorDisable(h_color_sensor);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f804 	bl	80010f8 <colorDisable>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <colorDisable>:
uint32_t colorGetGreenValue(h_color_sensor_t * h_color_sensor){
	printf("sensor_value : %ld\r\n",h_color_sensor->frequence);
	return h_color_sensor->green_color;
}

void colorDisable(h_color_sensor_t * h_color_sensor){
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b095      	sub	sp, #84	; 0x54
 80010fc:	af12      	add	r7, sp, #72	; 0x48
 80010fe:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <colorDisable+0x50>)
 8001106:	f000 fca3 	bl	8001a50 <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_DISABLE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,STOP,TIM_CHANNEL_1);
 8001110:	4e0e      	ldr	r6, [pc, #56]	; (800114c <colorDisable+0x54>)
 8001112:	2300      	movs	r3, #0
 8001114:	9311      	str	r3, [sp, #68]	; 0x44
 8001116:	2300      	movs	r3, #0
 8001118:	9310      	str	r3, [sp, #64]	; 0x40
 800111a:	2301      	movs	r3, #1
 800111c:	930f      	str	r3, [sp, #60]	; 0x3c
 800111e:	466d      	mov	r5, sp
 8001120:	f106 0410 	add.w	r4, r6, #16
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001130:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001134:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001138:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800113c:	f000 fc16 	bl	800196c <timer_handle>
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	40020800 	.word	0x40020800
 800114c:	200006a0 	.word	0x200006a0

08001150 <colorEnable>:

void colorEnable(h_color_sensor_t * h_color_sensor){
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	b095      	sub	sp, #84	; 0x54
 8001154:	af12      	add	r7, sp, #72	; 0x48
 8001156:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <colorEnable+0x50>)
 800115e:	f000 fc77 	bl	8001a50 <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_ENABLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,START,TIM_CHANNEL_1);
 8001168:	4e0e      	ldr	r6, [pc, #56]	; (80011a4 <colorEnable+0x54>)
 800116a:	2300      	movs	r3, #0
 800116c:	9311      	str	r3, [sp, #68]	; 0x44
 800116e:	2301      	movs	r3, #1
 8001170:	9310      	str	r3, [sp, #64]	; 0x40
 8001172:	2301      	movs	r3, #1
 8001174:	930f      	str	r3, [sp, #60]	; 0x3c
 8001176:	466d      	mov	r5, sp
 8001178:	f106 0410 	add.w	r4, r6, #16
 800117c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001188:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800118c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001190:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001194:	f000 fbea 	bl	800196c <timer_handle>
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a0:	40020800 	.word	0x40020800
 80011a4:	200006a0 	.word	0x200006a0

080011a8 <colorHandleCalibrationSensor>:


// --- fonctions de calibration ---

uint32_t colorHandleCalibrationSensor(h_color_sensor_t * h_color_sensor){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	calibration_flag=1;
 80011b0:	4b86      	ldr	r3, [pc, #536]	; (80013cc <colorHandleCalibrationSensor+0x224>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
	printf("calibration flag : %d\r\n",calibration_flag);
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <colorHandleCalibrationSensor+0x224>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4884      	ldr	r0, [pc, #528]	; (80013d0 <colorHandleCalibrationSensor+0x228>)
 80011be:	f007 fe6d 	bl	8008e9c <iprintf>
	char entree[2];
	h_color_sensor->calib_state=CALIB_VERT_CANETTE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	751a      	strb	r2, [r3, #20]
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80011c8:	e090      	b.n	80012ec <colorHandleCalibrationSensor+0x144>
		//printf("entré dans while\r\n");
		switch(h_color_sensor->calib_state){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7d1b      	ldrb	r3, [r3, #20]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	f200 808a 	bhi.w	80012ea <colorHandleCalibrationSensor+0x142>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <colorHandleCalibrationSensor+0x34>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	08001231 	.word	0x08001231
 80011e4:	0800126f 	.word	0x0800126f
 80011e8:	080012ad 	.word	0x080012ad
		case CALIB_VERT_CANETTE:
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 80011ec:	2104      	movs	r1, #4
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fee4 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 80011f4:	4877      	ldr	r0, [pc, #476]	; (80013d4 <colorHandleCalibrationSensor+0x22c>)
 80011f6:	f007 fed7 	bl	8008fa8 <puts>
			scanf( "%s",entree);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4875      	ldr	r0, [pc, #468]	; (80013d8 <colorHandleCalibrationSensor+0x230>)
 8001202:	f007 ff53 	bl	80090ac <iscanf>
			printf("%s\r\n",entree);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4619      	mov	r1, r3
 800120c:	4873      	ldr	r0, [pc, #460]	; (80013dc <colorHandleCalibrationSensor+0x234>)
 800120e:	f007 fe45 	bl	8008e9c <iprintf>
			h_color_sensor->calib_struct.calib_value_vert_canette=0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	845a      	strh	r2, [r3, #34]	; 0x22
			colorEnable(h_color_sensor);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff99 	bl	8001150 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_vert_canette==0){
 800121e:	bf00      	nop
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0fb      	beq.n	8001220 <colorHandleCalibrationSensor+0x78>
				//Wait for calib completed
			}
			h_color_sensor->calib_state=CALIB_VERT_VIDE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	751a      	strb	r2, [r3, #20]
			break;
 800122e:	e05d      	b.n	80012ec <colorHandleCalibrationSensor+0x144>

		case CALIB_VERT_VIDE:
			printf("calib_vert_vide\r\n");
 8001230:	486b      	ldr	r0, [pc, #428]	; (80013e0 <colorHandleCalibrationSensor+0x238>)
 8001232:	f007 feb9 	bl	8008fa8 <puts>
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 8001236:	2104      	movs	r1, #4
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff febf 	bl	8000fbc <colorSetPhotodiodeType>
			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when the green can is removed\r\n");
 800123e:	4869      	ldr	r0, [pc, #420]	; (80013e4 <colorHandleCalibrationSensor+0x23c>)
 8001240:	f007 feb2 	bl	8008fa8 <puts>
			scanf("%s",entree);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4619      	mov	r1, r3
 800124a:	4863      	ldr	r0, [pc, #396]	; (80013d8 <colorHandleCalibrationSensor+0x230>)
 800124c:	f007 ff2e 	bl	80090ac <iscanf>
			h_color_sensor->calib_struct.calib_value_vert_vide=0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	849a      	strh	r2, [r3, #36]	; 0x24
			colorEnable(h_color_sensor);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff7a 	bl	8001150 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_vert_vide==0){
 800125c:	bf00      	nop
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0fb      	beq.n	800125e <colorHandleCalibrationSensor+0xb6>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_CANETTE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	751a      	strb	r2, [r3, #20]
			break;
 800126c:	e03e      	b.n	80012ec <colorHandleCalibrationSensor+0x144>

		case CALIB_ROUGE_CANETTE:
			printf("calib_rouge_canette\r\n");
 800126e:	485e      	ldr	r0, [pc, #376]	; (80013e8 <colorHandleCalibrationSensor+0x240>)
 8001270:	f007 fe9a 	bl	8008fa8 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 8001274:	2101      	movs	r1, #1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fea0 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a red can is captured\r\n");
 800127c:	485b      	ldr	r0, [pc, #364]	; (80013ec <colorHandleCalibrationSensor+0x244>)
 800127e:	f007 fe93 	bl	8008fa8 <puts>
			scanf("%s",entree);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4619      	mov	r1, r3
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <colorHandleCalibrationSensor+0x230>)
 800128a:	f007 ff0f 	bl	80090ac <iscanf>
			h_color_sensor->calib_struct.calib_value_rouge_canette=0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	84da      	strh	r2, [r3, #38]	; 0x26
			colorEnable(h_color_sensor);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff5b 	bl	8001150 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_rouge_canette==0){
 800129a:	bf00      	nop
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0fb      	beq.n	800129c <colorHandleCalibrationSensor+0xf4>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_VIDE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2204      	movs	r2, #4
 80012a8:	751a      	strb	r2, [r3, #20]
			break;
 80012aa:	e01f      	b.n	80012ec <colorHandleCalibrationSensor+0x144>

		case CALIB_ROUGE_VIDE:
			printf("calib_rouge_vide\r\n");
 80012ac:	4850      	ldr	r0, [pc, #320]	; (80013f0 <colorHandleCalibrationSensor+0x248>)
 80012ae:	f007 fe7b 	bl	8008fa8 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 80012b2:	2101      	movs	r1, #1
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe81 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 80012ba:	4846      	ldr	r0, [pc, #280]	; (80013d4 <colorHandleCalibrationSensor+0x22c>)
 80012bc:	f007 fe74 	bl	8008fa8 <puts>
			scanf("%s",entree);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4844      	ldr	r0, [pc, #272]	; (80013d8 <colorHandleCalibrationSensor+0x230>)
 80012c8:	f007 fef0 	bl	80090ac <iscanf>
			h_color_sensor->calib_struct.calib_value_rouge_vide=0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	851a      	strh	r2, [r3, #40]	; 0x28
			colorEnable(h_color_sensor);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff3c 	bl	8001150 <colorEnable>
			while(h_color_sensor->calib_struct.calib_value_rouge_vide==0){
 80012d8:	bf00      	nop
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0fb      	beq.n	80012da <colorHandleCalibrationSensor+0x132>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_DONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2205      	movs	r2, #5
 80012e6:	751a      	strb	r2, [r3, #20]
			break;
 80012e8:	e000      	b.n	80012ec <colorHandleCalibrationSensor+0x144>

		default:
			break;
 80012ea:	bf00      	nop
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7d1b      	ldrb	r3, [r3, #20]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	f47f af6a 	bne.w	80011ca <colorHandleCalibrationSensor+0x22>
		}
	}
	printf("calib_verte_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80012fa:	4619      	mov	r1, r3
 80012fc:	483d      	ldr	r0, [pc, #244]	; (80013f4 <colorHandleCalibrationSensor+0x24c>)
 80012fe:	f007 fdcd 	bl	8008e9c <iprintf>
	printf("calib_verte_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	483b      	ldr	r0, [pc, #236]	; (80013f8 <colorHandleCalibrationSensor+0x250>)
 800130a:	f007 fdc7 	bl	8008e9c <iprintf>
	printf("calib_rouge_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001312:	4619      	mov	r1, r3
 8001314:	4839      	ldr	r0, [pc, #228]	; (80013fc <colorHandleCalibrationSensor+0x254>)
 8001316:	f007 fdc1 	bl	8008e9c <iprintf>
	printf("calib_rouge_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	4837      	ldr	r0, [pc, #220]	; (8001400 <colorHandleCalibrationSensor+0x258>)
 8001322:	f007 fdbb 	bl	8008e9c <iprintf>

	//computation of the transformation coefficient
	h_color_sensor->green_transformation.green_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_color_sensor->calib_struct.calib_value_vert_vide)-(h_color_sensor->calib_struct.calib_value_vert_canette)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f242 7210 	movw	r2, #10000	; 0x2710
 8001336:	fb92 f3f3 	sdiv	r3, r2, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->green_transformation.green_coef_dir)*(h_color_sensor->calib_struct.calib_value_vert_vide)));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8ada      	ldrh	r2, [r3, #22]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001348:	fb12 f303 	smulbb	r3, r2, r3
 800134c:	b29a      	uxth	r2, r3
 800134e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	831a      	strh	r2, [r3, #24]
	printf("coef dir vert : %u\r\nord origin vert : %u\r\nmin freq vert : %u\r\n\n",h_color_sensor->green_transformation.green_coef_dir,h_color_sensor->green_transformation.green_ord_origin,h_color_sensor->green_transformation.green_min_freq);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	8adb      	ldrh	r3, [r3, #22]
 800135e:	4619      	mov	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	8b1b      	ldrh	r3, [r3, #24]
 8001364:	461a      	mov	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8b5b      	ldrh	r3, [r3, #26]
 800136a:	4826      	ldr	r0, [pc, #152]	; (8001404 <colorHandleCalibrationSensor+0x25c>)
 800136c:	f007 fd96 	bl	8008e9c <iprintf>

	h_color_sensor->red_transformation.red_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_color_sensor->calib_struct.calib_value_rouge_vide)-(h_color_sensor->calib_struct.calib_value_rouge_canette)));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001374:	461a      	mov	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001380:	fb92 f3f3 	sdiv	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->red_transformation.red_coef_dir)*(h_color_sensor->calib_struct.calib_value_rouge_vide)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8b9a      	ldrh	r2, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001392:	fb12 f303 	smulbb	r3, r2, r3
 8001396:	b29a      	uxth	r2, r3
 8001398:	f644 6320 	movw	r3, #20000	; 0x4e20
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	83da      	strh	r2, [r3, #30]
	printf("coef dir rouge : %u\r\nord origin rouge : %u\r\nmin freq rouge : %u\r\n\n",h_color_sensor->red_transformation.red_coef_dir,h_color_sensor->red_transformation.red_ord_origin,h_color_sensor->red_transformation.red_min_freq);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	8b9b      	ldrh	r3, [r3, #28]
 80013a8:	4619      	mov	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	8bdb      	ldrh	r3, [r3, #30]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	8c1b      	ldrh	r3, [r3, #32]
 80013b4:	4814      	ldr	r0, [pc, #80]	; (8001408 <colorHandleCalibrationSensor+0x260>)
 80013b6:	f007 fd71 	bl	8008e9c <iprintf>


	// flag to say hey calibration finished
	calibration_flag=0;
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <colorHandleCalibrationSensor+0x224>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002d8 	.word	0x200002d8
 80013d0:	0800bca0 	.word	0x0800bca0
 80013d4:	0800bcb8 	.word	0x0800bcb8
 80013d8:	0800bce4 	.word	0x0800bce4
 80013dc:	0800bce8 	.word	0x0800bce8
 80013e0:	0800bcf0 	.word	0x0800bcf0
 80013e4:	0800bd04 	.word	0x0800bd04
 80013e8:	0800bd30 	.word	0x0800bd30
 80013ec:	0800bd48 	.word	0x0800bd48
 80013f0:	0800bd70 	.word	0x0800bd70
 80013f4:	0800bd84 	.word	0x0800bd84
 80013f8:	0800bda0 	.word	0x0800bda0
 80013fc:	0800bdbc 	.word	0x0800bdbc
 8001400:	0800bdd8 	.word	0x0800bdd8
 8001404:	0800bdf4 	.word	0x0800bdf4
 8001408:	0800be34 	.word	0x0800be34

0800140c <colorSensorHandleInputCapture_IT>:


// --- fonction de gestion du retour capteur ---

void colorSensorHandleInputCapture_IT(h_color_sensor_t * h_color_sensor,TIM_TypeDef *TIM){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	//printf("entré dans tim2 IT\r\n");
	if(tour==0){
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <colorSensorHandleInputCapture_IT+0xb0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d107      	bne.n	800142e <colorSensorHandleInputCapture_IT+0x22>
		temps1=TIM->CNT;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	461a      	mov	r2, r3
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001426:	601a      	str	r2, [r3, #0]
		tour=0;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <colorSensorHandleInputCapture_IT+0xb0>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
	}
	if(tour==1){
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <colorSensorHandleInputCapture_IT+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <colorSensorHandleInputCapture_IT+0x3a>
		temps2=TIM->CNT;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	461a      	mov	r2, r3
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <colorSensorHandleInputCapture_IT+0xb8>)
 800143e:	601a      	str	r2, [r3, #0]
		tour=1;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <colorSensorHandleInputCapture_IT+0xb0>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]
	}
	tour=1-tour;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <colorSensorHandleInputCapture_IT+0xb0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f1c3 0301 	rsb	r3, r3, #1
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <colorSensorHandleInputCapture_IT+0xb0>)
 8001450:	6013      	str	r3, [r2, #0]
	freq=abs(temps2-temps1);
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <colorSensorHandleInputCapture_IT+0xb8>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	bfb8      	it	lt
 8001460:	425b      	neglt	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 8001466:	601a      	str	r2, [r3, #0]
	h_color_sensor->frequence=freq;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]
		}
		printf("fin affichage\r\n");
		u=0;
	}*/

	if((calibration_flag==1)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10c      	bne.n	8001492 <colorSensorHandleInputCapture_IT+0x86>
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001480:	4293      	cmp	r3, r2
 8001482:	d806      	bhi.n	8001492 <colorSensorHandleInputCapture_IT+0x86>
		colorHandleCalibrationValues(h_color_sensor,freq);
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f820 	bl	80014d0 <colorHandleCalibrationValues>
	}
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
		// Analyse des valeur pour prise de decision sur la couleur
		colorHandleRawValues(h_color_sensor, freq);
	}
}
 8001490:	e00f      	b.n	80014b2 <colorSensorHandleInputCapture_IT+0xa6>
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10b      	bne.n	80014b2 <colorSensorHandleInputCapture_IT+0xa6>
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d805      	bhi.n	80014b2 <colorSensorHandleInputCapture_IT+0xa6>
		colorHandleRawValues(h_color_sensor, freq);
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8cd 	bl	800164c <colorHandleRawValues>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000208 	.word	0x20000208
 80014c0:	20000200 	.word	0x20000200
 80014c4:	20000204 	.word	0x20000204
 80014c8:	200001fc 	.word	0x200001fc
 80014cc:	200002d8 	.word	0x200002d8

080014d0 <colorHandleCalibrationValues>:

static int colorHandleCalibrationValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	calib_tab[u]=freq;
 80014da:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <colorHandleCalibrationValues+0x144>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <colorHandleCalibrationValues+0x148>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	494e      	ldr	r1, [pc, #312]	; (800161c <colorHandleCalibrationValues+0x14c>)
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u++;
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <colorHandleCalibrationValues+0x144>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a49      	ldr	r2, [pc, #292]	; (8001614 <colorHandleCalibrationValues+0x144>)
 80014f0:	6013      	str	r3, [r2, #0]
	if(u==CALIBRATION_NB_VALUES){
 80014f2:	4b48      	ldr	r3, [pc, #288]	; (8001614 <colorHandleCalibrationValues+0x144>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b1e      	cmp	r3, #30
 80014f8:	f040 8087 	bne.w	800160a <colorHandleCalibrationValues+0x13a>
		colorDisable(h_color_sensor);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fdfb 	bl	80010f8 <colorDisable>
		uint32_t res=0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<30;i++){
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	e012      	b.n	8001532 <colorHandleCalibrationValues+0x62>
			res=res+calib_tab[i];
 800150c:	4a43      	ldr	r2, [pc, #268]	; (800161c <colorHandleCalibrationValues+0x14c>)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
			printf("calib values[%d] : %ld\r\n",i,calib_tab[i]);
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <colorHandleCalibrationValues+0x14c>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	461a      	mov	r2, r3
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	483e      	ldr	r0, [pc, #248]	; (8001620 <colorHandleCalibrationValues+0x150>)
 8001528:	f007 fcb8 	bl	8008e9c <iprintf>
		for(int i=0;i<30;i++){
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b1d      	cmp	r3, #29
 8001536:	dde9      	ble.n	800150c <colorHandleCalibrationValues+0x3c>
		}
		switch(h_color_sensor->calib_state){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7d1b      	ldrb	r3, [r3, #20]
 800153c:	3b01      	subs	r3, #1
 800153e:	2b03      	cmp	r3, #3
 8001540:	d85a      	bhi.n	80015f8 <colorHandleCalibrationValues+0x128>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <colorHandleCalibrationValues+0x78>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	08001559 	.word	0x08001559
 800154c:	08001585 	.word	0x08001585
 8001550:	080015a9 	.word	0x080015a9
 8001554:	080015d5 	.word	0x080015d5
		case CALIB_VERT_CANETTE:
			h_color_sensor->calib_struct.calib_value_vert_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <colorHandleCalibrationValues+0x154>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	845a      	strh	r2, [r3, #34]	; 0x22
			h_color_sensor->green_transformation.green_min_freq=h_color_sensor->calib_struct.calib_value_vert_canette;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	835a      	strh	r2, [r3, #26]
			printf("Struct calib : champ vert_canette remplie\r\n");
 8001570:	482d      	ldr	r0, [pc, #180]	; (8001628 <colorHandleCalibrationValues+0x158>)
 8001572:	f007 fd19 	bl	8008fa8 <puts>
			printf("Calib_value_vert_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800157a:	4619      	mov	r1, r3
 800157c:	482b      	ldr	r0, [pc, #172]	; (800162c <colorHandleCalibrationValues+0x15c>)
 800157e:	f007 fc8d 	bl	8008e9c <iprintf>
			break;
 8001582:	e03d      	b.n	8001600 <colorHandleCalibrationValues+0x130>
		case CALIB_VERT_VIDE:
			h_color_sensor->calib_struct.calib_value_vert_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a27      	ldr	r2, [pc, #156]	; (8001624 <colorHandleCalibrationValues+0x154>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b29a      	uxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	849a      	strh	r2, [r3, #36]	; 0x24
			printf("Struct calib : champ vert_vide remplie\r\n");
 8001594:	4826      	ldr	r0, [pc, #152]	; (8001630 <colorHandleCalibrationValues+0x160>)
 8001596:	f007 fd07 	bl	8008fa8 <puts>
			printf("Calib_value_vert_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4824      	ldr	r0, [pc, #144]	; (8001634 <colorHandleCalibrationValues+0x164>)
 80015a2:	f007 fc7b 	bl	8008e9c <iprintf>
			break;
 80015a6:	e02b      	b.n	8001600 <colorHandleCalibrationValues+0x130>
		case CALIB_ROUGE_CANETTE:
			h_color_sensor->calib_struct.calib_value_rouge_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <colorHandleCalibrationValues+0x154>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	84da      	strh	r2, [r3, #38]	; 0x26
			h_color_sensor->red_transformation.red_min_freq=h_color_sensor->calib_struct.calib_value_rouge_canette;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	841a      	strh	r2, [r3, #32]
			printf("Struct calib : champ rouge_canette remplie\r\n");
 80015c0:	481d      	ldr	r0, [pc, #116]	; (8001638 <colorHandleCalibrationValues+0x168>)
 80015c2:	f007 fcf1 	bl	8008fa8 <puts>
			printf("Calib_value_rouge_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015ca:	4619      	mov	r1, r3
 80015cc:	481b      	ldr	r0, [pc, #108]	; (800163c <colorHandleCalibrationValues+0x16c>)
 80015ce:	f007 fc65 	bl	8008e9c <iprintf>
			break;
 80015d2:	e015      	b.n	8001600 <colorHandleCalibrationValues+0x130>
		case CALIB_ROUGE_VIDE:
			h_color_sensor->calib_struct.calib_value_rouge_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <colorHandleCalibrationValues+0x154>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	851a      	strh	r2, [r3, #40]	; 0x28
			printf("Struct calib : champ rouge_vide remplie\r\n");
 80015e4:	4816      	ldr	r0, [pc, #88]	; (8001640 <colorHandleCalibrationValues+0x170>)
 80015e6:	f007 fcdf 	bl	8008fa8 <puts>
			printf("Calib_value_vert_canette : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <colorHandleCalibrationValues+0x174>)
 80015f2:	f007 fc53 	bl	8008e9c <iprintf>
			break;
 80015f6:	e003      	b.n	8001600 <colorHandleCalibrationValues+0x130>
		default:
			printf("bug dans la calibration\r\n\n");
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <colorHandleCalibrationValues+0x178>)
 80015fa:	f007 fcd5 	bl	8008fa8 <puts>
			break;
 80015fe:	bf00      	nop
		}
		u=0;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <colorHandleCalibrationValues+0x144>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
		return 1;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <colorHandleCalibrationValues+0x13c>
	}
	return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000354 	.word	0x20000354
 8001618:	200001fc 	.word	0x200001fc
 800161c:	200002dc 	.word	0x200002dc
 8001620:	0800be78 	.word	0x0800be78
 8001624:	88888889 	.word	0x88888889
 8001628:	0800be94 	.word	0x0800be94
 800162c:	0800bec0 	.word	0x0800bec0
 8001630:	0800bee4 	.word	0x0800bee4
 8001634:	0800bf0c 	.word	0x0800bf0c
 8001638:	0800bf2c 	.word	0x0800bf2c
 800163c:	0800bf58 	.word	0x0800bf58
 8001640:	0800bf7c 	.word	0x0800bf7c
 8001644:	0800bfa8 	.word	0x0800bfa8
 8001648:	0800bfc8 	.word	0x0800bfc8

0800164c <colorHandleRawValues>:

static int colorHandleRawValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	//printf("entre dans color_handle\r\n");
	if(raw_values_compteur<((NB_MEASURE_WANTED/2)-1)){
 8001656:	4b77      	ldr	r3, [pc, #476]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d826      	bhi.n	80016ac <colorHandleRawValues+0x60>
		// premieres valeurs du tableau donc on est dans le vert
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8b5b      	ldrh	r3, [r3, #26]
 8001662:	461a      	mov	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4293      	cmp	r3, r2
 8001668:	d202      	bcs.n	8001670 <colorHandleRawValues+0x24>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	8b5b      	ldrh	r3, [r3, #26]
 800166e:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001670:	4b70      	ldr	r3, [pc, #448]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	4a70      	ldr	r2, [pc, #448]	; (8001838 <colorHandleRawValues+0x1ec>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	8adb      	ldrh	r3, [r3, #22]
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	8b12      	ldrh	r2, [r2, #24]
 800168e:	4610      	mov	r0, r2
 8001690:	4a68      	ldr	r2, [pc, #416]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	4611      	mov	r1, r2
 8001696:	4403      	add	r3, r0
 8001698:	4a68      	ldr	r2, [pc, #416]	; (800183c <colorHandleRawValues+0x1f0>)
 800169a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e0bd      	b.n	8001828 <colorHandleRawValues+0x1dc>
	}

	else if(raw_values_compteur==((NB_MEASURE_WANTED/2)-1)){
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d130      	bne.n	8001716 <colorHandleRawValues+0xca>
		//on est encore dans le vert mais on doit en plus changer la couleur de detection
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	8b5b      	ldrh	r3, [r3, #26]
 80016b8:	461a      	mov	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d202      	bcs.n	80016c6 <colorHandleRawValues+0x7a>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	8b5b      	ldrh	r3, [r3, #26]
 80016c4:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <colorHandleRawValues+0x1ec>)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8adb      	ldrh	r3, [r3, #22]
 80016d8:	461a      	mov	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	8b12      	ldrh	r2, [r2, #24]
 80016e4:	4610      	mov	r0, r2
 80016e6:	4a53      	ldr	r2, [pc, #332]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4403      	add	r3, r0
 80016ee:	4a53      	ldr	r2, [pc, #332]	; (800183c <colorHandleRawValues+0x1f0>)
 80016f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 80016f4:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <colorHandleRawValues+0x1e8>)
 80016fe:	701a      	strb	r2, [r3, #0]

		// color change
		colorDisable(h_color_sensor);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fcf9 	bl	80010f8 <colorDisable>
		colorSetPhotodiodeType(h_color_sensor,RED);
 8001706:	2101      	movs	r1, #1
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fc57 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(h_color_sensor);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fd1e 	bl	8001150 <colorEnable>
 8001714:	e088      	b.n	8001828 <colorHandleRawValues+0x1dc>
	}

	else if((raw_values_compteur>((NB_MEASURE_WANTED/2)-1))&&(raw_values_compteur<NB_MEASURE_WANTED)){
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b09      	cmp	r3, #9
 800171c:	d92a      	bls.n	8001774 <colorHandleRawValues+0x128>
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b13      	cmp	r3, #19
 8001724:	d826      	bhi.n	8001774 <colorHandleRawValues+0x128>
		// valeures rouges
		if(frequence<(h_color_sensor->red_transformation.red_min_freq)){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	8c1b      	ldrh	r3, [r3, #32]
 800172a:	461a      	mov	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4293      	cmp	r3, r2
 8001730:	d202      	bcs.n	8001738 <colorHandleRawValues+0xec>
			frequence = (uint32_t)h_color_sensor->red_transformation.red_min_freq;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	8c1b      	ldrh	r3, [r3, #32]
 8001736:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001738:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <colorHandleRawValues+0x1e8>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	4a3e      	ldr	r2, [pc, #248]	; (8001838 <colorHandleRawValues+0x1ec>)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->red_transformation.red_coef_dir)*frequence)+(h_color_sensor->red_transformation.red_ord_origin);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8b9b      	ldrh	r3, [r3, #28]
 800174a:	461a      	mov	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	8bd2      	ldrh	r2, [r2, #30]
 8001756:	4610      	mov	r0, r2
 8001758:	4a36      	ldr	r2, [pc, #216]	; (8001834 <colorHandleRawValues+0x1e8>)
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4611      	mov	r1, r2
 800175e:	4403      	add	r3, r0
 8001760:	4a36      	ldr	r2, [pc, #216]	; (800183c <colorHandleRawValues+0x1f0>)
 8001762:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 8001766:	4b33      	ldr	r3, [pc, #204]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e059      	b.n	8001828 <colorHandleRawValues+0x1dc>
	}

	else if(raw_values_compteur==NB_MEASURE_WANTED){
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b14      	cmp	r3, #20
 800177a:	d155      	bne.n	8001828 <colorHandleRawValues+0x1dc>
		// Pret a faire la moyenne du tableau pour plus de fiabilité
		colorDisable(h_color_sensor);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fcbb 	bl	80010f8 <colorDisable>
		uint32_t green_mean=0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
		uint32_t red_mean=0;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]

		// green mean with erase of waste values (the 2 first one each time)
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 800178a:	2302      	movs	r3, #2
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e009      	b.n	80017a4 <colorHandleRawValues+0x158>
			green_mean=green_mean+color_scaled_values[i];
 8001790:	4a2a      	ldr	r2, [pc, #168]	; (800183c <colorHandleRawValues+0x1f0>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4413      	add	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b09      	cmp	r3, #9
 80017a8:	ddf2      	ble.n	8001790 <colorHandleRawValues+0x144>
		}
		green_color_value=floor(green_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fec8 	bl	8000544 <__aeabi_ui2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa14 	bl	8000be8 <__aeabi_d2uiz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <colorHandleRawValues+0x1f4>)
 80017c4:	6013      	str	r3, [r2, #0]
		h_color_sensor->green_color=green_color_value;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <colorHandleRawValues+0x1f4>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]

		//red values mean
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017ce:	230c      	movs	r3, #12
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	e009      	b.n	80017e8 <colorHandleRawValues+0x19c>
			red_mean=red_mean+color_scaled_values[i];
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <colorHandleRawValues+0x1f0>)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4413      	add	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b13      	cmp	r3, #19
 80017ec:	ddf2      	ble.n	80017d4 <colorHandleRawValues+0x188>
		}
		red_color_value=floor(red_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fea6 	bl	8000544 <__aeabi_ui2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9f2 	bl	8000be8 <__aeabi_d2uiz>
 8001804:	4603      	mov	r3, r0
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <colorHandleRawValues+0x1f8>)
 8001808:	6013      	str	r3, [r2, #0]
		h_color_sensor->red_color=red_color_value;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <colorHandleRawValues+0x1f8>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60da      	str	r2, [r3, #12]

		raw_values_compteur=0;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <colorHandleRawValues+0x1e8>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]

		//Affichage tableau
		/*for(int i=0;i<NB_MEASURE_WANTED;i++){
			printf("color_raw_values[%d] : %ld\t->\t color_scaled_value[%d] : %ld\r\n",i,color_raw_values[i],i,color_scaled_values[i]);
		}*/
		colorAnalyse(h_color_sensor,green_color_value,red_color_value);
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <colorHandleRawValues+0x1f4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a09      	ldr	r2, [pc, #36]	; (8001844 <colorHandleRawValues+0x1f8>)
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f810 	bl	8001848 <colorAnalyse>
	}

	return 0; // fonctionnement normal
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200002cc 	.word	0x200002cc
 8001838:	2000026c 	.word	0x2000026c
 800183c:	2000020c 	.word	0x2000020c
 8001840:	200002d0 	.word	0x200002d0
 8001844:	200002d4 	.word	0x200002d4

08001848 <colorAnalyse>:


// --- fonction d'analyse et de prise de décision ---

static void colorAnalyse(h_color_sensor_t * h_color_sensor, color_t green, color_t red){
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	printf("green : %ld \r\n",green);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	480f      	ldr	r0, [pc, #60]	; (8001894 <colorAnalyse+0x4c>)
 8001858:	f007 fb20 	bl	8008e9c <iprintf>
	printf("red : %ld \r\n",red);
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <colorAnalyse+0x50>)
 8001860:	f007 fb1c 	bl	8008e9c <iprintf>
	if(green<red){
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d203      	bcs.n	8001874 <colorAnalyse+0x2c>
		printf("c'est vert\r\n");
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <colorAnalyse+0x54>)
 800186e:	f007 fb9b 	bl	8008fa8 <puts>
		/*if(freeRTOS){
			printf("task resume all\r\n");
			xTaskResumeAll();
		}*/
	}
}
 8001872:	e00a      	b.n	800188a <colorAnalyse+0x42>
	else if(green==red){
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d103      	bne.n	8001884 <colorAnalyse+0x3c>
		colorDoMeasureAgain(h_color_sensor);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f811 	bl	80018a4 <colorDoMeasureAgain>
}
 8001882:	e002      	b.n	800188a <colorAnalyse+0x42>
		printf("c'est rouge\r\n");
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <colorAnalyse+0x58>)
 8001886:	f007 fb8f 	bl	8008fa8 <puts>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0800bfe4 	.word	0x0800bfe4
 8001898:	0800bff4 	.word	0x0800bff4
 800189c:	0800c004 	.word	0x0800c004
 80018a0:	0800c010 	.word	0x0800c010

080018a4 <colorDoMeasureAgain>:

static void colorDoMeasureAgain(h_color_sensor_t * h_color_sensor){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	colorEnable(h_color_sensor);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fc4f 	bl	8001150 <colorEnable>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <colorMeasureTask>:
// --- FreeRTOS ---

extern TaskHandle_t h_colorMeasureTask;
extern SemaphoreHandle_t colorMeasureSemaphore;

static void colorMeasureTask(void * pvParameters){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(colorMeasureSemaphore,portMAX_DELAY);
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <colorMeasureTask+0x24>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 fe53 	bl	8006578 <xQueueSemaphoreTake>
		//printf("-----contenu de colorMeasureTask------\r\n");
		// le semapore a été libéré
		h_color_sensor_t * h_color_sensor =(h_color_sensor_t *) pvParameters;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
		colorEnable(h_color_sensor);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff fc3a 	bl	8001150 <colorEnable>
	for(;;){
 80018dc:	e7f2      	b.n	80018c4 <colorMeasureTask+0x8>
 80018de:	bf00      	nop
 80018e0:	2000063c 	.word	0x2000063c

080018e4 <colorTaskCreation>:
	}
}

int colorTaskCreation(h_color_sensor_t * h_color_sensor){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]

	//creation colorMeasureTask et colorMeasureSempahore
	if(pdTRUE==xTaskCreate(colorMeasureTask,"colorMeasureTask",COLOR_STACK_DEPTH,(void *)h_color_sensor,COLOR_MEASURE_TASK_PRIORiTY,&h_colorMeasureTask)){
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <colorTaskCreation+0x68>)
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2303      	movs	r3, #3
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018fa:	4915      	ldr	r1, [pc, #84]	; (8001950 <colorTaskCreation+0x6c>)
 80018fc:	4815      	ldr	r0, [pc, #84]	; (8001954 <colorTaskCreation+0x70>)
 80018fe:	f005 f8b4 	bl	8006a6a <xTaskCreate>
 8001902:	4603      	mov	r3, r0
 8001904:	2b01      	cmp	r3, #1
 8001906:	d10f      	bne.n	8001928 <colorTaskCreation+0x44>
		printf("colorMeasureTask created successfully\r\n");
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <colorTaskCreation+0x74>)
 800190a:	f007 fb4d 	bl	8008fa8 <puts>
	}
	else{
		printf("colorMeasureTask creation failed !\r\n");
		return 1;
	}
	colorMeasureSemaphore=xSemaphoreCreateBinary();
 800190e:	2203      	movs	r2, #3
 8001910:	2100      	movs	r1, #0
 8001912:	2001      	movs	r0, #1
 8001914:	f004 fcc8 	bl	80062a8 <xQueueGenericCreate>
 8001918:	4603      	mov	r3, r0
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <colorTaskCreation+0x78>)
 800191c:	6013      	str	r3, [r2, #0]
	if(colorMeasureSemaphore==NULL){
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <colorTaskCreation+0x78>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <colorTaskCreation+0x58>
 8001926:	e004      	b.n	8001932 <colorTaskCreation+0x4e>
		printf("colorMeasureTask creation failed !\r\n");
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <colorTaskCreation+0x7c>)
 800192a:	f007 fb3d 	bl	8008fa8 <puts>
		return 1;
 800192e:	2301      	movs	r3, #1
 8001930:	e008      	b.n	8001944 <colorTaskCreation+0x60>
		printf("colorCalibSemaphore creation failed ! \r\n");
 8001932:	480c      	ldr	r0, [pc, #48]	; (8001964 <colorTaskCreation+0x80>)
 8001934:	f007 fb38 	bl	8008fa8 <puts>
		return 1;
 8001938:	2301      	movs	r3, #1
 800193a:	e003      	b.n	8001944 <colorTaskCreation+0x60>
	}
	printf("colorMeasureSemaphore created successfully\r\n");
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <colorTaskCreation+0x84>)
 800193e:	f007 fb33 	bl	8008fa8 <puts>
	return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000640 	.word	0x20000640
 8001950:	0800c020 	.word	0x0800c020
 8001954:	080018bd 	.word	0x080018bd
 8001958:	0800c034 	.word	0x0800c034
 800195c:	2000063c 	.word	0x2000063c
 8001960:	0800c05c 	.word	0x0800c05c
 8001964:	0800c080 	.word	0x0800c080
 8001968:	0800c0a8 	.word	0x0800c0a8

0800196c <timer_handle>:
 * tim_mode_t mode : htim configuration accirding to what is in .ioc file (INPUT_CAPTURE_IT, BASE_IT, PWM)
 * tim_status_t status : same but START,STOP
 * uint32_t channel ; the output channel of htim
 * @return none
 */
void timer_handle(TIM_HandleTypeDef htim, tim_mode_t mode, tim_status_t status,uint32_t channel){
 800196c:	b084      	sub	sp, #16
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
 8001972:	f107 0c08 	add.w	ip, r7, #8
 8001976:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(status==START){
 800197a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800197e:	2b01      	cmp	r3, #1
 8001980:	d11b      	bne.n	80019ba <timer_handle+0x4e>
		switch(mode){
 8001982:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001986:	2b03      	cmp	r3, #3
 8001988:	d00c      	beq.n	80019a4 <timer_handle+0x38>
 800198a:	2b03      	cmp	r3, #3
 800198c:	dc53      	bgt.n	8001a36 <timer_handle+0xca>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d002      	beq.n	8001998 <timer_handle+0x2c>
 8001992:	2b02      	cmp	r3, #2
 8001994:	d00c      	beq.n	80019b0 <timer_handle+0x44>
			break;
		case BASE_IT:
			HAL_TIM_Base_Start_IT(&htim);
			break;
		default :
			break;
 8001996:	e04e      	b.n	8001a36 <timer_handle+0xca>
			HAL_TIM_IC_Start_IT(&htim, channel);
 8001998:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800199a:	f107 0008 	add.w	r0, r7, #8
 800199e:	f002 fd5b 	bl	8004458 <HAL_TIM_IC_Start_IT>
			break;
 80019a2:	e04f      	b.n	8001a44 <timer_handle+0xd8>
			HAL_TIM_PWM_Start(&htim,channel);
 80019a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019a6:	f107 0008 	add.w	r0, r7, #8
 80019aa:	f002 fb79 	bl	80040a0 <HAL_TIM_PWM_Start>
			break;
 80019ae:	e049      	b.n	8001a44 <timer_handle+0xd8>
			HAL_TIM_Base_Start_IT(&htim);
 80019b0:	f107 0008 	add.w	r0, r7, #8
 80019b4:	f002 fa6c 	bl	8003e90 <HAL_TIM_Base_Start_IT>
			break;
 80019b8:	e044      	b.n	8001a44 <timer_handle+0xd8>
		}
	}
	else if (status==STOP){
 80019ba:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11b      	bne.n	80019fa <timer_handle+0x8e>
		switch(mode){
 80019c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d00c      	beq.n	80019e4 <timer_handle+0x78>
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	dc35      	bgt.n	8001a3a <timer_handle+0xce>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d002      	beq.n	80019d8 <timer_handle+0x6c>
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d00c      	beq.n	80019f0 <timer_handle+0x84>
			break;
		case BASE_IT:
			HAL_TIM_Base_Stop_IT(&htim);
			break;
		default :
			break;
 80019d6:	e030      	b.n	8001a3a <timer_handle+0xce>
			HAL_TIM_IC_Stop_IT(&htim, channel);
 80019d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	f002 fe8b 	bl	80046f8 <HAL_TIM_IC_Stop_IT>
			break;
 80019e2:	e02f      	b.n	8001a44 <timer_handle+0xd8>
			HAL_TIM_PWM_Stop(&htim,channel);
 80019e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019e6:	f107 0008 	add.w	r0, r7, #8
 80019ea:	f002 fc53 	bl	8004294 <HAL_TIM_PWM_Stop>
			break;
 80019ee:	e029      	b.n	8001a44 <timer_handle+0xd8>
			HAL_TIM_Base_Stop_IT(&htim);
 80019f0:	f107 0008 	add.w	r0, r7, #8
 80019f4:	f002 fac4 	bl	8003f80 <HAL_TIM_Base_Stop_IT>
			break;
 80019f8:	e024      	b.n	8001a44 <timer_handle+0xd8>
		}
	}
	else if (status==INIT){
 80019fa:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d11d      	bne.n	8001a3e <timer_handle+0xd2>
		switch(mode){
 8001a02:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d00b      	beq.n	8001a22 <timer_handle+0xb6>
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	dc19      	bgt.n	8001a42 <timer_handle+0xd6>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d002      	beq.n	8001a18 <timer_handle+0xac>
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d00a      	beq.n	8001a2c <timer_handle+0xc0>
			break;
		case BASE_IT:
			HAL_TIM_Base_Init(&htim);
			break;
		default :
			break;
 8001a16:	e014      	b.n	8001a42 <timer_handle+0xd6>
			HAL_TIM_IC_Init(&htim);
 8001a18:	f107 0008 	add.w	r0, r7, #8
 8001a1c:	f002 fcba 	bl	8004394 <HAL_TIM_IC_Init>
			break;
 8001a20:	e010      	b.n	8001a44 <timer_handle+0xd8>
			HAL_TIM_PWM_Init(&htim);
 8001a22:	f107 0008 	add.w	r0, r7, #8
 8001a26:	f002 fada 	bl	8003fde <HAL_TIM_PWM_Init>
			break;
 8001a2a:	e00b      	b.n	8001a44 <timer_handle+0xd8>
			HAL_TIM_Base_Init(&htim);
 8001a2c:	f107 0008 	add.w	r0, r7, #8
 8001a30:	f002 f9d6 	bl	8003de0 <HAL_TIM_Base_Init>
			break;
 8001a34:	e006      	b.n	8001a44 <timer_handle+0xd8>
			break;
 8001a36:	bf00      	nop
 8001a38:	e004      	b.n	8001a44 <timer_handle+0xd8>
			break;
 8001a3a:	bf00      	nop
 8001a3c:	e002      	b.n	8001a44 <timer_handle+0xd8>
		}
	}
 8001a3e:	bf00      	nop
 8001a40:	e000      	b.n	8001a44 <timer_handle+0xd8>
			break;
 8001a42:	bf00      	nop
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a4c:	b004      	add	sp, #16
 8001a4e:	4770      	bx	lr

08001a50 <GPIO_write>:
 * uint16_t gpio_pin : The pin of the GPIO you want to deal with
 * GPIO_PinState gpio_PinState : the state you want your GPIO to have (1 or 0)
 *
 * @return 0 if fail else 1
 */
void GPIO_write(GPIO_TypeDef * gpio_port,uint16_t gpio_pin,GPIO_PinState gpio_PinState ){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(gpio_port,gpio_pin,gpio_PinState);
 8001a60:	787a      	ldrb	r2, [r7, #1]
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f001 f88c 	bl	8002b84 <HAL_GPIO_WritePin>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <vApplicationGetIdleTaskMemory+0x30>)
 8001a8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	2000035c 	.word	0x2000035c
 8001aa4:	20000410 	.word	0x20000410

08001aa8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_FREERTOS_Init+0x30>)
 8001ab0:	1d3c      	adds	r4, r7, #4
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fa71 	bl	8005fac <osThreadCreate>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <MX_FREERTOS_Init+0x34>)
 8001ace:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad8:	0800c0e0 	.word	0x0800c0e0
 8001adc:	20000358 	.word	0x20000358

08001ae0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f004 faab 	bl	8006044 <osDelay>
 8001aee:	e7fb      	b.n	8001ae8 <StartDefaultTask+0x8>

08001af0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a46      	ldr	r2, [pc, #280]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a2e      	ldr	r2, [pc, #184]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <MX_GPIO_Init+0x14c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(color_S2_GPIO_Port, color_S2_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2110      	movs	r1, #16
 8001b9a:	4829      	ldr	r0, [pc, #164]	; (8001c40 <MX_GPIO_Init+0x150>)
 8001b9c:	f000 fff2 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, color_enable_Pin|color_S0_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	21c0      	movs	r1, #192	; 0xc0
 8001ba4:	4827      	ldr	r0, [pc, #156]	; (8001c44 <MX_GPIO_Init+0x154>)
 8001ba6:	f000 ffed 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, color_S3_Pin|color_S1_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	21c0      	movs	r1, #192	; 0xc0
 8001bae:	4826      	ldr	r0, [pc, #152]	; (8001c48 <MX_GPIO_Init+0x158>)
 8001bb0:	f000 ffe8 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = color_S2_Pin;
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(color_S2_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <MX_GPIO_Init+0x150>)
 8001bcc:	f000 fe2e 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8001bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4819      	ldr	r0, [pc, #100]	; (8001c4c <MX_GPIO_Init+0x15c>)
 8001be8:	f000 fe20 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = color_enable_Pin|color_S0_Pin;
 8001bec:	23c0      	movs	r3, #192	; 0xc0
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4810      	ldr	r0, [pc, #64]	; (8001c44 <MX_GPIO_Init+0x154>)
 8001c04:	f000 fe12 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = color_S3_Pin|color_S1_Pin;
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480a      	ldr	r0, [pc, #40]	; (8001c48 <MX_GPIO_Init+0x158>)
 8001c20:	f000 fe04 	bl	800282c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2105      	movs	r1, #5
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	f000 fdd5 	bl	80027d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f000 fdee 	bl	8002810 <HAL_NVIC_EnableIRQ>

}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
		colorSetPhotodiodeType(&color_sensor1, GREEN);
		printf("semaphore colormeasureSemaphore donné\r\n");
		xSemaphoreGiveFromISR(colorMeasureSemaphore,&higher_priority_task_woken);*/
		//colorEnable(&color_sensor1);
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <bidonTask>:

TaskHandle_t h_bidonTask;
TaskHandle_t h_processWU;
SemaphoreHandle_t sem_bidon;

void bidonTask(void * pvParameters){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	for(;;){
		//printf("waiting for semaphore\r\n");
		xSemaphoreTake(sem_bidon,portMAX_DELAY);
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <bidonTask+0x20>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 fc7d 	bl	8006578 <xQueueSemaphoreTake>
		printf("je suis la fonction bidon\r\n");
 8001c7e:	4803      	ldr	r0, [pc, #12]	; (8001c8c <bidonTask+0x24>)
 8001c80:	f007 f992 	bl	8008fa8 <puts>
		xSemaphoreTake(sem_bidon,portMAX_DELAY);
 8001c84:	e7f4      	b.n	8001c70 <bidonTask+0x8>
 8001c86:	bf00      	nop
 8001c88:	2000064c 	.word	0x2000064c
 8001c8c:	0800c0fc 	.word	0x0800c0fc

08001c90 <task_process_Wake_Up>:
	}
}

void task_process_Wake_Up(void * pvParameters){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	sem_bidon=xSemaphoreCreateBinary();
 8001c98:	2203      	movs	r2, #3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f004 fb03 	bl	80062a8 <xQueueGenericCreate>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <task_process_Wake_Up+0x4c>)
 8001ca6:	6013      	str	r3, [r2, #0]
	uint32_t counter=0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
		/*if((counter%100)==0){
			printf("\ncounter=0mod(1000)\r\n");
			xSemaphoreGive(sem_bidon);
			printf("semaphore sem_bidon donné\r\n");
		}*/
		if (counter ==300){
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001cb2:	d10b      	bne.n	8001ccc <task_process_Wake_Up+0x3c>
			xSemaphoreGive(colorMeasureSemaphore);
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <task_process_Wake_Up+0x50>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	f004 fb55 	bl	800636c <xQueueGenericSend>
			printf("semaphore colorMeasureSemaphore donné\r\n");
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <task_process_Wake_Up+0x54>)
 8001cc4:	f007 f970 	bl	8008fa8 <puts>
			counter=0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
		}
		counter++;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
		vTaskDelay(10); //crée le delay de 1ms
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f005 f818 	bl	8006d08 <vTaskDelay>
		if (counter ==300){
 8001cd8:	e7e8      	b.n	8001cac <task_process_Wake_Up+0x1c>
 8001cda:	bf00      	nop
 8001cdc:	2000064c 	.word	0x2000064c
 8001ce0:	2000063c 	.word	0x2000063c
 8001ce4:	0800c118 	.word	0x0800c118

08001ce8 <creationTaskProcessing>:
	}
}

void creationTaskProcessing(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af02      	add	r7, sp, #8
	// creation tache process

	if(pdTRUE==xTaskCreate(task_process_Wake_Up,"Taskprocess",COLOR_STACK_DEPTH,NULL,10,&h_processWU)){
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <creationTaskProcessing+0x84>)
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cfc:	491c      	ldr	r1, [pc, #112]	; (8001d70 <creationTaskProcessing+0x88>)
 8001cfe:	481d      	ldr	r0, [pc, #116]	; (8001d74 <creationTaskProcessing+0x8c>)
 8001d00:	f004 feb3 	bl	8006a6a <xTaskCreate>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d103      	bne.n	8001d12 <creationTaskProcessing+0x2a>
		printf("process wake up created successfully\r\n");
 8001d0a:	481b      	ldr	r0, [pc, #108]	; (8001d78 <creationTaskProcessing+0x90>)
 8001d0c:	f007 f94c 	bl	8008fa8 <puts>
 8001d10:	e002      	b.n	8001d18 <creationTaskProcessing+0x30>
	}
	else{
		printf("process wake up creation failed !\r\n");
 8001d12:	481a      	ldr	r0, [pc, #104]	; (8001d7c <creationTaskProcessing+0x94>)
 8001d14:	f007 f948 	bl	8008fa8 <puts>
	}

	// creation tache bidon
	if(pdTRUE==xTaskCreate(bidonTask,"bidonTask",COLOR_STACK_DEPTH,NULL,2,&h_bidonTask)){
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <creationTaskProcessing+0x98>)
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d26:	4917      	ldr	r1, [pc, #92]	; (8001d84 <creationTaskProcessing+0x9c>)
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <creationTaskProcessing+0xa0>)
 8001d2a:	f004 fe9e 	bl	8006a6a <xTaskCreate>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d103      	bne.n	8001d3c <creationTaskProcessing+0x54>
		printf("bidonTask created successfully\r\n");
 8001d34:	4815      	ldr	r0, [pc, #84]	; (8001d8c <creationTaskProcessing+0xa4>)
 8001d36:	f007 f937 	bl	8008fa8 <puts>
 8001d3a:	e002      	b.n	8001d42 <creationTaskProcessing+0x5a>
	}
	else{
		printf("bidonTask creation failed !\r\n");
 8001d3c:	4814      	ldr	r0, [pc, #80]	; (8001d90 <creationTaskProcessing+0xa8>)
 8001d3e:	f007 f933 	bl	8008fa8 <puts>
	}

	// creation semaphore bidon
	sem_bidon=xSemaphoreCreateBinary();
 8001d42:	2203      	movs	r2, #3
 8001d44:	2100      	movs	r1, #0
 8001d46:	2001      	movs	r0, #1
 8001d48:	f004 faae 	bl	80062a8 <xQueueGenericCreate>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <creationTaskProcessing+0xac>)
 8001d50:	6013      	str	r3, [r2, #0]
	if(sem_bidon==NULL){
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <creationTaskProcessing+0xac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <creationTaskProcessing+0x78>
		printf("sem bidon creation failed ! \r\n");
 8001d5a:	480f      	ldr	r0, [pc, #60]	; (8001d98 <creationTaskProcessing+0xb0>)
 8001d5c:	f007 f924 	bl	8008fa8 <puts>
	}
	printf("sem bidon created sucessfully\r\n");
 8001d60:	480e      	ldr	r0, [pc, #56]	; (8001d9c <creationTaskProcessing+0xb4>)
 8001d62:	f007 f921 	bl	8008fa8 <puts>
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000648 	.word	0x20000648
 8001d70:	0800c140 	.word	0x0800c140
 8001d74:	08001c91 	.word	0x08001c91
 8001d78:	0800c14c 	.word	0x0800c14c
 8001d7c:	0800c174 	.word	0x0800c174
 8001d80:	20000644 	.word	0x20000644
 8001d84:	0800c198 	.word	0x0800c198
 8001d88:	08001c69 	.word	0x08001c69
 8001d8c:	0800c1a4 	.word	0x0800c1a4
 8001d90:	0800c1c4 	.word	0x0800c1c4
 8001d94:	2000064c 	.word	0x2000064c
 8001d98:	0800c1e4 	.word	0x0800c1e4
 8001d9c:	0800c204 	.word	0x0800c204

08001da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da4:	f000 fc33 	bl	800260e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da8:	f000 f832 	bl	8001e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dac:	f7ff fea0 	bl	8001af0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001db0:	f000 fa96 	bl	80022e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001db4:	f000 fb50 	bl	8002458 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //desactive the internal buffering for scanf, that is set by default in syscalls.c
  setvbuf(stdin, NULL, _IONBF, 0);
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <main+0x60>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6858      	ldr	r0, [r3, #4]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f007 f98a 	bl	80090dc <setvbuf>

	printf("\n\n---- color sensor ----\r\n");
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <main+0x64>)
 8001dca:	f007 f8ed 	bl	8008fa8 <puts>
  	colorHandleCalibrationSensor(&color_sensor1);
  	printf("waiting for button press to measure : \r\n");*/

	// ----- test 4 : FreeRTOS -----

	colorSensorInit(&color_sensor1, GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <main+0x68>)
 8001dd6:	f7ff f93d 	bl	8001054 <colorSensorInit>
	colorHandleCalibrationSensor(&color_sensor1);
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <main+0x68>)
 8001ddc:	f7ff f9e4 	bl	80011a8 <colorHandleCalibrationSensor>

	colorTaskCreation(&color_sensor1);
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <main+0x68>)
 8001de2:	f7ff fd7f 	bl	80018e4 <colorTaskCreation>
	creationTaskProcessing();
 8001de6:	f7ff ff7f 	bl	8001ce8 <creationTaskProcessing>
	//colorStartSensor(&color_sensor1);




	printf("scheduler started\r\n");
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <main+0x6c>)
 8001dec:	f007 f8dc 	bl	8008fa8 <puts>
  	vTaskStartScheduler();
 8001df0:	f004 ffc0 	bl	8006d74 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001df4:	f7ff fe58 	bl	8001aa8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001df8:	f004 f8d1 	bl	8005f9e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001dfc:	e7fe      	b.n	8001dfc <main+0x5c>
 8001dfe:	bf00      	nop
 8001e00:	20000010 	.word	0x20000010
 8001e04:	0800c224 	.word	0x0800c224
 8001e08:	20000610 	.word	0x20000610
 8001e0c:	0800c240 	.word	0x0800c240

08001e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b094      	sub	sp, #80	; 0x50
 8001e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	2230      	movs	r2, #48	; 0x30
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 fb35 	bl	800848e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <SystemClock_Config+0xd4>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <SystemClock_Config+0xd4>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <SystemClock_Config+0xd4>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <SystemClock_Config+0xd8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <SystemClock_Config+0xd8>)
 8001e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <SystemClock_Config+0xd8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e78:	2319      	movs	r3, #25
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e86:	2309      	movs	r3, #9
 8001e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fefa 	bl	8002c88 <HAL_RCC_OscConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e9a:	f000 f869 	bl	8001f70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e9e:	f000 fea3 	bl	8002be8 <HAL_PWREx_EnableOverDrive>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ea8:	f000 f862 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2106      	movs	r1, #6
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 f980 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ed6:	f000 f84b 	bl	8001f70 <Error_Handler>
  }
}
 8001eda:	bf00      	nop
 8001edc:	3750      	adds	r7, #80	; 0x50
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <__io_putchar>:

/* USER CODE BEGIN 4 */

//--_ Redirection du printf
int __io_putchar(int ch){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001ef4:	1d39      	adds	r1, r7, #4
 8001ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efa:	2201      	movs	r2, #1
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <__io_putchar+0x20>)
 8001efe:	f003 faeb 	bl	80054d8 <HAL_UART_Transmit>
	return ch;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200006ec 	.word	0x200006ec

08001f10 <__io_getchar>:


// --- redirection du scanf
int __io_getchar(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <__io_getchar+0x38>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f22:	1df9      	adds	r1, r7, #7
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <__io_getchar+0x38>)
 8001f2c:	f003 fb57 	bl	80055de <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f30:	1df9      	adds	r1, r7, #7
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	2201      	movs	r2, #1
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <__io_getchar+0x38>)
 8001f3a:	f003 facd 	bl	80054d8 <HAL_UART_Transmit>
  return ch;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200006ec 	.word	0x200006ec

08001f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f5e:	f000 fb63 	bl	8002628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40001000 	.word	0x40001000

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	f06f 0001 	mvn.w	r0, #1
 8001fba:	f000 fc0d 	bl	80027d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_InitTick+0xe0>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a32      	ldr	r2, [pc, #200]	; (80020ac <HAL_InitTick+0xe0>)
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_InitTick+0xe0>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff4:	f107 0210 	add.w	r2, r7, #16
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 facc 	bl	800359c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d103      	bne.n	8002016 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800200e:	f001 fa9d 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8002012:	6378      	str	r0, [r7, #52]	; 0x34
 8002014:	e004      	b.n	8002020 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002016:	f001 fa99 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 800201a:	4603      	mov	r3, r0
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_InitTick+0xe4>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	3b01      	subs	r3, #1
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_InitTick+0xe8>)
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_InitTick+0xec>)
 8002032:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_InitTick+0xe8>)
 8002036:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_InitTick+0xe8>)
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_InitTick+0xe8>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_InitTick+0xe8>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_InitTick+0xe8>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002054:	4817      	ldr	r0, [pc, #92]	; (80020b4 <HAL_InitTick+0xe8>)
 8002056:	f001 fec3 	bl	8003de0 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11b      	bne.n	80020a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002068:	4812      	ldr	r0, [pc, #72]	; (80020b4 <HAL_InitTick+0xe8>)
 800206a:	f001 ff11 	bl	8003e90 <HAL_TIM_Base_Start_IT>
 800206e:	4603      	mov	r3, r0
 8002070:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002074:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002078:	2b00      	cmp	r3, #0
 800207a:	d111      	bne.n	80020a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800207c:	2036      	movs	r0, #54	; 0x36
 800207e:	f000 fbc7 	bl	8002810 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d808      	bhi.n	800209a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002088:	2200      	movs	r2, #0
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	2036      	movs	r0, #54	; 0x36
 800208e:	f000 fba3 	bl	80027d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_InitTick+0xf0>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e002      	b.n	80020a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3738      	adds	r7, #56	; 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	431bde83 	.word	0x431bde83
 80020b4:	20000650 	.word	0x20000650
 80020b8:	40001000 	.word	0x40001000
 80020bc:	20000004 	.word	0x20000004

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <NMI_Handler+0x4>

080020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <MemManage_Handler+0x4>

080020d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler+0x4>

080020de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	colorSensorHandleInputCapture_IT(&color_sensor1, TIM2);
 80020f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <TIM2_IRQHandler+0x18>)
 80020f6:	f7ff f989 	bl	800140c <colorSensorHandleInputCapture_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fa:	4803      	ldr	r0, [pc, #12]	; (8002108 <TIM2_IRQHandler+0x1c>)
 80020fc:	f002 fbba 	bl	8004874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000610 	.word	0x20000610
 8002108:	200006a0 	.word	0x200006a0

0800210c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8002110:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002114:	f000 fd50 	bl	8002bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <TIM6_DAC_IRQHandler+0x10>)
 8002122:	f002 fba7 	bl	8004874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000650 	.word	0x20000650

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:

int _kill(int pid, int sig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800214a:	f006 f853 	bl	80081f4 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
	return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:

void _exit (int status)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002172:	e7fe      	b.n	8002172 <_exit+0x12>

08002174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002186:	f7ff fec3 	bl	8001f10 <__io_getchar>
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
	}

return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe8f 	bl	8001eec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf1      	blt.n	80021c0 <_write+0x12>
	}
	return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_close>:

int _close(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	return -1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	605a      	str	r2, [r3, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_isatty>:

int _isatty(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f005 ffb8 	bl	80081f4 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20050000 	.word	0x20050000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	2000069c 	.word	0x2000069c
 80022b8:	200044d8 	.word	0x200044d8

080022bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <MX_TIM2_Init+0xdc>)
 800230e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002316:	2263      	movs	r2, #99	; 0x63
 8002318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b28      	ldr	r3, [pc, #160]	; (80023bc <MX_TIM2_Init+0xdc>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002322:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <MX_TIM2_Init+0xe0>)
 8002324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <MX_TIM2_Init+0xdc>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002334:	f001 fd54 	bl	8003de0 <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800233e:	f7ff fe17 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002346:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	4619      	mov	r1, r3
 800234e:	481b      	ldr	r0, [pc, #108]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002350:	f002 fc4c 	bl	8004bec <HAL_TIM_ConfigClockSource>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800235a:	f7ff fe09 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800235e:	4817      	ldr	r0, [pc, #92]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002360:	f002 f818 	bl	8004394 <HAL_TIM_IC_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800236a:	f7ff fe01 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	480f      	ldr	r0, [pc, #60]	; (80023bc <MX_TIM2_Init+0xdc>)
 800237e:	f002 ffb1 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002388:	f7ff fdf2 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002390:	2301      	movs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	4619      	mov	r1, r3
 80023a2:	4806      	ldr	r0, [pc, #24]	; (80023bc <MX_TIM2_Init+0xdc>)
 80023a4:	f002 fb85 	bl	8004ab2 <HAL_TIM_IC_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80023ae:	f7ff fddf 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	3730      	adds	r7, #48	; 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200006a0 	.word	0x200006a0
 80023c0:	000f4240 	.word	0x000f4240

080023c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d130      	bne.n	8002448 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = color_input_freq_Pin;
 8002416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002420:	2301      	movs	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(color_input_freq_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <HAL_TIM_Base_MspInit+0x90>)
 8002434:	f000 f9fa 	bl	800282c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2105      	movs	r1, #5
 800243c:	201c      	movs	r0, #28
 800243e:	f000 f9cb 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002442:	201c      	movs	r0, #28
 8002444:	f000 f9e4 	bl	8002810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000

08002458 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 800245e:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <MX_USART1_UART_Init+0x5c>)
 8002460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_USART1_UART_Init+0x58>)
 800249c:	f002 ffce 	bl	800543c <HAL_UART_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024a6:	f7ff fd63 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200006ec 	.word	0x200006ec
 80024b4:	40011000 	.word	0x40011000

080024b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0ac      	sub	sp, #176	; 0xb0
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	2284      	movs	r2, #132	; 0x84
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f005 ffd8 	bl	800848e <memset>
  if(uartHandle->Instance==USART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_UART_MspInit+0xf4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d15c      	bne.n	80025a2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f0:	f107 0318 	add.w	r3, r7, #24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f883 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002500:	f7ff fd36 	bl	8001f70 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6453      	str	r3, [r2, #68]	; 0x44
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002564:	2307      	movs	r3, #7
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256e:	4619      	mov	r1, r3
 8002570:	4810      	ldr	r0, [pc, #64]	; (80025b4 <HAL_UART_MspInit+0xfc>)
 8002572:	f000 f95b 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002590:	2307      	movs	r3, #7
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800259a:	4619      	mov	r1, r3
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <HAL_UART_MspInit+0x100>)
 800259e:	f000 f945 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025a2:	bf00      	nop
 80025a4:	37b0      	adds	r7, #176	; 0xb0
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020000 	.word	0x40020000

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff fe69 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f005 ff1b 	bl	8008424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7ff fbd7 	bl	8001da0 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002600:	0800c688 	.word	0x0800c688
  ldr r2, =_sbss
 8002604:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002608:	200044d4 	.word	0x200044d4

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>

0800260e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002612:	2003      	movs	r0, #3
 8002614:	f000 f8d5 	bl	80027c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002618:	200f      	movs	r0, #15
 800261a:	f7ff fcd7 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261e:	f7ff fcad 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x20>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_IncTick+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_IncTick+0x24>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000008 	.word	0x20000008
 800264c:	20000774 	.word	0x20000774

08002650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return uwTick;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_GetTick+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000774 	.word	0x20000774

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <__NVIC_SetPriorityGrouping+0x40>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	4313      	orrs	r3, r2
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00
 80026ac:	05fa0000 	.word	0x05fa0000

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ff4c 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ea:	f7ff ff61 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 80027ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f7ff ffb1 	bl	800275c <NVIC_EncodePriority>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff80 	bl	8002708 <__NVIC_SetPriority>
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff54 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e175      	b.n	8002b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 8164 	bne.w	8002b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d005      	beq.n	8002882 <HAL_GPIO_Init+0x56>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d130      	bne.n	80028e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 0201 	and.w	r2, r3, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d017      	beq.n	8002920 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d123      	bne.n	8002974 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	08da      	lsrs	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3208      	adds	r2, #8
 800296e:	69b9      	ldr	r1, [r7, #24]
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80be 	beq.w	8002b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ce:	4a61      	ldr	r2, [pc, #388]	; (8002b54 <HAL_GPIO_Init+0x328>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d037      	beq.n	8002a6a <HAL_GPIO_Init+0x23e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_GPIO_Init+0x23a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a56      	ldr	r2, [pc, #344]	; (8002b60 <HAL_GPIO_Init+0x334>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02b      	beq.n	8002a62 <HAL_GPIO_Init+0x236>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d025      	beq.n	8002a5e <HAL_GPIO_Init+0x232>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_GPIO_Init+0x33c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_GPIO_Init+0x22e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HAL_GPIO_Init+0x340>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x22a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_GPIO_Init+0x344>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x226>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <HAL_GPIO_Init+0x348>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_GPIO_Init+0x34c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x21e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4f      	ldr	r2, [pc, #316]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x21a>
 8002a42:	2309      	movs	r3, #9
 8002a44:	e012      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a46:	230a      	movs	r3, #10
 8002a48:	e010      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e00e      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	; (8002b54 <HAL_GPIO_Init+0x328>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a34      	ldr	r2, [pc, #208]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae86 	bls.w	800284c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40021c00 	.word	0x40021c00
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40022400 	.word	0x40022400
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f83a 	bl	8001c50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c16:	f7ff fd1b 	bl	8002650 <HAL_GetTick>
 8002c1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c1c:	e009      	b.n	8002c32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c1e:	f7ff fd17 	bl	8002650 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2c:	d901      	bls.n	8002c32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e022      	b.n	8002c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7ff fd00 	bl	8002650 <HAL_GetTick>
 8002c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c52:	e009      	b.n	8002c68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c54:	f7ff fcfc 	bl	8002650 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c62:	d901      	bls.n	8002c68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e007      	b.n	8002c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c74:	d1ee      	bne.n	8002c54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40007000 	.word	0x40007000

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e291      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8087 	beq.w	8002dba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cac:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb8:	4b93      	ldr	r3, [pc, #588]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0x62>
 8002cc4:	4b90      	ldr	r3, [pc, #576]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd0:	d10b      	bne.n	8002cea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x130>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d168      	bne.n	8002db8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e26b      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x7a>
 8002cf4:	4b84      	ldr	r3, [pc, #528]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e02e      	b.n	8002d60 <HAL_RCC_OscConfig+0xd8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x9c>
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b7c      	ldr	r3, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a7b      	ldr	r2, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xd8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0xc0>
 8002d2e:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xd8>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6e      	ldr	r2, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a6b      	ldr	r2, [pc, #428]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff fc72 	bl	8002650 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff fc6e 	bl	8002650 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e21f      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xe8>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7ff fc5e 	bl	8002650 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fc5a 	bl	8002650 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e20b      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b57      	ldr	r3, [pc, #348]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x110>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d069      	beq.n	8002e9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc6:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x190>
 8002dde:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x17a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1df      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	493d      	ldr	r1, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e040      	b.n	8002e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d023      	beq.n	8002e68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a38      	ldr	r2, [pc, #224]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7ff fc10 	bl	8002650 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7ff fc0c 	bl	8002650 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1bd      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4929      	ldr	r1, [pc, #164]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
 8002e66:	e018      	b.n	8002e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff fbec 	bl	8002650 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7ff fbe8 	bl	8002650 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e199      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d038      	beq.n	8002f18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d019      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7ff fbc9 	bl	8002650 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7ff fbc5 	bl	8002650 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e176      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x23a>
 8002ee0:	e01a      	b.n	8002f18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7ff fbaf 	bl	8002650 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7ff fbab 	bl	8002650 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d903      	bls.n	8002f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e15c      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
 8002f08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ee      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a4 	beq.w	800306e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10d      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a87      	ldr	r2, [pc, #540]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4e:	4b82      	ldr	r3, [pc, #520]	; (8003158 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f5a:	4b7f      	ldr	r3, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7e      	ldr	r2, [pc, #504]	; (8003158 <HAL_RCC_OscConfig+0x4d0>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f66:	f7ff fb73 	bl	8002650 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7ff fb6f 	bl	8002650 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e120      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x31a>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	e02d      	b.n	8002ffe <HAL_RCC_OscConfig+0x376>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x33c>
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a66      	ldr	r2, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	e01c      	b.n	8002ffe <HAL_RCC_OscConfig+0x376>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x35e>
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a60      	ldr	r2, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0x376>
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a5a      	ldr	r2, [pc, #360]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	4b58      	ldr	r3, [pc, #352]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a57      	ldr	r2, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d015      	beq.n	8003032 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7ff fb23 	bl	8002650 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7ff fb1f 	bl	8002650 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0ce      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCC_OscConfig+0x386>
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7ff fb0d 	bl	8002650 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7ff fb09 	bl	8002650 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a4 	beq.w	80031c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d06b      	beq.n	800315c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d149      	bne.n	8003120 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a30      	ldr	r2, [pc, #192]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7ff fada 	bl	8002650 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7ff fad6 	bl	8002650 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e087      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	3b01      	subs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	4313      	orrs	r3, r2
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 80030e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7ff faaa 	bl	8002650 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7ff faa6 	bl	8002650 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e057      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x478>
 800311e:	e04f      	b.n	80031c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7ff fa90 	bl	8002650 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7ff fa8c 	bl	8002650 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e03d      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x4ac>
 8003152:	e035      	b.n	80031c0 <HAL_RCC_OscConfig+0x538>
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x544>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d028      	beq.n	80031bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d121      	bne.n	80031bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d11a      	bne.n	80031bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003192:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003194:	4293      	cmp	r3, r2
 8003196:	d111      	bne.n	80031bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	3b01      	subs	r3, #1
 80031a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d0      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	4965      	ldr	r1, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d040      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e073      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06b      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4936      	ldr	r1, [pc, #216]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7ff f9c4 	bl	8002650 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7ff f9c0 	bl	8002650 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e053      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d210      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 020f 	bic.w	r2, r3, #15
 800330a:	4922      	ldr	r1, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1cc>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1d0>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fe22 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	0800c268 	.word	0x0800c268
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b090      	sub	sp, #64	; 0x40
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
 80033b4:	2300      	movs	r3, #0
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b8:	2300      	movs	r3, #0
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80a1 	bhi.w	8003514 <HAL_RCC_GetSysClockFreq+0x16c>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e09b      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_GetSysClockFreq+0x184>)
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033e0:	e09b      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033e6:	e098      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b4f      	ldr	r3, [pc, #316]	; (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033f2:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	627a      	str	r2, [r7, #36]	; 0x24
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003410:	2100      	movs	r1, #0
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_GetSysClockFreq+0x188>)
 8003414:	fb03 f201 	mul.w	r2, r3, r1
 8003418:	2300      	movs	r3, #0
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	4413      	add	r3, r2
 8003420:	4a43      	ldr	r2, [pc, #268]	; (8003530 <HAL_RCC_GetSysClockFreq+0x188>)
 8003422:	fba0 1202 	umull	r1, r2, r0, r2
 8003426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003428:	460a      	mov	r2, r1
 800342a:	62ba      	str	r2, [r7, #40]	; 0x28
 800342c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800342e:	4413      	add	r3, r2
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	2200      	movs	r2, #0
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	61fa      	str	r2, [r7, #28]
 800343a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003442:	f7fd fbf1 	bl	8000c28 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4613      	mov	r3, r2
 800344c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344e:	e053      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	2200      	movs	r2, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	617a      	str	r2, [r7, #20]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003462:	f04f 0b00 	mov.w	fp, #0
 8003466:	4652      	mov	r2, sl
 8003468:	465b      	mov	r3, fp
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003478:	0150      	lsls	r0, r2, #5
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	ebb2 080a 	subs.w	r8, r2, sl
 8003482:	eb63 090b 	sbc.w	r9, r3, fp
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800349a:	ebb2 0408 	subs.w	r4, r2, r8
 800349e:	eb63 0509 	sbc.w	r5, r3, r9
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	00eb      	lsls	r3, r5, #3
 80034ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b0:	00e2      	lsls	r2, r4, #3
 80034b2:	4614      	mov	r4, r2
 80034b4:	461d      	mov	r5, r3
 80034b6:	eb14 030a 	adds.w	r3, r4, sl
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	eb45 030b 	adc.w	r3, r5, fp
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e2:	2200      	movs	r2, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	60fa      	str	r2, [r7, #12]
 80034e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ec:	f7fd fb9c 	bl	8000c28 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003512:	e002      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetSysClockFreq+0x184>)
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800351c:	4618      	mov	r0, r3
 800351e:	3740      	adds	r7, #64	; 0x40
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	00f42400 	.word	0x00f42400
 8003530:	017d7840 	.word	0x017d7840

08003534 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003550:	f7ff fff0 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a9b      	lsrs	r3, r3, #10
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	0800c278 	.word	0x0800c278

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003578:	f7ff ffdc 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0b5b      	lsrs	r3, r3, #13
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4903      	ldr	r1, [pc, #12]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	0800c278 	.word	0x0800c278

0800359c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	220f      	movs	r2, #15
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	08db      	lsrs	r3, r3, #3
 80035d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_RCC_GetClockConfig+0x60>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40023c00 	.word	0x40023c00

08003600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003628:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a68      	ldr	r2, [pc, #416]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003632:	6093      	str	r3, [r2, #8]
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	4964      	ldr	r1, [pc, #400]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d017      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800365a:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	4959      	ldr	r1, [pc, #356]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003678:	d101      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003696:	4b4e      	ldr	r3, [pc, #312]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	494a      	ldr	r1, [pc, #296]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b4:	d101      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 808b 	beq.w	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ee:	6413      	str	r3, [r2, #64]	; 0x40
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe ffa2 	bl	8002650 <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe ff9e 	bl	8002650 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e357      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372e:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d035      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	429a      	cmp	r2, r3
 800374a:	d02e      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003754:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d114      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe ff66 	bl	8002650 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe ff62 	bl	8002650 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e319      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b6:	d111      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037c6:	400b      	ands	r3, r1
 80037c8:	4901      	ldr	r1, [pc, #4]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	0ffffcff 	.word	0x0ffffcff
 80037dc:	4baa      	ldr	r3, [pc, #680]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4aa9      	ldr	r2, [pc, #676]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	4ba7      	ldr	r3, [pc, #668]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	49a4      	ldr	r1, [pc, #656]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d010      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003806:	4ba0      	ldr	r3, [pc, #640]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380c:	4a9e      	ldr	r2, [pc, #632]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003812:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003816:	4b9c      	ldr	r3, [pc, #624]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003818:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	4999      	ldr	r1, [pc, #612]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003834:	4b94      	ldr	r3, [pc, #592]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003842:	4991      	ldr	r1, [pc, #580]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003856:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	4988      	ldr	r1, [pc, #544]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003878:	4b83      	ldr	r3, [pc, #524]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003886:	4980      	ldr	r1, [pc, #512]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4977      	ldr	r1, [pc, #476]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038bc:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f023 0203 	bic.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	496f      	ldr	r1, [pc, #444]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038de:	4b6a      	ldr	r3, [pc, #424]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f023 020c 	bic.w	r2, r3, #12
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	4966      	ldr	r1, [pc, #408]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003900:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	495e      	ldr	r1, [pc, #376]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003922:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	4955      	ldr	r1, [pc, #340]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003944:	4b50      	ldr	r3, [pc, #320]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	494d      	ldr	r1, [pc, #308]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003966:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	4944      	ldr	r1, [pc, #272]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003988:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	493c      	ldr	r1, [pc, #240]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	4933      	ldr	r1, [pc, #204]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039da:	492b      	ldr	r1, [pc, #172]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d011      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fc:	4922      	ldr	r1, [pc, #136]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3c:	4912      	ldr	r1, [pc, #72]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a60:	4909      	ldr	r1, [pc, #36]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d006      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80d9 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a01      	ldr	r2, [pc, #4]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fddf 	bl	8002650 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a96:	f7fe fddb 	bl	8002650 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	; 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e194      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d021      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11d      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ac8:	4b64      	ldr	r3, [pc, #400]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad6:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	019a      	lsls	r2, r3, #6
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	071b      	lsls	r3, r3, #28
 8003afc:	4957      	ldr	r1, [pc, #348]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02e      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2e:	d129      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b30:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b36:	0c1b      	lsrs	r3, r3, #16
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	0f1b      	lsrs	r3, r3, #28
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	019a      	lsls	r2, r3, #6
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	071b      	lsls	r3, r3, #28
 8003b64:	493d      	ldr	r1, [pc, #244]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b72:	f023 021f 	bic.w	r2, r3, #31
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	4937      	ldr	r1, [pc, #220]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01d      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	0e1b      	lsrs	r3, r3, #24
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba4:	0f1b      	lsrs	r3, r3, #28
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	019a      	lsls	r2, r3, #6
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	071b      	lsls	r3, r3, #28
 8003bc4:	4925      	ldr	r1, [pc, #148]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d011      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	019a      	lsls	r2, r3, #6
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	071b      	lsls	r3, r3, #28
 8003bf4:	4919      	ldr	r1, [pc, #100]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c08:	f7fe fd22 	bl	8002650 <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c10:	f7fe fd1e 	bl	8002650 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0d7      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 80cd 	bne.w	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c42:	f7fe fd05 	bl	8002650 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c4a:	f7fe fd01 	bl	8002650 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b64      	cmp	r3, #100	; 0x64
 8003c56:	d903      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0ba      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c60:	4b5e      	ldr	r3, [pc, #376]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6c:	d0ed      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d02e      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d12a      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c96:	4b51      	ldr	r3, [pc, #324]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	0f1b      	lsrs	r3, r3, #28
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	019a      	lsls	r2, r3, #6
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	071b      	lsls	r3, r3, #28
 8003cca:	4944      	ldr	r1, [pc, #272]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cd2:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	493d      	ldr	r1, [pc, #244]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d022      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d00:	d11d      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	0f1b      	lsrs	r3, r3, #28
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	019a      	lsls	r2, r3, #6
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	4929      	ldr	r1, [pc, #164]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d028      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d58:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	019a      	lsls	r2, r3, #6
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	431a      	orrs	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	071b      	lsls	r3, r3, #28
 8003d7e:	4917      	ldr	r1, [pc, #92]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4911      	ldr	r1, [pc, #68]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da8:	f7fe fc52 	bl	8002650 <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003db0:	f7fe fc4e 	bl	8002650 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e007      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dce:	d1ef      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e049      	b.n	8003e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe fadc 	bl	80023c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 ffd6 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e054      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed2:	d01d      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d115      	bne.n	8003f3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_TIM_Base_Start_IT+0xec>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d015      	beq.n	8003f4e <HAL_TIM_Base_Start_IT+0xbe>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d011      	beq.n	8003f4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	e008      	b.n	8003f4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e000      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40001800 	.word	0x40001800
 8003f7c:	00010007 	.word	0x00010007

08003f80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	f240 4344 	movw	r3, #1092	; 0x444
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e049      	b.n	8004084 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f841 	bl	800408c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f000 fed7 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x24>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e03c      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d109      	bne.n	80040de <HAL_TIM_PWM_Start+0x3e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	e02f      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x58>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e022      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start+0x72>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e015      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b10      	cmp	r3, #16
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x8c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e008      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e092      	b.n	800426c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0xb6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004154:	e023      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0xc6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	e01b      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start+0xd6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004174:	e013      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start+0xe6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004184:	e00b      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start+0xf6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	e003      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f876 	bl	8005298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a30      	ldr	r2, [pc, #192]	; (8004274 <HAL_TIM_PWM_Start+0x1d4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x120>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <HAL_TIM_PWM_Start+0x1d8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_PWM_Start+0x124>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_TIM_PWM_Start+0x126>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a25      	ldr	r2, [pc, #148]	; (8004274 <HAL_TIM_PWM_Start+0x1d4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d01d      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_TIM_PWM_Start+0x1dc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d018      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_TIM_PWM_Start+0x1e0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_TIM_PWM_Start+0x1e4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_TIM_PWM_Start+0x1d8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_TIM_PWM_Start+0x1e8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_TIM_PWM_Start+0x18a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <HAL_TIM_PWM_Start+0x1ec>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d115      	bne.n	8004256 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <HAL_TIM_PWM_Start+0x1f0>)
 8004232:	4013      	ands	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b06      	cmp	r3, #6
 800423a:	d015      	beq.n	8004268 <HAL_TIM_PWM_Start+0x1c8>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004242:	d011      	beq.n	8004268 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	e008      	b.n	8004268 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40010000 	.word	0x40010000
 8004278:	40010400 	.word	0x40010400
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40014000 	.word	0x40014000
 800428c:	40001800 	.word	0x40001800
 8004290:	00010007 	.word	0x00010007

08004294 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fff6 	bl	8005298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a36      	ldr	r2, [pc, #216]	; (800438c <HAL_TIM_PWM_Stop+0xf8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_TIM_PWM_Stop+0x2c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a35      	ldr	r2, [pc, #212]	; (8004390 <HAL_TIM_PWM_Stop+0xfc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d101      	bne.n	80042c4 <HAL_TIM_PWM_Stop+0x30>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_TIM_PWM_Stop+0x32>
 80042c4:	2300      	movs	r3, #0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <HAL_TIM_PWM_Stop+0x66>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	f240 4344 	movw	r3, #1092	; 0x444
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_TIM_PWM_Stop+0x66>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	f241 1311 	movw	r3, #4369	; 0x1111
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_TIM_PWM_Stop+0x96>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	f240 4344 	movw	r3, #1092	; 0x444
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_TIM_PWM_Stop+0x96>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <HAL_TIM_PWM_Stop+0xa6>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	e023      	b.n	8004382 <HAL_TIM_PWM_Stop+0xee>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d104      	bne.n	800434a <HAL_TIM_PWM_Stop+0xb6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	e01b      	b.n	8004382 <HAL_TIM_PWM_Stop+0xee>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Stop+0xc6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004358:	e013      	b.n	8004382 <HAL_TIM_PWM_Stop+0xee>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d104      	bne.n	800436a <HAL_TIM_PWM_Stop+0xd6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004368:	e00b      	b.n	8004382 <HAL_TIM_PWM_Stop+0xee>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b10      	cmp	r3, #16
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Stop+0xe6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004378:	e003      	b.n	8004382 <HAL_TIM_PWM_Stop+0xee>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40010000 	.word	0x40010000
 8004390:	40010400 	.word	0x40010400

08004394 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e049      	b.n	800443a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f841 	bl	8004442 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 fcfc 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_TIM_IC_Start_IT+0x1e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004472:	b2db      	uxtb	r3, r3
 8004474:	e023      	b.n	80044be <HAL_TIM_IC_Start_IT+0x66>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d104      	bne.n	8004486 <HAL_TIM_IC_Start_IT+0x2e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e01b      	b.n	80044be <HAL_TIM_IC_Start_IT+0x66>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d104      	bne.n	8004496 <HAL_TIM_IC_Start_IT+0x3e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e013      	b.n	80044be <HAL_TIM_IC_Start_IT+0x66>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_IC_Start_IT+0x4e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	e00b      	b.n	80044be <HAL_TIM_IC_Start_IT+0x66>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_IT+0x5e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e003      	b.n	80044be <HAL_TIM_IC_Start_IT+0x66>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <HAL_TIM_IC_Start_IT+0x78>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e013      	b.n	80044f8 <HAL_TIM_IC_Start_IT+0xa0>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d104      	bne.n	80044e0 <HAL_TIM_IC_Start_IT+0x88>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e00b      	b.n	80044f8 <HAL_TIM_IC_Start_IT+0xa0>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d104      	bne.n	80044f0 <HAL_TIM_IC_Start_IT+0x98>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_IC_Start_IT+0xa0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004500:	7b7b      	ldrb	r3, [r7, #13]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0e2      	b.n	80046d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_TIM_IC_Start_IT+0xc2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	e023      	b.n	8004562 <HAL_TIM_IC_Start_IT+0x10a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d104      	bne.n	800452a <HAL_TIM_IC_Start_IT+0xd2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004528:	e01b      	b.n	8004562 <HAL_TIM_IC_Start_IT+0x10a>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d104      	bne.n	800453a <HAL_TIM_IC_Start_IT+0xe2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004538:	e013      	b.n	8004562 <HAL_TIM_IC_Start_IT+0x10a>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d104      	bne.n	800454a <HAL_TIM_IC_Start_IT+0xf2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004548:	e00b      	b.n	8004562 <HAL_TIM_IC_Start_IT+0x10a>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b10      	cmp	r3, #16
 800454e:	d104      	bne.n	800455a <HAL_TIM_IC_Start_IT+0x102>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004558:	e003      	b.n	8004562 <HAL_TIM_IC_Start_IT+0x10a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_TIM_IC_Start_IT+0x11a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	e013      	b.n	800459a <HAL_TIM_IC_Start_IT+0x142>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d104      	bne.n	8004582 <HAL_TIM_IC_Start_IT+0x12a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004580:	e00b      	b.n	800459a <HAL_TIM_IC_Start_IT+0x142>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d104      	bne.n	8004592 <HAL_TIM_IC_Start_IT+0x13a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004590:	e003      	b.n	800459a <HAL_TIM_IC_Start_IT+0x142>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d841      	bhi.n	8004624 <HAL_TIM_IC_Start_IT+0x1cc>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_IC_Start_IT+0x150>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	08004625 	.word	0x08004625
 80045b0:	08004625 	.word	0x08004625
 80045b4:	08004625 	.word	0x08004625
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	08004625 	.word	0x08004625
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004601 	.word	0x08004601
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004625 	.word	0x08004625
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004613 	.word	0x08004613
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0202 	orr.w	r2, r2, #2
 80045ea:	60da      	str	r2, [r3, #12]
      break;
 80045ec:	e01d      	b.n	800462a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0204 	orr.w	r2, r2, #4
 80045fc:	60da      	str	r2, [r3, #12]
      break;
 80045fe:	e014      	b.n	800462a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	60da      	str	r2, [r3, #12]
      break;
 8004610:	e00b      	b.n	800462a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0210 	orr.w	r2, r2, #16
 8004620:	60da      	str	r2, [r3, #12]
      break;
 8004622:	e002      	b.n	800462a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	bf00      	nop
  }

  if (status == HAL_OK)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14e      	bne.n	80046ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fe2d 	bl	8005298 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <HAL_TIM_IC_Start_IT+0x280>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d01d      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a21      	ldr	r2, [pc, #132]	; (80046dc <HAL_TIM_IC_Start_IT+0x284>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <HAL_TIM_IC_Start_IT+0x288>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_TIM_IC_Start_IT+0x290>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <HAL_TIM_IC_Start_IT+0x294>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x236>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_TIM_IC_Start_IT+0x298>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d115      	bne.n	80046ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <HAL_TIM_IC_Start_IT+0x29c>)
 8004696:	4013      	ands	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b06      	cmp	r3, #6
 800469e:	d015      	beq.n	80046cc <HAL_TIM_IC_Start_IT+0x274>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a6:	d011      	beq.n	80046cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	e008      	b.n	80046cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e000      	b.n	80046ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800
 80046f4:	00010007 	.word	0x00010007

080046f8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d841      	bhi.n	8004790 <HAL_TIM_IC_Stop_IT+0x98>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <HAL_TIM_IC_Stop_IT+0x1c>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004749 	.word	0x08004749
 8004718:	08004791 	.word	0x08004791
 800471c:	08004791 	.word	0x08004791
 8004720:	08004791 	.word	0x08004791
 8004724:	0800475b 	.word	0x0800475b
 8004728:	08004791 	.word	0x08004791
 800472c:	08004791 	.word	0x08004791
 8004730:	08004791 	.word	0x08004791
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004791 	.word	0x08004791
 800473c:	08004791 	.word	0x08004791
 8004740:	08004791 	.word	0x08004791
 8004744:	0800477f 	.word	0x0800477f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0202 	bic.w	r2, r2, #2
 8004756:	60da      	str	r2, [r3, #12]
      break;
 8004758:	e01d      	b.n	8004796 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	60da      	str	r2, [r3, #12]
      break;
 800476a:	e014      	b.n	8004796 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	60da      	str	r2, [r3, #12]
      break;
 800477c:	e00b      	b.n	8004796 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0210 	bic.w	r2, r2, #16
 800478c:	60da      	str	r2, [r3, #12]
      break;
 800478e:	e002      	b.n	8004796 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	bf00      	nop
  }

  if (status == HAL_OK)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d166      	bne.n	800486a <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fd77 	bl	8005298 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_TIM_IC_Stop_IT+0xe2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	f240 4344 	movw	r3, #1092	; 0x444
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_TIM_IC_Stop_IT+0xe2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_IC_Stop_IT+0xf2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	e023      	b.n	8004832 <HAL_TIM_IC_Stop_IT+0x13a>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_IC_Stop_IT+0x102>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	e01b      	b.n	8004832 <HAL_TIM_IC_Stop_IT+0x13a>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_IC_Stop_IT+0x112>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	e013      	b.n	8004832 <HAL_TIM_IC_Stop_IT+0x13a>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d104      	bne.n	800481a <HAL_TIM_IC_Stop_IT+0x122>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004818:	e00b      	b.n	8004832 <HAL_TIM_IC_Stop_IT+0x13a>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b10      	cmp	r3, #16
 800481e:	d104      	bne.n	800482a <HAL_TIM_IC_Stop_IT+0x132>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	e003      	b.n	8004832 <HAL_TIM_IC_Stop_IT+0x13a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <HAL_TIM_IC_Stop_IT+0x14a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004840:	e013      	b.n	800486a <HAL_TIM_IC_Stop_IT+0x172>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d104      	bne.n	8004852 <HAL_TIM_IC_Stop_IT+0x15a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004850:	e00b      	b.n	800486a <HAL_TIM_IC_Stop_IT+0x172>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d104      	bne.n	8004862 <HAL_TIM_IC_Stop_IT+0x16a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004860:	e003      	b.n	800486a <HAL_TIM_IC_Stop_IT+0x172>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0202 	mvn.w	r2, #2
 80048a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa6c 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa5e 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa6f 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d122      	bne.n	8004924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d11b      	bne.n	8004924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0204 	mvn.w	r2, #4
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa42 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa34 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa45 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b08      	cmp	r3, #8
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0208 	mvn.w	r2, #8
 8004948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2204      	movs	r2, #4
 800494e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa18 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa0a 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa1b 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b10      	cmp	r3, #16
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0210 	mvn.w	r2, #16
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2208      	movs	r2, #8
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9ee 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f9e0 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9f1 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0201 	mvn.w	r2, #1
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd faaa 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fcf8 	bl	8005414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a32:	d10e      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b80      	cmp	r3, #128	; 0x80
 8004a40:	d107      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fceb 	bl	8005428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d10e      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f99f 	bl	8004dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d10e      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0220 	mvn.w	r2, #32
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fcab 	bl	8005400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e088      	b.n	8004be2 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11b      	bne.n	8004b16 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f000 fa0f 	bl	8004f10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 020c 	bic.w	r2, r2, #12
 8004b00:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6999      	ldr	r1, [r3, #24]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	619a      	str	r2, [r3, #24]
 8004b14:	e060      	b.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d11c      	bne.n	8004b56 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f000 fa93 	bl	8005056 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b3e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	619a      	str	r2, [r3, #24]
 8004b54:	e040      	b.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f000 fae0 	bl	8005130 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 020c 	bic.w	r2, r2, #12
 8004b7e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69d9      	ldr	r1, [r3, #28]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	61da      	str	r2, [r3, #28]
 8004b92:	e021      	b.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d11c      	bne.n	8004bd4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f000 fafd 	bl	80051a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bbc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69d9      	ldr	r1, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	021a      	lsls	r2, r3, #8
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	61da      	str	r2, [r3, #28]
 8004bd2:	e001      	b.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_ConfigClockSource+0x1c>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e0b4      	b.n	8004d72 <HAL_TIM_ConfigClockSource+0x186>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_TIM_ConfigClockSource+0x190>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c40:	d03e      	beq.n	8004cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c46:	f200 8087 	bhi.w	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4e:	f000 8086 	beq.w	8004d5e <HAL_TIM_ConfigClockSource+0x172>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d87f      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d01a      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0xa6>
 8004c5c:	2b70      	cmp	r3, #112	; 0x70
 8004c5e:	d87b      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d050      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x11a>
 8004c64:	2b60      	cmp	r3, #96	; 0x60
 8004c66:	d877      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d03c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c6c:	2b50      	cmp	r3, #80	; 0x50
 8004c6e:	d873      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d058      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x13a>
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d86f      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b30      	cmp	r3, #48	; 0x30
 8004c7a:	d064      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	2b30      	cmp	r3, #48	; 0x30
 8004c7e:	d86b      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d060      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d867      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05c      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d05a      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c90:	e062      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6899      	ldr	r1, [r3, #8]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f000 fad9 	bl	8005258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	609a      	str	r2, [r3, #8]
      break;
 8004cbe:	e04f      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6899      	ldr	r1, [r3, #8]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f000 fac2 	bl	8005258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce2:	609a      	str	r2, [r3, #8]
      break;
 8004ce4:	e03c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 f980 	bl	8004ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2150      	movs	r1, #80	; 0x50
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fa8f 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004d04:	e02c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 f9dc 	bl	80050d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2160      	movs	r1, #96	; 0x60
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fa7f 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004d24:	e01c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 f960 	bl	8004ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2140      	movs	r1, #64	; 0x40
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa6f 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e00c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f000 fa66 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004d56:	e003      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5c:	e000      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	fffeff88 	.word	0xfffeff88

08004d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <TIM_Base_SetConfig+0x114>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3d      	ldr	r2, [pc, #244]	; (8004ee8 <TIM_Base_SetConfig+0x118>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3c      	ldr	r2, [pc, #240]	; (8004eec <TIM_Base_SetConfig+0x11c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <TIM_Base_SetConfig+0x120>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <TIM_Base_SetConfig+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2f      	ldr	r2, [pc, #188]	; (8004ee4 <TIM_Base_SetConfig+0x114>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d027      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <TIM_Base_SetConfig+0x118>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d023      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <TIM_Base_SetConfig+0x11c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <TIM_Base_SetConfig+0x120>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <TIM_Base_SetConfig+0x124>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d017      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <TIM_Base_SetConfig+0x128>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a27      	ldr	r2, [pc, #156]	; (8004efc <TIM_Base_SetConfig+0x12c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <TIM_Base_SetConfig+0x130>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <TIM_Base_SetConfig+0x134>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <TIM_Base_SetConfig+0x138>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a23      	ldr	r2, [pc, #140]	; (8004f0c <TIM_Base_SetConfig+0x13c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <TIM_Base_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0xf8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <TIM_Base_SetConfig+0x124>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800
 8004f04:	40001800 	.word	0x40001800
 8004f08:	40001c00 	.word	0x40001c00
 8004f0c:	40002000 	.word	0x40002000

08004f10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0201 	bic.w	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <TIM_TI1_SetConfig+0xcc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01b      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d017      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <TIM_TI1_SetConfig+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <TIM_TI1_SetConfig+0xd4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <TIM_TI1_SetConfig+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a22      	ldr	r2, [pc, #136]	; (8004fec <TIM_TI1_SetConfig+0xdc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <TIM_TI1_SetConfig+0xe0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <TIM_TI1_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <TIM_TI1_SetConfig+0x6a>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <TIM_TI1_SetConfig+0x6c>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e003      	b.n	8004f9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
 8004fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f003 030a 	and.w	r3, r3, #10
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40001800 	.word	0x40001800

08004ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f023 030a 	bic.w	r3, r3, #10
 8005034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005056:	b480      	push	{r7}
 8005058:	b087      	sub	sp, #28
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f023 0210 	bic.w	r2, r3, #16
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	031b      	lsls	r3, r3, #12
 800509a:	b29b      	uxth	r3, r3
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f023 0210 	bic.w	r2, r3, #16
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800510c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 0303 	bic.w	r3, r3, #3
 800515c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	b2db      	uxtb	r3, r3
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005180:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	031b      	lsls	r3, r3, #12
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	031b      	lsls	r3, r3, #12
 8005200:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	f043 0307 	orr.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	431a      	orrs	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e06d      	b.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a30      	ldr	r2, [pc, #192]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2f      	ldr	r2, [pc, #188]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d022      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d01d      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d018      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a15      	ldr	r2, [pc, #84]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d10c      	bne.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40001800 	.word	0x40001800

08005400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e040      	b.n	80054d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd f82a 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	; 0x24
 8005468:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f974 	bl	8005768 <UART_SetConfig>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e022      	b.n	80054d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fbcc 	bl	8005c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fc53 	bl	8005d74 <UART_CheckIdleState>
 80054ce:	4603      	mov	r3, r0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d171      	bne.n	80055d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_UART_Transmit+0x24>
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e06a      	b.n	80055d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2221      	movs	r2, #33	; 0x21
 800550c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550e:	f7fd f89f 	bl	8002650 <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	d108      	bne.n	8005540 <HAL_UART_Transmit+0x68>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	e003      	b.n	8005548 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005548:	e02c      	b.n	80055a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2200      	movs	r2, #0
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fc44 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e038      	b.n	80055d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3302      	adds	r3, #2
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e007      	b.n	8005592 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1cc      	bne.n	800554a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fc11 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e005      	b.n	80055d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e000      	b.n	80055d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b08a      	sub	sp, #40	; 0x28
 80055e2:	af02      	add	r7, sp, #8
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	f040 80b1 	bne.w	800575c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_UART_Receive+0x28>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0a9      	b.n	800575e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2222      	movs	r2, #34	; 0x22
 8005616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005620:	f7fd f816 	bl	8002650 <HAL_GetTick>
 8005624:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	88fa      	ldrh	r2, [r7, #6]
 800562a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	d10e      	bne.n	800565e <HAL_UART_Receive+0x80>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_UART_Receive+0x76>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800564e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005652:	e02d      	b.n	80056b0 <HAL_UART_Receive+0xd2>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	; 0xff
 8005658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800565c:	e028      	b.n	80056b0 <HAL_UART_Receive+0xd2>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <HAL_UART_Receive+0xa4>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <HAL_UART_Receive+0x9a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	22ff      	movs	r2, #255	; 0xff
 8005672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005676:	e01b      	b.n	80056b0 <HAL_UART_Receive+0xd2>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	227f      	movs	r2, #127	; 0x7f
 800567c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005680:	e016      	b.n	80056b0 <HAL_UART_Receive+0xd2>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568a:	d10d      	bne.n	80056a8 <HAL_UART_Receive+0xca>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_UART_Receive+0xc0>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	227f      	movs	r2, #127	; 0x7f
 8005698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800569c:	e008      	b.n	80056b0 <HAL_UART_Receive+0xd2>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	223f      	movs	r2, #63	; 0x3f
 80056a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056a6:	e003      	b.n	80056b0 <HAL_UART_Receive+0xd2>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c0:	d108      	bne.n	80056d4 <HAL_UART_Receive+0xf6>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e003      	b.n	80056dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056dc:	e032      	b.n	8005744 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2200      	movs	r2, #0
 80056e6:	2120      	movs	r1, #32
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fb7a 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e032      	b.n	800575e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	b29a      	uxth	r2, r3
 8005706:	8a7b      	ldrh	r3, [r7, #18]
 8005708:	4013      	ands	r3, r2
 800570a:	b29a      	uxth	r2, r3
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	3302      	adds	r3, #2
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e00c      	b.n	8005732 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	b2da      	uxtb	r2, r3
 8005720:	8a7b      	ldrh	r3, [r7, #18]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	4013      	ands	r3, r2
 8005726:	b2da      	uxtb	r2, r3
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1c6      	bne.n	80056de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	e000      	b.n	800575e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4ba6      	ldr	r3, [pc, #664]	; (8005a2c <UART_SetConfig+0x2c4>)
 8005794:	4013      	ands	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	430b      	orrs	r3, r1
 800579e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a94      	ldr	r2, [pc, #592]	; (8005a30 <UART_SetConfig+0x2c8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d120      	bne.n	8005826 <UART_SetConfig+0xbe>
 80057e4:	4b93      	ldr	r3, [pc, #588]	; (8005a34 <UART_SetConfig+0x2cc>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d816      	bhi.n	8005820 <UART_SetConfig+0xb8>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x90>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	08005809 	.word	0x08005809
 80057fc:	08005815 	.word	0x08005815
 8005800:	0800580f 	.word	0x0800580f
 8005804:	0800581b 	.word	0x0800581b
 8005808:	2301      	movs	r3, #1
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e150      	b.n	8005ab0 <UART_SetConfig+0x348>
 800580e:	2302      	movs	r3, #2
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e14d      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005814:	2304      	movs	r3, #4
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e14a      	b.n	8005ab0 <UART_SetConfig+0x348>
 800581a:	2308      	movs	r3, #8
 800581c:	77fb      	strb	r3, [r7, #31]
 800581e:	e147      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005820:	2310      	movs	r3, #16
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e144      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a83      	ldr	r2, [pc, #524]	; (8005a38 <UART_SetConfig+0x2d0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d132      	bne.n	8005896 <UART_SetConfig+0x12e>
 8005830:	4b80      	ldr	r3, [pc, #512]	; (8005a34 <UART_SetConfig+0x2cc>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d828      	bhi.n	8005890 <UART_SetConfig+0x128>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <UART_SetConfig+0xdc>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005879 	.word	0x08005879
 8005848:	08005891 	.word	0x08005891
 800584c:	08005891 	.word	0x08005891
 8005850:	08005891 	.word	0x08005891
 8005854:	08005885 	.word	0x08005885
 8005858:	08005891 	.word	0x08005891
 800585c:	08005891 	.word	0x08005891
 8005860:	08005891 	.word	0x08005891
 8005864:	0800587f 	.word	0x0800587f
 8005868:	08005891 	.word	0x08005891
 800586c:	08005891 	.word	0x08005891
 8005870:	08005891 	.word	0x08005891
 8005874:	0800588b 	.word	0x0800588b
 8005878:	2300      	movs	r3, #0
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e118      	b.n	8005ab0 <UART_SetConfig+0x348>
 800587e:	2302      	movs	r3, #2
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e115      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005884:	2304      	movs	r3, #4
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e112      	b.n	8005ab0 <UART_SetConfig+0x348>
 800588a:	2308      	movs	r3, #8
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e10f      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005890:	2310      	movs	r3, #16
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e10c      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a68      	ldr	r2, [pc, #416]	; (8005a3c <UART_SetConfig+0x2d4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d120      	bne.n	80058e2 <UART_SetConfig+0x17a>
 80058a0:	4b64      	ldr	r3, [pc, #400]	; (8005a34 <UART_SetConfig+0x2cc>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058aa:	2b30      	cmp	r3, #48	; 0x30
 80058ac:	d013      	beq.n	80058d6 <UART_SetConfig+0x16e>
 80058ae:	2b30      	cmp	r3, #48	; 0x30
 80058b0:	d814      	bhi.n	80058dc <UART_SetConfig+0x174>
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d009      	beq.n	80058ca <UART_SetConfig+0x162>
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d810      	bhi.n	80058dc <UART_SetConfig+0x174>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <UART_SetConfig+0x15c>
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d006      	beq.n	80058d0 <UART_SetConfig+0x168>
 80058c2:	e00b      	b.n	80058dc <UART_SetConfig+0x174>
 80058c4:	2300      	movs	r3, #0
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e0f2      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058ca:	2302      	movs	r3, #2
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e0ef      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058d0:	2304      	movs	r3, #4
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e0ec      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058d6:	2308      	movs	r3, #8
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e0e9      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058dc:	2310      	movs	r3, #16
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e0e6      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a56      	ldr	r2, [pc, #344]	; (8005a40 <UART_SetConfig+0x2d8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d120      	bne.n	800592e <UART_SetConfig+0x1c6>
 80058ec:	4b51      	ldr	r3, [pc, #324]	; (8005a34 <UART_SetConfig+0x2cc>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058f6:	2bc0      	cmp	r3, #192	; 0xc0
 80058f8:	d013      	beq.n	8005922 <UART_SetConfig+0x1ba>
 80058fa:	2bc0      	cmp	r3, #192	; 0xc0
 80058fc:	d814      	bhi.n	8005928 <UART_SetConfig+0x1c0>
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d009      	beq.n	8005916 <UART_SetConfig+0x1ae>
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d810      	bhi.n	8005928 <UART_SetConfig+0x1c0>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <UART_SetConfig+0x1a8>
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d006      	beq.n	800591c <UART_SetConfig+0x1b4>
 800590e:	e00b      	b.n	8005928 <UART_SetConfig+0x1c0>
 8005910:	2300      	movs	r3, #0
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e0cc      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005916:	2302      	movs	r3, #2
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e0c9      	b.n	8005ab0 <UART_SetConfig+0x348>
 800591c:	2304      	movs	r3, #4
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e0c6      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005922:	2308      	movs	r3, #8
 8005924:	77fb      	strb	r3, [r7, #31]
 8005926:	e0c3      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005928:	2310      	movs	r3, #16
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e0c0      	b.n	8005ab0 <UART_SetConfig+0x348>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a44      	ldr	r2, [pc, #272]	; (8005a44 <UART_SetConfig+0x2dc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d125      	bne.n	8005984 <UART_SetConfig+0x21c>
 8005938:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <UART_SetConfig+0x2cc>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005946:	d017      	beq.n	8005978 <UART_SetConfig+0x210>
 8005948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594c:	d817      	bhi.n	800597e <UART_SetConfig+0x216>
 800594e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005952:	d00b      	beq.n	800596c <UART_SetConfig+0x204>
 8005954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005958:	d811      	bhi.n	800597e <UART_SetConfig+0x216>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <UART_SetConfig+0x1fe>
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d006      	beq.n	8005972 <UART_SetConfig+0x20a>
 8005964:	e00b      	b.n	800597e <UART_SetConfig+0x216>
 8005966:	2300      	movs	r3, #0
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e0a1      	b.n	8005ab0 <UART_SetConfig+0x348>
 800596c:	2302      	movs	r3, #2
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e09e      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005972:	2304      	movs	r3, #4
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e09b      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005978:	2308      	movs	r3, #8
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e098      	b.n	8005ab0 <UART_SetConfig+0x348>
 800597e:	2310      	movs	r3, #16
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e095      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <UART_SetConfig+0x2e0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d125      	bne.n	80059da <UART_SetConfig+0x272>
 800598e:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <UART_SetConfig+0x2cc>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800599c:	d017      	beq.n	80059ce <UART_SetConfig+0x266>
 800599e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a2:	d817      	bhi.n	80059d4 <UART_SetConfig+0x26c>
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d00b      	beq.n	80059c2 <UART_SetConfig+0x25a>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d811      	bhi.n	80059d4 <UART_SetConfig+0x26c>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <UART_SetConfig+0x254>
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d006      	beq.n	80059c8 <UART_SetConfig+0x260>
 80059ba:	e00b      	b.n	80059d4 <UART_SetConfig+0x26c>
 80059bc:	2301      	movs	r3, #1
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e076      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059c2:	2302      	movs	r3, #2
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e073      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059c8:	2304      	movs	r3, #4
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e070      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059ce:	2308      	movs	r3, #8
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e06d      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059d4:	2310      	movs	r3, #16
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e06a      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <UART_SetConfig+0x2e4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d138      	bne.n	8005a56 <UART_SetConfig+0x2ee>
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <UART_SetConfig+0x2cc>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059f2:	d017      	beq.n	8005a24 <UART_SetConfig+0x2bc>
 80059f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059f8:	d82a      	bhi.n	8005a50 <UART_SetConfig+0x2e8>
 80059fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fe:	d00b      	beq.n	8005a18 <UART_SetConfig+0x2b0>
 8005a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a04:	d824      	bhi.n	8005a50 <UART_SetConfig+0x2e8>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <UART_SetConfig+0x2aa>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d006      	beq.n	8005a1e <UART_SetConfig+0x2b6>
 8005a10:	e01e      	b.n	8005a50 <UART_SetConfig+0x2e8>
 8005a12:	2300      	movs	r3, #0
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e04b      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e048      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e045      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a24:	2308      	movs	r3, #8
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e042      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a2a:	bf00      	nop
 8005a2c:	efff69f3 	.word	0xefff69f3
 8005a30:	40011000 	.word	0x40011000
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40004400 	.word	0x40004400
 8005a3c:	40004800 	.word	0x40004800
 8005a40:	40004c00 	.word	0x40004c00
 8005a44:	40005000 	.word	0x40005000
 8005a48:	40011400 	.word	0x40011400
 8005a4c:	40007800 	.word	0x40007800
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e02c      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a72      	ldr	r2, [pc, #456]	; (8005c24 <UART_SetConfig+0x4bc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d125      	bne.n	8005aac <UART_SetConfig+0x344>
 8005a60:	4b71      	ldr	r3, [pc, #452]	; (8005c28 <UART_SetConfig+0x4c0>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a6e:	d017      	beq.n	8005aa0 <UART_SetConfig+0x338>
 8005a70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a74:	d817      	bhi.n	8005aa6 <UART_SetConfig+0x33e>
 8005a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7a:	d00b      	beq.n	8005a94 <UART_SetConfig+0x32c>
 8005a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a80:	d811      	bhi.n	8005aa6 <UART_SetConfig+0x33e>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <UART_SetConfig+0x326>
 8005a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8a:	d006      	beq.n	8005a9a <UART_SetConfig+0x332>
 8005a8c:	e00b      	b.n	8005aa6 <UART_SetConfig+0x33e>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e00d      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a94:	2302      	movs	r3, #2
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e00a      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e007      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e004      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e001      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005aac:	2310      	movs	r3, #16
 8005aae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	d15b      	bne.n	8005b72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005aba:	7ffb      	ldrb	r3, [r7, #31]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d828      	bhi.n	8005b12 <UART_SetConfig+0x3aa>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x360>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005b03 	.word	0x08005b03
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b13 	.word	0x08005b13
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fd fd2e 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8005af0:	61b8      	str	r0, [r7, #24]
        break;
 8005af2:	e013      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7fd fd3e 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8005af8:	61b8      	str	r0, [r7, #24]
        break;
 8005afa:	e00f      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b4b      	ldr	r3, [pc, #300]	; (8005c2c <UART_SetConfig+0x4c4>)
 8005afe:	61bb      	str	r3, [r7, #24]
        break;
 8005b00:	e00c      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fd fc51 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8005b06:	61b8      	str	r0, [r7, #24]
        break;
 8005b08:	e008      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	61bb      	str	r3, [r7, #24]
        break;
 8005b10:	e004      	b.n	8005b1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	77bb      	strb	r3, [r7, #30]
        break;
 8005b1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d074      	beq.n	8005c0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	005a      	lsls	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	441a      	add	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d916      	bls.n	8005b6c <UART_SetConfig+0x404>
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d212      	bcs.n	8005b6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f023 030f 	bic.w	r3, r3, #15
 8005b4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	89fa      	ldrh	r2, [r7, #14]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	e04f      	b.n	8005c0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	77bb      	strb	r3, [r7, #30]
 8005b70:	e04c      	b.n	8005c0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b72:	7ffb      	ldrb	r3, [r7, #31]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d828      	bhi.n	8005bca <UART_SetConfig+0x462>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x418>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	08005bcb 	.word	0x08005bcb
 8005b90:	08005bbb 	.word	0x08005bbb
 8005b94:	08005bcb 	.word	0x08005bcb
 8005b98:	08005bcb 	.word	0x08005bcb
 8005b9c:	08005bcb 	.word	0x08005bcb
 8005ba0:	08005bc3 	.word	0x08005bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba4:	f7fd fcd2 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8005ba8:	61b8      	str	r0, [r7, #24]
        break;
 8005baa:	e013      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bac:	f7fd fce2 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8005bb0:	61b8      	str	r0, [r7, #24]
        break;
 8005bb2:	e00f      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <UART_SetConfig+0x4c4>)
 8005bb6:	61bb      	str	r3, [r7, #24]
        break;
 8005bb8:	e00c      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bba:	f7fd fbf5 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8005bbe:	61b8      	str	r0, [r7, #24]
        break;
 8005bc0:	e008      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc6:	61bb      	str	r3, [r7, #24]
        break;
 8005bc8:	e004      	b.n	8005bd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d018      	beq.n	8005c0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	085a      	lsrs	r2, r3, #1
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	441a      	add	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b0f      	cmp	r3, #15
 8005bf2:	d909      	bls.n	8005c08 <UART_SetConfig+0x4a0>
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfa:	d205      	bcs.n	8005c08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	e001      	b.n	8005c0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40007c00 	.word	0x40007c00
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	00f42400 	.word	0x00f42400

08005c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2e:	d10a      	bne.n	8005d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d84:	f7fc fc64 	bl	8002650 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d10e      	bne.n	8005db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f81b 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e011      	b.n	8005dda <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b09c      	sub	sp, #112	; 0x70
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df2:	e0a7      	b.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	f000 80a3 	beq.w	8005f44 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fc fc27 	bl	8002650 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d13f      	bne.n	8005e94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e28:	667b      	str	r3, [r7, #100]	; 0x64
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e6      	bne.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3308      	adds	r3, #8
 8005e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e66:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e068      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d050      	beq.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d148      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
 8005edc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	613b      	str	r3, [r7, #16]
   return(result);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f0e:	623a      	str	r2, [r7, #32]
 8005f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	69f9      	ldr	r1, [r7, #28]
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e010      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	f43f af48 	beq.w	8005df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3770      	adds	r7, #112	; 0x70
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f80:	2b84      	cmp	r3, #132	; 0x84
 8005f82:	d005      	beq.n	8005f90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3303      	adds	r3, #3
 8005f8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fa2:	f000 fee7 	bl	8006d74 <vTaskStartScheduler>
  
  return osOK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}

08005fac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <osThreadCreate+0x54>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01c      	beq.n	8006000 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685c      	ldr	r4, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681d      	ldr	r5, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691e      	ldr	r6, [r3, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ffc8 	bl	8005f6e <makeFreeRtosPriority>
 8005fde:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	9100      	str	r1, [sp, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fcd5 	bl	80069a4 <xTaskCreateStatic>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e01c      	b.n	800603a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685c      	ldr	r4, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600c:	b29e      	uxth	r6, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ffaa 	bl	8005f6e <makeFreeRtosPriority>
 800601a:	4602      	mov	r2, r0
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	9200      	str	r2, [sp, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4632      	mov	r2, r6
 8006028:	4629      	mov	r1, r5
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fd1d 	bl	8006a6a <xTaskCreate>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006044 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <osDelay+0x16>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e000      	b.n	800605c <osDelay+0x18>
 800605a:	2301      	movs	r3, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fe53 	bl	8006d08 <vTaskDelay>
  
  return osOK;
 8006062:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0208 	add.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f04f 32ff 	mov.w	r2, #4294967295
 8006084:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f103 0208 	add.w	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f103 0208 	add.w	r2, r3, #8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d103      	bne.n	800612e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e00c      	b.n	8006148 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3308      	adds	r3, #8
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e002      	b.n	800613c <vListInsert+0x2e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	d2f6      	bcs.n	8006136 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6892      	ldr	r2, [r2, #8]
 8006196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6852      	ldr	r2, [r2, #4]
 80061a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d103      	bne.n	80061b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10c      	bne.n	8006202 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	b672      	cpsid	i
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	b662      	cpsie	i
 80061fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006202:	f001 fd2b 	bl	8007c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	441a      	add	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	3b01      	subs	r3, #1
 8006234:	68f9      	ldr	r1, [r7, #12]
 8006236:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	22ff      	movs	r2, #255	; 0xff
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d114      	bne.n	8006282 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01a      	beq.n	8006296 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3310      	adds	r3, #16
 8006264:	4618      	mov	r0, r3
 8006266:	f000 ffe3 	bl	8007230 <xTaskRemoveFromEventList>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <xQueueGenericReset+0xd0>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	e009      	b.n	8006296 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3310      	adds	r3, #16
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fef0 	bl	800606c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3324      	adds	r3, #36	; 0x24
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff feeb 	bl	800606c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006296:	f001 fd15 	bl	8007cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800629a:	2301      	movs	r3, #1
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10c      	bne.n	80062d6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	b672      	cpsid	i
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	b662      	cpsie	i
 80062d0:	613b      	str	r3, [r7, #16]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e004      	b.n	80062ec <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3348      	adds	r3, #72	; 0x48
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fd9b 	bl	8007e2c <pvPortMalloc>
 80062f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	3348      	adds	r3, #72	; 0x48
 8006306:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f805 	bl	800632c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006322:	69bb      	ldr	r3, [r7, #24]
	}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e002      	b.n	800634e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800635a:	2101      	movs	r1, #1
 800635c:	69b8      	ldr	r0, [r7, #24]
 800635e:	f7ff ff39 	bl	80061d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	; 0x38
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <xQueueGenericSend+0x36>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	b672      	cpsid	i
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	b662      	cpsie	i
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <xQueueGenericSend+0x44>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <xQueueGenericSend+0x48>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <xQueueGenericSend+0x4a>
 80063b4:	2300      	movs	r3, #0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10c      	bne.n	80063d4 <xQueueGenericSend+0x68>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	b672      	cpsid	i
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	b662      	cpsie	i
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d103      	bne.n	80063e2 <xQueueGenericSend+0x76>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <xQueueGenericSend+0x7a>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <xQueueGenericSend+0x7c>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10c      	bne.n	8006406 <xQueueGenericSend+0x9a>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	b672      	cpsid	i
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	b662      	cpsie	i
 8006400:	623b      	str	r3, [r7, #32]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006406:	f001 f8db 	bl	80075c0 <xTaskGetSchedulerState>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xQueueGenericSend+0xaa>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <xQueueGenericSend+0xae>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xQueueGenericSend+0xb0>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10c      	bne.n	800643a <xQueueGenericSend+0xce>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	b672      	cpsid	i
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	b662      	cpsie	i
 8006434:	61fb      	str	r3, [r7, #28]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800643a:	f001 fc0f 	bl	8007c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <xQueueGenericSend+0xe4>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d129      	bne.n	80064a4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006456:	f000 f9bb 	bl	80067d0 <prvCopyDataToQueue>
 800645a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fee1 	bl	8007230 <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d013      	beq.n	800649c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006474:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <xQueueGenericSend+0x208>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	e00a      	b.n	800649c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800648c:	4b39      	ldr	r3, [pc, #228]	; (8006574 <xQueueGenericSend+0x208>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800649c:	f001 fc12 	bl	8007cc4 <vPortExitCritical>
				return pdPASS;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e063      	b.n	800656c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064aa:	f001 fc0b 	bl	8007cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e05c      	b.n	800656c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 ff1b 	bl	80072f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064c2:	2301      	movs	r3, #1
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064c6:	f001 fbfd 	bl	8007cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064ca:	f000 fcc1 	bl	8006e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ce:	f001 fbc5 	bl	8007c5c <vPortEnterCritical>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d103      	bne.n	80064e8 <xQueueGenericSend+0x17c>
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d103      	bne.n	80064fe <xQueueGenericSend+0x192>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fe:	f001 fbe1 	bl	8007cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006502:	1d3a      	adds	r2, r7, #4
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f000 ff0a 	bl	8007324 <xTaskCheckForTimeOut>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d124      	bne.n	8006560 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006518:	f000 fa2c 	bl	8006974 <prvIsQueueFull>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d018      	beq.n	8006554 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	3310      	adds	r3, #16
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fe5a 	bl	80071e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006532:	f000 f9b7 	bl	80068a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006536:	f000 fc99 	bl	8006e6c <xTaskResumeAll>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f af7c 	bne.w	800643a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <xQueueGenericSend+0x208>)
 8006544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	e772      	b.n	800643a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006556:	f000 f9a5 	bl	80068a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800655a:	f000 fc87 	bl	8006e6c <xTaskResumeAll>
 800655e:	e76c      	b.n	800643a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006562:	f000 f99f 	bl	80068a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006566:	f000 fc81 	bl	8006e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800656a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800656c:	4618      	mov	r0, r3
 800656e:	3738      	adds	r7, #56	; 0x38
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800658a:	2300      	movs	r3, #0
 800658c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10c      	bne.n	80065ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	b672      	cpsid	i
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	b662      	cpsie	i
 80065a8:	623b      	str	r3, [r7, #32]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	b672      	cpsid	i
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	b662      	cpsie	i
 80065ca:	61fb      	str	r3, [r7, #28]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065d0:	f000 fff6 	bl	80075c0 <xTaskGetSchedulerState>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <xQueueSemaphoreTake+0x68>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <xQueueSemaphoreTake+0x6c>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <xQueueSemaphoreTake+0x6e>
 80065e4:	2300      	movs	r3, #0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10c      	bne.n	8006604 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	b672      	cpsid	i
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	b662      	cpsie	i
 80065fe:	61bb      	str	r3, [r7, #24]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006604:	f001 fb2a 	bl	8007c5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d024      	beq.n	800665e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	1e5a      	subs	r2, r3, #1
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006624:	f001 f992 	bl	800794c <pvTaskIncrementMutexHeldCount>
 8006628:	4602      	mov	r2, r0
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00f      	beq.n	8006656 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	3310      	adds	r3, #16
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fdf8 	bl	8007230 <xTaskRemoveFromEventList>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006646:	4b55      	ldr	r3, [pc, #340]	; (800679c <xQueueSemaphoreTake+0x224>)
 8006648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006656:	f001 fb35 	bl	8007cc4 <vPortExitCritical>
				return pdPASS;
 800665a:	2301      	movs	r3, #1
 800665c:	e099      	b.n	8006792 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d113      	bne.n	800668c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	b672      	cpsid	i
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	b662      	cpsie	i
 800667e:	617b      	str	r3, [r7, #20]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006684:	f001 fb1e 	bl	8007cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006688:	2300      	movs	r3, #0
 800668a:	e082      	b.n	8006792 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fe2e 	bl	80072f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800669c:	2301      	movs	r3, #1
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a0:	f001 fb10 	bl	8007cc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066a4:	f000 fbd4 	bl	8006e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066a8:	f001 fad8 	bl	8007c5c <vPortEnterCritical>
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b2:	b25b      	sxtb	r3, r3
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d103      	bne.n	80066c2 <xQueueSemaphoreTake+0x14a>
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c8:	b25b      	sxtb	r3, r3
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d103      	bne.n	80066d8 <xQueueSemaphoreTake+0x160>
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066d8:	f001 faf4 	bl	8007cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066dc:	463a      	mov	r2, r7
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fe1d 	bl	8007324 <xTaskCheckForTimeOut>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d132      	bne.n	8006756 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f2:	f000 f929 	bl	8006948 <prvIsQueueEmpty>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d026      	beq.n	800674a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006704:	f001 faaa 	bl	8007c5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 ff75 	bl	80075fc <xTaskPriorityInherit>
 8006712:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006714:	f001 fad6 	bl	8007cc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	3324      	adds	r3, #36	; 0x24
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fd5f 	bl	80071e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006728:	f000 f8bc 	bl	80068a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800672c:	f000 fb9e 	bl	8006e6c <xTaskResumeAll>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f47f af66 	bne.w	8006604 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006738:	4b18      	ldr	r3, [pc, #96]	; (800679c <xQueueSemaphoreTake+0x224>)
 800673a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	e75c      	b.n	8006604 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800674a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800674c:	f000 f8aa 	bl	80068a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006750:	f000 fb8c 	bl	8006e6c <xTaskResumeAll>
 8006754:	e756      	b.n	8006604 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006758:	f000 f8a4 	bl	80068a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800675c:	f000 fb86 	bl	8006e6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006762:	f000 f8f1 	bl	8006948 <prvIsQueueEmpty>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f43f af4b 	beq.w	8006604 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006774:	f001 fa72 	bl	8007c5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800677a:	f000 f811 	bl	80067a0 <prvGetDisinheritPriorityAfterTimeout>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f001 f842 	bl	8007810 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800678c:	f001 fa9a 	bl	8007cc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006790:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006792:	4618      	mov	r0, r3
 8006794:	3738      	adds	r7, #56	; 0x38
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	e000ed04 	.word	0xe000ed04

080067a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d006      	beq.n	80067be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1c3 0307 	rsb	r3, r3, #7
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e001      	b.n	80067c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067c2:	68fb      	ldr	r3, [r7, #12]
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10d      	bne.n	800680a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d14d      	bne.n	8006892 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 ff7e 	bl	80076fc <xTaskPriorityDisinherit>
 8006800:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	e043      	b.n	8006892 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d119      	bne.n	8006844 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6858      	ldr	r0, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	461a      	mov	r2, r3
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	f001 fe29 	bl	8008472 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d32b      	bcc.n	8006892 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	e026      	b.n	8006892 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68d8      	ldr	r0, [r3, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	461a      	mov	r2, r3
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	f001 fe0f 	bl	8008472 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	425b      	negs	r3, r3
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d207      	bcs.n	8006880 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	425b      	negs	r3, r3
 800687a:	441a      	add	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d105      	bne.n	8006892 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3b01      	subs	r3, #1
 8006890:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068ac:	f001 f9d6 	bl	8007c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b8:	e011      	b.n	80068de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d012      	beq.n	80068e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3324      	adds	r3, #36	; 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fcb2 	bl	8007230 <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068d2:	f000 fd8d 	bl	80073f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	3b01      	subs	r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dce9      	bgt.n	80068ba <prvUnlockQueue+0x16>
 80068e6:	e000      	b.n	80068ea <prvUnlockQueue+0x46>
					break;
 80068e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	22ff      	movs	r2, #255	; 0xff
 80068ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068f2:	f001 f9e7 	bl	8007cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068f6:	f001 f9b1 	bl	8007c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006900:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006902:	e011      	b.n	8006928 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d012      	beq.n	8006932 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3310      	adds	r3, #16
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fc8d 	bl	8007230 <xTaskRemoveFromEventList>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800691c:	f000 fd68 	bl	80073f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	3b01      	subs	r3, #1
 8006924:	b2db      	uxtb	r3, r3
 8006926:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dce9      	bgt.n	8006904 <prvUnlockQueue+0x60>
 8006930:	e000      	b.n	8006934 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006932:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800693c:	f001 f9c2 	bl	8007cc4 <vPortExitCritical>
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006950:	f001 f984 	bl	8007c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800695c:	2301      	movs	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e001      	b.n	8006966 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006966:	f001 f9ad 	bl	8007cc4 <vPortExitCritical>

	return xReturn;
 800696a:	68fb      	ldr	r3, [r7, #12]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800697c:	f001 f96e 	bl	8007c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	429a      	cmp	r2, r3
 800698a:	d102      	bne.n	8006992 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e001      	b.n	8006996 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006996:	f001 f995 	bl	8007cc4 <vPortExitCritical>

	return xReturn;
 800699a:	68fb      	ldr	r3, [r7, #12]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	b672      	cpsid	i
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	b662      	cpsie	i
 80069cc:	623b      	str	r3, [r7, #32]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10c      	bne.n	80069f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	b672      	cpsid	i
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	b662      	cpsie	i
 80069ec:	61fb      	str	r3, [r7, #28]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069f2:	23b4      	movs	r3, #180	; 0xb4
 80069f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2bb4      	cmp	r3, #180	; 0xb4
 80069fa:	d00c      	beq.n	8006a16 <xTaskCreateStatic+0x72>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	b672      	cpsid	i
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	b662      	cpsie	i
 8006a10:	61bb      	str	r3, [r7, #24]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01e      	beq.n	8006a5c <xTaskCreateStatic+0xb8>
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a36:	2300      	movs	r3, #0
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	f107 0314 	add.w	r3, r7, #20
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f850 	bl	8006af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a56:	f000 f8ed 	bl	8006c34 <prvAddNewTaskToReadyList>
 8006a5a:	e001      	b.n	8006a60 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a60:	697b      	ldr	r3, [r7, #20]
	}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3728      	adds	r7, #40	; 0x28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b08c      	sub	sp, #48	; 0x30
 8006a6e:	af04      	add	r7, sp, #16
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	603b      	str	r3, [r7, #0]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 f9d4 	bl	8007e2c <pvPortMalloc>
 8006a84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a8c:	20b4      	movs	r0, #180	; 0xb4
 8006a8e:	f001 f9cd 	bl	8007e2c <pvPortMalloc>
 8006a92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006aa0:	e005      	b.n	8006aae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006aa2:	6978      	ldr	r0, [r7, #20]
 8006aa4:	f001 fa8c 	bl	8007fc0 <vPortFree>
 8006aa8:	e001      	b.n	8006aae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d017      	beq.n	8006ae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9303      	str	r3, [sp, #12]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	9302      	str	r3, [sp, #8]
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f80e 	bl	8006af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ad8:	69f8      	ldr	r0, [r7, #28]
 8006ada:	f000 f8ab 	bl	8006c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e002      	b.n	8006aea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aea:	69bb      	ldr	r3, [r7, #24]
	}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006b0c:	440b      	add	r3, r1
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	b672      	cpsid	i
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	b662      	cpsie	i
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01f      	beq.n	8006b86 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e012      	b.n	8006b72 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d9e9      	bls.n	8006b4c <prvInitialiseNewTask+0x58>
 8006b78:	e000      	b.n	8006b7c <prvInitialiseNewTask+0x88>
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b84:	e003      	b.n	8006b8e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d901      	bls.n	8006b98 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b94:	2306      	movs	r3, #6
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fa7c 	bl	80060ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fa77 	bl	80060ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f1c3 0207 	rsb	r2, r3, #7
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	334c      	adds	r3, #76	; 0x4c
 8006be8:	2260      	movs	r2, #96	; 0x60
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 fc4e 	bl	800848e <memset>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <prvInitialiseNewTask+0x134>)
 8006bf6:	651a      	str	r2, [r3, #80]	; 0x50
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <prvInitialiseNewTask+0x138>)
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <prvInitialiseNewTask+0x13c>)
 8006c02:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f000 ff19 	bl	8007a40 <pxPortInitialiseStack>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c20:	bf00      	nop
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	0800c2a0 	.word	0x0800c2a0
 8006c2c:	0800c2c0 	.word	0x0800c2c0
 8006c30:	0800c280 	.word	0x0800c280

08006c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c3c:	f001 f80e 	bl	8007c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c40:	4b2a      	ldr	r3, [pc, #168]	; (8006cec <prvAddNewTaskToReadyList+0xb8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	4a29      	ldr	r2, [pc, #164]	; (8006cec <prvAddNewTaskToReadyList+0xb8>)
 8006c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c4a:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c52:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c58:	4b24      	ldr	r3, [pc, #144]	; (8006cec <prvAddNewTaskToReadyList+0xb8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d110      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c60:	f000 fbea 	bl	8007438 <prvInitialiseTaskLists>
 8006c64:	e00d      	b.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c66:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <prvAddNewTaskToReadyList+0xc0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6e:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d802      	bhi.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	4a18      	ldr	r2, [pc, #96]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <prvAddNewTaskToReadyList+0xcc>)
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7ff fa06 	bl	80060c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 f803 	bl	8007cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <prvAddNewTaskToReadyList+0xc0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d207      	bcs.n	8006ce4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000878 	.word	0x20000878
 8006cf0:	20000778 	.word	0x20000778
 8006cf4:	20000884 	.word	0x20000884
 8006cf8:	20000894 	.word	0x20000894
 8006cfc:	20000880 	.word	0x20000880
 8006d00:	2000077c 	.word	0x2000077c
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d019      	beq.n	8006d4e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d1a:	4b14      	ldr	r3, [pc, #80]	; (8006d6c <vTaskDelay+0x64>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <vTaskDelay+0x34>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	b672      	cpsid	i
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	b662      	cpsie	i
 8006d36:	60bb      	str	r3, [r7, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006d3c:	f000 f888 	bl	8006e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d40:	2100      	movs	r1, #0
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fe16 	bl	8007974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d48:	f000 f890 	bl	8006e6c <xTaskResumeAll>
 8006d4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006d54:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <vTaskDelay+0x68>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200008a0 	.word	0x200008a0
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d82:	463a      	mov	r2, r7
 8006d84:	1d39      	adds	r1, r7, #4
 8006d86:	f107 0308 	add.w	r3, r7, #8
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fa fe72 	bl	8001a74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	9202      	str	r2, [sp, #8]
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	460a      	mov	r2, r1
 8006da2:	4923      	ldr	r1, [pc, #140]	; (8006e30 <vTaskStartScheduler+0xbc>)
 8006da4:	4823      	ldr	r0, [pc, #140]	; (8006e34 <vTaskStartScheduler+0xc0>)
 8006da6:	f7ff fdfd 	bl	80069a4 <xTaskCreateStatic>
 8006daa:	4603      	mov	r3, r0
 8006dac:	4a22      	ldr	r2, [pc, #136]	; (8006e38 <vTaskStartScheduler+0xc4>)
 8006dae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006db0:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <vTaskStartScheduler+0xc4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006db8:	2301      	movs	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e001      	b.n	8006dc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d11d      	bne.n	8006e04 <vTaskStartScheduler+0x90>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	b672      	cpsid	i
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	b662      	cpsie	i
 8006ddc:	613b      	str	r3, [r7, #16]
}
 8006dde:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006de0:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <vTaskStartScheduler+0xc8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	334c      	adds	r3, #76	; 0x4c
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <vTaskStartScheduler+0xcc>)
 8006de8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dea:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <vTaskStartScheduler+0xd0>)
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295
 8006df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006df2:	4b15      	ldr	r3, [pc, #84]	; (8006e48 <vTaskStartScheduler+0xd4>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <vTaskStartScheduler+0xd8>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dfe:	f000 feaf 	bl	8007b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e02:	e010      	b.n	8006e26 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d10c      	bne.n	8006e26 <vTaskStartScheduler+0xb2>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	b672      	cpsid	i
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	b662      	cpsie	i
 8006e20:	60fb      	str	r3, [r7, #12]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <vTaskStartScheduler+0xb0>
}
 8006e26:	bf00      	nop
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	0800c254 	.word	0x0800c254
 8006e34:	08007409 	.word	0x08007409
 8006e38:	2000089c 	.word	0x2000089c
 8006e3c:	20000778 	.word	0x20000778
 8006e40:	20000010 	.word	0x20000010
 8006e44:	20000898 	.word	0x20000898
 8006e48:	20000884 	.word	0x20000884
 8006e4c:	2000087c 	.word	0x2000087c

08006e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <vTaskSuspendAll+0x18>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	4a03      	ldr	r2, [pc, #12]	; (8006e68 <vTaskSuspendAll+0x18>)
 8006e5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e5e:	bf00      	nop
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	200008a0 	.word	0x200008a0

08006e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e7a:	4b42      	ldr	r3, [pc, #264]	; (8006f84 <xTaskResumeAll+0x118>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <xTaskResumeAll+0x30>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	b672      	cpsid	i
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	b662      	cpsie	i
 8006e96:	603b      	str	r3, [r7, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e9c:	f000 fede 	bl	8007c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ea0:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <xTaskResumeAll+0x118>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	4a37      	ldr	r2, [pc, #220]	; (8006f84 <xTaskResumeAll+0x118>)
 8006ea8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <xTaskResumeAll+0x118>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d161      	bne.n	8006f76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb2:	4b35      	ldr	r3, [pc, #212]	; (8006f88 <xTaskResumeAll+0x11c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d05d      	beq.n	8006f76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eba:	e02e      	b.n	8006f1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	4b33      	ldr	r3, [pc, #204]	; (8006f8c <xTaskResumeAll+0x120>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3318      	adds	r3, #24
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff f959 	bl	8006180 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff f954 	bl	8006180 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	2201      	movs	r2, #1
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <xTaskResumeAll+0x124>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <xTaskResumeAll+0x124>)
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4a27      	ldr	r2, [pc, #156]	; (8006f94 <xTaskResumeAll+0x128>)
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4619      	mov	r1, r3
 8006f00:	4610      	mov	r0, r2
 8006f02:	f7ff f8e0 	bl	80060c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0a:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <xTaskResumeAll+0x12c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d302      	bcc.n	8006f1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f14:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <xTaskResumeAll+0x130>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <xTaskResumeAll+0x120>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1cc      	bne.n	8006ebc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f28:	f000 fb2a 	bl	8007580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f2c:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <xTaskResumeAll+0x134>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f38:	f000 f836 	bl	8006fa8 <xTaskIncrementTick>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f42:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <xTaskResumeAll+0x130>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f1      	bne.n	8006f38 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <xTaskResumeAll+0x134>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f5a:	4b10      	ldr	r3, [pc, #64]	; (8006f9c <xTaskResumeAll+0x130>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f66:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <xTaskResumeAll+0x138>)
 8006f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f76:	f000 fea5 	bl	8007cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	200008a0 	.word	0x200008a0
 8006f88:	20000878 	.word	0x20000878
 8006f8c:	20000838 	.word	0x20000838
 8006f90:	20000880 	.word	0x20000880
 8006f94:	2000077c 	.word	0x2000077c
 8006f98:	20000778 	.word	0x20000778
 8006f9c:	2000088c 	.word	0x2000088c
 8006fa0:	20000888 	.word	0x20000888
 8006fa4:	e000ed04 	.word	0xe000ed04

08006fa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb2:	4b4f      	ldr	r3, [pc, #316]	; (80070f0 <xTaskIncrementTick+0x148>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 808a 	bne.w	80070d0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fbc:	4b4d      	ldr	r3, [pc, #308]	; (80070f4 <xTaskIncrementTick+0x14c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fc4:	4a4b      	ldr	r2, [pc, #300]	; (80070f4 <xTaskIncrementTick+0x14c>)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d122      	bne.n	8007016 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fd0:	4b49      	ldr	r3, [pc, #292]	; (80070f8 <xTaskIncrementTick+0x150>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	b672      	cpsid	i
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	b662      	cpsie	i
 8006fee:	603b      	str	r3, [r7, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <xTaskIncrementTick+0x4a>
 8006ff4:	4b40      	ldr	r3, [pc, #256]	; (80070f8 <xTaskIncrementTick+0x150>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4b40      	ldr	r3, [pc, #256]	; (80070fc <xTaskIncrementTick+0x154>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a3e      	ldr	r2, [pc, #248]	; (80070f8 <xTaskIncrementTick+0x150>)
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4a3e      	ldr	r2, [pc, #248]	; (80070fc <xTaskIncrementTick+0x154>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <xTaskIncrementTick+0x158>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	4a3c      	ldr	r2, [pc, #240]	; (8007100 <xTaskIncrementTick+0x158>)
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	f000 fab5 	bl	8007580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <xTaskIncrementTick+0x15c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	429a      	cmp	r2, r3
 800701e:	d348      	bcc.n	80070b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007020:	4b35      	ldr	r3, [pc, #212]	; (80070f8 <xTaskIncrementTick+0x150>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702a:	4b36      	ldr	r3, [pc, #216]	; (8007104 <xTaskIncrementTick+0x15c>)
 800702c:	f04f 32ff 	mov.w	r2, #4294967295
 8007030:	601a      	str	r2, [r3, #0]
					break;
 8007032:	e03e      	b.n	80070b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007034:	4b30      	ldr	r3, [pc, #192]	; (80070f8 <xTaskIncrementTick+0x150>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	429a      	cmp	r2, r3
 800704a:	d203      	bcs.n	8007054 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xTaskIncrementTick+0x15c>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007052:	e02e      	b.n	80070b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff f891 	bl	8006180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3318      	adds	r3, #24
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f888 	bl	8006180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	2201      	movs	r2, #1
 8007076:	409a      	lsls	r2, r3
 8007078:	4b23      	ldr	r3, [pc, #140]	; (8007108 <xTaskIncrementTick+0x160>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	4a22      	ldr	r2, [pc, #136]	; (8007108 <xTaskIncrementTick+0x160>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a1f      	ldr	r2, [pc, #124]	; (800710c <xTaskIncrementTick+0x164>)
 8007090:	441a      	add	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7ff f814 	bl	80060c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <xTaskIncrementTick+0x168>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3b9      	bcc.n	8007020 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b0:	e7b6      	b.n	8007020 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <xTaskIncrementTick+0x168>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4914      	ldr	r1, [pc, #80]	; (800710c <xTaskIncrementTick+0x164>)
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d907      	bls.n	80070da <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e004      	b.n	80070da <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070d0:	4b10      	ldr	r3, [pc, #64]	; (8007114 <xTaskIncrementTick+0x16c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a0f      	ldr	r2, [pc, #60]	; (8007114 <xTaskIncrementTick+0x16c>)
 80070d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <xTaskIncrementTick+0x170>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200008a0 	.word	0x200008a0
 80070f4:	2000087c 	.word	0x2000087c
 80070f8:	20000830 	.word	0x20000830
 80070fc:	20000834 	.word	0x20000834
 8007100:	20000890 	.word	0x20000890
 8007104:	20000898 	.word	0x20000898
 8007108:	20000880 	.word	0x20000880
 800710c:	2000077c 	.word	0x2000077c
 8007110:	20000778 	.word	0x20000778
 8007114:	20000888 	.word	0x20000888
 8007118:	2000088c 	.word	0x2000088c

0800711c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007122:	4b2a      	ldr	r3, [pc, #168]	; (80071cc <vTaskSwitchContext+0xb0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800712a:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <vTaskSwitchContext+0xb4>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007130:	e046      	b.n	80071c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007132:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <vTaskSwitchContext+0xb4>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007138:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <vTaskSwitchContext+0xb8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	fab3 f383 	clz	r3, r3
 8007144:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	f1c3 031f 	rsb	r3, r3, #31
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	4922      	ldr	r1, [pc, #136]	; (80071d8 <vTaskSwitchContext+0xbc>)
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10c      	bne.n	800717c <vTaskSwitchContext+0x60>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	607b      	str	r3, [r7, #4]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <vTaskSwitchContext+0x5e>
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4a14      	ldr	r2, [pc, #80]	; (80071d8 <vTaskSwitchContext+0xbc>)
 8007188:	4413      	add	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3308      	adds	r3, #8
 800719e:	429a      	cmp	r2, r3
 80071a0:	d104      	bne.n	80071ac <vTaskSwitchContext+0x90>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <vTaskSwitchContext+0xc0>)
 80071b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <vTaskSwitchContext+0xc0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	334c      	adds	r3, #76	; 0x4c
 80071bc:	4a08      	ldr	r2, [pc, #32]	; (80071e0 <vTaskSwitchContext+0xc4>)
 80071be:	6013      	str	r3, [r2, #0]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	200008a0 	.word	0x200008a0
 80071d0:	2000088c 	.word	0x2000088c
 80071d4:	20000880 	.word	0x20000880
 80071d8:	2000077c 	.word	0x2000077c
 80071dc:	20000778 	.word	0x20000778
 80071e0:	20000010 	.word	0x20000010

080071e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10c      	bne.n	800720e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	b672      	cpsid	i
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	b662      	cpsie	i
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <vTaskPlaceOnEventList+0x48>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3318      	adds	r3, #24
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fe ff79 	bl	800610e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800721c:	2101      	movs	r1, #1
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	f000 fba8 	bl	8007974 <prvAddCurrentTaskToDelayedList>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000778 	.word	0x20000778

08007230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	b672      	cpsid	i
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	b662      	cpsie	i
 800725a:	60fb      	str	r3, [r7, #12]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3318      	adds	r3, #24
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe ff8b 	bl	8006180 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800726a:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <xTaskRemoveFromEventList+0xb0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11c      	bne.n	80072ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3304      	adds	r3, #4
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe ff82 	bl	8006180 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	4b17      	ldr	r3, [pc, #92]	; (80072e4 <xTaskRemoveFromEventList+0xb4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4313      	orrs	r3, r2
 800728a:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <xTaskRemoveFromEventList+0xb4>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <xTaskRemoveFromEventList+0xb8>)
 800729c:	441a      	add	r2, r3
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f7fe ff0e 	bl	80060c6 <vListInsertEnd>
 80072aa:	e005      	b.n	80072b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	3318      	adds	r3, #24
 80072b0:	4619      	mov	r1, r3
 80072b2:	480e      	ldr	r0, [pc, #56]	; (80072ec <xTaskRemoveFromEventList+0xbc>)
 80072b4:	f7fe ff07 	bl	80060c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <xTaskRemoveFromEventList+0xc0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d905      	bls.n	80072d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <xTaskRemoveFromEventList+0xc4>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	e001      	b.n	80072d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072d6:	697b      	ldr	r3, [r7, #20]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	200008a0 	.word	0x200008a0
 80072e4:	20000880 	.word	0x20000880
 80072e8:	2000077c 	.word	0x2000077c
 80072ec:	20000838 	.word	0x20000838
 80072f0:	20000778 	.word	0x20000778
 80072f4:	2000088c 	.word	0x2000088c

080072f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <vTaskInternalSetTimeOutState+0x24>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <vTaskInternalSetTimeOutState+0x28>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000890 	.word	0x20000890
 8007320:	2000087c 	.word	0x2000087c

08007324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10c      	bne.n	800734e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	b672      	cpsid	i
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	b662      	cpsie	i
 8007348:	613b      	str	r3, [r7, #16]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10c      	bne.n	800736e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	b672      	cpsid	i
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	b662      	cpsie	i
 8007368:	60fb      	str	r3, [r7, #12]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800736e:	f000 fc75 	bl	8007c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <xTaskCheckForTimeOut+0xc4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d102      	bne.n	8007392 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	e023      	b.n	80073da <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <xTaskCheckForTimeOut+0xc8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d007      	beq.n	80073ae <xTaskCheckForTimeOut+0x8a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d302      	bcc.n	80073ae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e015      	b.n	80073da <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d20b      	bcs.n	80073d0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff ff97 	bl	80072f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	e004      	b.n	80073da <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073d6:	2301      	movs	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073da:	f000 fc73 	bl	8007cc4 <vPortExitCritical>

	return xReturn;
 80073de:	69fb      	ldr	r3, [r7, #28]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	2000087c 	.word	0x2000087c
 80073ec:	20000890 	.word	0x20000890

080073f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073f4:	4b03      	ldr	r3, [pc, #12]	; (8007404 <vTaskMissedYield+0x14>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	2000088c 	.word	0x2000088c

08007408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007410:	f000 f852 	bl	80074b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <prvIdleTask+0x28>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d9f9      	bls.n	8007410 <prvIdleTask+0x8>
			{
				taskYIELD();
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <prvIdleTask+0x2c>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800742c:	e7f0      	b.n	8007410 <prvIdleTask+0x8>
 800742e:	bf00      	nop
 8007430:	2000077c 	.word	0x2000077c
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	e00c      	b.n	800745e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <prvInitialiseTaskLists+0x60>)
 8007450:	4413      	add	r3, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fe0a 	bl	800606c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3301      	adds	r3, #1
 800745c:	607b      	str	r3, [r7, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b06      	cmp	r3, #6
 8007462:	d9ef      	bls.n	8007444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007464:	480d      	ldr	r0, [pc, #52]	; (800749c <prvInitialiseTaskLists+0x64>)
 8007466:	f7fe fe01 	bl	800606c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800746a:	480d      	ldr	r0, [pc, #52]	; (80074a0 <prvInitialiseTaskLists+0x68>)
 800746c:	f7fe fdfe 	bl	800606c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007470:	480c      	ldr	r0, [pc, #48]	; (80074a4 <prvInitialiseTaskLists+0x6c>)
 8007472:	f7fe fdfb 	bl	800606c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007476:	480c      	ldr	r0, [pc, #48]	; (80074a8 <prvInitialiseTaskLists+0x70>)
 8007478:	f7fe fdf8 	bl	800606c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800747c:	480b      	ldr	r0, [pc, #44]	; (80074ac <prvInitialiseTaskLists+0x74>)
 800747e:	f7fe fdf5 	bl	800606c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007482:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <prvInitialiseTaskLists+0x78>)
 8007484:	4a05      	ldr	r2, [pc, #20]	; (800749c <prvInitialiseTaskLists+0x64>)
 8007486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <prvInitialiseTaskLists+0x7c>)
 800748a:	4a05      	ldr	r2, [pc, #20]	; (80074a0 <prvInitialiseTaskLists+0x68>)
 800748c:	601a      	str	r2, [r3, #0]
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	2000077c 	.word	0x2000077c
 800749c:	20000808 	.word	0x20000808
 80074a0:	2000081c 	.word	0x2000081c
 80074a4:	20000838 	.word	0x20000838
 80074a8:	2000084c 	.word	0x2000084c
 80074ac:	20000864 	.word	0x20000864
 80074b0:	20000830 	.word	0x20000830
 80074b4:	20000834 	.word	0x20000834

080074b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074be:	e019      	b.n	80074f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074c0:	f000 fbcc 	bl	8007c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <prvCheckTasksWaitingTermination+0x50>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fe55 	bl	8006180 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <prvCheckTasksWaitingTermination+0x54>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3b01      	subs	r3, #1
 80074dc:	4a0b      	ldr	r2, [pc, #44]	; (800750c <prvCheckTasksWaitingTermination+0x54>)
 80074de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <prvCheckTasksWaitingTermination+0x58>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <prvCheckTasksWaitingTermination+0x58>)
 80074e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074ea:	f000 fbeb 	bl	8007cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f810 	bl	8007514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <prvCheckTasksWaitingTermination+0x58>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e1      	bne.n	80074c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074fc:	bf00      	nop
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	2000084c 	.word	0x2000084c
 800750c:	20000878 	.word	0x20000878
 8007510:	20000860 	.word	0x20000860

08007514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	334c      	adds	r3, #76	; 0x4c
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fd57 	bl	8008fd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d108      	bne.n	8007542 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fd43 	bl	8007fc0 <vPortFree>
				vPortFree( pxTCB );
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fd40 	bl	8007fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007540:	e01a      	b.n	8007578 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d103      	bne.n	8007554 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fd37 	bl	8007fc0 <vPortFree>
	}
 8007552:	e011      	b.n	8007578 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800755a:	2b02      	cmp	r3, #2
 800755c:	d00c      	beq.n	8007578 <prvDeleteTCB+0x64>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	b672      	cpsid	i
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	b662      	cpsie	i
 8007572:	60fb      	str	r3, [r7, #12]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <prvDeleteTCB+0x62>
	}
 8007578:	bf00      	nop
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvResetNextTaskUnblockTime+0x38>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <prvResetNextTaskUnblockTime+0x3c>)
 8007592:	f04f 32ff 	mov.w	r2, #4294967295
 8007596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007598:	e008      	b.n	80075ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759a:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <prvResetNextTaskUnblockTime+0x38>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	4a04      	ldr	r2, [pc, #16]	; (80075bc <prvResetNextTaskUnblockTime+0x3c>)
 80075aa:	6013      	str	r3, [r2, #0]
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20000830 	.word	0x20000830
 80075bc:	20000898 	.word	0x20000898

080075c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <xTaskGetSchedulerState+0x34>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ce:	2301      	movs	r3, #1
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	e008      	b.n	80075e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <xTaskGetSchedulerState+0x38>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075dc:	2302      	movs	r3, #2
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	e001      	b.n	80075e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075e2:	2300      	movs	r3, #0
 80075e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075e6:	687b      	ldr	r3, [r7, #4]
	}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000884 	.word	0x20000884
 80075f8:	200008a0 	.word	0x200008a0

080075fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d069      	beq.n	80076e6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007616:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <xTaskPriorityInherit+0xf4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	429a      	cmp	r2, r3
 800761e:	d259      	bcs.n	80076d4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	db06      	blt.n	8007636 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007628:	4b31      	ldr	r3, [pc, #196]	; (80076f0 <xTaskPriorityInherit+0xf4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	f1c3 0207 	rsb	r2, r3, #7
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6959      	ldr	r1, [r3, #20]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4a2b      	ldr	r2, [pc, #172]	; (80076f4 <xTaskPriorityInherit+0xf8>)
 8007648:	4413      	add	r3, r2
 800764a:	4299      	cmp	r1, r3
 800764c:	d13a      	bne.n	80076c4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fd94 	bl	8006180 <uxListRemove>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d115      	bne.n	800768a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	4924      	ldr	r1, [pc, #144]	; (80076f4 <xTaskPriorityInherit+0xf8>)
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xTaskPriorityInherit+0x8e>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	fa02 f303 	lsl.w	r3, r2, r3
 800767e:	43da      	mvns	r2, r3
 8007680:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <xTaskPriorityInherit+0xfc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4013      	ands	r3, r2
 8007686:	4a1c      	ldr	r2, [pc, #112]	; (80076f8 <xTaskPriorityInherit+0xfc>)
 8007688:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800768a:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <xTaskPriorityInherit+0xf4>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	2201      	movs	r2, #1
 800769a:	409a      	lsls	r2, r3
 800769c:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <xTaskPriorityInherit+0xfc>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <xTaskPriorityInherit+0xfc>)
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <xTaskPriorityInherit+0xf8>)
 80076b4:	441a      	add	r2, r3
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4619      	mov	r1, r3
 80076bc:	4610      	mov	r0, r2
 80076be:	f7fe fd02 	bl	80060c6 <vListInsertEnd>
 80076c2:	e004      	b.n	80076ce <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076c4:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <xTaskPriorityInherit+0xf4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076ce:	2301      	movs	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	e008      	b.n	80076e6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <xTaskPriorityInherit+0xf4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	429a      	cmp	r2, r3
 80076e0:	d201      	bcs.n	80076e6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e6:	68fb      	ldr	r3, [r7, #12]
	}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20000778 	.word	0x20000778
 80076f4:	2000077c 	.word	0x2000077c
 80076f8:	20000880 	.word	0x20000880

080076fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d072      	beq.n	80077f8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007712:	4b3c      	ldr	r3, [pc, #240]	; (8007804 <xTaskPriorityDisinherit+0x108>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	429a      	cmp	r2, r3
 800771a:	d00c      	beq.n	8007736 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	b672      	cpsid	i
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	b662      	cpsie	i
 8007730:	60fb      	str	r3, [r7, #12]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10c      	bne.n	8007758 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	b672      	cpsid	i
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	b662      	cpsie	i
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775c:	1e5a      	subs	r2, r3, #1
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	429a      	cmp	r2, r3
 800776c:	d044      	beq.n	80077f8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007772:	2b00      	cmp	r3, #0
 8007774:	d140      	bne.n	80077f8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	3304      	adds	r3, #4
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fd00 	bl	8006180 <uxListRemove>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d115      	bne.n	80077b2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	491f      	ldr	r1, [pc, #124]	; (8007808 <xTaskPriorityDisinherit+0x10c>)
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xTaskPriorityDisinherit+0xb6>
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	2201      	movs	r2, #1
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43da      	mvns	r2, r3
 80077a8:	4b18      	ldr	r3, [pc, #96]	; (800780c <xTaskPriorityDisinherit+0x110>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4013      	ands	r3, r2
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <xTaskPriorityDisinherit+0x110>)
 80077b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	f1c3 0207 	rsb	r2, r3, #7
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	2201      	movs	r2, #1
 80077cc:	409a      	lsls	r2, r3
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <xTaskPriorityDisinherit+0x110>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	4a0d      	ldr	r2, [pc, #52]	; (800780c <xTaskPriorityDisinherit+0x110>)
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4a08      	ldr	r2, [pc, #32]	; (8007808 <xTaskPriorityDisinherit+0x10c>)
 80077e6:	441a      	add	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f7fe fc69 	bl	80060c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077f8:	697b      	ldr	r3, [r7, #20]
	}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000778 	.word	0x20000778
 8007808:	2000077c 	.word	0x2000077c
 800780c:	20000880 	.word	0x20000880

08007810 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800781e:	2301      	movs	r3, #1
 8007820:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8087 	beq.w	8007938 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10c      	bne.n	800784c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	b672      	cpsid	i
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	b662      	cpsie	i
 8007846:	60fb      	str	r3, [r7, #12]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d902      	bls.n	800785c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	e002      	b.n	8007862 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007860:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	429a      	cmp	r2, r3
 800786a:	d065      	beq.n	8007938 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	429a      	cmp	r2, r3
 8007874:	d160      	bne.n	8007938 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007876:	4b32      	ldr	r3, [pc, #200]	; (8007940 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	429a      	cmp	r2, r3
 800787e:	d10c      	bne.n	800789a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	b672      	cpsid	i
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	b662      	cpsie	i
 8007894:	60bb      	str	r3, [r7, #8]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	db04      	blt.n	80078b8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f1c3 0207 	rsb	r2, r3, #7
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	6959      	ldr	r1, [r3, #20]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80078c8:	4413      	add	r3, r2
 80078ca:	4299      	cmp	r1, r3
 80078cc:	d134      	bne.n	8007938 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	3304      	adds	r3, #4
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fc54 	bl	8006180 <uxListRemove>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d115      	bne.n	800790a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	4918      	ldr	r1, [pc, #96]	; (8007944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	2201      	movs	r2, #1
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43da      	mvns	r2, r3
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4013      	ands	r3, r2
 8007906:	4a10      	ldr	r2, [pc, #64]	; (8007948 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007908:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790e:	2201      	movs	r2, #1
 8007910:	409a      	lsls	r2, r3
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4313      	orrs	r3, r2
 8007918:	4a0b      	ldr	r2, [pc, #44]	; (8007948 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4a06      	ldr	r2, [pc, #24]	; (8007944 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800792a:	441a      	add	r2, r3
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe fbc7 	bl	80060c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007938:	bf00      	nop
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20000778 	.word	0x20000778
 8007944:	2000077c 	.word	0x2000077c
 8007948:	20000880 	.word	0x20000880

0800794c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <pvTaskIncrementMutexHeldCount+0x24>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <pvTaskIncrementMutexHeldCount+0x24>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800795e:	3201      	adds	r2, #1
 8007960:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007962:	4b03      	ldr	r3, [pc, #12]	; (8007970 <pvTaskIncrementMutexHeldCount+0x24>)
 8007964:	681b      	ldr	r3, [r3, #0]
	}
 8007966:	4618      	mov	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20000778 	.word	0x20000778

08007974 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800797e:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007984:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3304      	adds	r3, #4
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fbf8 	bl	8006180 <uxListRemove>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007996:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	2201      	movs	r2, #1
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	43da      	mvns	r2, r3
 80079a4:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <prvAddCurrentTaskToDelayedList+0xb8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4013      	ands	r3, r2
 80079aa:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <prvAddCurrentTaskToDelayedList+0xb8>)
 80079ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d10a      	bne.n	80079cc <prvAddCurrentTaskToDelayedList+0x58>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079bc:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	481a      	ldr	r0, [pc, #104]	; (8007a30 <prvAddCurrentTaskToDelayedList+0xbc>)
 80079c6:	f7fe fb7e 	bl	80060c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079ca:	e026      	b.n	8007a1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079d4:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d209      	bcs.n	80079f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e4:	4b13      	ldr	r3, [pc, #76]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xc0>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe fb8c 	bl	800610e <vListInsert>
}
 80079f6:	e010      	b.n	8007a1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f8:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fe fb82 	bl	800610e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a0a:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d202      	bcs.n	8007a1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a14:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6013      	str	r3, [r2, #0]
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000087c 	.word	0x2000087c
 8007a28:	20000778 	.word	0x20000778
 8007a2c:	20000880 	.word	0x20000880
 8007a30:	20000864 	.word	0x20000864
 8007a34:	20000834 	.word	0x20000834
 8007a38:	20000830 	.word	0x20000830
 8007a3c:	20000898 	.word	0x20000898

08007a40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f023 0201 	bic.w	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a70:	4a0c      	ldr	r2, [pc, #48]	; (8007aa4 <pxPortInitialiseStack+0x64>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3b14      	subs	r3, #20
 8007a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f06f 0202 	mvn.w	r2, #2
 8007a8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b20      	subs	r3, #32
 8007a94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	08007aa9 	.word	0x08007aa9

08007aa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ab2:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <prvTaskExitError+0x5c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d00c      	beq.n	8007ad6 <prvTaskExitError+0x2e>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	b672      	cpsid	i
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	b662      	cpsie	i
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <prvTaskExitError+0x2c>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	b672      	cpsid	i
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	b662      	cpsie	i
 8007aea:	60bb      	str	r3, [r7, #8]
}
 8007aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007aee:	bf00      	nop
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0fc      	beq.n	8007af0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	2000000c 	.word	0x2000000c
	...

08007b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b10:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <pxCurrentTCBConst2>)
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	6808      	ldr	r0, [r1, #0]
 8007b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	f380 8809 	msr	PSP, r0
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8811 	msr	BASEPRI, r0
 8007b2a:	4770      	bx	lr
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst2>:
 8007b30:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b38:	4808      	ldr	r0, [pc, #32]	; (8007b5c <prvPortStartFirstTask+0x24>)
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f380 8808 	msr	MSP, r0
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8814 	msr	CONTROL, r0
 8007b4a:	b662      	cpsie	i
 8007b4c:	b661      	cpsie	f
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	df00      	svc	0
 8007b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b5a:	bf00      	nop
 8007b5c:	e000ed08 	.word	0xe000ed08

08007b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b66:	4b37      	ldr	r3, [pc, #220]	; (8007c44 <xPortStartScheduler+0xe4>)
 8007b68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	22ff      	movs	r2, #255	; 0xff
 8007b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <xPortStartScheduler+0xe8>)
 8007b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b8e:	4b2f      	ldr	r3, [pc, #188]	; (8007c4c <xPortStartScheduler+0xec>)
 8007b90:	2207      	movs	r2, #7
 8007b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b94:	e009      	b.n	8007baa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b96:	4b2d      	ldr	r3, [pc, #180]	; (8007c4c <xPortStartScheduler+0xec>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4a2b      	ldr	r2, [pc, #172]	; (8007c4c <xPortStartScheduler+0xec>)
 8007b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb2:	2b80      	cmp	r3, #128	; 0x80
 8007bb4:	d0ef      	beq.n	8007b96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bb6:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <xPortStartScheduler+0xec>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1c3 0307 	rsb	r3, r3, #7
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d00c      	beq.n	8007bdc <xPortStartScheduler+0x7c>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	b672      	cpsid	i
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	b662      	cpsie	i
 8007bd6:	60bb      	str	r3, [r7, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <xPortStartScheduler+0xec>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <xPortStartScheduler+0xec>)
 8007be4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007be6:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <xPortStartScheduler+0xec>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bee:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <xPortStartScheduler+0xec>)
 8007bf0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bfa:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <xPortStartScheduler+0xf0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a14      	ldr	r2, [pc, #80]	; (8007c50 <xPortStartScheduler+0xf0>)
 8007c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c06:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <xPortStartScheduler+0xf0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a11      	ldr	r2, [pc, #68]	; (8007c50 <xPortStartScheduler+0xf0>)
 8007c0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c12:	f000 f8dd 	bl	8007dd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <xPortStartScheduler+0xf4>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c1c:	f000 f8fc 	bl	8007e18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c20:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <xPortStartScheduler+0xf8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a0c      	ldr	r2, [pc, #48]	; (8007c58 <xPortStartScheduler+0xf8>)
 8007c26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c2c:	f7ff ff84 	bl	8007b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c30:	f7ff fa74 	bl	800711c <vTaskSwitchContext>
	prvTaskExitError();
 8007c34:	f7ff ff38 	bl	8007aa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	e000e400 	.word	0xe000e400
 8007c48:	200008a4 	.word	0x200008a4
 8007c4c:	200008a8 	.word	0x200008a8
 8007c50:	e000ed20 	.word	0xe000ed20
 8007c54:	2000000c 	.word	0x2000000c
 8007c58:	e000ef34 	.word	0xe000ef34

08007c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	b672      	cpsid	i
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	b662      	cpsie	i
 8007c76:	607b      	str	r3, [r7, #4]
}
 8007c78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c7a:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <vPortEnterCritical+0x60>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	4a0e      	ldr	r2, [pc, #56]	; (8007cbc <vPortEnterCritical+0x60>)
 8007c82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c84:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <vPortEnterCritical+0x60>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d111      	bne.n	8007cb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <vPortEnterCritical+0x64>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00c      	beq.n	8007cb0 <vPortEnterCritical+0x54>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	b672      	cpsid	i
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	b662      	cpsie	i
 8007caa:	603b      	str	r3, [r7, #0]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vPortEnterCritical+0x52>
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	2000000c 	.word	0x2000000c
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cca:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <vPortExitCritical+0x54>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <vPortExitCritical+0x28>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	b672      	cpsid	i
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	b662      	cpsie	i
 8007ce6:	607b      	str	r3, [r7, #4]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortExitCritical+0x54>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	4a09      	ldr	r2, [pc, #36]	; (8007d18 <vPortExitCritical+0x54>)
 8007cf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cf6:	4b08      	ldr	r3, [pc, #32]	; (8007d18 <vPortExitCritical+0x54>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d105      	bne.n	8007d0a <vPortExitCritical+0x46>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	2000000c 	.word	0x2000000c
 8007d1c:	00000000 	.word	0x00000000

08007d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f01e 0f10 	tst.w	lr, #16
 8007d30:	bf08      	it	eq
 8007d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	6010      	str	r0, [r2, #0]
 8007d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d44:	b672      	cpsid	i
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	b662      	cpsie	i
 8007d54:	f7ff f9e2 	bl	800711c <vTaskSwitchContext>
 8007d58:	f04f 0000 	mov.w	r0, #0
 8007d5c:	f380 8811 	msr	BASEPRI, r0
 8007d60:	bc09      	pop	{r0, r3}
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	6808      	ldr	r0, [r1, #0]
 8007d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	f01e 0f10 	tst.w	lr, #16
 8007d6e:	bf08      	it	eq
 8007d70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d74:	f380 8809 	msr	PSP, r0
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <pxCurrentTCBConst>:
 8007d80:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop

08007d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	b672      	cpsid	i
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	b662      	cpsie	i
 8007da2:	607b      	str	r3, [r7, #4]
}
 8007da4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007da6:	f7ff f8ff 	bl	8006fa8 <xTaskIncrementTick>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007db0:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <SysTick_Handler+0x44>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f383 8811 	msr	BASEPRI, r3
}
 8007dc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007dd4:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <vPortSetupTimerInterrupt+0x34>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <vPortSetupTimerInterrupt+0x38>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <vPortSetupTimerInterrupt+0x3c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a0a      	ldr	r2, [pc, #40]	; (8007e10 <vPortSetupTimerInterrupt+0x40>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	099b      	lsrs	r3, r3, #6
 8007dec:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <vPortSetupTimerInterrupt+0x44>)
 8007dee:	3b01      	subs	r3, #1
 8007df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007df2:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <vPortSetupTimerInterrupt+0x34>)
 8007df4:	2207      	movs	r2, #7
 8007df6:	601a      	str	r2, [r3, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	e000e010 	.word	0xe000e010
 8007e08:	e000e018 	.word	0xe000e018
 8007e0c:	20000000 	.word	0x20000000
 8007e10:	10624dd3 	.word	0x10624dd3
 8007e14:	e000e014 	.word	0xe000e014

08007e18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e28 <vPortEnableVFP+0x10>
 8007e1c:	6801      	ldr	r1, [r0, #0]
 8007e1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e22:	6001      	str	r1, [r0, #0]
 8007e24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e26:	bf00      	nop
 8007e28:	e000ed88 	.word	0xe000ed88

08007e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e38:	f7ff f80a 	bl	8006e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e3c:	4b5b      	ldr	r3, [pc, #364]	; (8007fac <pvPortMalloc+0x180>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e44:	f000 f91a 	bl	800807c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e48:	4b59      	ldr	r3, [pc, #356]	; (8007fb0 <pvPortMalloc+0x184>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 8092 	bne.w	8007f7a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01f      	beq.n	8007e9c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	3308      	adds	r3, #8
 8007e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00c      	beq.n	8007e9c <pvPortMalloc+0x70>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	b672      	cpsid	i
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	b662      	cpsie	i
 8007e96:	617b      	str	r3, [r7, #20]
}
 8007e98:	bf00      	nop
 8007e9a:	e7fe      	b.n	8007e9a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d06b      	beq.n	8007f7a <pvPortMalloc+0x14e>
 8007ea2:	4b44      	ldr	r3, [pc, #272]	; (8007fb4 <pvPortMalloc+0x188>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d866      	bhi.n	8007f7a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eac:	4b42      	ldr	r3, [pc, #264]	; (8007fb8 <pvPortMalloc+0x18c>)
 8007eae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eb0:	4b41      	ldr	r3, [pc, #260]	; (8007fb8 <pvPortMalloc+0x18c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eb6:	e004      	b.n	8007ec2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d903      	bls.n	8007ed4 <pvPortMalloc+0xa8>
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f1      	bne.n	8007eb8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ed4:	4b35      	ldr	r3, [pc, #212]	; (8007fac <pvPortMalloc+0x180>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d04d      	beq.n	8007f7a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	4413      	add	r3, r2
 8007ee6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	2308      	movs	r3, #8
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d921      	bls.n	8007f44 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <pvPortMalloc+0x100>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	b672      	cpsid	i
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	b662      	cpsie	i
 8007f26:	613b      	str	r3, [r7, #16]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f3e:	69b8      	ldr	r0, [r7, #24]
 8007f40:	f000 f8fe 	bl	8008140 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f44:	4b1b      	ldr	r3, [pc, #108]	; (8007fb4 <pvPortMalloc+0x188>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <pvPortMalloc+0x188>)
 8007f50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f52:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <pvPortMalloc+0x188>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <pvPortMalloc+0x190>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d203      	bcs.n	8007f66 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <pvPortMalloc+0x188>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <pvPortMalloc+0x190>)
 8007f64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <pvPortMalloc+0x184>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f7a:	f7fe ff77 	bl	8006e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <pvPortMalloc+0x176>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	60fb      	str	r3, [r7, #12]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <pvPortMalloc+0x174>
	return pvReturn;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3728      	adds	r7, #40	; 0x28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	200044b4 	.word	0x200044b4
 8007fb0:	200044c0 	.word	0x200044c0
 8007fb4:	200044b8 	.word	0x200044b8
 8007fb8:	200044ac 	.word	0x200044ac
 8007fbc:	200044bc 	.word	0x200044bc

08007fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d04c      	beq.n	800806c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	425b      	negs	r3, r3
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4413      	add	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	4b23      	ldr	r3, [pc, #140]	; (8008074 <vPortFree+0xb4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10c      	bne.n	8008008 <vPortFree+0x48>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	b672      	cpsid	i
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	b662      	cpsie	i
 8008002:	60fb      	str	r3, [r7, #12]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <vPortFree+0x6a>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	b672      	cpsid	i
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	b662      	cpsie	i
 8008024:	60bb      	str	r3, [r7, #8]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <vPortFree+0xb4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d019      	beq.n	800806c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d115      	bne.n	800806c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <vPortFree+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	43db      	mvns	r3, r3
 800804a:	401a      	ands	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008050:	f7fe fefe 	bl	8006e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <vPortFree+0xb8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4413      	add	r3, r2
 800805e:	4a06      	ldr	r2, [pc, #24]	; (8008078 <vPortFree+0xb8>)
 8008060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008062:	6938      	ldr	r0, [r7, #16]
 8008064:	f000 f86c 	bl	8008140 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008068:	f7fe ff00 	bl	8006e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200044c0 	.word	0x200044c0
 8008078:	200044b8 	.word	0x200044b8

0800807c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008082:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008086:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008088:	4b27      	ldr	r3, [pc, #156]	; (8008128 <prvHeapInit+0xac>)
 800808a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00c      	beq.n	80080b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3307      	adds	r3, #7
 800809a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0307 	bic.w	r3, r3, #7
 80080a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <prvHeapInit+0xac>)
 80080ac:	4413      	add	r3, r2
 80080ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080b4:	4a1d      	ldr	r2, [pc, #116]	; (800812c <prvHeapInit+0xb0>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080ba:	4b1c      	ldr	r3, [pc, #112]	; (800812c <prvHeapInit+0xb0>)
 80080bc:	2200      	movs	r2, #0
 80080be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4413      	add	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080c8:	2208      	movs	r2, #8
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0307 	bic.w	r3, r3, #7
 80080d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4a15      	ldr	r2, [pc, #84]	; (8008130 <prvHeapInit+0xb4>)
 80080dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <prvHeapInit+0xb4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2200      	movs	r2, #0
 80080e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080e6:	4b12      	ldr	r3, [pc, #72]	; (8008130 <prvHeapInit+0xb4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <prvHeapInit+0xb4>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <prvHeapInit+0xb8>)
 800810a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a09      	ldr	r2, [pc, #36]	; (8008138 <prvHeapInit+0xbc>)
 8008112:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008114:	4b09      	ldr	r3, [pc, #36]	; (800813c <prvHeapInit+0xc0>)
 8008116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800811a:	601a      	str	r2, [r3, #0]
}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	200008ac 	.word	0x200008ac
 800812c:	200044ac 	.word	0x200044ac
 8008130:	200044b4 	.word	0x200044b4
 8008134:	200044bc 	.word	0x200044bc
 8008138:	200044b8 	.word	0x200044b8
 800813c:	200044c0 	.word	0x200044c0

08008140 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008148:	4b28      	ldr	r3, [pc, #160]	; (80081ec <prvInsertBlockIntoFreeList+0xac>)
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e002      	b.n	8008154 <prvInsertBlockIntoFreeList+0x14>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	429a      	cmp	r2, r3
 800815c:	d8f7      	bhi.n	800814e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	4413      	add	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d108      	bne.n	8008182 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	441a      	add	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	441a      	add	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d118      	bne.n	80081c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <prvInsertBlockIntoFreeList+0xb0>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d00d      	beq.n	80081be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	441a      	add	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e008      	b.n	80081d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081be:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <prvInsertBlockIntoFreeList+0xb0>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e003      	b.n	80081d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d002      	beq.n	80081de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	200044ac 	.word	0x200044ac
 80081f0:	200044b4 	.word	0x200044b4

080081f4 <__errno>:
 80081f4:	4b01      	ldr	r3, [pc, #4]	; (80081fc <__errno+0x8>)
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000010 	.word	0x20000010

08008200 <std>:
 8008200:	2300      	movs	r3, #0
 8008202:	b510      	push	{r4, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	e9c0 3300 	strd	r3, r3, [r0]
 800820a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800820e:	6083      	str	r3, [r0, #8]
 8008210:	8181      	strh	r1, [r0, #12]
 8008212:	6643      	str	r3, [r0, #100]	; 0x64
 8008214:	81c2      	strh	r2, [r0, #14]
 8008216:	6183      	str	r3, [r0, #24]
 8008218:	4619      	mov	r1, r3
 800821a:	2208      	movs	r2, #8
 800821c:	305c      	adds	r0, #92	; 0x5c
 800821e:	f000 f936 	bl	800848e <memset>
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <std+0x38>)
 8008224:	6263      	str	r3, [r4, #36]	; 0x24
 8008226:	4b05      	ldr	r3, [pc, #20]	; (800823c <std+0x3c>)
 8008228:	62a3      	str	r3, [r4, #40]	; 0x28
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <std+0x40>)
 800822c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <std+0x44>)
 8008230:	6224      	str	r4, [r4, #32]
 8008232:	6323      	str	r3, [r4, #48]	; 0x30
 8008234:	bd10      	pop	{r4, pc}
 8008236:	bf00      	nop
 8008238:	08009269 	.word	0x08009269
 800823c:	0800928b 	.word	0x0800928b
 8008240:	080092c3 	.word	0x080092c3
 8008244:	080092e7 	.word	0x080092e7

08008248 <_cleanup_r>:
 8008248:	4901      	ldr	r1, [pc, #4]	; (8008250 <_cleanup_r+0x8>)
 800824a:	f000 b8cc 	b.w	80083e6 <_fwalk_reent>
 800824e:	bf00      	nop
 8008250:	0800a2b9 	.word	0x0800a2b9

08008254 <__sfmoreglue>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	2268      	movs	r2, #104	; 0x68
 8008258:	1e4d      	subs	r5, r1, #1
 800825a:	4355      	muls	r5, r2
 800825c:	460e      	mov	r6, r1
 800825e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008262:	f000 f93d 	bl	80084e0 <_malloc_r>
 8008266:	4604      	mov	r4, r0
 8008268:	b140      	cbz	r0, 800827c <__sfmoreglue+0x28>
 800826a:	2100      	movs	r1, #0
 800826c:	e9c0 1600 	strd	r1, r6, [r0]
 8008270:	300c      	adds	r0, #12
 8008272:	60a0      	str	r0, [r4, #8]
 8008274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008278:	f000 f909 	bl	800848e <memset>
 800827c:	4620      	mov	r0, r4
 800827e:	bd70      	pop	{r4, r5, r6, pc}

08008280 <__sfp_lock_acquire>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__sfp_lock_acquire+0x8>)
 8008282:	f000 b8f4 	b.w	800846e <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	200044c5 	.word	0x200044c5

0800828c <__sfp_lock_release>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__sfp_lock_release+0x8>)
 800828e:	f000 b8ef 	b.w	8008470 <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	200044c5 	.word	0x200044c5

08008298 <__sinit_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sinit_lock_acquire+0x8>)
 800829a:	f000 b8e8 	b.w	800846e <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	200044c6 	.word	0x200044c6

080082a4 <__sinit_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sinit_lock_release+0x8>)
 80082a6:	f000 b8e3 	b.w	8008470 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	200044c6 	.word	0x200044c6

080082b0 <__sinit>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff fff0 	bl	8008298 <__sinit_lock_acquire>
 80082b8:	69a3      	ldr	r3, [r4, #24]
 80082ba:	b11b      	cbz	r3, 80082c4 <__sinit+0x14>
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f7ff bff0 	b.w	80082a4 <__sinit_lock_release>
 80082c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082c8:	6523      	str	r3, [r4, #80]	; 0x50
 80082ca:	4b13      	ldr	r3, [pc, #76]	; (8008318 <__sinit+0x68>)
 80082cc:	4a13      	ldr	r2, [pc, #76]	; (800831c <__sinit+0x6c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	bf04      	itt	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	61a3      	streq	r3, [r4, #24]
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f820 	bl	8008320 <__sfp>
 80082e0:	6060      	str	r0, [r4, #4]
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f81c 	bl	8008320 <__sfp>
 80082e8:	60a0      	str	r0, [r4, #8]
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 f818 	bl	8008320 <__sfp>
 80082f0:	2200      	movs	r2, #0
 80082f2:	60e0      	str	r0, [r4, #12]
 80082f4:	2104      	movs	r1, #4
 80082f6:	6860      	ldr	r0, [r4, #4]
 80082f8:	f7ff ff82 	bl	8008200 <std>
 80082fc:	68a0      	ldr	r0, [r4, #8]
 80082fe:	2201      	movs	r2, #1
 8008300:	2109      	movs	r1, #9
 8008302:	f7ff ff7d 	bl	8008200 <std>
 8008306:	68e0      	ldr	r0, [r4, #12]
 8008308:	2202      	movs	r2, #2
 800830a:	2112      	movs	r1, #18
 800830c:	f7ff ff78 	bl	8008200 <std>
 8008310:	2301      	movs	r3, #1
 8008312:	61a3      	str	r3, [r4, #24]
 8008314:	e7d2      	b.n	80082bc <__sinit+0xc>
 8008316:	bf00      	nop
 8008318:	0800c2e0 	.word	0x0800c2e0
 800831c:	08008249 	.word	0x08008249

08008320 <__sfp>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	4607      	mov	r7, r0
 8008324:	f7ff ffac 	bl	8008280 <__sfp_lock_acquire>
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <__sfp+0x84>)
 800832a:	681e      	ldr	r6, [r3, #0]
 800832c:	69b3      	ldr	r3, [r6, #24]
 800832e:	b913      	cbnz	r3, 8008336 <__sfp+0x16>
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff ffbd 	bl	80082b0 <__sinit>
 8008336:	3648      	adds	r6, #72	; 0x48
 8008338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800833c:	3b01      	subs	r3, #1
 800833e:	d503      	bpl.n	8008348 <__sfp+0x28>
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	b30b      	cbz	r3, 8008388 <__sfp+0x68>
 8008344:	6836      	ldr	r6, [r6, #0]
 8008346:	e7f7      	b.n	8008338 <__sfp+0x18>
 8008348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800834c:	b9d5      	cbnz	r5, 8008384 <__sfp+0x64>
 800834e:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <__sfp+0x88>)
 8008350:	60e3      	str	r3, [r4, #12]
 8008352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008356:	6665      	str	r5, [r4, #100]	; 0x64
 8008358:	f000 f888 	bl	800846c <__retarget_lock_init_recursive>
 800835c:	f7ff ff96 	bl	800828c <__sfp_lock_release>
 8008360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008368:	6025      	str	r5, [r4, #0]
 800836a:	61a5      	str	r5, [r4, #24]
 800836c:	2208      	movs	r2, #8
 800836e:	4629      	mov	r1, r5
 8008370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008374:	f000 f88b 	bl	800848e <memset>
 8008378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800837c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008380:	4620      	mov	r0, r4
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	3468      	adds	r4, #104	; 0x68
 8008386:	e7d9      	b.n	800833c <__sfp+0x1c>
 8008388:	2104      	movs	r1, #4
 800838a:	4638      	mov	r0, r7
 800838c:	f7ff ff62 	bl	8008254 <__sfmoreglue>
 8008390:	4604      	mov	r4, r0
 8008392:	6030      	str	r0, [r6, #0]
 8008394:	2800      	cmp	r0, #0
 8008396:	d1d5      	bne.n	8008344 <__sfp+0x24>
 8008398:	f7ff ff78 	bl	800828c <__sfp_lock_release>
 800839c:	230c      	movs	r3, #12
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	e7ee      	b.n	8008380 <__sfp+0x60>
 80083a2:	bf00      	nop
 80083a4:	0800c2e0 	.word	0x0800c2e0
 80083a8:	ffff0001 	.word	0xffff0001

080083ac <_fwalk>:
 80083ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b0:	460f      	mov	r7, r1
 80083b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083b6:	2600      	movs	r6, #0
 80083b8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80083bc:	f1b8 0801 	subs.w	r8, r8, #1
 80083c0:	d505      	bpl.n	80083ce <_fwalk+0x22>
 80083c2:	6824      	ldr	r4, [r4, #0]
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	d1f7      	bne.n	80083b8 <_fwalk+0xc>
 80083c8:	4630      	mov	r0, r6
 80083ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ce:	89ab      	ldrh	r3, [r5, #12]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d906      	bls.n	80083e2 <_fwalk+0x36>
 80083d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083d8:	3301      	adds	r3, #1
 80083da:	d002      	beq.n	80083e2 <_fwalk+0x36>
 80083dc:	4628      	mov	r0, r5
 80083de:	47b8      	blx	r7
 80083e0:	4306      	orrs	r6, r0
 80083e2:	3568      	adds	r5, #104	; 0x68
 80083e4:	e7ea      	b.n	80083bc <_fwalk+0x10>

080083e6 <_fwalk_reent>:
 80083e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ea:	4606      	mov	r6, r0
 80083ec:	4688      	mov	r8, r1
 80083ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083f2:	2700      	movs	r7, #0
 80083f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083f8:	f1b9 0901 	subs.w	r9, r9, #1
 80083fc:	d505      	bpl.n	800840a <_fwalk_reent+0x24>
 80083fe:	6824      	ldr	r4, [r4, #0]
 8008400:	2c00      	cmp	r4, #0
 8008402:	d1f7      	bne.n	80083f4 <_fwalk_reent+0xe>
 8008404:	4638      	mov	r0, r7
 8008406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840a:	89ab      	ldrh	r3, [r5, #12]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d907      	bls.n	8008420 <_fwalk_reent+0x3a>
 8008410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008414:	3301      	adds	r3, #1
 8008416:	d003      	beq.n	8008420 <_fwalk_reent+0x3a>
 8008418:	4629      	mov	r1, r5
 800841a:	4630      	mov	r0, r6
 800841c:	47c0      	blx	r8
 800841e:	4307      	orrs	r7, r0
 8008420:	3568      	adds	r5, #104	; 0x68
 8008422:	e7e9      	b.n	80083f8 <_fwalk_reent+0x12>

08008424 <__libc_init_array>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4d0d      	ldr	r5, [pc, #52]	; (800845c <__libc_init_array+0x38>)
 8008428:	4c0d      	ldr	r4, [pc, #52]	; (8008460 <__libc_init_array+0x3c>)
 800842a:	1b64      	subs	r4, r4, r5
 800842c:	10a4      	asrs	r4, r4, #2
 800842e:	2600      	movs	r6, #0
 8008430:	42a6      	cmp	r6, r4
 8008432:	d109      	bne.n	8008448 <__libc_init_array+0x24>
 8008434:	4d0b      	ldr	r5, [pc, #44]	; (8008464 <__libc_init_array+0x40>)
 8008436:	4c0c      	ldr	r4, [pc, #48]	; (8008468 <__libc_init_array+0x44>)
 8008438:	f003 fc18 	bl	800bc6c <_init>
 800843c:	1b64      	subs	r4, r4, r5
 800843e:	10a4      	asrs	r4, r4, #2
 8008440:	2600      	movs	r6, #0
 8008442:	42a6      	cmp	r6, r4
 8008444:	d105      	bne.n	8008452 <__libc_init_array+0x2e>
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	f855 3b04 	ldr.w	r3, [r5], #4
 800844c:	4798      	blx	r3
 800844e:	3601      	adds	r6, #1
 8008450:	e7ee      	b.n	8008430 <__libc_init_array+0xc>
 8008452:	f855 3b04 	ldr.w	r3, [r5], #4
 8008456:	4798      	blx	r3
 8008458:	3601      	adds	r6, #1
 800845a:	e7f2      	b.n	8008442 <__libc_init_array+0x1e>
 800845c:	0800c680 	.word	0x0800c680
 8008460:	0800c680 	.word	0x0800c680
 8008464:	0800c680 	.word	0x0800c680
 8008468:	0800c684 	.word	0x0800c684

0800846c <__retarget_lock_init_recursive>:
 800846c:	4770      	bx	lr

0800846e <__retarget_lock_acquire_recursive>:
 800846e:	4770      	bx	lr

08008470 <__retarget_lock_release_recursive>:
 8008470:	4770      	bx	lr

08008472 <memcpy>:
 8008472:	440a      	add	r2, r1
 8008474:	4291      	cmp	r1, r2
 8008476:	f100 33ff 	add.w	r3, r0, #4294967295
 800847a:	d100      	bne.n	800847e <memcpy+0xc>
 800847c:	4770      	bx	lr
 800847e:	b510      	push	{r4, lr}
 8008480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008488:	4291      	cmp	r1, r2
 800848a:	d1f9      	bne.n	8008480 <memcpy+0xe>
 800848c:	bd10      	pop	{r4, pc}

0800848e <memset>:
 800848e:	4402      	add	r2, r0
 8008490:	4603      	mov	r3, r0
 8008492:	4293      	cmp	r3, r2
 8008494:	d100      	bne.n	8008498 <memset+0xa>
 8008496:	4770      	bx	lr
 8008498:	f803 1b01 	strb.w	r1, [r3], #1
 800849c:	e7f9      	b.n	8008492 <memset+0x4>
	...

080084a0 <sbrk_aligned>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4e0e      	ldr	r6, [pc, #56]	; (80084dc <sbrk_aligned+0x3c>)
 80084a4:	460c      	mov	r4, r1
 80084a6:	6831      	ldr	r1, [r6, #0]
 80084a8:	4605      	mov	r5, r0
 80084aa:	b911      	cbnz	r1, 80084b2 <sbrk_aligned+0x12>
 80084ac:	f000 fdee 	bl	800908c <_sbrk_r>
 80084b0:	6030      	str	r0, [r6, #0]
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 fde9 	bl	800908c <_sbrk_r>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d00a      	beq.n	80084d4 <sbrk_aligned+0x34>
 80084be:	1cc4      	adds	r4, r0, #3
 80084c0:	f024 0403 	bic.w	r4, r4, #3
 80084c4:	42a0      	cmp	r0, r4
 80084c6:	d007      	beq.n	80084d8 <sbrk_aligned+0x38>
 80084c8:	1a21      	subs	r1, r4, r0
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 fdde 	bl	800908c <_sbrk_r>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d101      	bne.n	80084d8 <sbrk_aligned+0x38>
 80084d4:	f04f 34ff 	mov.w	r4, #4294967295
 80084d8:	4620      	mov	r0, r4
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	200044cc 	.word	0x200044cc

080084e0 <_malloc_r>:
 80084e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e4:	1ccd      	adds	r5, r1, #3
 80084e6:	f025 0503 	bic.w	r5, r5, #3
 80084ea:	3508      	adds	r5, #8
 80084ec:	2d0c      	cmp	r5, #12
 80084ee:	bf38      	it	cc
 80084f0:	250c      	movcc	r5, #12
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	4607      	mov	r7, r0
 80084f6:	db01      	blt.n	80084fc <_malloc_r+0x1c>
 80084f8:	42a9      	cmp	r1, r5
 80084fa:	d905      	bls.n	8008508 <_malloc_r+0x28>
 80084fc:	230c      	movs	r3, #12
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	2600      	movs	r6, #0
 8008502:	4630      	mov	r0, r6
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008508:	4e2e      	ldr	r6, [pc, #184]	; (80085c4 <_malloc_r+0xe4>)
 800850a:	f001 ffa7 	bl	800a45c <__malloc_lock>
 800850e:	6833      	ldr	r3, [r6, #0]
 8008510:	461c      	mov	r4, r3
 8008512:	bb34      	cbnz	r4, 8008562 <_malloc_r+0x82>
 8008514:	4629      	mov	r1, r5
 8008516:	4638      	mov	r0, r7
 8008518:	f7ff ffc2 	bl	80084a0 <sbrk_aligned>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	4604      	mov	r4, r0
 8008520:	d14d      	bne.n	80085be <_malloc_r+0xde>
 8008522:	6834      	ldr	r4, [r6, #0]
 8008524:	4626      	mov	r6, r4
 8008526:	2e00      	cmp	r6, #0
 8008528:	d140      	bne.n	80085ac <_malloc_r+0xcc>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	4631      	mov	r1, r6
 800852e:	4638      	mov	r0, r7
 8008530:	eb04 0803 	add.w	r8, r4, r3
 8008534:	f000 fdaa 	bl	800908c <_sbrk_r>
 8008538:	4580      	cmp	r8, r0
 800853a:	d13a      	bne.n	80085b2 <_malloc_r+0xd2>
 800853c:	6821      	ldr	r1, [r4, #0]
 800853e:	3503      	adds	r5, #3
 8008540:	1a6d      	subs	r5, r5, r1
 8008542:	f025 0503 	bic.w	r5, r5, #3
 8008546:	3508      	adds	r5, #8
 8008548:	2d0c      	cmp	r5, #12
 800854a:	bf38      	it	cc
 800854c:	250c      	movcc	r5, #12
 800854e:	4629      	mov	r1, r5
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ffa5 	bl	80084a0 <sbrk_aligned>
 8008556:	3001      	adds	r0, #1
 8008558:	d02b      	beq.n	80085b2 <_malloc_r+0xd2>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	442b      	add	r3, r5
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	e00e      	b.n	8008580 <_malloc_r+0xa0>
 8008562:	6822      	ldr	r2, [r4, #0]
 8008564:	1b52      	subs	r2, r2, r5
 8008566:	d41e      	bmi.n	80085a6 <_malloc_r+0xc6>
 8008568:	2a0b      	cmp	r2, #11
 800856a:	d916      	bls.n	800859a <_malloc_r+0xba>
 800856c:	1961      	adds	r1, r4, r5
 800856e:	42a3      	cmp	r3, r4
 8008570:	6025      	str	r5, [r4, #0]
 8008572:	bf18      	it	ne
 8008574:	6059      	strne	r1, [r3, #4]
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	bf08      	it	eq
 800857a:	6031      	streq	r1, [r6, #0]
 800857c:	5162      	str	r2, [r4, r5]
 800857e:	604b      	str	r3, [r1, #4]
 8008580:	4638      	mov	r0, r7
 8008582:	f104 060b 	add.w	r6, r4, #11
 8008586:	f001 ff6f 	bl	800a468 <__malloc_unlock>
 800858a:	f026 0607 	bic.w	r6, r6, #7
 800858e:	1d23      	adds	r3, r4, #4
 8008590:	1af2      	subs	r2, r6, r3
 8008592:	d0b6      	beq.n	8008502 <_malloc_r+0x22>
 8008594:	1b9b      	subs	r3, r3, r6
 8008596:	50a3      	str	r3, [r4, r2]
 8008598:	e7b3      	b.n	8008502 <_malloc_r+0x22>
 800859a:	6862      	ldr	r2, [r4, #4]
 800859c:	42a3      	cmp	r3, r4
 800859e:	bf0c      	ite	eq
 80085a0:	6032      	streq	r2, [r6, #0]
 80085a2:	605a      	strne	r2, [r3, #4]
 80085a4:	e7ec      	b.n	8008580 <_malloc_r+0xa0>
 80085a6:	4623      	mov	r3, r4
 80085a8:	6864      	ldr	r4, [r4, #4]
 80085aa:	e7b2      	b.n	8008512 <_malloc_r+0x32>
 80085ac:	4634      	mov	r4, r6
 80085ae:	6876      	ldr	r6, [r6, #4]
 80085b0:	e7b9      	b.n	8008526 <_malloc_r+0x46>
 80085b2:	230c      	movs	r3, #12
 80085b4:	603b      	str	r3, [r7, #0]
 80085b6:	4638      	mov	r0, r7
 80085b8:	f001 ff56 	bl	800a468 <__malloc_unlock>
 80085bc:	e7a1      	b.n	8008502 <_malloc_r+0x22>
 80085be:	6025      	str	r5, [r4, #0]
 80085c0:	e7de      	b.n	8008580 <_malloc_r+0xa0>
 80085c2:	bf00      	nop
 80085c4:	200044c8 	.word	0x200044c8

080085c8 <__cvt>:
 80085c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	ec55 4b10 	vmov	r4, r5, d0
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	460e      	mov	r6, r1
 80085d4:	4619      	mov	r1, r3
 80085d6:	462b      	mov	r3, r5
 80085d8:	bfbb      	ittet	lt
 80085da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085de:	461d      	movlt	r5, r3
 80085e0:	2300      	movge	r3, #0
 80085e2:	232d      	movlt	r3, #45	; 0x2d
 80085e4:	700b      	strb	r3, [r1, #0]
 80085e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085ec:	4691      	mov	r9, r2
 80085ee:	f023 0820 	bic.w	r8, r3, #32
 80085f2:	bfbc      	itt	lt
 80085f4:	4622      	movlt	r2, r4
 80085f6:	4614      	movlt	r4, r2
 80085f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085fc:	d005      	beq.n	800860a <__cvt+0x42>
 80085fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008602:	d100      	bne.n	8008606 <__cvt+0x3e>
 8008604:	3601      	adds	r6, #1
 8008606:	2102      	movs	r1, #2
 8008608:	e000      	b.n	800860c <__cvt+0x44>
 800860a:	2103      	movs	r1, #3
 800860c:	ab03      	add	r3, sp, #12
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	ab02      	add	r3, sp, #8
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	ec45 4b10 	vmov	d0, r4, r5
 8008618:	4653      	mov	r3, sl
 800861a:	4632      	mov	r2, r6
 800861c:	f000 ffd8 	bl	80095d0 <_dtoa_r>
 8008620:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008624:	4607      	mov	r7, r0
 8008626:	d102      	bne.n	800862e <__cvt+0x66>
 8008628:	f019 0f01 	tst.w	r9, #1
 800862c:	d022      	beq.n	8008674 <__cvt+0xac>
 800862e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008632:	eb07 0906 	add.w	r9, r7, r6
 8008636:	d110      	bne.n	800865a <__cvt+0x92>
 8008638:	783b      	ldrb	r3, [r7, #0]
 800863a:	2b30      	cmp	r3, #48	; 0x30
 800863c:	d10a      	bne.n	8008654 <__cvt+0x8c>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f8 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800864a:	b918      	cbnz	r0, 8008654 <__cvt+0x8c>
 800864c:	f1c6 0601 	rsb	r6, r6, #1
 8008650:	f8ca 6000 	str.w	r6, [sl]
 8008654:	f8da 3000 	ldr.w	r3, [sl]
 8008658:	4499      	add	r9, r3
 800865a:	2200      	movs	r2, #0
 800865c:	2300      	movs	r3, #0
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f8 fa51 	bl	8000b08 <__aeabi_dcmpeq>
 8008666:	b108      	cbz	r0, 800866c <__cvt+0xa4>
 8008668:	f8cd 900c 	str.w	r9, [sp, #12]
 800866c:	2230      	movs	r2, #48	; 0x30
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	454b      	cmp	r3, r9
 8008672:	d307      	bcc.n	8008684 <__cvt+0xbc>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008678:	1bdb      	subs	r3, r3, r7
 800867a:	4638      	mov	r0, r7
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	b004      	add	sp, #16
 8008680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008684:	1c59      	adds	r1, r3, #1
 8008686:	9103      	str	r1, [sp, #12]
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	e7f0      	b.n	800866e <__cvt+0xa6>

0800868c <__exponent>:
 800868c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800868e:	4603      	mov	r3, r0
 8008690:	2900      	cmp	r1, #0
 8008692:	bfb8      	it	lt
 8008694:	4249      	neglt	r1, r1
 8008696:	f803 2b02 	strb.w	r2, [r3], #2
 800869a:	bfb4      	ite	lt
 800869c:	222d      	movlt	r2, #45	; 0x2d
 800869e:	222b      	movge	r2, #43	; 0x2b
 80086a0:	2909      	cmp	r1, #9
 80086a2:	7042      	strb	r2, [r0, #1]
 80086a4:	dd2a      	ble.n	80086fc <__exponent+0x70>
 80086a6:	f10d 0407 	add.w	r4, sp, #7
 80086aa:	46a4      	mov	ip, r4
 80086ac:	270a      	movs	r7, #10
 80086ae:	46a6      	mov	lr, r4
 80086b0:	460a      	mov	r2, r1
 80086b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80086b6:	fb07 1516 	mls	r5, r7, r6, r1
 80086ba:	3530      	adds	r5, #48	; 0x30
 80086bc:	2a63      	cmp	r2, #99	; 0x63
 80086be:	f104 34ff 	add.w	r4, r4, #4294967295
 80086c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086c6:	4631      	mov	r1, r6
 80086c8:	dcf1      	bgt.n	80086ae <__exponent+0x22>
 80086ca:	3130      	adds	r1, #48	; 0x30
 80086cc:	f1ae 0502 	sub.w	r5, lr, #2
 80086d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086d4:	1c44      	adds	r4, r0, #1
 80086d6:	4629      	mov	r1, r5
 80086d8:	4561      	cmp	r1, ip
 80086da:	d30a      	bcc.n	80086f2 <__exponent+0x66>
 80086dc:	f10d 0209 	add.w	r2, sp, #9
 80086e0:	eba2 020e 	sub.w	r2, r2, lr
 80086e4:	4565      	cmp	r5, ip
 80086e6:	bf88      	it	hi
 80086e8:	2200      	movhi	r2, #0
 80086ea:	4413      	add	r3, r2
 80086ec:	1a18      	subs	r0, r3, r0
 80086ee:	b003      	add	sp, #12
 80086f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086fa:	e7ed      	b.n	80086d8 <__exponent+0x4c>
 80086fc:	2330      	movs	r3, #48	; 0x30
 80086fe:	3130      	adds	r1, #48	; 0x30
 8008700:	7083      	strb	r3, [r0, #2]
 8008702:	70c1      	strb	r1, [r0, #3]
 8008704:	1d03      	adds	r3, r0, #4
 8008706:	e7f1      	b.n	80086ec <__exponent+0x60>

08008708 <_printf_float>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	ed2d 8b02 	vpush	{d8}
 8008710:	b08d      	sub	sp, #52	; 0x34
 8008712:	460c      	mov	r4, r1
 8008714:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008718:	4616      	mov	r6, r2
 800871a:	461f      	mov	r7, r3
 800871c:	4605      	mov	r5, r0
 800871e:	f001 fe19 	bl	800a354 <_localeconv_r>
 8008722:	f8d0 a000 	ldr.w	sl, [r0]
 8008726:	4650      	mov	r0, sl
 8008728:	f7f7 fd72 	bl	8000210 <strlen>
 800872c:	2300      	movs	r3, #0
 800872e:	930a      	str	r3, [sp, #40]	; 0x28
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	9305      	str	r3, [sp, #20]
 8008734:	f8d8 3000 	ldr.w	r3, [r8]
 8008738:	f894 b018 	ldrb.w	fp, [r4, #24]
 800873c:	3307      	adds	r3, #7
 800873e:	f023 0307 	bic.w	r3, r3, #7
 8008742:	f103 0208 	add.w	r2, r3, #8
 8008746:	f8c8 2000 	str.w	r2, [r8]
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008752:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008756:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800875a:	9307      	str	r3, [sp, #28]
 800875c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008760:	ee08 0a10 	vmov	s16, r0
 8008764:	4b9f      	ldr	r3, [pc, #636]	; (80089e4 <_printf_float+0x2dc>)
 8008766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800876a:	f04f 32ff 	mov.w	r2, #4294967295
 800876e:	f7f8 f9fd 	bl	8000b6c <__aeabi_dcmpun>
 8008772:	bb88      	cbnz	r0, 80087d8 <_printf_float+0xd0>
 8008774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008778:	4b9a      	ldr	r3, [pc, #616]	; (80089e4 <_printf_float+0x2dc>)
 800877a:	f04f 32ff 	mov.w	r2, #4294967295
 800877e:	f7f8 f9d7 	bl	8000b30 <__aeabi_dcmple>
 8008782:	bb48      	cbnz	r0, 80087d8 <_printf_float+0xd0>
 8008784:	2200      	movs	r2, #0
 8008786:	2300      	movs	r3, #0
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f8 f9c6 	bl	8000b1c <__aeabi_dcmplt>
 8008790:	b110      	cbz	r0, 8008798 <_printf_float+0x90>
 8008792:	232d      	movs	r3, #45	; 0x2d
 8008794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008798:	4b93      	ldr	r3, [pc, #588]	; (80089e8 <_printf_float+0x2e0>)
 800879a:	4894      	ldr	r0, [pc, #592]	; (80089ec <_printf_float+0x2e4>)
 800879c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087a0:	bf94      	ite	ls
 80087a2:	4698      	movls	r8, r3
 80087a4:	4680      	movhi	r8, r0
 80087a6:	2303      	movs	r3, #3
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	9b05      	ldr	r3, [sp, #20]
 80087ac:	f023 0204 	bic.w	r2, r3, #4
 80087b0:	6022      	str	r2, [r4, #0]
 80087b2:	f04f 0900 	mov.w	r9, #0
 80087b6:	9700      	str	r7, [sp, #0]
 80087b8:	4633      	mov	r3, r6
 80087ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f9d8 	bl	8008b74 <_printf_common>
 80087c4:	3001      	adds	r0, #1
 80087c6:	f040 8090 	bne.w	80088ea <_printf_float+0x1e2>
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	b00d      	add	sp, #52	; 0x34
 80087d0:	ecbd 8b02 	vpop	{d8}
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f8 f9c4 	bl	8000b6c <__aeabi_dcmpun>
 80087e4:	b140      	cbz	r0, 80087f8 <_printf_float+0xf0>
 80087e6:	464b      	mov	r3, r9
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bfbc      	itt	lt
 80087ec:	232d      	movlt	r3, #45	; 0x2d
 80087ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087f2:	487f      	ldr	r0, [pc, #508]	; (80089f0 <_printf_float+0x2e8>)
 80087f4:	4b7f      	ldr	r3, [pc, #508]	; (80089f4 <_printf_float+0x2ec>)
 80087f6:	e7d1      	b.n	800879c <_printf_float+0x94>
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087fe:	9206      	str	r2, [sp, #24]
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	d13f      	bne.n	8008884 <_printf_float+0x17c>
 8008804:	2306      	movs	r3, #6
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	6861      	ldr	r1, [r4, #4]
 800880c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008810:	2300      	movs	r3, #0
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	ab0a      	add	r3, sp, #40	; 0x28
 8008816:	e9cd b301 	strd	fp, r3, [sp, #4]
 800881a:	ab09      	add	r3, sp, #36	; 0x24
 800881c:	ec49 8b10 	vmov	d0, r8, r9
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	6022      	str	r2, [r4, #0]
 8008824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008828:	4628      	mov	r0, r5
 800882a:	f7ff fecd 	bl	80085c8 <__cvt>
 800882e:	9b06      	ldr	r3, [sp, #24]
 8008830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008832:	2b47      	cmp	r3, #71	; 0x47
 8008834:	4680      	mov	r8, r0
 8008836:	d108      	bne.n	800884a <_printf_float+0x142>
 8008838:	1cc8      	adds	r0, r1, #3
 800883a:	db02      	blt.n	8008842 <_printf_float+0x13a>
 800883c:	6863      	ldr	r3, [r4, #4]
 800883e:	4299      	cmp	r1, r3
 8008840:	dd41      	ble.n	80088c6 <_printf_float+0x1be>
 8008842:	f1ab 0b02 	sub.w	fp, fp, #2
 8008846:	fa5f fb8b 	uxtb.w	fp, fp
 800884a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800884e:	d820      	bhi.n	8008892 <_printf_float+0x18a>
 8008850:	3901      	subs	r1, #1
 8008852:	465a      	mov	r2, fp
 8008854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008858:	9109      	str	r1, [sp, #36]	; 0x24
 800885a:	f7ff ff17 	bl	800868c <__exponent>
 800885e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008860:	1813      	adds	r3, r2, r0
 8008862:	2a01      	cmp	r2, #1
 8008864:	4681      	mov	r9, r0
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	dc02      	bgt.n	8008870 <_printf_float+0x168>
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	07d2      	lsls	r2, r2, #31
 800886e:	d501      	bpl.n	8008874 <_printf_float+0x16c>
 8008870:	3301      	adds	r3, #1
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008878:	2b00      	cmp	r3, #0
 800887a:	d09c      	beq.n	80087b6 <_printf_float+0xae>
 800887c:	232d      	movs	r3, #45	; 0x2d
 800887e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008882:	e798      	b.n	80087b6 <_printf_float+0xae>
 8008884:	9a06      	ldr	r2, [sp, #24]
 8008886:	2a47      	cmp	r2, #71	; 0x47
 8008888:	d1be      	bne.n	8008808 <_printf_float+0x100>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1bc      	bne.n	8008808 <_printf_float+0x100>
 800888e:	2301      	movs	r3, #1
 8008890:	e7b9      	b.n	8008806 <_printf_float+0xfe>
 8008892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008896:	d118      	bne.n	80088ca <_printf_float+0x1c2>
 8008898:	2900      	cmp	r1, #0
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	dd0b      	ble.n	80088b6 <_printf_float+0x1ae>
 800889e:	6121      	str	r1, [r4, #16]
 80088a0:	b913      	cbnz	r3, 80088a8 <_printf_float+0x1a0>
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	07d0      	lsls	r0, r2, #31
 80088a6:	d502      	bpl.n	80088ae <_printf_float+0x1a6>
 80088a8:	3301      	adds	r3, #1
 80088aa:	440b      	add	r3, r1
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80088b0:	f04f 0900 	mov.w	r9, #0
 80088b4:	e7de      	b.n	8008874 <_printf_float+0x16c>
 80088b6:	b913      	cbnz	r3, 80088be <_printf_float+0x1b6>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	07d2      	lsls	r2, r2, #31
 80088bc:	d501      	bpl.n	80088c2 <_printf_float+0x1ba>
 80088be:	3302      	adds	r3, #2
 80088c0:	e7f4      	b.n	80088ac <_printf_float+0x1a4>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e7f2      	b.n	80088ac <_printf_float+0x1a4>
 80088c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088cc:	4299      	cmp	r1, r3
 80088ce:	db05      	blt.n	80088dc <_printf_float+0x1d4>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	6121      	str	r1, [r4, #16]
 80088d4:	07d8      	lsls	r0, r3, #31
 80088d6:	d5ea      	bpl.n	80088ae <_printf_float+0x1a6>
 80088d8:	1c4b      	adds	r3, r1, #1
 80088da:	e7e7      	b.n	80088ac <_printf_float+0x1a4>
 80088dc:	2900      	cmp	r1, #0
 80088de:	bfd4      	ite	le
 80088e0:	f1c1 0202 	rsble	r2, r1, #2
 80088e4:	2201      	movgt	r2, #1
 80088e6:	4413      	add	r3, r2
 80088e8:	e7e0      	b.n	80088ac <_printf_float+0x1a4>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	055a      	lsls	r2, r3, #21
 80088ee:	d407      	bmi.n	8008900 <_printf_float+0x1f8>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	4642      	mov	r2, r8
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	d12c      	bne.n	8008958 <_printf_float+0x250>
 80088fe:	e764      	b.n	80087ca <_printf_float+0xc2>
 8008900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008904:	f240 80e0 	bls.w	8008ac8 <_printf_float+0x3c0>
 8008908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	f7f8 f8fa 	bl	8000b08 <__aeabi_dcmpeq>
 8008914:	2800      	cmp	r0, #0
 8008916:	d034      	beq.n	8008982 <_printf_float+0x27a>
 8008918:	4a37      	ldr	r2, [pc, #220]	; (80089f8 <_printf_float+0x2f0>)
 800891a:	2301      	movs	r3, #1
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af51 	beq.w	80087ca <_printf_float+0xc2>
 8008928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800892c:	429a      	cmp	r2, r3
 800892e:	db02      	blt.n	8008936 <_printf_float+0x22e>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	07d8      	lsls	r0, r3, #31
 8008934:	d510      	bpl.n	8008958 <_printf_float+0x250>
 8008936:	ee18 3a10 	vmov	r3, s16
 800893a:	4652      	mov	r2, sl
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f af41 	beq.w	80087ca <_printf_float+0xc2>
 8008948:	f04f 0800 	mov.w	r8, #0
 800894c:	f104 091a 	add.w	r9, r4, #26
 8008950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008952:	3b01      	subs	r3, #1
 8008954:	4543      	cmp	r3, r8
 8008956:	dc09      	bgt.n	800896c <_printf_float+0x264>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	079b      	lsls	r3, r3, #30
 800895c:	f100 8105 	bmi.w	8008b6a <_printf_float+0x462>
 8008960:	68e0      	ldr	r0, [r4, #12]
 8008962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008964:	4298      	cmp	r0, r3
 8008966:	bfb8      	it	lt
 8008968:	4618      	movlt	r0, r3
 800896a:	e730      	b.n	80087ce <_printf_float+0xc6>
 800896c:	2301      	movs	r3, #1
 800896e:	464a      	mov	r2, r9
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f af27 	beq.w	80087ca <_printf_float+0xc2>
 800897c:	f108 0801 	add.w	r8, r8, #1
 8008980:	e7e6      	b.n	8008950 <_printf_float+0x248>
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc39      	bgt.n	80089fc <_printf_float+0x2f4>
 8008988:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <_printf_float+0x2f0>)
 800898a:	2301      	movs	r3, #1
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af19 	beq.w	80087ca <_printf_float+0xc2>
 8008998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899c:	4313      	orrs	r3, r2
 800899e:	d102      	bne.n	80089a6 <_printf_float+0x29e>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	07d9      	lsls	r1, r3, #31
 80089a4:	d5d8      	bpl.n	8008958 <_printf_float+0x250>
 80089a6:	ee18 3a10 	vmov	r3, s16
 80089aa:	4652      	mov	r2, sl
 80089ac:	4631      	mov	r1, r6
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f af09 	beq.w	80087ca <_printf_float+0xc2>
 80089b8:	f04f 0900 	mov.w	r9, #0
 80089bc:	f104 0a1a 	add.w	sl, r4, #26
 80089c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c2:	425b      	negs	r3, r3
 80089c4:	454b      	cmp	r3, r9
 80089c6:	dc01      	bgt.n	80089cc <_printf_float+0x2c4>
 80089c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ca:	e792      	b.n	80088f2 <_printf_float+0x1ea>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4652      	mov	r2, sl
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f aef7 	beq.w	80087ca <_printf_float+0xc2>
 80089dc:	f109 0901 	add.w	r9, r9, #1
 80089e0:	e7ee      	b.n	80089c0 <_printf_float+0x2b8>
 80089e2:	bf00      	nop
 80089e4:	7fefffff 	.word	0x7fefffff
 80089e8:	0800c2e4 	.word	0x0800c2e4
 80089ec:	0800c2e8 	.word	0x0800c2e8
 80089f0:	0800c2f0 	.word	0x0800c2f0
 80089f4:	0800c2ec 	.word	0x0800c2ec
 80089f8:	0800c519 	.word	0x0800c519
 80089fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a00:	429a      	cmp	r2, r3
 8008a02:	bfa8      	it	ge
 8008a04:	461a      	movge	r2, r3
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	4691      	mov	r9, r2
 8008a0a:	dc37      	bgt.n	8008a7c <_printf_float+0x374>
 8008a0c:	f04f 0b00 	mov.w	fp, #0
 8008a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a14:	f104 021a 	add.w	r2, r4, #26
 8008a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	eba3 0309 	sub.w	r3, r3, r9
 8008a20:	455b      	cmp	r3, fp
 8008a22:	dc33      	bgt.n	8008a8c <_printf_float+0x384>
 8008a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	db3b      	blt.n	8008aa4 <_printf_float+0x39c>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	07da      	lsls	r2, r3, #31
 8008a30:	d438      	bmi.n	8008aa4 <_printf_float+0x39c>
 8008a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a34:	9a05      	ldr	r2, [sp, #20]
 8008a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a38:	1a9a      	subs	r2, r3, r2
 8008a3a:	eba3 0901 	sub.w	r9, r3, r1
 8008a3e:	4591      	cmp	r9, r2
 8008a40:	bfa8      	it	ge
 8008a42:	4691      	movge	r9, r2
 8008a44:	f1b9 0f00 	cmp.w	r9, #0
 8008a48:	dc35      	bgt.n	8008ab6 <_printf_float+0x3ae>
 8008a4a:	f04f 0800 	mov.w	r8, #0
 8008a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a52:	f104 0a1a 	add.w	sl, r4, #26
 8008a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	eba3 0309 	sub.w	r3, r3, r9
 8008a60:	4543      	cmp	r3, r8
 8008a62:	f77f af79 	ble.w	8008958 <_printf_float+0x250>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4652      	mov	r2, sl
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f aeaa 	beq.w	80087ca <_printf_float+0xc2>
 8008a76:	f108 0801 	add.w	r8, r8, #1
 8008a7a:	e7ec      	b.n	8008a56 <_printf_float+0x34e>
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4642      	mov	r2, r8
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	d1c0      	bne.n	8008a0c <_printf_float+0x304>
 8008a8a:	e69e      	b.n	80087ca <_printf_float+0xc2>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	9205      	str	r2, [sp, #20]
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f ae97 	beq.w	80087ca <_printf_float+0xc2>
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	f10b 0b01 	add.w	fp, fp, #1
 8008aa2:	e7b9      	b.n	8008a18 <_printf_float+0x310>
 8008aa4:	ee18 3a10 	vmov	r3, s16
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d1be      	bne.n	8008a32 <_printf_float+0x32a>
 8008ab4:	e689      	b.n	80087ca <_printf_float+0xc2>
 8008ab6:	9a05      	ldr	r2, [sp, #20]
 8008ab8:	464b      	mov	r3, r9
 8008aba:	4442      	add	r2, r8
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d1c1      	bne.n	8008a4a <_printf_float+0x342>
 8008ac6:	e680      	b.n	80087ca <_printf_float+0xc2>
 8008ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aca:	2a01      	cmp	r2, #1
 8008acc:	dc01      	bgt.n	8008ad2 <_printf_float+0x3ca>
 8008ace:	07db      	lsls	r3, r3, #31
 8008ad0:	d538      	bpl.n	8008b44 <_printf_float+0x43c>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4642      	mov	r2, r8
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	f43f ae74 	beq.w	80087ca <_printf_float+0xc2>
 8008ae2:	ee18 3a10 	vmov	r3, s16
 8008ae6:	4652      	mov	r2, sl
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	f43f ae6b 	beq.w	80087ca <_printf_float+0xc2>
 8008af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008af8:	2200      	movs	r2, #0
 8008afa:	2300      	movs	r3, #0
 8008afc:	f7f8 f804 	bl	8000b08 <__aeabi_dcmpeq>
 8008b00:	b9d8      	cbnz	r0, 8008b3a <_printf_float+0x432>
 8008b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b04:	f108 0201 	add.w	r2, r8, #1
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	d10e      	bne.n	8008b32 <_printf_float+0x42a>
 8008b14:	e659      	b.n	80087ca <_printf_float+0xc2>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4652      	mov	r2, sl
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	f43f ae52 	beq.w	80087ca <_printf_float+0xc2>
 8008b26:	f108 0801 	add.w	r8, r8, #1
 8008b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	4543      	cmp	r3, r8
 8008b30:	dcf1      	bgt.n	8008b16 <_printf_float+0x40e>
 8008b32:	464b      	mov	r3, r9
 8008b34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b38:	e6dc      	b.n	80088f4 <_printf_float+0x1ec>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	f104 0a1a 	add.w	sl, r4, #26
 8008b42:	e7f2      	b.n	8008b2a <_printf_float+0x422>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4642      	mov	r2, r8
 8008b48:	e7df      	b.n	8008b0a <_printf_float+0x402>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	464a      	mov	r2, r9
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	f43f ae38 	beq.w	80087ca <_printf_float+0xc2>
 8008b5a:	f108 0801 	add.w	r8, r8, #1
 8008b5e:	68e3      	ldr	r3, [r4, #12]
 8008b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b62:	1a5b      	subs	r3, r3, r1
 8008b64:	4543      	cmp	r3, r8
 8008b66:	dcf0      	bgt.n	8008b4a <_printf_float+0x442>
 8008b68:	e6fa      	b.n	8008960 <_printf_float+0x258>
 8008b6a:	f04f 0800 	mov.w	r8, #0
 8008b6e:	f104 0919 	add.w	r9, r4, #25
 8008b72:	e7f4      	b.n	8008b5e <_printf_float+0x456>

08008b74 <_printf_common>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	4616      	mov	r6, r2
 8008b7a:	4699      	mov	r9, r3
 8008b7c:	688a      	ldr	r2, [r1, #8]
 8008b7e:	690b      	ldr	r3, [r1, #16]
 8008b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	bfb8      	it	lt
 8008b88:	4613      	movlt	r3, r2
 8008b8a:	6033      	str	r3, [r6, #0]
 8008b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b90:	4607      	mov	r7, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	b10a      	cbz	r2, 8008b9a <_printf_common+0x26>
 8008b96:	3301      	adds	r3, #1
 8008b98:	6033      	str	r3, [r6, #0]
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	0699      	lsls	r1, r3, #26
 8008b9e:	bf42      	ittt	mi
 8008ba0:	6833      	ldrmi	r3, [r6, #0]
 8008ba2:	3302      	addmi	r3, #2
 8008ba4:	6033      	strmi	r3, [r6, #0]
 8008ba6:	6825      	ldr	r5, [r4, #0]
 8008ba8:	f015 0506 	ands.w	r5, r5, #6
 8008bac:	d106      	bne.n	8008bbc <_printf_common+0x48>
 8008bae:	f104 0a19 	add.w	sl, r4, #25
 8008bb2:	68e3      	ldr	r3, [r4, #12]
 8008bb4:	6832      	ldr	r2, [r6, #0]
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	42ab      	cmp	r3, r5
 8008bba:	dc26      	bgt.n	8008c0a <_printf_common+0x96>
 8008bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bc0:	1e13      	subs	r3, r2, #0
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	bf18      	it	ne
 8008bc6:	2301      	movne	r3, #1
 8008bc8:	0692      	lsls	r2, r2, #26
 8008bca:	d42b      	bmi.n	8008c24 <_printf_common+0xb0>
 8008bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c0      	blx	r8
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d01e      	beq.n	8008c18 <_printf_common+0xa4>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	68e5      	ldr	r5, [r4, #12]
 8008bde:	6832      	ldr	r2, [r6, #0]
 8008be0:	f003 0306 	and.w	r3, r3, #6
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	bf08      	it	eq
 8008be8:	1aad      	subeq	r5, r5, r2
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	6922      	ldr	r2, [r4, #16]
 8008bee:	bf0c      	ite	eq
 8008bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf4:	2500      	movne	r5, #0
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	bfc4      	itt	gt
 8008bfa:	1a9b      	subgt	r3, r3, r2
 8008bfc:	18ed      	addgt	r5, r5, r3
 8008bfe:	2600      	movs	r6, #0
 8008c00:	341a      	adds	r4, #26
 8008c02:	42b5      	cmp	r5, r6
 8008c04:	d11a      	bne.n	8008c3c <_printf_common+0xc8>
 8008c06:	2000      	movs	r0, #0
 8008c08:	e008      	b.n	8008c1c <_printf_common+0xa8>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	4649      	mov	r1, r9
 8008c10:	4638      	mov	r0, r7
 8008c12:	47c0      	blx	r8
 8008c14:	3001      	adds	r0, #1
 8008c16:	d103      	bne.n	8008c20 <_printf_common+0xac>
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c20:	3501      	adds	r5, #1
 8008c22:	e7c6      	b.n	8008bb2 <_printf_common+0x3e>
 8008c24:	18e1      	adds	r1, r4, r3
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	2030      	movs	r0, #48	; 0x30
 8008c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c2e:	4422      	add	r2, r4
 8008c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c38:	3302      	adds	r3, #2
 8008c3a:	e7c7      	b.n	8008bcc <_printf_common+0x58>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4622      	mov	r2, r4
 8008c40:	4649      	mov	r1, r9
 8008c42:	4638      	mov	r0, r7
 8008c44:	47c0      	blx	r8
 8008c46:	3001      	adds	r0, #1
 8008c48:	d0e6      	beq.n	8008c18 <_printf_common+0xa4>
 8008c4a:	3601      	adds	r6, #1
 8008c4c:	e7d9      	b.n	8008c02 <_printf_common+0x8e>
	...

08008c50 <_printf_i>:
 8008c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	7e0f      	ldrb	r7, [r1, #24]
 8008c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c58:	2f78      	cmp	r7, #120	; 0x78
 8008c5a:	4691      	mov	r9, r2
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	469a      	mov	sl, r3
 8008c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c66:	d807      	bhi.n	8008c78 <_printf_i+0x28>
 8008c68:	2f62      	cmp	r7, #98	; 0x62
 8008c6a:	d80a      	bhi.n	8008c82 <_printf_i+0x32>
 8008c6c:	2f00      	cmp	r7, #0
 8008c6e:	f000 80d8 	beq.w	8008e22 <_printf_i+0x1d2>
 8008c72:	2f58      	cmp	r7, #88	; 0x58
 8008c74:	f000 80a3 	beq.w	8008dbe <_printf_i+0x16e>
 8008c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c80:	e03a      	b.n	8008cf8 <_printf_i+0xa8>
 8008c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c86:	2b15      	cmp	r3, #21
 8008c88:	d8f6      	bhi.n	8008c78 <_printf_i+0x28>
 8008c8a:	a101      	add	r1, pc, #4	; (adr r1, 8008c90 <_printf_i+0x40>)
 8008c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c90:	08008ce9 	.word	0x08008ce9
 8008c94:	08008cfd 	.word	0x08008cfd
 8008c98:	08008c79 	.word	0x08008c79
 8008c9c:	08008c79 	.word	0x08008c79
 8008ca0:	08008c79 	.word	0x08008c79
 8008ca4:	08008c79 	.word	0x08008c79
 8008ca8:	08008cfd 	.word	0x08008cfd
 8008cac:	08008c79 	.word	0x08008c79
 8008cb0:	08008c79 	.word	0x08008c79
 8008cb4:	08008c79 	.word	0x08008c79
 8008cb8:	08008c79 	.word	0x08008c79
 8008cbc:	08008e09 	.word	0x08008e09
 8008cc0:	08008d2d 	.word	0x08008d2d
 8008cc4:	08008deb 	.word	0x08008deb
 8008cc8:	08008c79 	.word	0x08008c79
 8008ccc:	08008c79 	.word	0x08008c79
 8008cd0:	08008e2b 	.word	0x08008e2b
 8008cd4:	08008c79 	.word	0x08008c79
 8008cd8:	08008d2d 	.word	0x08008d2d
 8008cdc:	08008c79 	.word	0x08008c79
 8008ce0:	08008c79 	.word	0x08008c79
 8008ce4:	08008df3 	.word	0x08008df3
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	1d1a      	adds	r2, r3, #4
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	602a      	str	r2, [r5, #0]
 8008cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e0a3      	b.n	8008e44 <_printf_i+0x1f4>
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	6829      	ldr	r1, [r5, #0]
 8008d00:	0606      	lsls	r6, r0, #24
 8008d02:	f101 0304 	add.w	r3, r1, #4
 8008d06:	d50a      	bpl.n	8008d1e <_printf_i+0xce>
 8008d08:	680e      	ldr	r6, [r1, #0]
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	2e00      	cmp	r6, #0
 8008d0e:	da03      	bge.n	8008d18 <_printf_i+0xc8>
 8008d10:	232d      	movs	r3, #45	; 0x2d
 8008d12:	4276      	negs	r6, r6
 8008d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d18:	485e      	ldr	r0, [pc, #376]	; (8008e94 <_printf_i+0x244>)
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	e019      	b.n	8008d52 <_printf_i+0x102>
 8008d1e:	680e      	ldr	r6, [r1, #0]
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d26:	bf18      	it	ne
 8008d28:	b236      	sxthne	r6, r6
 8008d2a:	e7ef      	b.n	8008d0c <_printf_i+0xbc>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	1d19      	adds	r1, r3, #4
 8008d32:	6029      	str	r1, [r5, #0]
 8008d34:	0601      	lsls	r1, r0, #24
 8008d36:	d501      	bpl.n	8008d3c <_printf_i+0xec>
 8008d38:	681e      	ldr	r6, [r3, #0]
 8008d3a:	e002      	b.n	8008d42 <_printf_i+0xf2>
 8008d3c:	0646      	lsls	r6, r0, #25
 8008d3e:	d5fb      	bpl.n	8008d38 <_printf_i+0xe8>
 8008d40:	881e      	ldrh	r6, [r3, #0]
 8008d42:	4854      	ldr	r0, [pc, #336]	; (8008e94 <_printf_i+0x244>)
 8008d44:	2f6f      	cmp	r7, #111	; 0x6f
 8008d46:	bf0c      	ite	eq
 8008d48:	2308      	moveq	r3, #8
 8008d4a:	230a      	movne	r3, #10
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d52:	6865      	ldr	r5, [r4, #4]
 8008d54:	60a5      	str	r5, [r4, #8]
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	bfa2      	ittt	ge
 8008d5a:	6821      	ldrge	r1, [r4, #0]
 8008d5c:	f021 0104 	bicge.w	r1, r1, #4
 8008d60:	6021      	strge	r1, [r4, #0]
 8008d62:	b90e      	cbnz	r6, 8008d68 <_printf_i+0x118>
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	d04d      	beq.n	8008e04 <_printf_i+0x1b4>
 8008d68:	4615      	mov	r5, r2
 8008d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d72:	5dc7      	ldrb	r7, [r0, r7]
 8008d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d78:	4637      	mov	r7, r6
 8008d7a:	42bb      	cmp	r3, r7
 8008d7c:	460e      	mov	r6, r1
 8008d7e:	d9f4      	bls.n	8008d6a <_printf_i+0x11a>
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d10b      	bne.n	8008d9c <_printf_i+0x14c>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	07de      	lsls	r6, r3, #31
 8008d88:	d508      	bpl.n	8008d9c <_printf_i+0x14c>
 8008d8a:	6923      	ldr	r3, [r4, #16]
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	4299      	cmp	r1, r3
 8008d90:	bfde      	ittt	le
 8008d92:	2330      	movle	r3, #48	; 0x30
 8008d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d9c:	1b52      	subs	r2, r2, r5
 8008d9e:	6122      	str	r2, [r4, #16]
 8008da0:	f8cd a000 	str.w	sl, [sp]
 8008da4:	464b      	mov	r3, r9
 8008da6:	aa03      	add	r2, sp, #12
 8008da8:	4621      	mov	r1, r4
 8008daa:	4640      	mov	r0, r8
 8008dac:	f7ff fee2 	bl	8008b74 <_printf_common>
 8008db0:	3001      	adds	r0, #1
 8008db2:	d14c      	bne.n	8008e4e <_printf_i+0x1fe>
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	b004      	add	sp, #16
 8008dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbe:	4835      	ldr	r0, [pc, #212]	; (8008e94 <_printf_i+0x244>)
 8008dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008dc4:	6829      	ldr	r1, [r5, #0]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dcc:	6029      	str	r1, [r5, #0]
 8008dce:	061d      	lsls	r5, r3, #24
 8008dd0:	d514      	bpl.n	8008dfc <_printf_i+0x1ac>
 8008dd2:	07df      	lsls	r7, r3, #31
 8008dd4:	bf44      	itt	mi
 8008dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dda:	6023      	strmi	r3, [r4, #0]
 8008ddc:	b91e      	cbnz	r6, 8008de6 <_printf_i+0x196>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f023 0320 	bic.w	r3, r3, #32
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	2310      	movs	r3, #16
 8008de8:	e7b0      	b.n	8008d4c <_printf_i+0xfc>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	f043 0320 	orr.w	r3, r3, #32
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	2378      	movs	r3, #120	; 0x78
 8008df4:	4828      	ldr	r0, [pc, #160]	; (8008e98 <_printf_i+0x248>)
 8008df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dfa:	e7e3      	b.n	8008dc4 <_printf_i+0x174>
 8008dfc:	0659      	lsls	r1, r3, #25
 8008dfe:	bf48      	it	mi
 8008e00:	b2b6      	uxthmi	r6, r6
 8008e02:	e7e6      	b.n	8008dd2 <_printf_i+0x182>
 8008e04:	4615      	mov	r5, r2
 8008e06:	e7bb      	b.n	8008d80 <_printf_i+0x130>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	6826      	ldr	r6, [r4, #0]
 8008e0c:	6961      	ldr	r1, [r4, #20]
 8008e0e:	1d18      	adds	r0, r3, #4
 8008e10:	6028      	str	r0, [r5, #0]
 8008e12:	0635      	lsls	r5, r6, #24
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	d501      	bpl.n	8008e1c <_printf_i+0x1cc>
 8008e18:	6019      	str	r1, [r3, #0]
 8008e1a:	e002      	b.n	8008e22 <_printf_i+0x1d2>
 8008e1c:	0670      	lsls	r0, r6, #25
 8008e1e:	d5fb      	bpl.n	8008e18 <_printf_i+0x1c8>
 8008e20:	8019      	strh	r1, [r3, #0]
 8008e22:	2300      	movs	r3, #0
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	4615      	mov	r5, r2
 8008e28:	e7ba      	b.n	8008da0 <_printf_i+0x150>
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	1d1a      	adds	r2, r3, #4
 8008e2e:	602a      	str	r2, [r5, #0]
 8008e30:	681d      	ldr	r5, [r3, #0]
 8008e32:	6862      	ldr	r2, [r4, #4]
 8008e34:	2100      	movs	r1, #0
 8008e36:	4628      	mov	r0, r5
 8008e38:	f7f7 f9f2 	bl	8000220 <memchr>
 8008e3c:	b108      	cbz	r0, 8008e42 <_printf_i+0x1f2>
 8008e3e:	1b40      	subs	r0, r0, r5
 8008e40:	6060      	str	r0, [r4, #4]
 8008e42:	6863      	ldr	r3, [r4, #4]
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	2300      	movs	r3, #0
 8008e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e4c:	e7a8      	b.n	8008da0 <_printf_i+0x150>
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	462a      	mov	r2, r5
 8008e52:	4649      	mov	r1, r9
 8008e54:	4640      	mov	r0, r8
 8008e56:	47d0      	blx	sl
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d0ab      	beq.n	8008db4 <_printf_i+0x164>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	079b      	lsls	r3, r3, #30
 8008e60:	d413      	bmi.n	8008e8a <_printf_i+0x23a>
 8008e62:	68e0      	ldr	r0, [r4, #12]
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	4298      	cmp	r0, r3
 8008e68:	bfb8      	it	lt
 8008e6a:	4618      	movlt	r0, r3
 8008e6c:	e7a4      	b.n	8008db8 <_printf_i+0x168>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4632      	mov	r2, r6
 8008e72:	4649      	mov	r1, r9
 8008e74:	4640      	mov	r0, r8
 8008e76:	47d0      	blx	sl
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d09b      	beq.n	8008db4 <_printf_i+0x164>
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	68e3      	ldr	r3, [r4, #12]
 8008e80:	9903      	ldr	r1, [sp, #12]
 8008e82:	1a5b      	subs	r3, r3, r1
 8008e84:	42ab      	cmp	r3, r5
 8008e86:	dcf2      	bgt.n	8008e6e <_printf_i+0x21e>
 8008e88:	e7eb      	b.n	8008e62 <_printf_i+0x212>
 8008e8a:	2500      	movs	r5, #0
 8008e8c:	f104 0619 	add.w	r6, r4, #25
 8008e90:	e7f5      	b.n	8008e7e <_printf_i+0x22e>
 8008e92:	bf00      	nop
 8008e94:	0800c2f4 	.word	0x0800c2f4
 8008e98:	0800c305 	.word	0x0800c305

08008e9c <iprintf>:
 8008e9c:	b40f      	push	{r0, r1, r2, r3}
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <iprintf+0x2c>)
 8008ea0:	b513      	push	{r0, r1, r4, lr}
 8008ea2:	681c      	ldr	r4, [r3, #0]
 8008ea4:	b124      	cbz	r4, 8008eb0 <iprintf+0x14>
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	b913      	cbnz	r3, 8008eb0 <iprintf+0x14>
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff fa00 	bl	80082b0 <__sinit>
 8008eb0:	ab05      	add	r3, sp, #20
 8008eb2:	9a04      	ldr	r2, [sp, #16]
 8008eb4:	68a1      	ldr	r1, [r4, #8]
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f001 feeb 	bl	800ac94 <_vfiprintf_r>
 8008ebe:	b002      	add	sp, #8
 8008ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec4:	b004      	add	sp, #16
 8008ec6:	4770      	bx	lr
 8008ec8:	20000010 	.word	0x20000010

08008ecc <_puts_r>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	460e      	mov	r6, r1
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	b118      	cbz	r0, 8008edc <_puts_r+0x10>
 8008ed4:	6983      	ldr	r3, [r0, #24]
 8008ed6:	b90b      	cbnz	r3, 8008edc <_puts_r+0x10>
 8008ed8:	f7ff f9ea 	bl	80082b0 <__sinit>
 8008edc:	69ab      	ldr	r3, [r5, #24]
 8008ede:	68ac      	ldr	r4, [r5, #8]
 8008ee0:	b913      	cbnz	r3, 8008ee8 <_puts_r+0x1c>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7ff f9e4 	bl	80082b0 <__sinit>
 8008ee8:	4b2c      	ldr	r3, [pc, #176]	; (8008f9c <_puts_r+0xd0>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d120      	bne.n	8008f30 <_puts_r+0x64>
 8008eee:	686c      	ldr	r4, [r5, #4]
 8008ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef2:	07db      	lsls	r3, r3, #31
 8008ef4:	d405      	bmi.n	8008f02 <_puts_r+0x36>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	0598      	lsls	r0, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_puts_r+0x36>
 8008efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efe:	f7ff fab6 	bl	800846e <__retarget_lock_acquire_recursive>
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	0719      	lsls	r1, r3, #28
 8008f06:	d51d      	bpl.n	8008f44 <_puts_r+0x78>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	b1db      	cbz	r3, 8008f44 <_puts_r+0x78>
 8008f0c:	3e01      	subs	r6, #1
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f14:	3b01      	subs	r3, #1
 8008f16:	60a3      	str	r3, [r4, #8]
 8008f18:	bb39      	cbnz	r1, 8008f6a <_puts_r+0x9e>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	da38      	bge.n	8008f90 <_puts_r+0xc4>
 8008f1e:	4622      	mov	r2, r4
 8008f20:	210a      	movs	r1, #10
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 f9e4 	bl	80092f0 <__swbuf_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d011      	beq.n	8008f50 <_puts_r+0x84>
 8008f2c:	250a      	movs	r5, #10
 8008f2e:	e011      	b.n	8008f54 <_puts_r+0x88>
 8008f30:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <_puts_r+0xd4>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	d101      	bne.n	8008f3a <_puts_r+0x6e>
 8008f36:	68ac      	ldr	r4, [r5, #8]
 8008f38:	e7da      	b.n	8008ef0 <_puts_r+0x24>
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <_puts_r+0xd8>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	bf08      	it	eq
 8008f40:	68ec      	ldreq	r4, [r5, #12]
 8008f42:	e7d5      	b.n	8008ef0 <_puts_r+0x24>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 fa36 	bl	80093b8 <__swsetup_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d0dd      	beq.n	8008f0c <_puts_r+0x40>
 8008f50:	f04f 35ff 	mov.w	r5, #4294967295
 8008f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f56:	07da      	lsls	r2, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_puts_r+0x9a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	059b      	lsls	r3, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_puts_r+0x9a>
 8008f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f62:	f7ff fa85 	bl	8008470 <__retarget_lock_release_recursive>
 8008f66:	4628      	mov	r0, r5
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da04      	bge.n	8008f78 <_puts_r+0xac>
 8008f6e:	69a2      	ldr	r2, [r4, #24]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	dc06      	bgt.n	8008f82 <_puts_r+0xb6>
 8008f74:	290a      	cmp	r1, #10
 8008f76:	d004      	beq.n	8008f82 <_puts_r+0xb6>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	6022      	str	r2, [r4, #0]
 8008f7e:	7019      	strb	r1, [r3, #0]
 8008f80:	e7c5      	b.n	8008f0e <_puts_r+0x42>
 8008f82:	4622      	mov	r2, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 f9b3 	bl	80092f0 <__swbuf_r>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d1bf      	bne.n	8008f0e <_puts_r+0x42>
 8008f8e:	e7df      	b.n	8008f50 <_puts_r+0x84>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	250a      	movs	r5, #10
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	701d      	strb	r5, [r3, #0]
 8008f9a:	e7db      	b.n	8008f54 <_puts_r+0x88>
 8008f9c:	0800c2a0 	.word	0x0800c2a0
 8008fa0:	0800c2c0 	.word	0x0800c2c0
 8008fa4:	0800c280 	.word	0x0800c280

08008fa8 <puts>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <puts+0xc>)
 8008faa:	4601      	mov	r1, r0
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	f7ff bf8d 	b.w	8008ecc <_puts_r>
 8008fb2:	bf00      	nop
 8008fb4:	20000010 	.word	0x20000010

08008fb8 <cleanup_glue>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	460c      	mov	r4, r1
 8008fbc:	6809      	ldr	r1, [r1, #0]
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	b109      	cbz	r1, 8008fc6 <cleanup_glue+0xe>
 8008fc2:	f7ff fff9 	bl	8008fb8 <cleanup_glue>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fce:	f001 bdeb 	b.w	800aba8 <_free_r>
	...

08008fd4 <_reclaim_reent>:
 8008fd4:	4b2c      	ldr	r3, [pc, #176]	; (8009088 <_reclaim_reent+0xb4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4283      	cmp	r3, r0
 8008fda:	b570      	push	{r4, r5, r6, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	d051      	beq.n	8009084 <_reclaim_reent+0xb0>
 8008fe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008fe2:	b143      	cbz	r3, 8008ff6 <_reclaim_reent+0x22>
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d14a      	bne.n	8009080 <_reclaim_reent+0xac>
 8008fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fec:	6819      	ldr	r1, [r3, #0]
 8008fee:	b111      	cbz	r1, 8008ff6 <_reclaim_reent+0x22>
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f001 fdd9 	bl	800aba8 <_free_r>
 8008ff6:	6961      	ldr	r1, [r4, #20]
 8008ff8:	b111      	cbz	r1, 8009000 <_reclaim_reent+0x2c>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f001 fdd4 	bl	800aba8 <_free_r>
 8009000:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009002:	b111      	cbz	r1, 800900a <_reclaim_reent+0x36>
 8009004:	4620      	mov	r0, r4
 8009006:	f001 fdcf 	bl	800aba8 <_free_r>
 800900a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800900c:	b111      	cbz	r1, 8009014 <_reclaim_reent+0x40>
 800900e:	4620      	mov	r0, r4
 8009010:	f001 fdca 	bl	800aba8 <_free_r>
 8009014:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009016:	b111      	cbz	r1, 800901e <_reclaim_reent+0x4a>
 8009018:	4620      	mov	r0, r4
 800901a:	f001 fdc5 	bl	800aba8 <_free_r>
 800901e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009020:	b111      	cbz	r1, 8009028 <_reclaim_reent+0x54>
 8009022:	4620      	mov	r0, r4
 8009024:	f001 fdc0 	bl	800aba8 <_free_r>
 8009028:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800902a:	b111      	cbz	r1, 8009032 <_reclaim_reent+0x5e>
 800902c:	4620      	mov	r0, r4
 800902e:	f001 fdbb 	bl	800aba8 <_free_r>
 8009032:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009034:	b111      	cbz	r1, 800903c <_reclaim_reent+0x68>
 8009036:	4620      	mov	r0, r4
 8009038:	f001 fdb6 	bl	800aba8 <_free_r>
 800903c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800903e:	b111      	cbz	r1, 8009046 <_reclaim_reent+0x72>
 8009040:	4620      	mov	r0, r4
 8009042:	f001 fdb1 	bl	800aba8 <_free_r>
 8009046:	69a3      	ldr	r3, [r4, #24]
 8009048:	b1e3      	cbz	r3, 8009084 <_reclaim_reent+0xb0>
 800904a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800904c:	4620      	mov	r0, r4
 800904e:	4798      	blx	r3
 8009050:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009052:	b1b9      	cbz	r1, 8009084 <_reclaim_reent+0xb0>
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800905a:	f7ff bfad 	b.w	8008fb8 <cleanup_glue>
 800905e:	5949      	ldr	r1, [r1, r5]
 8009060:	b941      	cbnz	r1, 8009074 <_reclaim_reent+0xa0>
 8009062:	3504      	adds	r5, #4
 8009064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009066:	2d80      	cmp	r5, #128	; 0x80
 8009068:	68d9      	ldr	r1, [r3, #12]
 800906a:	d1f8      	bne.n	800905e <_reclaim_reent+0x8a>
 800906c:	4620      	mov	r0, r4
 800906e:	f001 fd9b 	bl	800aba8 <_free_r>
 8009072:	e7ba      	b.n	8008fea <_reclaim_reent+0x16>
 8009074:	680e      	ldr	r6, [r1, #0]
 8009076:	4620      	mov	r0, r4
 8009078:	f001 fd96 	bl	800aba8 <_free_r>
 800907c:	4631      	mov	r1, r6
 800907e:	e7ef      	b.n	8009060 <_reclaim_reent+0x8c>
 8009080:	2500      	movs	r5, #0
 8009082:	e7ef      	b.n	8009064 <_reclaim_reent+0x90>
 8009084:	bd70      	pop	{r4, r5, r6, pc}
 8009086:	bf00      	nop
 8009088:	20000010 	.word	0x20000010

0800908c <_sbrk_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	; (80090a8 <_sbrk_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f9 f8da 	bl	8002250 <_sbrk>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_sbrk_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_sbrk_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	200044d0 	.word	0x200044d0

080090ac <iscanf>:
 80090ac:	b40f      	push	{r0, r1, r2, r3}
 80090ae:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <iscanf+0x2c>)
 80090b0:	b513      	push	{r0, r1, r4, lr}
 80090b2:	681c      	ldr	r4, [r3, #0]
 80090b4:	b124      	cbz	r4, 80090c0 <iscanf+0x14>
 80090b6:	69a3      	ldr	r3, [r4, #24]
 80090b8:	b913      	cbnz	r3, 80090c0 <iscanf+0x14>
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7ff f8f8 	bl	80082b0 <__sinit>
 80090c0:	ab05      	add	r3, sp, #20
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	6861      	ldr	r1, [r4, #4]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	4620      	mov	r0, r4
 80090ca:	f002 f8b9 	bl	800b240 <_vfiscanf_r>
 80090ce:	b002      	add	sp, #8
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	b004      	add	sp, #16
 80090d6:	4770      	bx	lr
 80090d8:	20000010 	.word	0x20000010

080090dc <setvbuf>:
 80090dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	461d      	mov	r5, r3
 80090e2:	4b5d      	ldr	r3, [pc, #372]	; (8009258 <setvbuf+0x17c>)
 80090e4:	681f      	ldr	r7, [r3, #0]
 80090e6:	4604      	mov	r4, r0
 80090e8:	460e      	mov	r6, r1
 80090ea:	4690      	mov	r8, r2
 80090ec:	b127      	cbz	r7, 80090f8 <setvbuf+0x1c>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	b913      	cbnz	r3, 80090f8 <setvbuf+0x1c>
 80090f2:	4638      	mov	r0, r7
 80090f4:	f7ff f8dc 	bl	80082b0 <__sinit>
 80090f8:	4b58      	ldr	r3, [pc, #352]	; (800925c <setvbuf+0x180>)
 80090fa:	429c      	cmp	r4, r3
 80090fc:	d167      	bne.n	80091ce <setvbuf+0xf2>
 80090fe:	687c      	ldr	r4, [r7, #4]
 8009100:	f1b8 0f02 	cmp.w	r8, #2
 8009104:	d006      	beq.n	8009114 <setvbuf+0x38>
 8009106:	f1b8 0f01 	cmp.w	r8, #1
 800910a:	f200 809f 	bhi.w	800924c <setvbuf+0x170>
 800910e:	2d00      	cmp	r5, #0
 8009110:	f2c0 809c 	blt.w	800924c <setvbuf+0x170>
 8009114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009116:	07db      	lsls	r3, r3, #31
 8009118:	d405      	bmi.n	8009126 <setvbuf+0x4a>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	0598      	lsls	r0, r3, #22
 800911e:	d402      	bmi.n	8009126 <setvbuf+0x4a>
 8009120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009122:	f7ff f9a4 	bl	800846e <__retarget_lock_acquire_recursive>
 8009126:	4621      	mov	r1, r4
 8009128:	4638      	mov	r0, r7
 800912a:	f001 f8c5 	bl	800a2b8 <_fflush_r>
 800912e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009130:	b141      	cbz	r1, 8009144 <setvbuf+0x68>
 8009132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009136:	4299      	cmp	r1, r3
 8009138:	d002      	beq.n	8009140 <setvbuf+0x64>
 800913a:	4638      	mov	r0, r7
 800913c:	f001 fd34 	bl	800aba8 <_free_r>
 8009140:	2300      	movs	r3, #0
 8009142:	6363      	str	r3, [r4, #52]	; 0x34
 8009144:	2300      	movs	r3, #0
 8009146:	61a3      	str	r3, [r4, #24]
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	0619      	lsls	r1, r3, #24
 800914e:	d503      	bpl.n	8009158 <setvbuf+0x7c>
 8009150:	6921      	ldr	r1, [r4, #16]
 8009152:	4638      	mov	r0, r7
 8009154:	f001 fd28 	bl	800aba8 <_free_r>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	f1b8 0f02 	cmp.w	r8, #2
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	d06c      	beq.n	8009244 <setvbuf+0x168>
 800916a:	ab01      	add	r3, sp, #4
 800916c:	466a      	mov	r2, sp
 800916e:	4621      	mov	r1, r4
 8009170:	4638      	mov	r0, r7
 8009172:	f001 f905 	bl	800a380 <__swhatbuf_r>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	4318      	orrs	r0, r3
 800917a:	81a0      	strh	r0, [r4, #12]
 800917c:	2d00      	cmp	r5, #0
 800917e:	d130      	bne.n	80091e2 <setvbuf+0x106>
 8009180:	9d00      	ldr	r5, [sp, #0]
 8009182:	4628      	mov	r0, r5
 8009184:	f001 f962 	bl	800a44c <malloc>
 8009188:	4606      	mov	r6, r0
 800918a:	2800      	cmp	r0, #0
 800918c:	d155      	bne.n	800923a <setvbuf+0x15e>
 800918e:	f8dd 9000 	ldr.w	r9, [sp]
 8009192:	45a9      	cmp	r9, r5
 8009194:	d14a      	bne.n	800922c <setvbuf+0x150>
 8009196:	f04f 35ff 	mov.w	r5, #4294967295
 800919a:	2200      	movs	r2, #0
 800919c:	60a2      	str	r2, [r4, #8]
 800919e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	6122      	str	r2, [r4, #16]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ac:	6162      	str	r2, [r4, #20]
 80091ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091b0:	f043 0302 	orr.w	r3, r3, #2
 80091b4:	07d2      	lsls	r2, r2, #31
 80091b6:	81a3      	strh	r3, [r4, #12]
 80091b8:	d405      	bmi.n	80091c6 <setvbuf+0xea>
 80091ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80091be:	d102      	bne.n	80091c6 <setvbuf+0xea>
 80091c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091c2:	f7ff f955 	bl	8008470 <__retarget_lock_release_recursive>
 80091c6:	4628      	mov	r0, r5
 80091c8:	b003      	add	sp, #12
 80091ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091ce:	4b24      	ldr	r3, [pc, #144]	; (8009260 <setvbuf+0x184>)
 80091d0:	429c      	cmp	r4, r3
 80091d2:	d101      	bne.n	80091d8 <setvbuf+0xfc>
 80091d4:	68bc      	ldr	r4, [r7, #8]
 80091d6:	e793      	b.n	8009100 <setvbuf+0x24>
 80091d8:	4b22      	ldr	r3, [pc, #136]	; (8009264 <setvbuf+0x188>)
 80091da:	429c      	cmp	r4, r3
 80091dc:	bf08      	it	eq
 80091de:	68fc      	ldreq	r4, [r7, #12]
 80091e0:	e78e      	b.n	8009100 <setvbuf+0x24>
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d0cd      	beq.n	8009182 <setvbuf+0xa6>
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	b913      	cbnz	r3, 80091f0 <setvbuf+0x114>
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff f860 	bl	80082b0 <__sinit>
 80091f0:	f1b8 0f01 	cmp.w	r8, #1
 80091f4:	bf08      	it	eq
 80091f6:	89a3      	ldrheq	r3, [r4, #12]
 80091f8:	6026      	str	r6, [r4, #0]
 80091fa:	bf04      	itt	eq
 80091fc:	f043 0301 	orreq.w	r3, r3, #1
 8009200:	81a3      	strheq	r3, [r4, #12]
 8009202:	89a2      	ldrh	r2, [r4, #12]
 8009204:	f012 0308 	ands.w	r3, r2, #8
 8009208:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800920c:	d01c      	beq.n	8009248 <setvbuf+0x16c>
 800920e:	07d3      	lsls	r3, r2, #31
 8009210:	bf41      	itttt	mi
 8009212:	2300      	movmi	r3, #0
 8009214:	426d      	negmi	r5, r5
 8009216:	60a3      	strmi	r3, [r4, #8]
 8009218:	61a5      	strmi	r5, [r4, #24]
 800921a:	bf58      	it	pl
 800921c:	60a5      	strpl	r5, [r4, #8]
 800921e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009220:	f015 0501 	ands.w	r5, r5, #1
 8009224:	d115      	bne.n	8009252 <setvbuf+0x176>
 8009226:	f412 7f00 	tst.w	r2, #512	; 0x200
 800922a:	e7c8      	b.n	80091be <setvbuf+0xe2>
 800922c:	4648      	mov	r0, r9
 800922e:	f001 f90d 	bl	800a44c <malloc>
 8009232:	4606      	mov	r6, r0
 8009234:	2800      	cmp	r0, #0
 8009236:	d0ae      	beq.n	8009196 <setvbuf+0xba>
 8009238:	464d      	mov	r5, r9
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	e7d0      	b.n	80091e6 <setvbuf+0x10a>
 8009244:	2500      	movs	r5, #0
 8009246:	e7a8      	b.n	800919a <setvbuf+0xbe>
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	e7e8      	b.n	800921e <setvbuf+0x142>
 800924c:	f04f 35ff 	mov.w	r5, #4294967295
 8009250:	e7b9      	b.n	80091c6 <setvbuf+0xea>
 8009252:	2500      	movs	r5, #0
 8009254:	e7b7      	b.n	80091c6 <setvbuf+0xea>
 8009256:	bf00      	nop
 8009258:	20000010 	.word	0x20000010
 800925c:	0800c2a0 	.word	0x0800c2a0
 8009260:	0800c2c0 	.word	0x0800c2c0
 8009264:	0800c280 	.word	0x0800c280

08009268 <__sread>:
 8009268:	b510      	push	{r4, lr}
 800926a:	460c      	mov	r4, r1
 800926c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009270:	f002 f960 	bl	800b534 <_read_r>
 8009274:	2800      	cmp	r0, #0
 8009276:	bfab      	itete	ge
 8009278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800927a:	89a3      	ldrhlt	r3, [r4, #12]
 800927c:	181b      	addge	r3, r3, r0
 800927e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009282:	bfac      	ite	ge
 8009284:	6563      	strge	r3, [r4, #84]	; 0x54
 8009286:	81a3      	strhlt	r3, [r4, #12]
 8009288:	bd10      	pop	{r4, pc}

0800928a <__swrite>:
 800928a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928e:	461f      	mov	r7, r3
 8009290:	898b      	ldrh	r3, [r1, #12]
 8009292:	05db      	lsls	r3, r3, #23
 8009294:	4605      	mov	r5, r0
 8009296:	460c      	mov	r4, r1
 8009298:	4616      	mov	r6, r2
 800929a:	d505      	bpl.n	80092a8 <__swrite+0x1e>
 800929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a0:	2302      	movs	r3, #2
 80092a2:	2200      	movs	r2, #0
 80092a4:	f001 f85a 	bl	800a35c <_lseek_r>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	4628      	mov	r0, r5
 80092ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	f000 b869 	b.w	8009394 <_write_r>

080092c2 <__sseek>:
 80092c2:	b510      	push	{r4, lr}
 80092c4:	460c      	mov	r4, r1
 80092c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ca:	f001 f847 	bl	800a35c <_lseek_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	bf15      	itete	ne
 80092d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092de:	81a3      	strheq	r3, [r4, #12]
 80092e0:	bf18      	it	ne
 80092e2:	81a3      	strhne	r3, [r4, #12]
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <__sclose>:
 80092e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ea:	f000 b8d3 	b.w	8009494 <_close_r>
	...

080092f0 <__swbuf_r>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	460e      	mov	r6, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	4605      	mov	r5, r0
 80092f8:	b118      	cbz	r0, 8009302 <__swbuf_r+0x12>
 80092fa:	6983      	ldr	r3, [r0, #24]
 80092fc:	b90b      	cbnz	r3, 8009302 <__swbuf_r+0x12>
 80092fe:	f7fe ffd7 	bl	80082b0 <__sinit>
 8009302:	4b21      	ldr	r3, [pc, #132]	; (8009388 <__swbuf_r+0x98>)
 8009304:	429c      	cmp	r4, r3
 8009306:	d12b      	bne.n	8009360 <__swbuf_r+0x70>
 8009308:	686c      	ldr	r4, [r5, #4]
 800930a:	69a3      	ldr	r3, [r4, #24]
 800930c:	60a3      	str	r3, [r4, #8]
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	071a      	lsls	r2, r3, #28
 8009312:	d52f      	bpl.n	8009374 <__swbuf_r+0x84>
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	b36b      	cbz	r3, 8009374 <__swbuf_r+0x84>
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	6820      	ldr	r0, [r4, #0]
 800931c:	1ac0      	subs	r0, r0, r3
 800931e:	6963      	ldr	r3, [r4, #20]
 8009320:	b2f6      	uxtb	r6, r6
 8009322:	4283      	cmp	r3, r0
 8009324:	4637      	mov	r7, r6
 8009326:	dc04      	bgt.n	8009332 <__swbuf_r+0x42>
 8009328:	4621      	mov	r1, r4
 800932a:	4628      	mov	r0, r5
 800932c:	f000 ffc4 	bl	800a2b8 <_fflush_r>
 8009330:	bb30      	cbnz	r0, 8009380 <__swbuf_r+0x90>
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	3b01      	subs	r3, #1
 8009336:	60a3      	str	r3, [r4, #8]
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	6022      	str	r2, [r4, #0]
 800933e:	701e      	strb	r6, [r3, #0]
 8009340:	6963      	ldr	r3, [r4, #20]
 8009342:	3001      	adds	r0, #1
 8009344:	4283      	cmp	r3, r0
 8009346:	d004      	beq.n	8009352 <__swbuf_r+0x62>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	07db      	lsls	r3, r3, #31
 800934c:	d506      	bpl.n	800935c <__swbuf_r+0x6c>
 800934e:	2e0a      	cmp	r6, #10
 8009350:	d104      	bne.n	800935c <__swbuf_r+0x6c>
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f000 ffaf 	bl	800a2b8 <_fflush_r>
 800935a:	b988      	cbnz	r0, 8009380 <__swbuf_r+0x90>
 800935c:	4638      	mov	r0, r7
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <__swbuf_r+0x9c>)
 8009362:	429c      	cmp	r4, r3
 8009364:	d101      	bne.n	800936a <__swbuf_r+0x7a>
 8009366:	68ac      	ldr	r4, [r5, #8]
 8009368:	e7cf      	b.n	800930a <__swbuf_r+0x1a>
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <__swbuf_r+0xa0>)
 800936c:	429c      	cmp	r4, r3
 800936e:	bf08      	it	eq
 8009370:	68ec      	ldreq	r4, [r5, #12]
 8009372:	e7ca      	b.n	800930a <__swbuf_r+0x1a>
 8009374:	4621      	mov	r1, r4
 8009376:	4628      	mov	r0, r5
 8009378:	f000 f81e 	bl	80093b8 <__swsetup_r>
 800937c:	2800      	cmp	r0, #0
 800937e:	d0cb      	beq.n	8009318 <__swbuf_r+0x28>
 8009380:	f04f 37ff 	mov.w	r7, #4294967295
 8009384:	e7ea      	b.n	800935c <__swbuf_r+0x6c>
 8009386:	bf00      	nop
 8009388:	0800c2a0 	.word	0x0800c2a0
 800938c:	0800c2c0 	.word	0x0800c2c0
 8009390:	0800c280 	.word	0x0800c280

08009394 <_write_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	; (80093b4 <_write_r+0x20>)
 8009398:	4604      	mov	r4, r0
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f7f8 ff03 	bl	80021ae <_write>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_write_r+0x1e>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_write_r+0x1e>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	200044d0 	.word	0x200044d0

080093b8 <__swsetup_r>:
 80093b8:	4b32      	ldr	r3, [pc, #200]	; (8009484 <__swsetup_r+0xcc>)
 80093ba:	b570      	push	{r4, r5, r6, lr}
 80093bc:	681d      	ldr	r5, [r3, #0]
 80093be:	4606      	mov	r6, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	b125      	cbz	r5, 80093ce <__swsetup_r+0x16>
 80093c4:	69ab      	ldr	r3, [r5, #24]
 80093c6:	b913      	cbnz	r3, 80093ce <__swsetup_r+0x16>
 80093c8:	4628      	mov	r0, r5
 80093ca:	f7fe ff71 	bl	80082b0 <__sinit>
 80093ce:	4b2e      	ldr	r3, [pc, #184]	; (8009488 <__swsetup_r+0xd0>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d10f      	bne.n	80093f4 <__swsetup_r+0x3c>
 80093d4:	686c      	ldr	r4, [r5, #4]
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093dc:	0719      	lsls	r1, r3, #28
 80093de:	d42c      	bmi.n	800943a <__swsetup_r+0x82>
 80093e0:	06dd      	lsls	r5, r3, #27
 80093e2:	d411      	bmi.n	8009408 <__swsetup_r+0x50>
 80093e4:	2309      	movs	r3, #9
 80093e6:	6033      	str	r3, [r6, #0]
 80093e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295
 80093f2:	e03e      	b.n	8009472 <__swsetup_r+0xba>
 80093f4:	4b25      	ldr	r3, [pc, #148]	; (800948c <__swsetup_r+0xd4>)
 80093f6:	429c      	cmp	r4, r3
 80093f8:	d101      	bne.n	80093fe <__swsetup_r+0x46>
 80093fa:	68ac      	ldr	r4, [r5, #8]
 80093fc:	e7eb      	b.n	80093d6 <__swsetup_r+0x1e>
 80093fe:	4b24      	ldr	r3, [pc, #144]	; (8009490 <__swsetup_r+0xd8>)
 8009400:	429c      	cmp	r4, r3
 8009402:	bf08      	it	eq
 8009404:	68ec      	ldreq	r4, [r5, #12]
 8009406:	e7e6      	b.n	80093d6 <__swsetup_r+0x1e>
 8009408:	0758      	lsls	r0, r3, #29
 800940a:	d512      	bpl.n	8009432 <__swsetup_r+0x7a>
 800940c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940e:	b141      	cbz	r1, 8009422 <__swsetup_r+0x6a>
 8009410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009414:	4299      	cmp	r1, r3
 8009416:	d002      	beq.n	800941e <__swsetup_r+0x66>
 8009418:	4630      	mov	r0, r6
 800941a:	f001 fbc5 	bl	800aba8 <_free_r>
 800941e:	2300      	movs	r3, #0
 8009420:	6363      	str	r3, [r4, #52]	; 0x34
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	2300      	movs	r3, #0
 800942c:	6063      	str	r3, [r4, #4]
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f043 0308 	orr.w	r3, r3, #8
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	b94b      	cbnz	r3, 8009452 <__swsetup_r+0x9a>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009448:	d003      	beq.n	8009452 <__swsetup_r+0x9a>
 800944a:	4621      	mov	r1, r4
 800944c:	4630      	mov	r0, r6
 800944e:	f000 ffbd 	bl	800a3cc <__smakebuf_r>
 8009452:	89a0      	ldrh	r0, [r4, #12]
 8009454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009458:	f010 0301 	ands.w	r3, r0, #1
 800945c:	d00a      	beq.n	8009474 <__swsetup_r+0xbc>
 800945e:	2300      	movs	r3, #0
 8009460:	60a3      	str	r3, [r4, #8]
 8009462:	6963      	ldr	r3, [r4, #20]
 8009464:	425b      	negs	r3, r3
 8009466:	61a3      	str	r3, [r4, #24]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b943      	cbnz	r3, 800947e <__swsetup_r+0xc6>
 800946c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009470:	d1ba      	bne.n	80093e8 <__swsetup_r+0x30>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	0781      	lsls	r1, r0, #30
 8009476:	bf58      	it	pl
 8009478:	6963      	ldrpl	r3, [r4, #20]
 800947a:	60a3      	str	r3, [r4, #8]
 800947c:	e7f4      	b.n	8009468 <__swsetup_r+0xb0>
 800947e:	2000      	movs	r0, #0
 8009480:	e7f7      	b.n	8009472 <__swsetup_r+0xba>
 8009482:	bf00      	nop
 8009484:	20000010 	.word	0x20000010
 8009488:	0800c2a0 	.word	0x0800c2a0
 800948c:	0800c2c0 	.word	0x0800c2c0
 8009490:	0800c280 	.word	0x0800c280

08009494 <_close_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_close_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f8 fea1 	bl	80021e6 <_close>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_close_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_close_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	200044d0 	.word	0x200044d0

080094b4 <quorem>:
 80094b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	6903      	ldr	r3, [r0, #16]
 80094ba:	690c      	ldr	r4, [r1, #16]
 80094bc:	42a3      	cmp	r3, r4
 80094be:	4607      	mov	r7, r0
 80094c0:	f2c0 8081 	blt.w	80095c6 <quorem+0x112>
 80094c4:	3c01      	subs	r4, #1
 80094c6:	f101 0814 	add.w	r8, r1, #20
 80094ca:	f100 0514 	add.w	r5, r0, #20
 80094ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094dc:	3301      	adds	r3, #1
 80094de:	429a      	cmp	r2, r3
 80094e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80094ec:	d331      	bcc.n	8009552 <quorem+0x9e>
 80094ee:	f04f 0e00 	mov.w	lr, #0
 80094f2:	4640      	mov	r0, r8
 80094f4:	46ac      	mov	ip, r5
 80094f6:	46f2      	mov	sl, lr
 80094f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80094fc:	b293      	uxth	r3, r2
 80094fe:	fb06 e303 	mla	r3, r6, r3, lr
 8009502:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009506:	b29b      	uxth	r3, r3
 8009508:	ebaa 0303 	sub.w	r3, sl, r3
 800950c:	f8dc a000 	ldr.w	sl, [ip]
 8009510:	0c12      	lsrs	r2, r2, #16
 8009512:	fa13 f38a 	uxtah	r3, r3, sl
 8009516:	fb06 e202 	mla	r2, r6, r2, lr
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009522:	b292      	uxth	r2, r2
 8009524:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800952c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009530:	4581      	cmp	r9, r0
 8009532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009536:	f84c 3b04 	str.w	r3, [ip], #4
 800953a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800953e:	d2db      	bcs.n	80094f8 <quorem+0x44>
 8009540:	f855 300b 	ldr.w	r3, [r5, fp]
 8009544:	b92b      	cbnz	r3, 8009552 <quorem+0x9e>
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	3b04      	subs	r3, #4
 800954a:	429d      	cmp	r5, r3
 800954c:	461a      	mov	r2, r3
 800954e:	d32e      	bcc.n	80095ae <quorem+0xfa>
 8009550:	613c      	str	r4, [r7, #16]
 8009552:	4638      	mov	r0, r7
 8009554:	f001 fa10 	bl	800a978 <__mcmp>
 8009558:	2800      	cmp	r0, #0
 800955a:	db24      	blt.n	80095a6 <quorem+0xf2>
 800955c:	3601      	adds	r6, #1
 800955e:	4628      	mov	r0, r5
 8009560:	f04f 0c00 	mov.w	ip, #0
 8009564:	f858 2b04 	ldr.w	r2, [r8], #4
 8009568:	f8d0 e000 	ldr.w	lr, [r0]
 800956c:	b293      	uxth	r3, r2
 800956e:	ebac 0303 	sub.w	r3, ip, r3
 8009572:	0c12      	lsrs	r2, r2, #16
 8009574:	fa13 f38e 	uxtah	r3, r3, lr
 8009578:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800957c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009580:	b29b      	uxth	r3, r3
 8009582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009586:	45c1      	cmp	r9, r8
 8009588:	f840 3b04 	str.w	r3, [r0], #4
 800958c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009590:	d2e8      	bcs.n	8009564 <quorem+0xb0>
 8009592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800959a:	b922      	cbnz	r2, 80095a6 <quorem+0xf2>
 800959c:	3b04      	subs	r3, #4
 800959e:	429d      	cmp	r5, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	d30a      	bcc.n	80095ba <quorem+0x106>
 80095a4:	613c      	str	r4, [r7, #16]
 80095a6:	4630      	mov	r0, r6
 80095a8:	b003      	add	sp, #12
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	6812      	ldr	r2, [r2, #0]
 80095b0:	3b04      	subs	r3, #4
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	d1cc      	bne.n	8009550 <quorem+0x9c>
 80095b6:	3c01      	subs	r4, #1
 80095b8:	e7c7      	b.n	800954a <quorem+0x96>
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	3b04      	subs	r3, #4
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d1f0      	bne.n	80095a4 <quorem+0xf0>
 80095c2:	3c01      	subs	r4, #1
 80095c4:	e7eb      	b.n	800959e <quorem+0xea>
 80095c6:	2000      	movs	r0, #0
 80095c8:	e7ee      	b.n	80095a8 <quorem+0xf4>
 80095ca:	0000      	movs	r0, r0
 80095cc:	0000      	movs	r0, r0
	...

080095d0 <_dtoa_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b04 	vpush	{d8-d9}
 80095d8:	ec57 6b10 	vmov	r6, r7, d0
 80095dc:	b093      	sub	sp, #76	; 0x4c
 80095de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095e4:	9106      	str	r1, [sp, #24]
 80095e6:	ee10 aa10 	vmov	sl, s0
 80095ea:	4604      	mov	r4, r0
 80095ec:	9209      	str	r2, [sp, #36]	; 0x24
 80095ee:	930c      	str	r3, [sp, #48]	; 0x30
 80095f0:	46bb      	mov	fp, r7
 80095f2:	b975      	cbnz	r5, 8009612 <_dtoa_r+0x42>
 80095f4:	2010      	movs	r0, #16
 80095f6:	f000 ff29 	bl	800a44c <malloc>
 80095fa:	4602      	mov	r2, r0
 80095fc:	6260      	str	r0, [r4, #36]	; 0x24
 80095fe:	b920      	cbnz	r0, 800960a <_dtoa_r+0x3a>
 8009600:	4ba7      	ldr	r3, [pc, #668]	; (80098a0 <_dtoa_r+0x2d0>)
 8009602:	21ea      	movs	r1, #234	; 0xea
 8009604:	48a7      	ldr	r0, [pc, #668]	; (80098a4 <_dtoa_r+0x2d4>)
 8009606:	f002 fa3d 	bl	800ba84 <__assert_func>
 800960a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800960e:	6005      	str	r5, [r0, #0]
 8009610:	60c5      	str	r5, [r0, #12]
 8009612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009614:	6819      	ldr	r1, [r3, #0]
 8009616:	b151      	cbz	r1, 800962e <_dtoa_r+0x5e>
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	604a      	str	r2, [r1, #4]
 800961c:	2301      	movs	r3, #1
 800961e:	4093      	lsls	r3, r2
 8009620:	608b      	str	r3, [r1, #8]
 8009622:	4620      	mov	r0, r4
 8009624:	f000 ff66 	bl	800a4f4 <_Bfree>
 8009628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	1e3b      	subs	r3, r7, #0
 8009630:	bfaa      	itet	ge
 8009632:	2300      	movge	r3, #0
 8009634:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009638:	f8c8 3000 	strge.w	r3, [r8]
 800963c:	4b9a      	ldr	r3, [pc, #616]	; (80098a8 <_dtoa_r+0x2d8>)
 800963e:	bfbc      	itt	lt
 8009640:	2201      	movlt	r2, #1
 8009642:	f8c8 2000 	strlt.w	r2, [r8]
 8009646:	ea33 030b 	bics.w	r3, r3, fp
 800964a:	d11b      	bne.n	8009684 <_dtoa_r+0xb4>
 800964c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800964e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009658:	4333      	orrs	r3, r6
 800965a:	f000 8592 	beq.w	800a182 <_dtoa_r+0xbb2>
 800965e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009660:	b963      	cbnz	r3, 800967c <_dtoa_r+0xac>
 8009662:	4b92      	ldr	r3, [pc, #584]	; (80098ac <_dtoa_r+0x2dc>)
 8009664:	e022      	b.n	80096ac <_dtoa_r+0xdc>
 8009666:	4b92      	ldr	r3, [pc, #584]	; (80098b0 <_dtoa_r+0x2e0>)
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	3308      	adds	r3, #8
 800966c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	b013      	add	sp, #76	; 0x4c
 8009674:	ecbd 8b04 	vpop	{d8-d9}
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967c:	4b8b      	ldr	r3, [pc, #556]	; (80098ac <_dtoa_r+0x2dc>)
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	3303      	adds	r3, #3
 8009682:	e7f3      	b.n	800966c <_dtoa_r+0x9c>
 8009684:	2200      	movs	r2, #0
 8009686:	2300      	movs	r3, #0
 8009688:	4650      	mov	r0, sl
 800968a:	4659      	mov	r1, fp
 800968c:	f7f7 fa3c 	bl	8000b08 <__aeabi_dcmpeq>
 8009690:	ec4b ab19 	vmov	d9, sl, fp
 8009694:	4680      	mov	r8, r0
 8009696:	b158      	cbz	r0, 80096b0 <_dtoa_r+0xe0>
 8009698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800969a:	2301      	movs	r3, #1
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 856b 	beq.w	800a17c <_dtoa_r+0xbac>
 80096a6:	4883      	ldr	r0, [pc, #524]	; (80098b4 <_dtoa_r+0x2e4>)
 80096a8:	6018      	str	r0, [r3, #0]
 80096aa:	1e43      	subs	r3, r0, #1
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	e7df      	b.n	8009670 <_dtoa_r+0xa0>
 80096b0:	ec4b ab10 	vmov	d0, sl, fp
 80096b4:	aa10      	add	r2, sp, #64	; 0x40
 80096b6:	a911      	add	r1, sp, #68	; 0x44
 80096b8:	4620      	mov	r0, r4
 80096ba:	f001 fa03 	bl	800aac4 <__d2b>
 80096be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80096c2:	ee08 0a10 	vmov	s16, r0
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	f000 8084 	beq.w	80097d4 <_dtoa_r+0x204>
 80096cc:	ee19 3a90 	vmov	r3, s19
 80096d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096d8:	4656      	mov	r6, sl
 80096da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096e6:	4b74      	ldr	r3, [pc, #464]	; (80098b8 <_dtoa_r+0x2e8>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	4630      	mov	r0, r6
 80096ec:	4639      	mov	r1, r7
 80096ee:	f7f6 fdeb 	bl	80002c8 <__aeabi_dsub>
 80096f2:	a365      	add	r3, pc, #404	; (adr r3, 8009888 <_dtoa_r+0x2b8>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 ff9e 	bl	8000638 <__aeabi_dmul>
 80096fc:	a364      	add	r3, pc, #400	; (adr r3, 8009890 <_dtoa_r+0x2c0>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f6 fde3 	bl	80002cc <__adddf3>
 8009706:	4606      	mov	r6, r0
 8009708:	4628      	mov	r0, r5
 800970a:	460f      	mov	r7, r1
 800970c:	f7f6 ff2a 	bl	8000564 <__aeabi_i2d>
 8009710:	a361      	add	r3, pc, #388	; (adr r3, 8009898 <_dtoa_r+0x2c8>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	f7f6 ff8f 	bl	8000638 <__aeabi_dmul>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	f7f6 fdd3 	bl	80002cc <__adddf3>
 8009726:	4606      	mov	r6, r0
 8009728:	460f      	mov	r7, r1
 800972a:	f7f7 fa35 	bl	8000b98 <__aeabi_d2iz>
 800972e:	2200      	movs	r2, #0
 8009730:	9000      	str	r0, [sp, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	f7f7 f9f0 	bl	8000b1c <__aeabi_dcmplt>
 800973c:	b150      	cbz	r0, 8009754 <_dtoa_r+0x184>
 800973e:	9800      	ldr	r0, [sp, #0]
 8009740:	f7f6 ff10 	bl	8000564 <__aeabi_i2d>
 8009744:	4632      	mov	r2, r6
 8009746:	463b      	mov	r3, r7
 8009748:	f7f7 f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800974c:	b910      	cbnz	r0, 8009754 <_dtoa_r+0x184>
 800974e:	9b00      	ldr	r3, [sp, #0]
 8009750:	3b01      	subs	r3, #1
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	9b00      	ldr	r3, [sp, #0]
 8009756:	2b16      	cmp	r3, #22
 8009758:	d85a      	bhi.n	8009810 <_dtoa_r+0x240>
 800975a:	9a00      	ldr	r2, [sp, #0]
 800975c:	4b57      	ldr	r3, [pc, #348]	; (80098bc <_dtoa_r+0x2ec>)
 800975e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	ec51 0b19 	vmov	r0, r1, d9
 800976a:	f7f7 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800976e:	2800      	cmp	r0, #0
 8009770:	d050      	beq.n	8009814 <_dtoa_r+0x244>
 8009772:	9b00      	ldr	r3, [sp, #0]
 8009774:	3b01      	subs	r3, #1
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	930b      	str	r3, [sp, #44]	; 0x2c
 800977c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800977e:	1b5d      	subs	r5, r3, r5
 8009780:	1e6b      	subs	r3, r5, #1
 8009782:	9305      	str	r3, [sp, #20]
 8009784:	bf45      	ittet	mi
 8009786:	f1c5 0301 	rsbmi	r3, r5, #1
 800978a:	9304      	strmi	r3, [sp, #16]
 800978c:	2300      	movpl	r3, #0
 800978e:	2300      	movmi	r3, #0
 8009790:	bf4c      	ite	mi
 8009792:	9305      	strmi	r3, [sp, #20]
 8009794:	9304      	strpl	r3, [sp, #16]
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	db3d      	blt.n	8009818 <_dtoa_r+0x248>
 800979c:	9b05      	ldr	r3, [sp, #20]
 800979e:	9a00      	ldr	r2, [sp, #0]
 80097a0:	920a      	str	r2, [sp, #40]	; 0x28
 80097a2:	4413      	add	r3, r2
 80097a4:	9305      	str	r3, [sp, #20]
 80097a6:	2300      	movs	r3, #0
 80097a8:	9307      	str	r3, [sp, #28]
 80097aa:	9b06      	ldr	r3, [sp, #24]
 80097ac:	2b09      	cmp	r3, #9
 80097ae:	f200 8089 	bhi.w	80098c4 <_dtoa_r+0x2f4>
 80097b2:	2b05      	cmp	r3, #5
 80097b4:	bfc4      	itt	gt
 80097b6:	3b04      	subgt	r3, #4
 80097b8:	9306      	strgt	r3, [sp, #24]
 80097ba:	9b06      	ldr	r3, [sp, #24]
 80097bc:	f1a3 0302 	sub.w	r3, r3, #2
 80097c0:	bfcc      	ite	gt
 80097c2:	2500      	movgt	r5, #0
 80097c4:	2501      	movle	r5, #1
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	f200 8087 	bhi.w	80098da <_dtoa_r+0x30a>
 80097cc:	e8df f003 	tbb	[pc, r3]
 80097d0:	59383a2d 	.word	0x59383a2d
 80097d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097d8:	441d      	add	r5, r3
 80097da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097de:	2b20      	cmp	r3, #32
 80097e0:	bfc1      	itttt	gt
 80097e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80097ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097f2:	bfda      	itte	le
 80097f4:	f1c3 0320 	rsble	r3, r3, #32
 80097f8:	fa06 f003 	lslle.w	r0, r6, r3
 80097fc:	4318      	orrgt	r0, r3
 80097fe:	f7f6 fea1 	bl	8000544 <__aeabi_ui2d>
 8009802:	2301      	movs	r3, #1
 8009804:	4606      	mov	r6, r0
 8009806:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800980a:	3d01      	subs	r5, #1
 800980c:	930e      	str	r3, [sp, #56]	; 0x38
 800980e:	e76a      	b.n	80096e6 <_dtoa_r+0x116>
 8009810:	2301      	movs	r3, #1
 8009812:	e7b2      	b.n	800977a <_dtoa_r+0x1aa>
 8009814:	900b      	str	r0, [sp, #44]	; 0x2c
 8009816:	e7b1      	b.n	800977c <_dtoa_r+0x1ac>
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	9a00      	ldr	r2, [sp, #0]
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	9304      	str	r3, [sp, #16]
 8009820:	4253      	negs	r3, r2
 8009822:	9307      	str	r3, [sp, #28]
 8009824:	2300      	movs	r3, #0
 8009826:	930a      	str	r3, [sp, #40]	; 0x28
 8009828:	e7bf      	b.n	80097aa <_dtoa_r+0x1da>
 800982a:	2300      	movs	r3, #0
 800982c:	9308      	str	r3, [sp, #32]
 800982e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc55      	bgt.n	80098e0 <_dtoa_r+0x310>
 8009834:	2301      	movs	r3, #1
 8009836:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800983a:	461a      	mov	r2, r3
 800983c:	9209      	str	r2, [sp, #36]	; 0x24
 800983e:	e00c      	b.n	800985a <_dtoa_r+0x28a>
 8009840:	2301      	movs	r3, #1
 8009842:	e7f3      	b.n	800982c <_dtoa_r+0x25c>
 8009844:	2300      	movs	r3, #0
 8009846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009848:	9308      	str	r3, [sp, #32]
 800984a:	9b00      	ldr	r3, [sp, #0]
 800984c:	4413      	add	r3, r2
 800984e:	9302      	str	r3, [sp, #8]
 8009850:	3301      	adds	r3, #1
 8009852:	2b01      	cmp	r3, #1
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	bfb8      	it	lt
 8009858:	2301      	movlt	r3, #1
 800985a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800985c:	2200      	movs	r2, #0
 800985e:	6042      	str	r2, [r0, #4]
 8009860:	2204      	movs	r2, #4
 8009862:	f102 0614 	add.w	r6, r2, #20
 8009866:	429e      	cmp	r6, r3
 8009868:	6841      	ldr	r1, [r0, #4]
 800986a:	d93d      	bls.n	80098e8 <_dtoa_r+0x318>
 800986c:	4620      	mov	r0, r4
 800986e:	f000 fe01 	bl	800a474 <_Balloc>
 8009872:	9001      	str	r0, [sp, #4]
 8009874:	2800      	cmp	r0, #0
 8009876:	d13b      	bne.n	80098f0 <_dtoa_r+0x320>
 8009878:	4b11      	ldr	r3, [pc, #68]	; (80098c0 <_dtoa_r+0x2f0>)
 800987a:	4602      	mov	r2, r0
 800987c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009880:	e6c0      	b.n	8009604 <_dtoa_r+0x34>
 8009882:	2301      	movs	r3, #1
 8009884:	e7df      	b.n	8009846 <_dtoa_r+0x276>
 8009886:	bf00      	nop
 8009888:	636f4361 	.word	0x636f4361
 800988c:	3fd287a7 	.word	0x3fd287a7
 8009890:	8b60c8b3 	.word	0x8b60c8b3
 8009894:	3fc68a28 	.word	0x3fc68a28
 8009898:	509f79fb 	.word	0x509f79fb
 800989c:	3fd34413 	.word	0x3fd34413
 80098a0:	0800c323 	.word	0x0800c323
 80098a4:	0800c33a 	.word	0x0800c33a
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	0800c31f 	.word	0x0800c31f
 80098b0:	0800c316 	.word	0x0800c316
 80098b4:	0800c51a 	.word	0x0800c51a
 80098b8:	3ff80000 	.word	0x3ff80000
 80098bc:	0800c430 	.word	0x0800c430
 80098c0:	0800c395 	.word	0x0800c395
 80098c4:	2501      	movs	r5, #1
 80098c6:	2300      	movs	r3, #0
 80098c8:	9306      	str	r3, [sp, #24]
 80098ca:	9508      	str	r5, [sp, #32]
 80098cc:	f04f 33ff 	mov.w	r3, #4294967295
 80098d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098d4:	2200      	movs	r2, #0
 80098d6:	2312      	movs	r3, #18
 80098d8:	e7b0      	b.n	800983c <_dtoa_r+0x26c>
 80098da:	2301      	movs	r3, #1
 80098dc:	9308      	str	r3, [sp, #32]
 80098de:	e7f5      	b.n	80098cc <_dtoa_r+0x2fc>
 80098e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098e6:	e7b8      	b.n	800985a <_dtoa_r+0x28a>
 80098e8:	3101      	adds	r1, #1
 80098ea:	6041      	str	r1, [r0, #4]
 80098ec:	0052      	lsls	r2, r2, #1
 80098ee:	e7b8      	b.n	8009862 <_dtoa_r+0x292>
 80098f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f2:	9a01      	ldr	r2, [sp, #4]
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	2b0e      	cmp	r3, #14
 80098fa:	f200 809d 	bhi.w	8009a38 <_dtoa_r+0x468>
 80098fe:	2d00      	cmp	r5, #0
 8009900:	f000 809a 	beq.w	8009a38 <_dtoa_r+0x468>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	dd32      	ble.n	8009970 <_dtoa_r+0x3a0>
 800990a:	4ab7      	ldr	r2, [pc, #732]	; (8009be8 <_dtoa_r+0x618>)
 800990c:	f003 030f 	and.w	r3, r3, #15
 8009910:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009918:	9b00      	ldr	r3, [sp, #0]
 800991a:	05d8      	lsls	r0, r3, #23
 800991c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009920:	d516      	bpl.n	8009950 <_dtoa_r+0x380>
 8009922:	4bb2      	ldr	r3, [pc, #712]	; (8009bec <_dtoa_r+0x61c>)
 8009924:	ec51 0b19 	vmov	r0, r1, d9
 8009928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800992c:	f7f6 ffae 	bl	800088c <__aeabi_ddiv>
 8009930:	f007 070f 	and.w	r7, r7, #15
 8009934:	4682      	mov	sl, r0
 8009936:	468b      	mov	fp, r1
 8009938:	2503      	movs	r5, #3
 800993a:	4eac      	ldr	r6, [pc, #688]	; (8009bec <_dtoa_r+0x61c>)
 800993c:	b957      	cbnz	r7, 8009954 <_dtoa_r+0x384>
 800993e:	4642      	mov	r2, r8
 8009940:	464b      	mov	r3, r9
 8009942:	4650      	mov	r0, sl
 8009944:	4659      	mov	r1, fp
 8009946:	f7f6 ffa1 	bl	800088c <__aeabi_ddiv>
 800994a:	4682      	mov	sl, r0
 800994c:	468b      	mov	fp, r1
 800994e:	e028      	b.n	80099a2 <_dtoa_r+0x3d2>
 8009950:	2502      	movs	r5, #2
 8009952:	e7f2      	b.n	800993a <_dtoa_r+0x36a>
 8009954:	07f9      	lsls	r1, r7, #31
 8009956:	d508      	bpl.n	800996a <_dtoa_r+0x39a>
 8009958:	4640      	mov	r0, r8
 800995a:	4649      	mov	r1, r9
 800995c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009960:	f7f6 fe6a 	bl	8000638 <__aeabi_dmul>
 8009964:	3501      	adds	r5, #1
 8009966:	4680      	mov	r8, r0
 8009968:	4689      	mov	r9, r1
 800996a:	107f      	asrs	r7, r7, #1
 800996c:	3608      	adds	r6, #8
 800996e:	e7e5      	b.n	800993c <_dtoa_r+0x36c>
 8009970:	f000 809b 	beq.w	8009aaa <_dtoa_r+0x4da>
 8009974:	9b00      	ldr	r3, [sp, #0]
 8009976:	4f9d      	ldr	r7, [pc, #628]	; (8009bec <_dtoa_r+0x61c>)
 8009978:	425e      	negs	r6, r3
 800997a:	4b9b      	ldr	r3, [pc, #620]	; (8009be8 <_dtoa_r+0x618>)
 800997c:	f006 020f 	and.w	r2, r6, #15
 8009980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	ec51 0b19 	vmov	r0, r1, d9
 800998c:	f7f6 fe54 	bl	8000638 <__aeabi_dmul>
 8009990:	1136      	asrs	r6, r6, #4
 8009992:	4682      	mov	sl, r0
 8009994:	468b      	mov	fp, r1
 8009996:	2300      	movs	r3, #0
 8009998:	2502      	movs	r5, #2
 800999a:	2e00      	cmp	r6, #0
 800999c:	d17a      	bne.n	8009a94 <_dtoa_r+0x4c4>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1d3      	bne.n	800994a <_dtoa_r+0x37a>
 80099a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8082 	beq.w	8009aae <_dtoa_r+0x4de>
 80099aa:	4b91      	ldr	r3, [pc, #580]	; (8009bf0 <_dtoa_r+0x620>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	4650      	mov	r0, sl
 80099b0:	4659      	mov	r1, fp
 80099b2:	f7f7 f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d079      	beq.n	8009aae <_dtoa_r+0x4de>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d076      	beq.n	8009aae <_dtoa_r+0x4de>
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dd36      	ble.n	8009a34 <_dtoa_r+0x464>
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	4650      	mov	r0, sl
 80099ca:	4659      	mov	r1, fp
 80099cc:	1e5f      	subs	r7, r3, #1
 80099ce:	2200      	movs	r2, #0
 80099d0:	4b88      	ldr	r3, [pc, #544]	; (8009bf4 <_dtoa_r+0x624>)
 80099d2:	f7f6 fe31 	bl	8000638 <__aeabi_dmul>
 80099d6:	9e02      	ldr	r6, [sp, #8]
 80099d8:	4682      	mov	sl, r0
 80099da:	468b      	mov	fp, r1
 80099dc:	3501      	adds	r5, #1
 80099de:	4628      	mov	r0, r5
 80099e0:	f7f6 fdc0 	bl	8000564 <__aeabi_i2d>
 80099e4:	4652      	mov	r2, sl
 80099e6:	465b      	mov	r3, fp
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	4b82      	ldr	r3, [pc, #520]	; (8009bf8 <_dtoa_r+0x628>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	f7f6 fc6c 	bl	80002cc <__adddf3>
 80099f4:	46d0      	mov	r8, sl
 80099f6:	46d9      	mov	r9, fp
 80099f8:	4682      	mov	sl, r0
 80099fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099fe:	2e00      	cmp	r6, #0
 8009a00:	d158      	bne.n	8009ab4 <_dtoa_r+0x4e4>
 8009a02:	4b7e      	ldr	r3, [pc, #504]	; (8009bfc <_dtoa_r+0x62c>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	4640      	mov	r0, r8
 8009a08:	4649      	mov	r1, r9
 8009a0a:	f7f6 fc5d 	bl	80002c8 <__aeabi_dsub>
 8009a0e:	4652      	mov	r2, sl
 8009a10:	465b      	mov	r3, fp
 8009a12:	4680      	mov	r8, r0
 8009a14:	4689      	mov	r9, r1
 8009a16:	f7f7 f89f 	bl	8000b58 <__aeabi_dcmpgt>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	f040 8295 	bne.w	8009f4a <_dtoa_r+0x97a>
 8009a20:	4652      	mov	r2, sl
 8009a22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a26:	4640      	mov	r0, r8
 8009a28:	4649      	mov	r1, r9
 8009a2a:	f7f7 f877 	bl	8000b1c <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f040 8289 	bne.w	8009f46 <_dtoa_r+0x976>
 8009a34:	ec5b ab19 	vmov	sl, fp, d9
 8009a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f2c0 8148 	blt.w	8009cd0 <_dtoa_r+0x700>
 8009a40:	9a00      	ldr	r2, [sp, #0]
 8009a42:	2a0e      	cmp	r2, #14
 8009a44:	f300 8144 	bgt.w	8009cd0 <_dtoa_r+0x700>
 8009a48:	4b67      	ldr	r3, [pc, #412]	; (8009be8 <_dtoa_r+0x618>)
 8009a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f280 80d5 	bge.w	8009c04 <_dtoa_r+0x634>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f300 80d1 	bgt.w	8009c04 <_dtoa_r+0x634>
 8009a62:	f040 826f 	bne.w	8009f44 <_dtoa_r+0x974>
 8009a66:	4b65      	ldr	r3, [pc, #404]	; (8009bfc <_dtoa_r+0x62c>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	f7f6 fde3 	bl	8000638 <__aeabi_dmul>
 8009a72:	4652      	mov	r2, sl
 8009a74:	465b      	mov	r3, fp
 8009a76:	f7f7 f865 	bl	8000b44 <__aeabi_dcmpge>
 8009a7a:	9e03      	ldr	r6, [sp, #12]
 8009a7c:	4637      	mov	r7, r6
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f040 8245 	bne.w	8009f0e <_dtoa_r+0x93e>
 8009a84:	9d01      	ldr	r5, [sp, #4]
 8009a86:	2331      	movs	r3, #49	; 0x31
 8009a88:	f805 3b01 	strb.w	r3, [r5], #1
 8009a8c:	9b00      	ldr	r3, [sp, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	e240      	b.n	8009f16 <_dtoa_r+0x946>
 8009a94:	07f2      	lsls	r2, r6, #31
 8009a96:	d505      	bpl.n	8009aa4 <_dtoa_r+0x4d4>
 8009a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a9c:	f7f6 fdcc 	bl	8000638 <__aeabi_dmul>
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	1076      	asrs	r6, r6, #1
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	e777      	b.n	800999a <_dtoa_r+0x3ca>
 8009aaa:	2502      	movs	r5, #2
 8009aac:	e779      	b.n	80099a2 <_dtoa_r+0x3d2>
 8009aae:	9f00      	ldr	r7, [sp, #0]
 8009ab0:	9e03      	ldr	r6, [sp, #12]
 8009ab2:	e794      	b.n	80099de <_dtoa_r+0x40e>
 8009ab4:	9901      	ldr	r1, [sp, #4]
 8009ab6:	4b4c      	ldr	r3, [pc, #304]	; (8009be8 <_dtoa_r+0x618>)
 8009ab8:	4431      	add	r1, r6
 8009aba:	910d      	str	r1, [sp, #52]	; 0x34
 8009abc:	9908      	ldr	r1, [sp, #32]
 8009abe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ac2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	d043      	beq.n	8009b52 <_dtoa_r+0x582>
 8009aca:	494d      	ldr	r1, [pc, #308]	; (8009c00 <_dtoa_r+0x630>)
 8009acc:	2000      	movs	r0, #0
 8009ace:	f7f6 fedd 	bl	800088c <__aeabi_ddiv>
 8009ad2:	4652      	mov	r2, sl
 8009ad4:	465b      	mov	r3, fp
 8009ad6:	f7f6 fbf7 	bl	80002c8 <__aeabi_dsub>
 8009ada:	9d01      	ldr	r5, [sp, #4]
 8009adc:	4682      	mov	sl, r0
 8009ade:	468b      	mov	fp, r1
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	f7f7 f858 	bl	8000b98 <__aeabi_d2iz>
 8009ae8:	4606      	mov	r6, r0
 8009aea:	f7f6 fd3b 	bl	8000564 <__aeabi_i2d>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4640      	mov	r0, r8
 8009af4:	4649      	mov	r1, r9
 8009af6:	f7f6 fbe7 	bl	80002c8 <__aeabi_dsub>
 8009afa:	3630      	adds	r6, #48	; 0x30
 8009afc:	f805 6b01 	strb.w	r6, [r5], #1
 8009b00:	4652      	mov	r2, sl
 8009b02:	465b      	mov	r3, fp
 8009b04:	4680      	mov	r8, r0
 8009b06:	4689      	mov	r9, r1
 8009b08:	f7f7 f808 	bl	8000b1c <__aeabi_dcmplt>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d163      	bne.n	8009bd8 <_dtoa_r+0x608>
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	4936      	ldr	r1, [pc, #216]	; (8009bf0 <_dtoa_r+0x620>)
 8009b16:	2000      	movs	r0, #0
 8009b18:	f7f6 fbd6 	bl	80002c8 <__aeabi_dsub>
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	465b      	mov	r3, fp
 8009b20:	f7f6 fffc 	bl	8000b1c <__aeabi_dcmplt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f040 80b5 	bne.w	8009c94 <_dtoa_r+0x6c4>
 8009b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b2c:	429d      	cmp	r5, r3
 8009b2e:	d081      	beq.n	8009a34 <_dtoa_r+0x464>
 8009b30:	4b30      	ldr	r3, [pc, #192]	; (8009bf4 <_dtoa_r+0x624>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	4650      	mov	r0, sl
 8009b36:	4659      	mov	r1, fp
 8009b38:	f7f6 fd7e 	bl	8000638 <__aeabi_dmul>
 8009b3c:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <_dtoa_r+0x624>)
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	4640      	mov	r0, r8
 8009b44:	4649      	mov	r1, r9
 8009b46:	2200      	movs	r2, #0
 8009b48:	f7f6 fd76 	bl	8000638 <__aeabi_dmul>
 8009b4c:	4680      	mov	r8, r0
 8009b4e:	4689      	mov	r9, r1
 8009b50:	e7c6      	b.n	8009ae0 <_dtoa_r+0x510>
 8009b52:	4650      	mov	r0, sl
 8009b54:	4659      	mov	r1, fp
 8009b56:	f7f6 fd6f 	bl	8000638 <__aeabi_dmul>
 8009b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b5c:	9d01      	ldr	r5, [sp, #4]
 8009b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b60:	4682      	mov	sl, r0
 8009b62:	468b      	mov	fp, r1
 8009b64:	4649      	mov	r1, r9
 8009b66:	4640      	mov	r0, r8
 8009b68:	f7f7 f816 	bl	8000b98 <__aeabi_d2iz>
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	f7f6 fcf9 	bl	8000564 <__aeabi_i2d>
 8009b72:	3630      	adds	r6, #48	; 0x30
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 fba4 	bl	80002c8 <__aeabi_dsub>
 8009b80:	f805 6b01 	strb.w	r6, [r5], #1
 8009b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b86:	429d      	cmp	r5, r3
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4689      	mov	r9, r1
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	d124      	bne.n	8009bdc <_dtoa_r+0x60c>
 8009b92:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <_dtoa_r+0x630>)
 8009b94:	4650      	mov	r0, sl
 8009b96:	4659      	mov	r1, fp
 8009b98:	f7f6 fb98 	bl	80002cc <__adddf3>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	f7f6 ffd8 	bl	8000b58 <__aeabi_dcmpgt>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d173      	bne.n	8009c94 <_dtoa_r+0x6c4>
 8009bac:	4652      	mov	r2, sl
 8009bae:	465b      	mov	r3, fp
 8009bb0:	4913      	ldr	r1, [pc, #76]	; (8009c00 <_dtoa_r+0x630>)
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f7f6 fb88 	bl	80002c8 <__aeabi_dsub>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	f7f6 ffac 	bl	8000b1c <__aeabi_dcmplt>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f43f af35 	beq.w	8009a34 <_dtoa_r+0x464>
 8009bca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bcc:	1e6b      	subs	r3, r5, #1
 8009bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bd4:	2b30      	cmp	r3, #48	; 0x30
 8009bd6:	d0f8      	beq.n	8009bca <_dtoa_r+0x5fa>
 8009bd8:	9700      	str	r7, [sp, #0]
 8009bda:	e049      	b.n	8009c70 <_dtoa_r+0x6a0>
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <_dtoa_r+0x624>)
 8009bde:	f7f6 fd2b 	bl	8000638 <__aeabi_dmul>
 8009be2:	4680      	mov	r8, r0
 8009be4:	4689      	mov	r9, r1
 8009be6:	e7bd      	b.n	8009b64 <_dtoa_r+0x594>
 8009be8:	0800c430 	.word	0x0800c430
 8009bec:	0800c408 	.word	0x0800c408
 8009bf0:	3ff00000 	.word	0x3ff00000
 8009bf4:	40240000 	.word	0x40240000
 8009bf8:	401c0000 	.word	0x401c0000
 8009bfc:	40140000 	.word	0x40140000
 8009c00:	3fe00000 	.word	0x3fe00000
 8009c04:	9d01      	ldr	r5, [sp, #4]
 8009c06:	4656      	mov	r6, sl
 8009c08:	465f      	mov	r7, fp
 8009c0a:	4642      	mov	r2, r8
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fe3b 	bl	800088c <__aeabi_ddiv>
 8009c16:	f7f6 ffbf 	bl	8000b98 <__aeabi_d2iz>
 8009c1a:	4682      	mov	sl, r0
 8009c1c:	f7f6 fca2 	bl	8000564 <__aeabi_i2d>
 8009c20:	4642      	mov	r2, r8
 8009c22:	464b      	mov	r3, r9
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c34:	f7f6 fb48 	bl	80002c8 <__aeabi_dsub>
 8009c38:	f805 6b01 	strb.w	r6, [r5], #1
 8009c3c:	9e01      	ldr	r6, [sp, #4]
 8009c3e:	9f03      	ldr	r7, [sp, #12]
 8009c40:	1bae      	subs	r6, r5, r6
 8009c42:	42b7      	cmp	r7, r6
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	d135      	bne.n	8009cb6 <_dtoa_r+0x6e6>
 8009c4a:	f7f6 fb3f 	bl	80002cc <__adddf3>
 8009c4e:	4642      	mov	r2, r8
 8009c50:	464b      	mov	r3, r9
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	f7f6 ff7f 	bl	8000b58 <__aeabi_dcmpgt>
 8009c5a:	b9d0      	cbnz	r0, 8009c92 <_dtoa_r+0x6c2>
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 ff50 	bl	8000b08 <__aeabi_dcmpeq>
 8009c68:	b110      	cbz	r0, 8009c70 <_dtoa_r+0x6a0>
 8009c6a:	f01a 0f01 	tst.w	sl, #1
 8009c6e:	d110      	bne.n	8009c92 <_dtoa_r+0x6c2>
 8009c70:	4620      	mov	r0, r4
 8009c72:	ee18 1a10 	vmov	r1, s16
 8009c76:	f000 fc3d 	bl	800a4f4 <_Bfree>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9800      	ldr	r0, [sp, #0]
 8009c7e:	702b      	strb	r3, [r5, #0]
 8009c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c82:	3001      	adds	r0, #1
 8009c84:	6018      	str	r0, [r3, #0]
 8009c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f43f acf1 	beq.w	8009670 <_dtoa_r+0xa0>
 8009c8e:	601d      	str	r5, [r3, #0]
 8009c90:	e4ee      	b.n	8009670 <_dtoa_r+0xa0>
 8009c92:	9f00      	ldr	r7, [sp, #0]
 8009c94:	462b      	mov	r3, r5
 8009c96:	461d      	mov	r5, r3
 8009c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c9c:	2a39      	cmp	r2, #57	; 0x39
 8009c9e:	d106      	bne.n	8009cae <_dtoa_r+0x6de>
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d1f7      	bne.n	8009c96 <_dtoa_r+0x6c6>
 8009ca6:	9901      	ldr	r1, [sp, #4]
 8009ca8:	2230      	movs	r2, #48	; 0x30
 8009caa:	3701      	adds	r7, #1
 8009cac:	700a      	strb	r2, [r1, #0]
 8009cae:	781a      	ldrb	r2, [r3, #0]
 8009cb0:	3201      	adds	r2, #1
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e790      	b.n	8009bd8 <_dtoa_r+0x608>
 8009cb6:	4ba6      	ldr	r3, [pc, #664]	; (8009f50 <_dtoa_r+0x980>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f7f6 fcbd 	bl	8000638 <__aeabi_dmul>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	f7f6 ff1f 	bl	8000b08 <__aeabi_dcmpeq>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d09d      	beq.n	8009c0a <_dtoa_r+0x63a>
 8009cce:	e7cf      	b.n	8009c70 <_dtoa_r+0x6a0>
 8009cd0:	9a08      	ldr	r2, [sp, #32]
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	f000 80d7 	beq.w	8009e86 <_dtoa_r+0x8b6>
 8009cd8:	9a06      	ldr	r2, [sp, #24]
 8009cda:	2a01      	cmp	r2, #1
 8009cdc:	f300 80ba 	bgt.w	8009e54 <_dtoa_r+0x884>
 8009ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	f000 80b2 	beq.w	8009e4c <_dtoa_r+0x87c>
 8009ce8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cec:	9e07      	ldr	r6, [sp, #28]
 8009cee:	9d04      	ldr	r5, [sp, #16]
 8009cf0:	9a04      	ldr	r2, [sp, #16]
 8009cf2:	441a      	add	r2, r3
 8009cf4:	9204      	str	r2, [sp, #16]
 8009cf6:	9a05      	ldr	r2, [sp, #20]
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	441a      	add	r2, r3
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	9205      	str	r2, [sp, #20]
 8009d00:	f000 fcb0 	bl	800a664 <__i2b>
 8009d04:	4607      	mov	r7, r0
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	dd0c      	ble.n	8009d24 <_dtoa_r+0x754>
 8009d0a:	9b05      	ldr	r3, [sp, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dd09      	ble.n	8009d24 <_dtoa_r+0x754>
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	9a04      	ldr	r2, [sp, #16]
 8009d14:	bfa8      	it	ge
 8009d16:	462b      	movge	r3, r5
 8009d18:	1ad2      	subs	r2, r2, r3
 8009d1a:	9204      	str	r2, [sp, #16]
 8009d1c:	9a05      	ldr	r2, [sp, #20]
 8009d1e:	1aed      	subs	r5, r5, r3
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	9b07      	ldr	r3, [sp, #28]
 8009d26:	b31b      	cbz	r3, 8009d70 <_dtoa_r+0x7a0>
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80af 	beq.w	8009e8e <_dtoa_r+0x8be>
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	dd13      	ble.n	8009d5c <_dtoa_r+0x78c>
 8009d34:	4639      	mov	r1, r7
 8009d36:	4632      	mov	r2, r6
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 fd53 	bl	800a7e4 <__pow5mult>
 8009d3e:	ee18 2a10 	vmov	r2, s16
 8009d42:	4601      	mov	r1, r0
 8009d44:	4607      	mov	r7, r0
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fca2 	bl	800a690 <__multiply>
 8009d4c:	ee18 1a10 	vmov	r1, s16
 8009d50:	4680      	mov	r8, r0
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fbce 	bl	800a4f4 <_Bfree>
 8009d58:	ee08 8a10 	vmov	s16, r8
 8009d5c:	9b07      	ldr	r3, [sp, #28]
 8009d5e:	1b9a      	subs	r2, r3, r6
 8009d60:	d006      	beq.n	8009d70 <_dtoa_r+0x7a0>
 8009d62:	ee18 1a10 	vmov	r1, s16
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 fd3c 	bl	800a7e4 <__pow5mult>
 8009d6c:	ee08 0a10 	vmov	s16, r0
 8009d70:	2101      	movs	r1, #1
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fc76 	bl	800a664 <__i2b>
 8009d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	f340 8088 	ble.w	8009e92 <_dtoa_r+0x8c2>
 8009d82:	461a      	mov	r2, r3
 8009d84:	4601      	mov	r1, r0
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fd2c 	bl	800a7e4 <__pow5mult>
 8009d8c:	9b06      	ldr	r3, [sp, #24]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	4606      	mov	r6, r0
 8009d92:	f340 8081 	ble.w	8009e98 <_dtoa_r+0x8c8>
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	6933      	ldr	r3, [r6, #16]
 8009d9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009da0:	6918      	ldr	r0, [r3, #16]
 8009da2:	f000 fc0f 	bl	800a5c4 <__hi0bits>
 8009da6:	f1c0 0020 	rsb	r0, r0, #32
 8009daa:	9b05      	ldr	r3, [sp, #20]
 8009dac:	4418      	add	r0, r3
 8009dae:	f010 001f 	ands.w	r0, r0, #31
 8009db2:	f000 8092 	beq.w	8009eda <_dtoa_r+0x90a>
 8009db6:	f1c0 0320 	rsb	r3, r0, #32
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	f340 808a 	ble.w	8009ed4 <_dtoa_r+0x904>
 8009dc0:	f1c0 001c 	rsb	r0, r0, #28
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	4403      	add	r3, r0
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9b05      	ldr	r3, [sp, #20]
 8009dcc:	4403      	add	r3, r0
 8009dce:	4405      	add	r5, r0
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dd07      	ble.n	8009de8 <_dtoa_r+0x818>
 8009dd8:	ee18 1a10 	vmov	r1, s16
 8009ddc:	461a      	mov	r2, r3
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 fd5a 	bl	800a898 <__lshift>
 8009de4:	ee08 0a10 	vmov	s16, r0
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dd05      	ble.n	8009dfa <_dtoa_r+0x82a>
 8009dee:	4631      	mov	r1, r6
 8009df0:	461a      	mov	r2, r3
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fd50 	bl	800a898 <__lshift>
 8009df8:	4606      	mov	r6, r0
 8009dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d06e      	beq.n	8009ede <_dtoa_r+0x90e>
 8009e00:	ee18 0a10 	vmov	r0, s16
 8009e04:	4631      	mov	r1, r6
 8009e06:	f000 fdb7 	bl	800a978 <__mcmp>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	da67      	bge.n	8009ede <_dtoa_r+0x90e>
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	ee18 1a10 	vmov	r1, s16
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	220a      	movs	r2, #10
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fb8b 	bl	800a538 <__multadd>
 8009e22:	9b08      	ldr	r3, [sp, #32]
 8009e24:	ee08 0a10 	vmov	s16, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 81b1 	beq.w	800a190 <_dtoa_r+0xbc0>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4639      	mov	r1, r7
 8009e32:	220a      	movs	r2, #10
 8009e34:	4620      	mov	r0, r4
 8009e36:	f000 fb7f 	bl	800a538 <__multadd>
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	4607      	mov	r7, r0
 8009e40:	f300 808e 	bgt.w	8009f60 <_dtoa_r+0x990>
 8009e44:	9b06      	ldr	r3, [sp, #24]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	dc51      	bgt.n	8009eee <_dtoa_r+0x91e>
 8009e4a:	e089      	b.n	8009f60 <_dtoa_r+0x990>
 8009e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e52:	e74b      	b.n	8009cec <_dtoa_r+0x71c>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	1e5e      	subs	r6, r3, #1
 8009e58:	9b07      	ldr	r3, [sp, #28]
 8009e5a:	42b3      	cmp	r3, r6
 8009e5c:	bfbf      	itttt	lt
 8009e5e:	9b07      	ldrlt	r3, [sp, #28]
 8009e60:	9607      	strlt	r6, [sp, #28]
 8009e62:	1af2      	sublt	r2, r6, r3
 8009e64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e66:	bfb6      	itet	lt
 8009e68:	189b      	addlt	r3, r3, r2
 8009e6a:	1b9e      	subge	r6, r3, r6
 8009e6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	bfb8      	it	lt
 8009e72:	2600      	movlt	r6, #0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfb7      	itett	lt
 8009e78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e80:	1a9d      	sublt	r5, r3, r2
 8009e82:	2300      	movlt	r3, #0
 8009e84:	e734      	b.n	8009cf0 <_dtoa_r+0x720>
 8009e86:	9e07      	ldr	r6, [sp, #28]
 8009e88:	9d04      	ldr	r5, [sp, #16]
 8009e8a:	9f08      	ldr	r7, [sp, #32]
 8009e8c:	e73b      	b.n	8009d06 <_dtoa_r+0x736>
 8009e8e:	9a07      	ldr	r2, [sp, #28]
 8009e90:	e767      	b.n	8009d62 <_dtoa_r+0x792>
 8009e92:	9b06      	ldr	r3, [sp, #24]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	dc18      	bgt.n	8009eca <_dtoa_r+0x8fa>
 8009e98:	f1ba 0f00 	cmp.w	sl, #0
 8009e9c:	d115      	bne.n	8009eca <_dtoa_r+0x8fa>
 8009e9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ea2:	b993      	cbnz	r3, 8009eca <_dtoa_r+0x8fa>
 8009ea4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ea8:	0d1b      	lsrs	r3, r3, #20
 8009eaa:	051b      	lsls	r3, r3, #20
 8009eac:	b183      	cbz	r3, 8009ed0 <_dtoa_r+0x900>
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	9b05      	ldr	r3, [sp, #20]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	f04f 0801 	mov.w	r8, #1
 8009ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f47f af6a 	bne.w	8009d9a <_dtoa_r+0x7ca>
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	e76f      	b.n	8009daa <_dtoa_r+0x7da>
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	e7f6      	b.n	8009ebe <_dtoa_r+0x8ee>
 8009ed0:	4698      	mov	r8, r3
 8009ed2:	e7f4      	b.n	8009ebe <_dtoa_r+0x8ee>
 8009ed4:	f43f af7d 	beq.w	8009dd2 <_dtoa_r+0x802>
 8009ed8:	4618      	mov	r0, r3
 8009eda:	301c      	adds	r0, #28
 8009edc:	e772      	b.n	8009dc4 <_dtoa_r+0x7f4>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dc37      	bgt.n	8009f54 <_dtoa_r+0x984>
 8009ee4:	9b06      	ldr	r3, [sp, #24]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	dd34      	ble.n	8009f54 <_dtoa_r+0x984>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	9302      	str	r3, [sp, #8]
 8009eee:	9b02      	ldr	r3, [sp, #8]
 8009ef0:	b96b      	cbnz	r3, 8009f0e <_dtoa_r+0x93e>
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	2205      	movs	r2, #5
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 fb1e 	bl	800a538 <__multadd>
 8009efc:	4601      	mov	r1, r0
 8009efe:	4606      	mov	r6, r0
 8009f00:	ee18 0a10 	vmov	r0, s16
 8009f04:	f000 fd38 	bl	800a978 <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f73f adbb 	bgt.w	8009a84 <_dtoa_r+0x4b4>
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	9d01      	ldr	r5, [sp, #4]
 8009f12:	43db      	mvns	r3, r3
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	f04f 0800 	mov.w	r8, #0
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fae9 	bl	800a4f4 <_Bfree>
 8009f22:	2f00      	cmp	r7, #0
 8009f24:	f43f aea4 	beq.w	8009c70 <_dtoa_r+0x6a0>
 8009f28:	f1b8 0f00 	cmp.w	r8, #0
 8009f2c:	d005      	beq.n	8009f3a <_dtoa_r+0x96a>
 8009f2e:	45b8      	cmp	r8, r7
 8009f30:	d003      	beq.n	8009f3a <_dtoa_r+0x96a>
 8009f32:	4641      	mov	r1, r8
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 fadd 	bl	800a4f4 <_Bfree>
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fad9 	bl	800a4f4 <_Bfree>
 8009f42:	e695      	b.n	8009c70 <_dtoa_r+0x6a0>
 8009f44:	2600      	movs	r6, #0
 8009f46:	4637      	mov	r7, r6
 8009f48:	e7e1      	b.n	8009f0e <_dtoa_r+0x93e>
 8009f4a:	9700      	str	r7, [sp, #0]
 8009f4c:	4637      	mov	r7, r6
 8009f4e:	e599      	b.n	8009a84 <_dtoa_r+0x4b4>
 8009f50:	40240000 	.word	0x40240000
 8009f54:	9b08      	ldr	r3, [sp, #32]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80ca 	beq.w	800a0f0 <_dtoa_r+0xb20>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	9302      	str	r3, [sp, #8]
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	dd05      	ble.n	8009f70 <_dtoa_r+0x9a0>
 8009f64:	4639      	mov	r1, r7
 8009f66:	462a      	mov	r2, r5
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fc95 	bl	800a898 <__lshift>
 8009f6e:	4607      	mov	r7, r0
 8009f70:	f1b8 0f00 	cmp.w	r8, #0
 8009f74:	d05b      	beq.n	800a02e <_dtoa_r+0xa5e>
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fa7b 	bl	800a474 <_Balloc>
 8009f7e:	4605      	mov	r5, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <_dtoa_r+0x9be>
 8009f82:	4b87      	ldr	r3, [pc, #540]	; (800a1a0 <_dtoa_r+0xbd0>)
 8009f84:	4602      	mov	r2, r0
 8009f86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f8a:	f7ff bb3b 	b.w	8009604 <_dtoa_r+0x34>
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	f107 010c 	add.w	r1, r7, #12
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f7fe fa6a 	bl	8008472 <memcpy>
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 fc78 	bl	800a898 <__lshift>
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	f103 0901 	add.w	r9, r3, #1
 8009fae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	f00a 0301 	and.w	r3, sl, #1
 8009fba:	46b8      	mov	r8, r7
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	4607      	mov	r7, r0
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	ee18 0a10 	vmov	r0, s16
 8009fc6:	f7ff fa75 	bl	80094b4 <quorem>
 8009fca:	4641      	mov	r1, r8
 8009fcc:	9002      	str	r0, [sp, #8]
 8009fce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fd2:	ee18 0a10 	vmov	r0, s16
 8009fd6:	f000 fccf 	bl	800a978 <__mcmp>
 8009fda:	463a      	mov	r2, r7
 8009fdc:	9003      	str	r0, [sp, #12]
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fce5 	bl	800a9b0 <__mdiff>
 8009fe6:	68c2      	ldr	r2, [r0, #12]
 8009fe8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fec:	4605      	mov	r5, r0
 8009fee:	bb02      	cbnz	r2, 800a032 <_dtoa_r+0xa62>
 8009ff0:	4601      	mov	r1, r0
 8009ff2:	ee18 0a10 	vmov	r0, s16
 8009ff6:	f000 fcbf 	bl	800a978 <__mcmp>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4620      	mov	r0, r4
 800a000:	9207      	str	r2, [sp, #28]
 800a002:	f000 fa77 	bl	800a4f4 <_Bfree>
 800a006:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a00a:	ea43 0102 	orr.w	r1, r3, r2
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	430b      	orrs	r3, r1
 800a012:	464d      	mov	r5, r9
 800a014:	d10f      	bne.n	800a036 <_dtoa_r+0xa66>
 800a016:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a01a:	d02a      	beq.n	800a072 <_dtoa_r+0xaa2>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd02      	ble.n	800a028 <_dtoa_r+0xa58>
 800a022:	9b02      	ldr	r3, [sp, #8]
 800a024:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a028:	f88b a000 	strb.w	sl, [fp]
 800a02c:	e775      	b.n	8009f1a <_dtoa_r+0x94a>
 800a02e:	4638      	mov	r0, r7
 800a030:	e7ba      	b.n	8009fa8 <_dtoa_r+0x9d8>
 800a032:	2201      	movs	r2, #1
 800a034:	e7e2      	b.n	8009ffc <_dtoa_r+0xa2c>
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	db04      	blt.n	800a046 <_dtoa_r+0xa76>
 800a03c:	9906      	ldr	r1, [sp, #24]
 800a03e:	430b      	orrs	r3, r1
 800a040:	9904      	ldr	r1, [sp, #16]
 800a042:	430b      	orrs	r3, r1
 800a044:	d122      	bne.n	800a08c <_dtoa_r+0xabc>
 800a046:	2a00      	cmp	r2, #0
 800a048:	ddee      	ble.n	800a028 <_dtoa_r+0xa58>
 800a04a:	ee18 1a10 	vmov	r1, s16
 800a04e:	2201      	movs	r2, #1
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fc21 	bl	800a898 <__lshift>
 800a056:	4631      	mov	r1, r6
 800a058:	ee08 0a10 	vmov	s16, r0
 800a05c:	f000 fc8c 	bl	800a978 <__mcmp>
 800a060:	2800      	cmp	r0, #0
 800a062:	dc03      	bgt.n	800a06c <_dtoa_r+0xa9c>
 800a064:	d1e0      	bne.n	800a028 <_dtoa_r+0xa58>
 800a066:	f01a 0f01 	tst.w	sl, #1
 800a06a:	d0dd      	beq.n	800a028 <_dtoa_r+0xa58>
 800a06c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a070:	d1d7      	bne.n	800a022 <_dtoa_r+0xa52>
 800a072:	2339      	movs	r3, #57	; 0x39
 800a074:	f88b 3000 	strb.w	r3, [fp]
 800a078:	462b      	mov	r3, r5
 800a07a:	461d      	mov	r5, r3
 800a07c:	3b01      	subs	r3, #1
 800a07e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a082:	2a39      	cmp	r2, #57	; 0x39
 800a084:	d071      	beq.n	800a16a <_dtoa_r+0xb9a>
 800a086:	3201      	adds	r2, #1
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	e746      	b.n	8009f1a <_dtoa_r+0x94a>
 800a08c:	2a00      	cmp	r2, #0
 800a08e:	dd07      	ble.n	800a0a0 <_dtoa_r+0xad0>
 800a090:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a094:	d0ed      	beq.n	800a072 <_dtoa_r+0xaa2>
 800a096:	f10a 0301 	add.w	r3, sl, #1
 800a09a:	f88b 3000 	strb.w	r3, [fp]
 800a09e:	e73c      	b.n	8009f1a <_dtoa_r+0x94a>
 800a0a0:	9b05      	ldr	r3, [sp, #20]
 800a0a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a0a6:	4599      	cmp	r9, r3
 800a0a8:	d047      	beq.n	800a13a <_dtoa_r+0xb6a>
 800a0aa:	ee18 1a10 	vmov	r1, s16
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 fa40 	bl	800a538 <__multadd>
 800a0b8:	45b8      	cmp	r8, r7
 800a0ba:	ee08 0a10 	vmov	s16, r0
 800a0be:	f04f 0300 	mov.w	r3, #0
 800a0c2:	f04f 020a 	mov.w	r2, #10
 800a0c6:	4641      	mov	r1, r8
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	d106      	bne.n	800a0da <_dtoa_r+0xb0a>
 800a0cc:	f000 fa34 	bl	800a538 <__multadd>
 800a0d0:	4680      	mov	r8, r0
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	f109 0901 	add.w	r9, r9, #1
 800a0d8:	e772      	b.n	8009fc0 <_dtoa_r+0x9f0>
 800a0da:	f000 fa2d 	bl	800a538 <__multadd>
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f000 fa26 	bl	800a538 <__multadd>
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	e7f1      	b.n	800a0d4 <_dtoa_r+0xb04>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	9302      	str	r3, [sp, #8]
 800a0f4:	9d01      	ldr	r5, [sp, #4]
 800a0f6:	ee18 0a10 	vmov	r0, s16
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	f7ff f9da 	bl	80094b4 <quorem>
 800a100:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	f805 ab01 	strb.w	sl, [r5], #1
 800a10a:	1aea      	subs	r2, r5, r3
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	4293      	cmp	r3, r2
 800a110:	dd09      	ble.n	800a126 <_dtoa_r+0xb56>
 800a112:	ee18 1a10 	vmov	r1, s16
 800a116:	2300      	movs	r3, #0
 800a118:	220a      	movs	r2, #10
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 fa0c 	bl	800a538 <__multadd>
 800a120:	ee08 0a10 	vmov	s16, r0
 800a124:	e7e7      	b.n	800a0f6 <_dtoa_r+0xb26>
 800a126:	9b02      	ldr	r3, [sp, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bfc8      	it	gt
 800a12c:	461d      	movgt	r5, r3
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	bfd8      	it	le
 800a132:	2501      	movle	r5, #1
 800a134:	441d      	add	r5, r3
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	ee18 1a10 	vmov	r1, s16
 800a13e:	2201      	movs	r2, #1
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fba9 	bl	800a898 <__lshift>
 800a146:	4631      	mov	r1, r6
 800a148:	ee08 0a10 	vmov	s16, r0
 800a14c:	f000 fc14 	bl	800a978 <__mcmp>
 800a150:	2800      	cmp	r0, #0
 800a152:	dc91      	bgt.n	800a078 <_dtoa_r+0xaa8>
 800a154:	d102      	bne.n	800a15c <_dtoa_r+0xb8c>
 800a156:	f01a 0f01 	tst.w	sl, #1
 800a15a:	d18d      	bne.n	800a078 <_dtoa_r+0xaa8>
 800a15c:	462b      	mov	r3, r5
 800a15e:	461d      	mov	r5, r3
 800a160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a164:	2a30      	cmp	r2, #48	; 0x30
 800a166:	d0fa      	beq.n	800a15e <_dtoa_r+0xb8e>
 800a168:	e6d7      	b.n	8009f1a <_dtoa_r+0x94a>
 800a16a:	9a01      	ldr	r2, [sp, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d184      	bne.n	800a07a <_dtoa_r+0xaaa>
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	2331      	movs	r3, #49	; 0x31
 800a178:	7013      	strb	r3, [r2, #0]
 800a17a:	e6ce      	b.n	8009f1a <_dtoa_r+0x94a>
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <_dtoa_r+0xbd4>)
 800a17e:	f7ff ba95 	b.w	80096ac <_dtoa_r+0xdc>
 800a182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a184:	2b00      	cmp	r3, #0
 800a186:	f47f aa6e 	bne.w	8009666 <_dtoa_r+0x96>
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <_dtoa_r+0xbd8>)
 800a18c:	f7ff ba8e 	b.w	80096ac <_dtoa_r+0xdc>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dcae      	bgt.n	800a0f4 <_dtoa_r+0xb24>
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	f73f aea8 	bgt.w	8009eee <_dtoa_r+0x91e>
 800a19e:	e7a9      	b.n	800a0f4 <_dtoa_r+0xb24>
 800a1a0:	0800c395 	.word	0x0800c395
 800a1a4:	0800c519 	.word	0x0800c519
 800a1a8:	0800c316 	.word	0x0800c316

0800a1ac <__sflush_r>:
 800a1ac:	898a      	ldrh	r2, [r1, #12]
 800a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	0710      	lsls	r0, r2, #28
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	d458      	bmi.n	800a26c <__sflush_r+0xc0>
 800a1ba:	684b      	ldr	r3, [r1, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc05      	bgt.n	800a1cc <__sflush_r+0x20>
 800a1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dc02      	bgt.n	800a1cc <__sflush_r+0x20>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	d0f9      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1d8:	682f      	ldr	r7, [r5, #0]
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	d032      	beq.n	800a244 <__sflush_r+0x98>
 800a1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	075a      	lsls	r2, r3, #29
 800a1e4:	d505      	bpl.n	800a1f2 <__sflush_r+0x46>
 800a1e6:	6863      	ldr	r3, [r4, #4]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ec:	b10b      	cbz	r3, 800a1f2 <__sflush_r+0x46>
 800a1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1f0:	1ac0      	subs	r0, r0, r3
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f8:	6a21      	ldr	r1, [r4, #32]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b0      	blx	r6
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	d106      	bne.n	800a212 <__sflush_r+0x66>
 800a204:	6829      	ldr	r1, [r5, #0]
 800a206:	291d      	cmp	r1, #29
 800a208:	d82c      	bhi.n	800a264 <__sflush_r+0xb8>
 800a20a:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <__sflush_r+0x108>)
 800a20c:	40ca      	lsrs	r2, r1
 800a20e:	07d6      	lsls	r6, r2, #31
 800a210:	d528      	bpl.n	800a264 <__sflush_r+0xb8>
 800a212:	2200      	movs	r2, #0
 800a214:	6062      	str	r2, [r4, #4]
 800a216:	04d9      	lsls	r1, r3, #19
 800a218:	6922      	ldr	r2, [r4, #16]
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	d504      	bpl.n	800a228 <__sflush_r+0x7c>
 800a21e:	1c42      	adds	r2, r0, #1
 800a220:	d101      	bne.n	800a226 <__sflush_r+0x7a>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	b903      	cbnz	r3, 800a228 <__sflush_r+0x7c>
 800a226:	6560      	str	r0, [r4, #84]	; 0x54
 800a228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a22a:	602f      	str	r7, [r5, #0]
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d0ca      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a234:	4299      	cmp	r1, r3
 800a236:	d002      	beq.n	800a23e <__sflush_r+0x92>
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fcb5 	bl	800aba8 <_free_r>
 800a23e:	2000      	movs	r0, #0
 800a240:	6360      	str	r0, [r4, #52]	; 0x34
 800a242:	e7c1      	b.n	800a1c8 <__sflush_r+0x1c>
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	2301      	movs	r3, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	47b0      	blx	r6
 800a24c:	1c41      	adds	r1, r0, #1
 800a24e:	d1c7      	bne.n	800a1e0 <__sflush_r+0x34>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0c4      	beq.n	800a1e0 <__sflush_r+0x34>
 800a256:	2b1d      	cmp	r3, #29
 800a258:	d001      	beq.n	800a25e <__sflush_r+0xb2>
 800a25a:	2b16      	cmp	r3, #22
 800a25c:	d101      	bne.n	800a262 <__sflush_r+0xb6>
 800a25e:	602f      	str	r7, [r5, #0]
 800a260:	e7b1      	b.n	800a1c6 <__sflush_r+0x1a>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	e7ad      	b.n	800a1c8 <__sflush_r+0x1c>
 800a26c:	690f      	ldr	r7, [r1, #16]
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d0a9      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a272:	0793      	lsls	r3, r2, #30
 800a274:	680e      	ldr	r6, [r1, #0]
 800a276:	bf08      	it	eq
 800a278:	694b      	ldreq	r3, [r1, #20]
 800a27a:	600f      	str	r7, [r1, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2300      	movne	r3, #0
 800a280:	eba6 0807 	sub.w	r8, r6, r7
 800a284:	608b      	str	r3, [r1, #8]
 800a286:	f1b8 0f00 	cmp.w	r8, #0
 800a28a:	dd9c      	ble.n	800a1c6 <__sflush_r+0x1a>
 800a28c:	6a21      	ldr	r1, [r4, #32]
 800a28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a290:	4643      	mov	r3, r8
 800a292:	463a      	mov	r2, r7
 800a294:	4628      	mov	r0, r5
 800a296:	47b0      	blx	r6
 800a298:	2800      	cmp	r0, #0
 800a29a:	dc06      	bgt.n	800a2aa <__sflush_r+0xfe>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a8:	e78e      	b.n	800a1c8 <__sflush_r+0x1c>
 800a2aa:	4407      	add	r7, r0
 800a2ac:	eba8 0800 	sub.w	r8, r8, r0
 800a2b0:	e7e9      	b.n	800a286 <__sflush_r+0xda>
 800a2b2:	bf00      	nop
 800a2b4:	20400001 	.word	0x20400001

0800a2b8 <_fflush_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	690b      	ldr	r3, [r1, #16]
 800a2bc:	4605      	mov	r5, r0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	b913      	cbnz	r3, 800a2c8 <_fflush_r+0x10>
 800a2c2:	2500      	movs	r5, #0
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	b118      	cbz	r0, 800a2d2 <_fflush_r+0x1a>
 800a2ca:	6983      	ldr	r3, [r0, #24]
 800a2cc:	b90b      	cbnz	r3, 800a2d2 <_fflush_r+0x1a>
 800a2ce:	f7fd ffef 	bl	80082b0 <__sinit>
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <_fflush_r+0x6c>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	d11b      	bne.n	800a310 <_fflush_r+0x58>
 800a2d8:	686c      	ldr	r4, [r5, #4]
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0ef      	beq.n	800a2c2 <_fflush_r+0xa>
 800a2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2e4:	07d0      	lsls	r0, r2, #31
 800a2e6:	d404      	bmi.n	800a2f2 <_fflush_r+0x3a>
 800a2e8:	0599      	lsls	r1, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_fflush_r+0x3a>
 800a2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ee:	f7fe f8be 	bl	800846e <__retarget_lock_acquire_recursive>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7ff ff59 	bl	800a1ac <__sflush_r>
 800a2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2fc:	07da      	lsls	r2, r3, #31
 800a2fe:	4605      	mov	r5, r0
 800a300:	d4e0      	bmi.n	800a2c4 <_fflush_r+0xc>
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	059b      	lsls	r3, r3, #22
 800a306:	d4dd      	bmi.n	800a2c4 <_fflush_r+0xc>
 800a308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30a:	f7fe f8b1 	bl	8008470 <__retarget_lock_release_recursive>
 800a30e:	e7d9      	b.n	800a2c4 <_fflush_r+0xc>
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <_fflush_r+0x70>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d101      	bne.n	800a31a <_fflush_r+0x62>
 800a316:	68ac      	ldr	r4, [r5, #8]
 800a318:	e7df      	b.n	800a2da <_fflush_r+0x22>
 800a31a:	4b04      	ldr	r3, [pc, #16]	; (800a32c <_fflush_r+0x74>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	bf08      	it	eq
 800a320:	68ec      	ldreq	r4, [r5, #12]
 800a322:	e7da      	b.n	800a2da <_fflush_r+0x22>
 800a324:	0800c2a0 	.word	0x0800c2a0
 800a328:	0800c2c0 	.word	0x0800c2c0
 800a32c:	0800c280 	.word	0x0800c280

0800a330 <fflush>:
 800a330:	4601      	mov	r1, r0
 800a332:	b920      	cbnz	r0, 800a33e <fflush+0xe>
 800a334:	4b04      	ldr	r3, [pc, #16]	; (800a348 <fflush+0x18>)
 800a336:	4905      	ldr	r1, [pc, #20]	; (800a34c <fflush+0x1c>)
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f7fe b854 	b.w	80083e6 <_fwalk_reent>
 800a33e:	4b04      	ldr	r3, [pc, #16]	; (800a350 <fflush+0x20>)
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f7ff bfb9 	b.w	800a2b8 <_fflush_r>
 800a346:	bf00      	nop
 800a348:	0800c2e0 	.word	0x0800c2e0
 800a34c:	0800a2b9 	.word	0x0800a2b9
 800a350:	20000010 	.word	0x20000010

0800a354 <_localeconv_r>:
 800a354:	4800      	ldr	r0, [pc, #0]	; (800a358 <_localeconv_r+0x4>)
 800a356:	4770      	bx	lr
 800a358:	20000164 	.word	0x20000164

0800a35c <_lseek_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <_lseek_r+0x20>)
 800a360:	4604      	mov	r4, r0
 800a362:	4608      	mov	r0, r1
 800a364:	4611      	mov	r1, r2
 800a366:	2200      	movs	r2, #0
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f7f7 ff62 	bl	8002234 <_lseek>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_lseek_r+0x1e>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_lseek_r+0x1e>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	200044d0 	.word	0x200044d0

0800a380 <__swhatbuf_r>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	460e      	mov	r6, r1
 800a384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a388:	2900      	cmp	r1, #0
 800a38a:	b096      	sub	sp, #88	; 0x58
 800a38c:	4614      	mov	r4, r2
 800a38e:	461d      	mov	r5, r3
 800a390:	da08      	bge.n	800a3a4 <__swhatbuf_r+0x24>
 800a392:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	602a      	str	r2, [r5, #0]
 800a39a:	061a      	lsls	r2, r3, #24
 800a39c:	d410      	bmi.n	800a3c0 <__swhatbuf_r+0x40>
 800a39e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3a2:	e00e      	b.n	800a3c2 <__swhatbuf_r+0x42>
 800a3a4:	466a      	mov	r2, sp
 800a3a6:	f001 fb9d 	bl	800bae4 <_fstat_r>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	dbf1      	blt.n	800a392 <__swhatbuf_r+0x12>
 800a3ae:	9a01      	ldr	r2, [sp, #4]
 800a3b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3b8:	425a      	negs	r2, r3
 800a3ba:	415a      	adcs	r2, r3
 800a3bc:	602a      	str	r2, [r5, #0]
 800a3be:	e7ee      	b.n	800a39e <__swhatbuf_r+0x1e>
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	b016      	add	sp, #88	; 0x58
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3cc <__smakebuf_r>:
 800a3cc:	898b      	ldrh	r3, [r1, #12]
 800a3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3d0:	079d      	lsls	r5, r3, #30
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	d507      	bpl.n	800a3e8 <__smakebuf_r+0x1c>
 800a3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	6123      	str	r3, [r4, #16]
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	6163      	str	r3, [r4, #20]
 800a3e4:	b002      	add	sp, #8
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	ab01      	add	r3, sp, #4
 800a3ea:	466a      	mov	r2, sp
 800a3ec:	f7ff ffc8 	bl	800a380 <__swhatbuf_r>
 800a3f0:	9900      	ldr	r1, [sp, #0]
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7fe f873 	bl	80084e0 <_malloc_r>
 800a3fa:	b948      	cbnz	r0, 800a410 <__smakebuf_r+0x44>
 800a3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a400:	059a      	lsls	r2, r3, #22
 800a402:	d4ef      	bmi.n	800a3e4 <__smakebuf_r+0x18>
 800a404:	f023 0303 	bic.w	r3, r3, #3
 800a408:	f043 0302 	orr.w	r3, r3, #2
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	e7e3      	b.n	800a3d8 <__smakebuf_r+0xc>
 800a410:	4b0d      	ldr	r3, [pc, #52]	; (800a448 <__smakebuf_r+0x7c>)
 800a412:	62b3      	str	r3, [r6, #40]	; 0x28
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	6020      	str	r0, [r4, #0]
 800a418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	9b00      	ldr	r3, [sp, #0]
 800a420:	6163      	str	r3, [r4, #20]
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	6120      	str	r0, [r4, #16]
 800a426:	b15b      	cbz	r3, 800a440 <__smakebuf_r+0x74>
 800a428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a42c:	4630      	mov	r0, r6
 800a42e:	f001 fb6b 	bl	800bb08 <_isatty_r>
 800a432:	b128      	cbz	r0, 800a440 <__smakebuf_r+0x74>
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	f023 0303 	bic.w	r3, r3, #3
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	89a0      	ldrh	r0, [r4, #12]
 800a442:	4305      	orrs	r5, r0
 800a444:	81a5      	strh	r5, [r4, #12]
 800a446:	e7cd      	b.n	800a3e4 <__smakebuf_r+0x18>
 800a448:	08008249 	.word	0x08008249

0800a44c <malloc>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	; (800a458 <malloc+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7fe b845 	b.w	80084e0 <_malloc_r>
 800a456:	bf00      	nop
 800a458:	20000010 	.word	0x20000010

0800a45c <__malloc_lock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	; (800a464 <__malloc_lock+0x8>)
 800a45e:	f7fe b806 	b.w	800846e <__retarget_lock_acquire_recursive>
 800a462:	bf00      	nop
 800a464:	200044c4 	.word	0x200044c4

0800a468 <__malloc_unlock>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__malloc_unlock+0x8>)
 800a46a:	f7fe b801 	b.w	8008470 <__retarget_lock_release_recursive>
 800a46e:	bf00      	nop
 800a470:	200044c4 	.word	0x200044c4

0800a474 <_Balloc>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a478:	4604      	mov	r4, r0
 800a47a:	460d      	mov	r5, r1
 800a47c:	b976      	cbnz	r6, 800a49c <_Balloc+0x28>
 800a47e:	2010      	movs	r0, #16
 800a480:	f7ff ffe4 	bl	800a44c <malloc>
 800a484:	4602      	mov	r2, r0
 800a486:	6260      	str	r0, [r4, #36]	; 0x24
 800a488:	b920      	cbnz	r0, 800a494 <_Balloc+0x20>
 800a48a:	4b18      	ldr	r3, [pc, #96]	; (800a4ec <_Balloc+0x78>)
 800a48c:	4818      	ldr	r0, [pc, #96]	; (800a4f0 <_Balloc+0x7c>)
 800a48e:	2166      	movs	r1, #102	; 0x66
 800a490:	f001 faf8 	bl	800ba84 <__assert_func>
 800a494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a498:	6006      	str	r6, [r0, #0]
 800a49a:	60c6      	str	r6, [r0, #12]
 800a49c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a49e:	68f3      	ldr	r3, [r6, #12]
 800a4a0:	b183      	cbz	r3, 800a4c4 <_Balloc+0x50>
 800a4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4aa:	b9b8      	cbnz	r0, 800a4dc <_Balloc+0x68>
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a4b2:	1d72      	adds	r2, r6, #5
 800a4b4:	0092      	lsls	r2, r2, #2
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fb60 	bl	800ab7c <_calloc_r>
 800a4bc:	b160      	cbz	r0, 800a4d8 <_Balloc+0x64>
 800a4be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4c2:	e00e      	b.n	800a4e2 <_Balloc+0x6e>
 800a4c4:	2221      	movs	r2, #33	; 0x21
 800a4c6:	2104      	movs	r1, #4
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fb57 	bl	800ab7c <_calloc_r>
 800a4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4d0:	60f0      	str	r0, [r6, #12]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e4      	bne.n	800a4a2 <_Balloc+0x2e>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	6802      	ldr	r2, [r0, #0]
 800a4de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4e8:	e7f7      	b.n	800a4da <_Balloc+0x66>
 800a4ea:	bf00      	nop
 800a4ec:	0800c323 	.word	0x0800c323
 800a4f0:	0800c3a6 	.word	0x0800c3a6

0800a4f4 <_Bfree>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	b976      	cbnz	r6, 800a51c <_Bfree+0x28>
 800a4fe:	2010      	movs	r0, #16
 800a500:	f7ff ffa4 	bl	800a44c <malloc>
 800a504:	4602      	mov	r2, r0
 800a506:	6268      	str	r0, [r5, #36]	; 0x24
 800a508:	b920      	cbnz	r0, 800a514 <_Bfree+0x20>
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <_Bfree+0x3c>)
 800a50c:	4809      	ldr	r0, [pc, #36]	; (800a534 <_Bfree+0x40>)
 800a50e:	218a      	movs	r1, #138	; 0x8a
 800a510:	f001 fab8 	bl	800ba84 <__assert_func>
 800a514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a518:	6006      	str	r6, [r0, #0]
 800a51a:	60c6      	str	r6, [r0, #12]
 800a51c:	b13c      	cbz	r4, 800a52e <_Bfree+0x3a>
 800a51e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a520:	6862      	ldr	r2, [r4, #4]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a528:	6021      	str	r1, [r4, #0]
 800a52a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	0800c323 	.word	0x0800c323
 800a534:	0800c3a6 	.word	0x0800c3a6

0800a538 <__multadd>:
 800a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	690d      	ldr	r5, [r1, #16]
 800a53e:	4607      	mov	r7, r0
 800a540:	460c      	mov	r4, r1
 800a542:	461e      	mov	r6, r3
 800a544:	f101 0c14 	add.w	ip, r1, #20
 800a548:	2000      	movs	r0, #0
 800a54a:	f8dc 3000 	ldr.w	r3, [ip]
 800a54e:	b299      	uxth	r1, r3
 800a550:	fb02 6101 	mla	r1, r2, r1, r6
 800a554:	0c1e      	lsrs	r6, r3, #16
 800a556:	0c0b      	lsrs	r3, r1, #16
 800a558:	fb02 3306 	mla	r3, r2, r6, r3
 800a55c:	b289      	uxth	r1, r1
 800a55e:	3001      	adds	r0, #1
 800a560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a564:	4285      	cmp	r5, r0
 800a566:	f84c 1b04 	str.w	r1, [ip], #4
 800a56a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a56e:	dcec      	bgt.n	800a54a <__multadd+0x12>
 800a570:	b30e      	cbz	r6, 800a5b6 <__multadd+0x7e>
 800a572:	68a3      	ldr	r3, [r4, #8]
 800a574:	42ab      	cmp	r3, r5
 800a576:	dc19      	bgt.n	800a5ac <__multadd+0x74>
 800a578:	6861      	ldr	r1, [r4, #4]
 800a57a:	4638      	mov	r0, r7
 800a57c:	3101      	adds	r1, #1
 800a57e:	f7ff ff79 	bl	800a474 <_Balloc>
 800a582:	4680      	mov	r8, r0
 800a584:	b928      	cbnz	r0, 800a592 <__multadd+0x5a>
 800a586:	4602      	mov	r2, r0
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <__multadd+0x84>)
 800a58a:	480d      	ldr	r0, [pc, #52]	; (800a5c0 <__multadd+0x88>)
 800a58c:	21b5      	movs	r1, #181	; 0xb5
 800a58e:	f001 fa79 	bl	800ba84 <__assert_func>
 800a592:	6922      	ldr	r2, [r4, #16]
 800a594:	3202      	adds	r2, #2
 800a596:	f104 010c 	add.w	r1, r4, #12
 800a59a:	0092      	lsls	r2, r2, #2
 800a59c:	300c      	adds	r0, #12
 800a59e:	f7fd ff68 	bl	8008472 <memcpy>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f7ff ffa5 	bl	800a4f4 <_Bfree>
 800a5aa:	4644      	mov	r4, r8
 800a5ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	615e      	str	r6, [r3, #20]
 800a5b4:	6125      	str	r5, [r4, #16]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	0800c395 	.word	0x0800c395
 800a5c0:	0800c3a6 	.word	0x0800c3a6

0800a5c4 <__hi0bits>:
 800a5c4:	0c03      	lsrs	r3, r0, #16
 800a5c6:	041b      	lsls	r3, r3, #16
 800a5c8:	b9d3      	cbnz	r3, 800a600 <__hi0bits+0x3c>
 800a5ca:	0400      	lsls	r0, r0, #16
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5d2:	bf04      	itt	eq
 800a5d4:	0200      	lsleq	r0, r0, #8
 800a5d6:	3308      	addeq	r3, #8
 800a5d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5dc:	bf04      	itt	eq
 800a5de:	0100      	lsleq	r0, r0, #4
 800a5e0:	3304      	addeq	r3, #4
 800a5e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5e6:	bf04      	itt	eq
 800a5e8:	0080      	lsleq	r0, r0, #2
 800a5ea:	3302      	addeq	r3, #2
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	db05      	blt.n	800a5fc <__hi0bits+0x38>
 800a5f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5f4:	f103 0301 	add.w	r3, r3, #1
 800a5f8:	bf08      	it	eq
 800a5fa:	2320      	moveq	r3, #32
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	4770      	bx	lr
 800a600:	2300      	movs	r3, #0
 800a602:	e7e4      	b.n	800a5ce <__hi0bits+0xa>

0800a604 <__lo0bits>:
 800a604:	6803      	ldr	r3, [r0, #0]
 800a606:	f013 0207 	ands.w	r2, r3, #7
 800a60a:	4601      	mov	r1, r0
 800a60c:	d00b      	beq.n	800a626 <__lo0bits+0x22>
 800a60e:	07da      	lsls	r2, r3, #31
 800a610:	d423      	bmi.n	800a65a <__lo0bits+0x56>
 800a612:	0798      	lsls	r0, r3, #30
 800a614:	bf49      	itett	mi
 800a616:	085b      	lsrmi	r3, r3, #1
 800a618:	089b      	lsrpl	r3, r3, #2
 800a61a:	2001      	movmi	r0, #1
 800a61c:	600b      	strmi	r3, [r1, #0]
 800a61e:	bf5c      	itt	pl
 800a620:	600b      	strpl	r3, [r1, #0]
 800a622:	2002      	movpl	r0, #2
 800a624:	4770      	bx	lr
 800a626:	b298      	uxth	r0, r3
 800a628:	b9a8      	cbnz	r0, 800a656 <__lo0bits+0x52>
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	2010      	movs	r0, #16
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	b90a      	cbnz	r2, 800a636 <__lo0bits+0x32>
 800a632:	3008      	adds	r0, #8
 800a634:	0a1b      	lsrs	r3, r3, #8
 800a636:	071a      	lsls	r2, r3, #28
 800a638:	bf04      	itt	eq
 800a63a:	091b      	lsreq	r3, r3, #4
 800a63c:	3004      	addeq	r0, #4
 800a63e:	079a      	lsls	r2, r3, #30
 800a640:	bf04      	itt	eq
 800a642:	089b      	lsreq	r3, r3, #2
 800a644:	3002      	addeq	r0, #2
 800a646:	07da      	lsls	r2, r3, #31
 800a648:	d403      	bmi.n	800a652 <__lo0bits+0x4e>
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	f100 0001 	add.w	r0, r0, #1
 800a650:	d005      	beq.n	800a65e <__lo0bits+0x5a>
 800a652:	600b      	str	r3, [r1, #0]
 800a654:	4770      	bx	lr
 800a656:	4610      	mov	r0, r2
 800a658:	e7e9      	b.n	800a62e <__lo0bits+0x2a>
 800a65a:	2000      	movs	r0, #0
 800a65c:	4770      	bx	lr
 800a65e:	2020      	movs	r0, #32
 800a660:	4770      	bx	lr
	...

0800a664 <__i2b>:
 800a664:	b510      	push	{r4, lr}
 800a666:	460c      	mov	r4, r1
 800a668:	2101      	movs	r1, #1
 800a66a:	f7ff ff03 	bl	800a474 <_Balloc>
 800a66e:	4602      	mov	r2, r0
 800a670:	b928      	cbnz	r0, 800a67e <__i2b+0x1a>
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <__i2b+0x24>)
 800a674:	4805      	ldr	r0, [pc, #20]	; (800a68c <__i2b+0x28>)
 800a676:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a67a:	f001 fa03 	bl	800ba84 <__assert_func>
 800a67e:	2301      	movs	r3, #1
 800a680:	6144      	str	r4, [r0, #20]
 800a682:	6103      	str	r3, [r0, #16]
 800a684:	bd10      	pop	{r4, pc}
 800a686:	bf00      	nop
 800a688:	0800c395 	.word	0x0800c395
 800a68c:	0800c3a6 	.word	0x0800c3a6

0800a690 <__multiply>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4691      	mov	r9, r2
 800a696:	690a      	ldr	r2, [r1, #16]
 800a698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bfb8      	it	lt
 800a6a0:	460b      	movlt	r3, r1
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	bfbc      	itt	lt
 800a6a6:	464c      	movlt	r4, r9
 800a6a8:	4699      	movlt	r9, r3
 800a6aa:	6927      	ldr	r7, [r4, #16]
 800a6ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	6861      	ldr	r1, [r4, #4]
 800a6b4:	eb07 060a 	add.w	r6, r7, sl
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	bfb8      	it	lt
 800a6be:	3101      	addlt	r1, #1
 800a6c0:	f7ff fed8 	bl	800a474 <_Balloc>
 800a6c4:	b930      	cbnz	r0, 800a6d4 <__multiply+0x44>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b44      	ldr	r3, [pc, #272]	; (800a7dc <__multiply+0x14c>)
 800a6ca:	4845      	ldr	r0, [pc, #276]	; (800a7e0 <__multiply+0x150>)
 800a6cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a6d0:	f001 f9d8 	bl	800ba84 <__assert_func>
 800a6d4:	f100 0514 	add.w	r5, r0, #20
 800a6d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6dc:	462b      	mov	r3, r5
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4543      	cmp	r3, r8
 800a6e2:	d321      	bcc.n	800a728 <__multiply+0x98>
 800a6e4:	f104 0314 	add.w	r3, r4, #20
 800a6e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6ec:	f109 0314 	add.w	r3, r9, #20
 800a6f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6f4:	9202      	str	r2, [sp, #8]
 800a6f6:	1b3a      	subs	r2, r7, r4
 800a6f8:	3a15      	subs	r2, #21
 800a6fa:	f022 0203 	bic.w	r2, r2, #3
 800a6fe:	3204      	adds	r2, #4
 800a700:	f104 0115 	add.w	r1, r4, #21
 800a704:	428f      	cmp	r7, r1
 800a706:	bf38      	it	cc
 800a708:	2204      	movcc	r2, #4
 800a70a:	9201      	str	r2, [sp, #4]
 800a70c:	9a02      	ldr	r2, [sp, #8]
 800a70e:	9303      	str	r3, [sp, #12]
 800a710:	429a      	cmp	r2, r3
 800a712:	d80c      	bhi.n	800a72e <__multiply+0x9e>
 800a714:	2e00      	cmp	r6, #0
 800a716:	dd03      	ble.n	800a720 <__multiply+0x90>
 800a718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d05a      	beq.n	800a7d6 <__multiply+0x146>
 800a720:	6106      	str	r6, [r0, #16]
 800a722:	b005      	add	sp, #20
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	f843 2b04 	str.w	r2, [r3], #4
 800a72c:	e7d8      	b.n	800a6e0 <__multiply+0x50>
 800a72e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a732:	f1ba 0f00 	cmp.w	sl, #0
 800a736:	d024      	beq.n	800a782 <__multiply+0xf2>
 800a738:	f104 0e14 	add.w	lr, r4, #20
 800a73c:	46a9      	mov	r9, r5
 800a73e:	f04f 0c00 	mov.w	ip, #0
 800a742:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a746:	f8d9 1000 	ldr.w	r1, [r9]
 800a74a:	fa1f fb82 	uxth.w	fp, r2
 800a74e:	b289      	uxth	r1, r1
 800a750:	fb0a 110b 	mla	r1, sl, fp, r1
 800a754:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a758:	f8d9 2000 	ldr.w	r2, [r9]
 800a75c:	4461      	add	r1, ip
 800a75e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a762:	fb0a c20b 	mla	r2, sl, fp, ip
 800a766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a76a:	b289      	uxth	r1, r1
 800a76c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a770:	4577      	cmp	r7, lr
 800a772:	f849 1b04 	str.w	r1, [r9], #4
 800a776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a77a:	d8e2      	bhi.n	800a742 <__multiply+0xb2>
 800a77c:	9a01      	ldr	r2, [sp, #4]
 800a77e:	f845 c002 	str.w	ip, [r5, r2]
 800a782:	9a03      	ldr	r2, [sp, #12]
 800a784:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a788:	3304      	adds	r3, #4
 800a78a:	f1b9 0f00 	cmp.w	r9, #0
 800a78e:	d020      	beq.n	800a7d2 <__multiply+0x142>
 800a790:	6829      	ldr	r1, [r5, #0]
 800a792:	f104 0c14 	add.w	ip, r4, #20
 800a796:	46ae      	mov	lr, r5
 800a798:	f04f 0a00 	mov.w	sl, #0
 800a79c:	f8bc b000 	ldrh.w	fp, [ip]
 800a7a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a7a8:	4492      	add	sl, r2
 800a7aa:	b289      	uxth	r1, r1
 800a7ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a7b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7b8:	f8be 1000 	ldrh.w	r1, [lr]
 800a7bc:	0c12      	lsrs	r2, r2, #16
 800a7be:	fb09 1102 	mla	r1, r9, r2, r1
 800a7c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7c6:	4567      	cmp	r7, ip
 800a7c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7cc:	d8e6      	bhi.n	800a79c <__multiply+0x10c>
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	50a9      	str	r1, [r5, r2]
 800a7d2:	3504      	adds	r5, #4
 800a7d4:	e79a      	b.n	800a70c <__multiply+0x7c>
 800a7d6:	3e01      	subs	r6, #1
 800a7d8:	e79c      	b.n	800a714 <__multiply+0x84>
 800a7da:	bf00      	nop
 800a7dc:	0800c395 	.word	0x0800c395
 800a7e0:	0800c3a6 	.word	0x0800c3a6

0800a7e4 <__pow5mult>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	f012 0203 	ands.w	r2, r2, #3
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	d007      	beq.n	800a804 <__pow5mult+0x20>
 800a7f4:	4c25      	ldr	r4, [pc, #148]	; (800a88c <__pow5mult+0xa8>)
 800a7f6:	3a01      	subs	r2, #1
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7fe:	f7ff fe9b 	bl	800a538 <__multadd>
 800a802:	4607      	mov	r7, r0
 800a804:	10ad      	asrs	r5, r5, #2
 800a806:	d03d      	beq.n	800a884 <__pow5mult+0xa0>
 800a808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a80a:	b97c      	cbnz	r4, 800a82c <__pow5mult+0x48>
 800a80c:	2010      	movs	r0, #16
 800a80e:	f7ff fe1d 	bl	800a44c <malloc>
 800a812:	4602      	mov	r2, r0
 800a814:	6270      	str	r0, [r6, #36]	; 0x24
 800a816:	b928      	cbnz	r0, 800a824 <__pow5mult+0x40>
 800a818:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <__pow5mult+0xac>)
 800a81a:	481e      	ldr	r0, [pc, #120]	; (800a894 <__pow5mult+0xb0>)
 800a81c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a820:	f001 f930 	bl	800ba84 <__assert_func>
 800a824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a828:	6004      	str	r4, [r0, #0]
 800a82a:	60c4      	str	r4, [r0, #12]
 800a82c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a834:	b94c      	cbnz	r4, 800a84a <__pow5mult+0x66>
 800a836:	f240 2171 	movw	r1, #625	; 0x271
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ff12 	bl	800a664 <__i2b>
 800a840:	2300      	movs	r3, #0
 800a842:	f8c8 0008 	str.w	r0, [r8, #8]
 800a846:	4604      	mov	r4, r0
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	f04f 0900 	mov.w	r9, #0
 800a84e:	07eb      	lsls	r3, r5, #31
 800a850:	d50a      	bpl.n	800a868 <__pow5mult+0x84>
 800a852:	4639      	mov	r1, r7
 800a854:	4622      	mov	r2, r4
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff1a 	bl	800a690 <__multiply>
 800a85c:	4639      	mov	r1, r7
 800a85e:	4680      	mov	r8, r0
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fe47 	bl	800a4f4 <_Bfree>
 800a866:	4647      	mov	r7, r8
 800a868:	106d      	asrs	r5, r5, #1
 800a86a:	d00b      	beq.n	800a884 <__pow5mult+0xa0>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	b938      	cbnz	r0, 800a880 <__pow5mult+0x9c>
 800a870:	4622      	mov	r2, r4
 800a872:	4621      	mov	r1, r4
 800a874:	4630      	mov	r0, r6
 800a876:	f7ff ff0b 	bl	800a690 <__multiply>
 800a87a:	6020      	str	r0, [r4, #0]
 800a87c:	f8c0 9000 	str.w	r9, [r0]
 800a880:	4604      	mov	r4, r0
 800a882:	e7e4      	b.n	800a84e <__pow5mult+0x6a>
 800a884:	4638      	mov	r0, r7
 800a886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88a:	bf00      	nop
 800a88c:	0800c4f8 	.word	0x0800c4f8
 800a890:	0800c323 	.word	0x0800c323
 800a894:	0800c3a6 	.word	0x0800c3a6

0800a898 <__lshift>:
 800a898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	6849      	ldr	r1, [r1, #4]
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	4691      	mov	r9, r2
 800a8ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8b0:	f108 0601 	add.w	r6, r8, #1
 800a8b4:	42b3      	cmp	r3, r6
 800a8b6:	db0b      	blt.n	800a8d0 <__lshift+0x38>
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	f7ff fddb 	bl	800a474 <_Balloc>
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b948      	cbnz	r0, 800a8d6 <__lshift+0x3e>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <__lshift+0xd8>)
 800a8c6:	482b      	ldr	r0, [pc, #172]	; (800a974 <__lshift+0xdc>)
 800a8c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8cc:	f001 f8da 	bl	800ba84 <__assert_func>
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	e7ee      	b.n	800a8b4 <__lshift+0x1c>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f100 0114 	add.w	r1, r0, #20
 800a8dc:	f100 0210 	add.w	r2, r0, #16
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	4553      	cmp	r3, sl
 800a8e4:	db37      	blt.n	800a956 <__lshift+0xbe>
 800a8e6:	6920      	ldr	r0, [r4, #16]
 800a8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ec:	f104 0314 	add.w	r3, r4, #20
 800a8f0:	f019 091f 	ands.w	r9, r9, #31
 800a8f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8fc:	d02f      	beq.n	800a95e <__lshift+0xc6>
 800a8fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a902:	468a      	mov	sl, r1
 800a904:	f04f 0c00 	mov.w	ip, #0
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	fa02 f209 	lsl.w	r2, r2, r9
 800a90e:	ea42 020c 	orr.w	r2, r2, ip
 800a912:	f84a 2b04 	str.w	r2, [sl], #4
 800a916:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91a:	4298      	cmp	r0, r3
 800a91c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a920:	d8f2      	bhi.n	800a908 <__lshift+0x70>
 800a922:	1b03      	subs	r3, r0, r4
 800a924:	3b15      	subs	r3, #21
 800a926:	f023 0303 	bic.w	r3, r3, #3
 800a92a:	3304      	adds	r3, #4
 800a92c:	f104 0215 	add.w	r2, r4, #21
 800a930:	4290      	cmp	r0, r2
 800a932:	bf38      	it	cc
 800a934:	2304      	movcc	r3, #4
 800a936:	f841 c003 	str.w	ip, [r1, r3]
 800a93a:	f1bc 0f00 	cmp.w	ip, #0
 800a93e:	d001      	beq.n	800a944 <__lshift+0xac>
 800a940:	f108 0602 	add.w	r6, r8, #2
 800a944:	3e01      	subs	r6, #1
 800a946:	4638      	mov	r0, r7
 800a948:	612e      	str	r6, [r5, #16]
 800a94a:	4621      	mov	r1, r4
 800a94c:	f7ff fdd2 	bl	800a4f4 <_Bfree>
 800a950:	4628      	mov	r0, r5
 800a952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a956:	f842 0f04 	str.w	r0, [r2, #4]!
 800a95a:	3301      	adds	r3, #1
 800a95c:	e7c1      	b.n	800a8e2 <__lshift+0x4a>
 800a95e:	3904      	subs	r1, #4
 800a960:	f853 2b04 	ldr.w	r2, [r3], #4
 800a964:	f841 2f04 	str.w	r2, [r1, #4]!
 800a968:	4298      	cmp	r0, r3
 800a96a:	d8f9      	bhi.n	800a960 <__lshift+0xc8>
 800a96c:	e7ea      	b.n	800a944 <__lshift+0xac>
 800a96e:	bf00      	nop
 800a970:	0800c395 	.word	0x0800c395
 800a974:	0800c3a6 	.word	0x0800c3a6

0800a978 <__mcmp>:
 800a978:	b530      	push	{r4, r5, lr}
 800a97a:	6902      	ldr	r2, [r0, #16]
 800a97c:	690c      	ldr	r4, [r1, #16]
 800a97e:	1b12      	subs	r2, r2, r4
 800a980:	d10e      	bne.n	800a9a0 <__mcmp+0x28>
 800a982:	f100 0314 	add.w	r3, r0, #20
 800a986:	3114      	adds	r1, #20
 800a988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a98c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a998:	42a5      	cmp	r5, r4
 800a99a:	d003      	beq.n	800a9a4 <__mcmp+0x2c>
 800a99c:	d305      	bcc.n	800a9aa <__mcmp+0x32>
 800a99e:	2201      	movs	r2, #1
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	bd30      	pop	{r4, r5, pc}
 800a9a4:	4283      	cmp	r3, r0
 800a9a6:	d3f3      	bcc.n	800a990 <__mcmp+0x18>
 800a9a8:	e7fa      	b.n	800a9a0 <__mcmp+0x28>
 800a9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ae:	e7f7      	b.n	800a9a0 <__mcmp+0x28>

0800a9b0 <__mdiff>:
 800a9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4690      	mov	r8, r2
 800a9be:	f7ff ffdb 	bl	800a978 <__mcmp>
 800a9c2:	1e05      	subs	r5, r0, #0
 800a9c4:	d110      	bne.n	800a9e8 <__mdiff+0x38>
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff fd53 	bl	800a474 <_Balloc>
 800a9ce:	b930      	cbnz	r0, 800a9de <__mdiff+0x2e>
 800a9d0:	4b3a      	ldr	r3, [pc, #232]	; (800aabc <__mdiff+0x10c>)
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	f240 2132 	movw	r1, #562	; 0x232
 800a9d8:	4839      	ldr	r0, [pc, #228]	; (800aac0 <__mdiff+0x110>)
 800a9da:	f001 f853 	bl	800ba84 <__assert_func>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	bfa4      	itt	ge
 800a9ea:	4643      	movge	r3, r8
 800a9ec:	46a0      	movge	r8, r4
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9f4:	bfa6      	itte	ge
 800a9f6:	461c      	movge	r4, r3
 800a9f8:	2500      	movge	r5, #0
 800a9fa:	2501      	movlt	r5, #1
 800a9fc:	f7ff fd3a 	bl	800a474 <_Balloc>
 800aa00:	b920      	cbnz	r0, 800aa0c <__mdiff+0x5c>
 800aa02:	4b2e      	ldr	r3, [pc, #184]	; (800aabc <__mdiff+0x10c>)
 800aa04:	4602      	mov	r2, r0
 800aa06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa0a:	e7e5      	b.n	800a9d8 <__mdiff+0x28>
 800aa0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa10:	6926      	ldr	r6, [r4, #16]
 800aa12:	60c5      	str	r5, [r0, #12]
 800aa14:	f104 0914 	add.w	r9, r4, #20
 800aa18:	f108 0514 	add.w	r5, r8, #20
 800aa1c:	f100 0e14 	add.w	lr, r0, #20
 800aa20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa28:	f108 0210 	add.w	r2, r8, #16
 800aa2c:	46f2      	mov	sl, lr
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa38:	fa1f f883 	uxth.w	r8, r3
 800aa3c:	fa11 f18b 	uxtah	r1, r1, fp
 800aa40:	0c1b      	lsrs	r3, r3, #16
 800aa42:	eba1 0808 	sub.w	r8, r1, r8
 800aa46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa4e:	fa1f f888 	uxth.w	r8, r8
 800aa52:	1419      	asrs	r1, r3, #16
 800aa54:	454e      	cmp	r6, r9
 800aa56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa5a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa5e:	d8e7      	bhi.n	800aa30 <__mdiff+0x80>
 800aa60:	1b33      	subs	r3, r6, r4
 800aa62:	3b15      	subs	r3, #21
 800aa64:	f023 0303 	bic.w	r3, r3, #3
 800aa68:	3304      	adds	r3, #4
 800aa6a:	3415      	adds	r4, #21
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	bf38      	it	cc
 800aa70:	2304      	movcc	r3, #4
 800aa72:	441d      	add	r5, r3
 800aa74:	4473      	add	r3, lr
 800aa76:	469e      	mov	lr, r3
 800aa78:	462e      	mov	r6, r5
 800aa7a:	4566      	cmp	r6, ip
 800aa7c:	d30e      	bcc.n	800aa9c <__mdiff+0xec>
 800aa7e:	f10c 0203 	add.w	r2, ip, #3
 800aa82:	1b52      	subs	r2, r2, r5
 800aa84:	f022 0203 	bic.w	r2, r2, #3
 800aa88:	3d03      	subs	r5, #3
 800aa8a:	45ac      	cmp	ip, r5
 800aa8c:	bf38      	it	cc
 800aa8e:	2200      	movcc	r2, #0
 800aa90:	441a      	add	r2, r3
 800aa92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa96:	b17b      	cbz	r3, 800aab8 <__mdiff+0x108>
 800aa98:	6107      	str	r7, [r0, #16]
 800aa9a:	e7a3      	b.n	800a9e4 <__mdiff+0x34>
 800aa9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800aaa0:	fa11 f288 	uxtah	r2, r1, r8
 800aaa4:	1414      	asrs	r4, r2, #16
 800aaa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaaa:	b292      	uxth	r2, r2
 800aaac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aab0:	f84e 2b04 	str.w	r2, [lr], #4
 800aab4:	1421      	asrs	r1, r4, #16
 800aab6:	e7e0      	b.n	800aa7a <__mdiff+0xca>
 800aab8:	3f01      	subs	r7, #1
 800aaba:	e7ea      	b.n	800aa92 <__mdiff+0xe2>
 800aabc:	0800c395 	.word	0x0800c395
 800aac0:	0800c3a6 	.word	0x0800c3a6

0800aac4 <__d2b>:
 800aac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aac8:	4689      	mov	r9, r1
 800aaca:	2101      	movs	r1, #1
 800aacc:	ec57 6b10 	vmov	r6, r7, d0
 800aad0:	4690      	mov	r8, r2
 800aad2:	f7ff fccf 	bl	800a474 <_Balloc>
 800aad6:	4604      	mov	r4, r0
 800aad8:	b930      	cbnz	r0, 800aae8 <__d2b+0x24>
 800aada:	4602      	mov	r2, r0
 800aadc:	4b25      	ldr	r3, [pc, #148]	; (800ab74 <__d2b+0xb0>)
 800aade:	4826      	ldr	r0, [pc, #152]	; (800ab78 <__d2b+0xb4>)
 800aae0:	f240 310a 	movw	r1, #778	; 0x30a
 800aae4:	f000 ffce 	bl	800ba84 <__assert_func>
 800aae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aaec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aaf0:	bb35      	cbnz	r5, 800ab40 <__d2b+0x7c>
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	d028      	beq.n	800ab4a <__d2b+0x86>
 800aaf8:	4668      	mov	r0, sp
 800aafa:	9600      	str	r6, [sp, #0]
 800aafc:	f7ff fd82 	bl	800a604 <__lo0bits>
 800ab00:	9900      	ldr	r1, [sp, #0]
 800ab02:	b300      	cbz	r0, 800ab46 <__d2b+0x82>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f1c0 0320 	rsb	r3, r0, #32
 800ab0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0e:	430b      	orrs	r3, r1
 800ab10:	40c2      	lsrs	r2, r0
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	9201      	str	r2, [sp, #4]
 800ab16:	9b01      	ldr	r3, [sp, #4]
 800ab18:	61a3      	str	r3, [r4, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bf14      	ite	ne
 800ab1e:	2202      	movne	r2, #2
 800ab20:	2201      	moveq	r2, #1
 800ab22:	6122      	str	r2, [r4, #16]
 800ab24:	b1d5      	cbz	r5, 800ab5c <__d2b+0x98>
 800ab26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab2a:	4405      	add	r5, r0
 800ab2c:	f8c9 5000 	str.w	r5, [r9]
 800ab30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab34:	f8c8 0000 	str.w	r0, [r8]
 800ab38:	4620      	mov	r0, r4
 800ab3a:	b003      	add	sp, #12
 800ab3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab44:	e7d5      	b.n	800aaf2 <__d2b+0x2e>
 800ab46:	6161      	str	r1, [r4, #20]
 800ab48:	e7e5      	b.n	800ab16 <__d2b+0x52>
 800ab4a:	a801      	add	r0, sp, #4
 800ab4c:	f7ff fd5a 	bl	800a604 <__lo0bits>
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	6163      	str	r3, [r4, #20]
 800ab54:	2201      	movs	r2, #1
 800ab56:	6122      	str	r2, [r4, #16]
 800ab58:	3020      	adds	r0, #32
 800ab5a:	e7e3      	b.n	800ab24 <__d2b+0x60>
 800ab5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab64:	f8c9 0000 	str.w	r0, [r9]
 800ab68:	6918      	ldr	r0, [r3, #16]
 800ab6a:	f7ff fd2b 	bl	800a5c4 <__hi0bits>
 800ab6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab72:	e7df      	b.n	800ab34 <__d2b+0x70>
 800ab74:	0800c395 	.word	0x0800c395
 800ab78:	0800c3a6 	.word	0x0800c3a6

0800ab7c <_calloc_r>:
 800ab7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab7e:	fba1 2402 	umull	r2, r4, r1, r2
 800ab82:	b94c      	cbnz	r4, 800ab98 <_calloc_r+0x1c>
 800ab84:	4611      	mov	r1, r2
 800ab86:	9201      	str	r2, [sp, #4]
 800ab88:	f7fd fcaa 	bl	80084e0 <_malloc_r>
 800ab8c:	9a01      	ldr	r2, [sp, #4]
 800ab8e:	4605      	mov	r5, r0
 800ab90:	b930      	cbnz	r0, 800aba0 <_calloc_r+0x24>
 800ab92:	4628      	mov	r0, r5
 800ab94:	b003      	add	sp, #12
 800ab96:	bd30      	pop	{r4, r5, pc}
 800ab98:	220c      	movs	r2, #12
 800ab9a:	6002      	str	r2, [r0, #0]
 800ab9c:	2500      	movs	r5, #0
 800ab9e:	e7f8      	b.n	800ab92 <_calloc_r+0x16>
 800aba0:	4621      	mov	r1, r4
 800aba2:	f7fd fc74 	bl	800848e <memset>
 800aba6:	e7f4      	b.n	800ab92 <_calloc_r+0x16>

0800aba8 <_free_r>:
 800aba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abaa:	2900      	cmp	r1, #0
 800abac:	d044      	beq.n	800ac38 <_free_r+0x90>
 800abae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abb2:	9001      	str	r0, [sp, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f1a1 0404 	sub.w	r4, r1, #4
 800abba:	bfb8      	it	lt
 800abbc:	18e4      	addlt	r4, r4, r3
 800abbe:	f7ff fc4d 	bl	800a45c <__malloc_lock>
 800abc2:	4a1e      	ldr	r2, [pc, #120]	; (800ac3c <_free_r+0x94>)
 800abc4:	9801      	ldr	r0, [sp, #4]
 800abc6:	6813      	ldr	r3, [r2, #0]
 800abc8:	b933      	cbnz	r3, 800abd8 <_free_r+0x30>
 800abca:	6063      	str	r3, [r4, #4]
 800abcc:	6014      	str	r4, [r2, #0]
 800abce:	b003      	add	sp, #12
 800abd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abd4:	f7ff bc48 	b.w	800a468 <__malloc_unlock>
 800abd8:	42a3      	cmp	r3, r4
 800abda:	d908      	bls.n	800abee <_free_r+0x46>
 800abdc:	6825      	ldr	r5, [r4, #0]
 800abde:	1961      	adds	r1, r4, r5
 800abe0:	428b      	cmp	r3, r1
 800abe2:	bf01      	itttt	eq
 800abe4:	6819      	ldreq	r1, [r3, #0]
 800abe6:	685b      	ldreq	r3, [r3, #4]
 800abe8:	1949      	addeq	r1, r1, r5
 800abea:	6021      	streq	r1, [r4, #0]
 800abec:	e7ed      	b.n	800abca <_free_r+0x22>
 800abee:	461a      	mov	r2, r3
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	b10b      	cbz	r3, 800abf8 <_free_r+0x50>
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	d9fa      	bls.n	800abee <_free_r+0x46>
 800abf8:	6811      	ldr	r1, [r2, #0]
 800abfa:	1855      	adds	r5, r2, r1
 800abfc:	42a5      	cmp	r5, r4
 800abfe:	d10b      	bne.n	800ac18 <_free_r+0x70>
 800ac00:	6824      	ldr	r4, [r4, #0]
 800ac02:	4421      	add	r1, r4
 800ac04:	1854      	adds	r4, r2, r1
 800ac06:	42a3      	cmp	r3, r4
 800ac08:	6011      	str	r1, [r2, #0]
 800ac0a:	d1e0      	bne.n	800abce <_free_r+0x26>
 800ac0c:	681c      	ldr	r4, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	6053      	str	r3, [r2, #4]
 800ac12:	4421      	add	r1, r4
 800ac14:	6011      	str	r1, [r2, #0]
 800ac16:	e7da      	b.n	800abce <_free_r+0x26>
 800ac18:	d902      	bls.n	800ac20 <_free_r+0x78>
 800ac1a:	230c      	movs	r3, #12
 800ac1c:	6003      	str	r3, [r0, #0]
 800ac1e:	e7d6      	b.n	800abce <_free_r+0x26>
 800ac20:	6825      	ldr	r5, [r4, #0]
 800ac22:	1961      	adds	r1, r4, r5
 800ac24:	428b      	cmp	r3, r1
 800ac26:	bf04      	itt	eq
 800ac28:	6819      	ldreq	r1, [r3, #0]
 800ac2a:	685b      	ldreq	r3, [r3, #4]
 800ac2c:	6063      	str	r3, [r4, #4]
 800ac2e:	bf04      	itt	eq
 800ac30:	1949      	addeq	r1, r1, r5
 800ac32:	6021      	streq	r1, [r4, #0]
 800ac34:	6054      	str	r4, [r2, #4]
 800ac36:	e7ca      	b.n	800abce <_free_r+0x26>
 800ac38:	b003      	add	sp, #12
 800ac3a:	bd30      	pop	{r4, r5, pc}
 800ac3c:	200044c8 	.word	0x200044c8

0800ac40 <__sfputc_r>:
 800ac40:	6893      	ldr	r3, [r2, #8]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	b410      	push	{r4}
 800ac48:	6093      	str	r3, [r2, #8]
 800ac4a:	da08      	bge.n	800ac5e <__sfputc_r+0x1e>
 800ac4c:	6994      	ldr	r4, [r2, #24]
 800ac4e:	42a3      	cmp	r3, r4
 800ac50:	db01      	blt.n	800ac56 <__sfputc_r+0x16>
 800ac52:	290a      	cmp	r1, #10
 800ac54:	d103      	bne.n	800ac5e <__sfputc_r+0x1e>
 800ac56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac5a:	f7fe bb49 	b.w	80092f0 <__swbuf_r>
 800ac5e:	6813      	ldr	r3, [r2, #0]
 800ac60:	1c58      	adds	r0, r3, #1
 800ac62:	6010      	str	r0, [r2, #0]
 800ac64:	7019      	strb	r1, [r3, #0]
 800ac66:	4608      	mov	r0, r1
 800ac68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <__sfputs_r>:
 800ac6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac70:	4606      	mov	r6, r0
 800ac72:	460f      	mov	r7, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	18d5      	adds	r5, r2, r3
 800ac78:	42ac      	cmp	r4, r5
 800ac7a:	d101      	bne.n	800ac80 <__sfputs_r+0x12>
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	e007      	b.n	800ac90 <__sfputs_r+0x22>
 800ac80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac84:	463a      	mov	r2, r7
 800ac86:	4630      	mov	r0, r6
 800ac88:	f7ff ffda 	bl	800ac40 <__sfputc_r>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d1f3      	bne.n	800ac78 <__sfputs_r+0xa>
 800ac90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac94 <_vfiprintf_r>:
 800ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	460d      	mov	r5, r1
 800ac9a:	b09d      	sub	sp, #116	; 0x74
 800ac9c:	4614      	mov	r4, r2
 800ac9e:	4698      	mov	r8, r3
 800aca0:	4606      	mov	r6, r0
 800aca2:	b118      	cbz	r0, 800acac <_vfiprintf_r+0x18>
 800aca4:	6983      	ldr	r3, [r0, #24]
 800aca6:	b90b      	cbnz	r3, 800acac <_vfiprintf_r+0x18>
 800aca8:	f7fd fb02 	bl	80082b0 <__sinit>
 800acac:	4b89      	ldr	r3, [pc, #548]	; (800aed4 <_vfiprintf_r+0x240>)
 800acae:	429d      	cmp	r5, r3
 800acb0:	d11b      	bne.n	800acea <_vfiprintf_r+0x56>
 800acb2:	6875      	ldr	r5, [r6, #4]
 800acb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acb6:	07d9      	lsls	r1, r3, #31
 800acb8:	d405      	bmi.n	800acc6 <_vfiprintf_r+0x32>
 800acba:	89ab      	ldrh	r3, [r5, #12]
 800acbc:	059a      	lsls	r2, r3, #22
 800acbe:	d402      	bmi.n	800acc6 <_vfiprintf_r+0x32>
 800acc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acc2:	f7fd fbd4 	bl	800846e <__retarget_lock_acquire_recursive>
 800acc6:	89ab      	ldrh	r3, [r5, #12]
 800acc8:	071b      	lsls	r3, r3, #28
 800acca:	d501      	bpl.n	800acd0 <_vfiprintf_r+0x3c>
 800accc:	692b      	ldr	r3, [r5, #16]
 800acce:	b9eb      	cbnz	r3, 800ad0c <_vfiprintf_r+0x78>
 800acd0:	4629      	mov	r1, r5
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7fe fb70 	bl	80093b8 <__swsetup_r>
 800acd8:	b1c0      	cbz	r0, 800ad0c <_vfiprintf_r+0x78>
 800acda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acdc:	07dc      	lsls	r4, r3, #31
 800acde:	d50e      	bpl.n	800acfe <_vfiprintf_r+0x6a>
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	b01d      	add	sp, #116	; 0x74
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acea:	4b7b      	ldr	r3, [pc, #492]	; (800aed8 <_vfiprintf_r+0x244>)
 800acec:	429d      	cmp	r5, r3
 800acee:	d101      	bne.n	800acf4 <_vfiprintf_r+0x60>
 800acf0:	68b5      	ldr	r5, [r6, #8]
 800acf2:	e7df      	b.n	800acb4 <_vfiprintf_r+0x20>
 800acf4:	4b79      	ldr	r3, [pc, #484]	; (800aedc <_vfiprintf_r+0x248>)
 800acf6:	429d      	cmp	r5, r3
 800acf8:	bf08      	it	eq
 800acfa:	68f5      	ldreq	r5, [r6, #12]
 800acfc:	e7da      	b.n	800acb4 <_vfiprintf_r+0x20>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	0598      	lsls	r0, r3, #22
 800ad02:	d4ed      	bmi.n	800ace0 <_vfiprintf_r+0x4c>
 800ad04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad06:	f7fd fbb3 	bl	8008470 <__retarget_lock_release_recursive>
 800ad0a:	e7e9      	b.n	800ace0 <_vfiprintf_r+0x4c>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad10:	2320      	movs	r3, #32
 800ad12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad1a:	2330      	movs	r3, #48	; 0x30
 800ad1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aee0 <_vfiprintf_r+0x24c>
 800ad20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad24:	f04f 0901 	mov.w	r9, #1
 800ad28:	4623      	mov	r3, r4
 800ad2a:	469a      	mov	sl, r3
 800ad2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad30:	b10a      	cbz	r2, 800ad36 <_vfiprintf_r+0xa2>
 800ad32:	2a25      	cmp	r2, #37	; 0x25
 800ad34:	d1f9      	bne.n	800ad2a <_vfiprintf_r+0x96>
 800ad36:	ebba 0b04 	subs.w	fp, sl, r4
 800ad3a:	d00b      	beq.n	800ad54 <_vfiprintf_r+0xc0>
 800ad3c:	465b      	mov	r3, fp
 800ad3e:	4622      	mov	r2, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	4630      	mov	r0, r6
 800ad44:	f7ff ff93 	bl	800ac6e <__sfputs_r>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f000 80aa 	beq.w	800aea2 <_vfiprintf_r+0x20e>
 800ad4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad50:	445a      	add	r2, fp
 800ad52:	9209      	str	r2, [sp, #36]	; 0x24
 800ad54:	f89a 3000 	ldrb.w	r3, [sl]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 80a2 	beq.w	800aea2 <_vfiprintf_r+0x20e>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f04f 32ff 	mov.w	r2, #4294967295
 800ad64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad68:	f10a 0a01 	add.w	sl, sl, #1
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	9307      	str	r3, [sp, #28]
 800ad70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad74:	931a      	str	r3, [sp, #104]	; 0x68
 800ad76:	4654      	mov	r4, sl
 800ad78:	2205      	movs	r2, #5
 800ad7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7e:	4858      	ldr	r0, [pc, #352]	; (800aee0 <_vfiprintf_r+0x24c>)
 800ad80:	f7f5 fa4e 	bl	8000220 <memchr>
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	b9d8      	cbnz	r0, 800adc0 <_vfiprintf_r+0x12c>
 800ad88:	06d1      	lsls	r1, r2, #27
 800ad8a:	bf44      	itt	mi
 800ad8c:	2320      	movmi	r3, #32
 800ad8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad92:	0713      	lsls	r3, r2, #28
 800ad94:	bf44      	itt	mi
 800ad96:	232b      	movmi	r3, #43	; 0x2b
 800ad98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9c:	f89a 3000 	ldrb.w	r3, [sl]
 800ada0:	2b2a      	cmp	r3, #42	; 0x2a
 800ada2:	d015      	beq.n	800add0 <_vfiprintf_r+0x13c>
 800ada4:	9a07      	ldr	r2, [sp, #28]
 800ada6:	4654      	mov	r4, sl
 800ada8:	2000      	movs	r0, #0
 800adaa:	f04f 0c0a 	mov.w	ip, #10
 800adae:	4621      	mov	r1, r4
 800adb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb4:	3b30      	subs	r3, #48	; 0x30
 800adb6:	2b09      	cmp	r3, #9
 800adb8:	d94e      	bls.n	800ae58 <_vfiprintf_r+0x1c4>
 800adba:	b1b0      	cbz	r0, 800adea <_vfiprintf_r+0x156>
 800adbc:	9207      	str	r2, [sp, #28]
 800adbe:	e014      	b.n	800adea <_vfiprintf_r+0x156>
 800adc0:	eba0 0308 	sub.w	r3, r0, r8
 800adc4:	fa09 f303 	lsl.w	r3, r9, r3
 800adc8:	4313      	orrs	r3, r2
 800adca:	9304      	str	r3, [sp, #16]
 800adcc:	46a2      	mov	sl, r4
 800adce:	e7d2      	b.n	800ad76 <_vfiprintf_r+0xe2>
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	1d19      	adds	r1, r3, #4
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	9103      	str	r1, [sp, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfbb      	ittet	lt
 800addc:	425b      	neglt	r3, r3
 800adde:	f042 0202 	orrlt.w	r2, r2, #2
 800ade2:	9307      	strge	r3, [sp, #28]
 800ade4:	9307      	strlt	r3, [sp, #28]
 800ade6:	bfb8      	it	lt
 800ade8:	9204      	strlt	r2, [sp, #16]
 800adea:	7823      	ldrb	r3, [r4, #0]
 800adec:	2b2e      	cmp	r3, #46	; 0x2e
 800adee:	d10c      	bne.n	800ae0a <_vfiprintf_r+0x176>
 800adf0:	7863      	ldrb	r3, [r4, #1]
 800adf2:	2b2a      	cmp	r3, #42	; 0x2a
 800adf4:	d135      	bne.n	800ae62 <_vfiprintf_r+0x1ce>
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	1d1a      	adds	r2, r3, #4
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	9203      	str	r2, [sp, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfb8      	it	lt
 800ae02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae06:	3402      	adds	r4, #2
 800ae08:	9305      	str	r3, [sp, #20]
 800ae0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aef0 <_vfiprintf_r+0x25c>
 800ae0e:	7821      	ldrb	r1, [r4, #0]
 800ae10:	2203      	movs	r2, #3
 800ae12:	4650      	mov	r0, sl
 800ae14:	f7f5 fa04 	bl	8000220 <memchr>
 800ae18:	b140      	cbz	r0, 800ae2c <_vfiprintf_r+0x198>
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	eba0 000a 	sub.w	r0, r0, sl
 800ae20:	fa03 f000 	lsl.w	r0, r3, r0
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	4303      	orrs	r3, r0
 800ae28:	3401      	adds	r4, #1
 800ae2a:	9304      	str	r3, [sp, #16]
 800ae2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae30:	482c      	ldr	r0, [pc, #176]	; (800aee4 <_vfiprintf_r+0x250>)
 800ae32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae36:	2206      	movs	r2, #6
 800ae38:	f7f5 f9f2 	bl	8000220 <memchr>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d03f      	beq.n	800aec0 <_vfiprintf_r+0x22c>
 800ae40:	4b29      	ldr	r3, [pc, #164]	; (800aee8 <_vfiprintf_r+0x254>)
 800ae42:	bb1b      	cbnz	r3, 800ae8c <_vfiprintf_r+0x1f8>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	3307      	adds	r3, #7
 800ae48:	f023 0307 	bic.w	r3, r3, #7
 800ae4c:	3308      	adds	r3, #8
 800ae4e:	9303      	str	r3, [sp, #12]
 800ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae52:	443b      	add	r3, r7
 800ae54:	9309      	str	r3, [sp, #36]	; 0x24
 800ae56:	e767      	b.n	800ad28 <_vfiprintf_r+0x94>
 800ae58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	2001      	movs	r0, #1
 800ae60:	e7a5      	b.n	800adae <_vfiprintf_r+0x11a>
 800ae62:	2300      	movs	r3, #0
 800ae64:	3401      	adds	r4, #1
 800ae66:	9305      	str	r3, [sp, #20]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	f04f 0c0a 	mov.w	ip, #10
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae74:	3a30      	subs	r2, #48	; 0x30
 800ae76:	2a09      	cmp	r2, #9
 800ae78:	d903      	bls.n	800ae82 <_vfiprintf_r+0x1ee>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0c5      	beq.n	800ae0a <_vfiprintf_r+0x176>
 800ae7e:	9105      	str	r1, [sp, #20]
 800ae80:	e7c3      	b.n	800ae0a <_vfiprintf_r+0x176>
 800ae82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae86:	4604      	mov	r4, r0
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e7f0      	b.n	800ae6e <_vfiprintf_r+0x1da>
 800ae8c:	ab03      	add	r3, sp, #12
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	462a      	mov	r2, r5
 800ae92:	4b16      	ldr	r3, [pc, #88]	; (800aeec <_vfiprintf_r+0x258>)
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7fd fc36 	bl	8008708 <_printf_float>
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	1c78      	adds	r0, r7, #1
 800aea0:	d1d6      	bne.n	800ae50 <_vfiprintf_r+0x1bc>
 800aea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea4:	07d9      	lsls	r1, r3, #31
 800aea6:	d405      	bmi.n	800aeb4 <_vfiprintf_r+0x220>
 800aea8:	89ab      	ldrh	r3, [r5, #12]
 800aeaa:	059a      	lsls	r2, r3, #22
 800aeac:	d402      	bmi.n	800aeb4 <_vfiprintf_r+0x220>
 800aeae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb0:	f7fd fade 	bl	8008470 <__retarget_lock_release_recursive>
 800aeb4:	89ab      	ldrh	r3, [r5, #12]
 800aeb6:	065b      	lsls	r3, r3, #25
 800aeb8:	f53f af12 	bmi.w	800ace0 <_vfiprintf_r+0x4c>
 800aebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aebe:	e711      	b.n	800ace4 <_vfiprintf_r+0x50>
 800aec0:	ab03      	add	r3, sp, #12
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	462a      	mov	r2, r5
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <_vfiprintf_r+0x258>)
 800aec8:	a904      	add	r1, sp, #16
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7fd fec0 	bl	8008c50 <_printf_i>
 800aed0:	e7e4      	b.n	800ae9c <_vfiprintf_r+0x208>
 800aed2:	bf00      	nop
 800aed4:	0800c2a0 	.word	0x0800c2a0
 800aed8:	0800c2c0 	.word	0x0800c2c0
 800aedc:	0800c280 	.word	0x0800c280
 800aee0:	0800c504 	.word	0x0800c504
 800aee4:	0800c50e 	.word	0x0800c50e
 800aee8:	08008709 	.word	0x08008709
 800aeec:	0800ac6f 	.word	0x0800ac6f
 800aef0:	0800c50a 	.word	0x0800c50a

0800aef4 <__svfiscanf_r>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	461d      	mov	r5, r3
 800aefa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800aefc:	07df      	lsls	r7, r3, #31
 800aefe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800af02:	4606      	mov	r6, r0
 800af04:	460c      	mov	r4, r1
 800af06:	4692      	mov	sl, r2
 800af08:	d405      	bmi.n	800af16 <__svfiscanf_r+0x22>
 800af0a:	898b      	ldrh	r3, [r1, #12]
 800af0c:	0598      	lsls	r0, r3, #22
 800af0e:	d402      	bmi.n	800af16 <__svfiscanf_r+0x22>
 800af10:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800af12:	f7fd faac 	bl	800846e <__retarget_lock_acquire_recursive>
 800af16:	2300      	movs	r3, #0
 800af18:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800af1c:	4ba6      	ldr	r3, [pc, #664]	; (800b1b8 <__svfiscanf_r+0x2c4>)
 800af1e:	93a0      	str	r3, [sp, #640]	; 0x280
 800af20:	f10d 0804 	add.w	r8, sp, #4
 800af24:	4ba5      	ldr	r3, [pc, #660]	; (800b1bc <__svfiscanf_r+0x2c8>)
 800af26:	4fa6      	ldr	r7, [pc, #664]	; (800b1c0 <__svfiscanf_r+0x2cc>)
 800af28:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b1c4 <__svfiscanf_r+0x2d0>
 800af2c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800af30:	93a1      	str	r3, [sp, #644]	; 0x284
 800af32:	9500      	str	r5, [sp, #0]
 800af34:	f89a 3000 	ldrb.w	r3, [sl]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8173 	beq.w	800b224 <__svfiscanf_r+0x330>
 800af3e:	5dd9      	ldrb	r1, [r3, r7]
 800af40:	f011 0108 	ands.w	r1, r1, #8
 800af44:	f10a 0501 	add.w	r5, sl, #1
 800af48:	d019      	beq.n	800af7e <__svfiscanf_r+0x8a>
 800af4a:	6863      	ldr	r3, [r4, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dd0f      	ble.n	800af70 <__svfiscanf_r+0x7c>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	5cba      	ldrb	r2, [r7, r2]
 800af56:	0711      	lsls	r1, r2, #28
 800af58:	d401      	bmi.n	800af5e <__svfiscanf_r+0x6a>
 800af5a:	46aa      	mov	sl, r5
 800af5c:	e7ea      	b.n	800af34 <__svfiscanf_r+0x40>
 800af5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af60:	3201      	adds	r2, #1
 800af62:	9245      	str	r2, [sp, #276]	; 0x114
 800af64:	6862      	ldr	r2, [r4, #4]
 800af66:	3301      	adds	r3, #1
 800af68:	3a01      	subs	r2, #1
 800af6a:	6062      	str	r2, [r4, #4]
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	e7ec      	b.n	800af4a <__svfiscanf_r+0x56>
 800af70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af72:	4621      	mov	r1, r4
 800af74:	4630      	mov	r0, r6
 800af76:	4798      	blx	r3
 800af78:	2800      	cmp	r0, #0
 800af7a:	d0e9      	beq.n	800af50 <__svfiscanf_r+0x5c>
 800af7c:	e7ed      	b.n	800af5a <__svfiscanf_r+0x66>
 800af7e:	2b25      	cmp	r3, #37	; 0x25
 800af80:	d012      	beq.n	800afa8 <__svfiscanf_r+0xb4>
 800af82:	469a      	mov	sl, r3
 800af84:	6863      	ldr	r3, [r4, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	f340 8095 	ble.w	800b0b6 <__svfiscanf_r+0x1c2>
 800af8c:	6822      	ldr	r2, [r4, #0]
 800af8e:	7813      	ldrb	r3, [r2, #0]
 800af90:	4553      	cmp	r3, sl
 800af92:	f040 8147 	bne.w	800b224 <__svfiscanf_r+0x330>
 800af96:	6863      	ldr	r3, [r4, #4]
 800af98:	3b01      	subs	r3, #1
 800af9a:	6063      	str	r3, [r4, #4]
 800af9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af9e:	3201      	adds	r2, #1
 800afa0:	3301      	adds	r3, #1
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	9345      	str	r3, [sp, #276]	; 0x114
 800afa6:	e7d8      	b.n	800af5a <__svfiscanf_r+0x66>
 800afa8:	9141      	str	r1, [sp, #260]	; 0x104
 800afaa:	9143      	str	r1, [sp, #268]	; 0x10c
 800afac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800afb0:	2b2a      	cmp	r3, #42	; 0x2a
 800afb2:	bf02      	ittt	eq
 800afb4:	2310      	moveq	r3, #16
 800afb6:	9341      	streq	r3, [sp, #260]	; 0x104
 800afb8:	f10a 0502 	addeq.w	r5, sl, #2
 800afbc:	220a      	movs	r2, #10
 800afbe:	46aa      	mov	sl, r5
 800afc0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800afc4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800afc8:	2b09      	cmp	r3, #9
 800afca:	d91e      	bls.n	800b00a <__svfiscanf_r+0x116>
 800afcc:	487d      	ldr	r0, [pc, #500]	; (800b1c4 <__svfiscanf_r+0x2d0>)
 800afce:	2203      	movs	r2, #3
 800afd0:	f7f5 f926 	bl	8000220 <memchr>
 800afd4:	b140      	cbz	r0, 800afe8 <__svfiscanf_r+0xf4>
 800afd6:	2301      	movs	r3, #1
 800afd8:	eba0 0009 	sub.w	r0, r0, r9
 800afdc:	fa03 f000 	lsl.w	r0, r3, r0
 800afe0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afe2:	4318      	orrs	r0, r3
 800afe4:	9041      	str	r0, [sp, #260]	; 0x104
 800afe6:	4655      	mov	r5, sl
 800afe8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afec:	2b78      	cmp	r3, #120	; 0x78
 800afee:	d807      	bhi.n	800b000 <__svfiscanf_r+0x10c>
 800aff0:	2b57      	cmp	r3, #87	; 0x57
 800aff2:	d811      	bhi.n	800b018 <__svfiscanf_r+0x124>
 800aff4:	2b25      	cmp	r3, #37	; 0x25
 800aff6:	d0c4      	beq.n	800af82 <__svfiscanf_r+0x8e>
 800aff8:	d858      	bhi.n	800b0ac <__svfiscanf_r+0x1b8>
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 80c8 	beq.w	800b190 <__svfiscanf_r+0x29c>
 800b000:	2303      	movs	r3, #3
 800b002:	9347      	str	r3, [sp, #284]	; 0x11c
 800b004:	230a      	movs	r3, #10
 800b006:	9342      	str	r3, [sp, #264]	; 0x108
 800b008:	e07c      	b.n	800b104 <__svfiscanf_r+0x210>
 800b00a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b00c:	fb02 1103 	mla	r1, r2, r3, r1
 800b010:	3930      	subs	r1, #48	; 0x30
 800b012:	9143      	str	r1, [sp, #268]	; 0x10c
 800b014:	4655      	mov	r5, sl
 800b016:	e7d2      	b.n	800afbe <__svfiscanf_r+0xca>
 800b018:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b01c:	2a20      	cmp	r2, #32
 800b01e:	d8ef      	bhi.n	800b000 <__svfiscanf_r+0x10c>
 800b020:	a101      	add	r1, pc, #4	; (adr r1, 800b028 <__svfiscanf_r+0x134>)
 800b022:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b026:	bf00      	nop
 800b028:	0800b0ef 	.word	0x0800b0ef
 800b02c:	0800b001 	.word	0x0800b001
 800b030:	0800b001 	.word	0x0800b001
 800b034:	0800b14d 	.word	0x0800b14d
 800b038:	0800b001 	.word	0x0800b001
 800b03c:	0800b001 	.word	0x0800b001
 800b040:	0800b001 	.word	0x0800b001
 800b044:	0800b001 	.word	0x0800b001
 800b048:	0800b001 	.word	0x0800b001
 800b04c:	0800b001 	.word	0x0800b001
 800b050:	0800b001 	.word	0x0800b001
 800b054:	0800b163 	.word	0x0800b163
 800b058:	0800b139 	.word	0x0800b139
 800b05c:	0800b0b3 	.word	0x0800b0b3
 800b060:	0800b0b3 	.word	0x0800b0b3
 800b064:	0800b0b3 	.word	0x0800b0b3
 800b068:	0800b001 	.word	0x0800b001
 800b06c:	0800b13d 	.word	0x0800b13d
 800b070:	0800b001 	.word	0x0800b001
 800b074:	0800b001 	.word	0x0800b001
 800b078:	0800b001 	.word	0x0800b001
 800b07c:	0800b001 	.word	0x0800b001
 800b080:	0800b173 	.word	0x0800b173
 800b084:	0800b145 	.word	0x0800b145
 800b088:	0800b0e7 	.word	0x0800b0e7
 800b08c:	0800b001 	.word	0x0800b001
 800b090:	0800b001 	.word	0x0800b001
 800b094:	0800b16f 	.word	0x0800b16f
 800b098:	0800b001 	.word	0x0800b001
 800b09c:	0800b139 	.word	0x0800b139
 800b0a0:	0800b001 	.word	0x0800b001
 800b0a4:	0800b001 	.word	0x0800b001
 800b0a8:	0800b0ef 	.word	0x0800b0ef
 800b0ac:	3b45      	subs	r3, #69	; 0x45
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d8a6      	bhi.n	800b000 <__svfiscanf_r+0x10c>
 800b0b2:	2305      	movs	r3, #5
 800b0b4:	e025      	b.n	800b102 <__svfiscanf_r+0x20e>
 800b0b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	4798      	blx	r3
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f43f af64 	beq.w	800af8c <__svfiscanf_r+0x98>
 800b0c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0c6:	07da      	lsls	r2, r3, #31
 800b0c8:	f140 80a4 	bpl.w	800b214 <__svfiscanf_r+0x320>
 800b0cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d067      	beq.n	800b1a2 <__svfiscanf_r+0x2ae>
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0d8:	bf18      	it	ne
 800b0da:	f04f 30ff 	movne.w	r0, #4294967295
 800b0de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0e8:	f042 0220 	orr.w	r2, r2, #32
 800b0ec:	9241      	str	r2, [sp, #260]	; 0x104
 800b0ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0f4:	9241      	str	r2, [sp, #260]	; 0x104
 800b0f6:	2210      	movs	r2, #16
 800b0f8:	2b6f      	cmp	r3, #111	; 0x6f
 800b0fa:	9242      	str	r2, [sp, #264]	; 0x108
 800b0fc:	bf34      	ite	cc
 800b0fe:	2303      	movcc	r3, #3
 800b100:	2304      	movcs	r3, #4
 800b102:	9347      	str	r3, [sp, #284]	; 0x11c
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	dd4e      	ble.n	800b1a8 <__svfiscanf_r+0x2b4>
 800b10a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b10c:	065b      	lsls	r3, r3, #25
 800b10e:	d404      	bmi.n	800b11a <__svfiscanf_r+0x226>
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	5cba      	ldrb	r2, [r7, r2]
 800b116:	0710      	lsls	r0, r2, #28
 800b118:	d456      	bmi.n	800b1c8 <__svfiscanf_r+0x2d4>
 800b11a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	dc65      	bgt.n	800b1ec <__svfiscanf_r+0x2f8>
 800b120:	466b      	mov	r3, sp
 800b122:	4622      	mov	r2, r4
 800b124:	a941      	add	r1, sp, #260	; 0x104
 800b126:	4630      	mov	r0, r6
 800b128:	f000 f8b2 	bl	800b290 <_scanf_chars>
 800b12c:	2801      	cmp	r0, #1
 800b12e:	d079      	beq.n	800b224 <__svfiscanf_r+0x330>
 800b130:	2802      	cmp	r0, #2
 800b132:	f47f af12 	bne.w	800af5a <__svfiscanf_r+0x66>
 800b136:	e7c5      	b.n	800b0c4 <__svfiscanf_r+0x1d0>
 800b138:	220a      	movs	r2, #10
 800b13a:	e7dd      	b.n	800b0f8 <__svfiscanf_r+0x204>
 800b13c:	2300      	movs	r3, #0
 800b13e:	9342      	str	r3, [sp, #264]	; 0x108
 800b140:	2303      	movs	r3, #3
 800b142:	e7de      	b.n	800b102 <__svfiscanf_r+0x20e>
 800b144:	2308      	movs	r3, #8
 800b146:	9342      	str	r3, [sp, #264]	; 0x108
 800b148:	2304      	movs	r3, #4
 800b14a:	e7da      	b.n	800b102 <__svfiscanf_r+0x20e>
 800b14c:	4629      	mov	r1, r5
 800b14e:	4640      	mov	r0, r8
 800b150:	f000 fa96 	bl	800b680 <__sccl>
 800b154:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15a:	9341      	str	r3, [sp, #260]	; 0x104
 800b15c:	4605      	mov	r5, r0
 800b15e:	2301      	movs	r3, #1
 800b160:	e7cf      	b.n	800b102 <__svfiscanf_r+0x20e>
 800b162:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b168:	9341      	str	r3, [sp, #260]	; 0x104
 800b16a:	2300      	movs	r3, #0
 800b16c:	e7c9      	b.n	800b102 <__svfiscanf_r+0x20e>
 800b16e:	2302      	movs	r3, #2
 800b170:	e7c7      	b.n	800b102 <__svfiscanf_r+0x20e>
 800b172:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b174:	06c3      	lsls	r3, r0, #27
 800b176:	f53f aef0 	bmi.w	800af5a <__svfiscanf_r+0x66>
 800b17a:	9b00      	ldr	r3, [sp, #0]
 800b17c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b17e:	1d19      	adds	r1, r3, #4
 800b180:	9100      	str	r1, [sp, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f010 0f01 	tst.w	r0, #1
 800b188:	bf14      	ite	ne
 800b18a:	801a      	strhne	r2, [r3, #0]
 800b18c:	601a      	streq	r2, [r3, #0]
 800b18e:	e6e4      	b.n	800af5a <__svfiscanf_r+0x66>
 800b190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b192:	07d8      	lsls	r0, r3, #31
 800b194:	d405      	bmi.n	800b1a2 <__svfiscanf_r+0x2ae>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	0599      	lsls	r1, r3, #22
 800b19a:	d402      	bmi.n	800b1a2 <__svfiscanf_r+0x2ae>
 800b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19e:	f7fd f967 	bl	8008470 <__retarget_lock_release_recursive>
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a6:	e79a      	b.n	800b0de <__svfiscanf_r+0x1ea>
 800b1a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	4798      	blx	r3
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d0aa      	beq.n	800b10a <__svfiscanf_r+0x216>
 800b1b4:	e786      	b.n	800b0c4 <__svfiscanf_r+0x1d0>
 800b1b6:	bf00      	nop
 800b1b8:	0800b955 	.word	0x0800b955
 800b1bc:	0800b56d 	.word	0x0800b56d
 800b1c0:	0800c56d 	.word	0x0800c56d
 800b1c4:	0800c50a 	.word	0x0800c50a
 800b1c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b1ca:	3201      	adds	r2, #1
 800b1cc:	9245      	str	r2, [sp, #276]	; 0x114
 800b1ce:	6862      	ldr	r2, [r4, #4]
 800b1d0:	3a01      	subs	r2, #1
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	6062      	str	r2, [r4, #4]
 800b1d6:	dd02      	ble.n	800b1de <__svfiscanf_r+0x2ea>
 800b1d8:	3301      	adds	r3, #1
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	e798      	b.n	800b110 <__svfiscanf_r+0x21c>
 800b1de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	4798      	blx	r3
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d092      	beq.n	800b110 <__svfiscanf_r+0x21c>
 800b1ea:	e76b      	b.n	800b0c4 <__svfiscanf_r+0x1d0>
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	dc06      	bgt.n	800b1fe <__svfiscanf_r+0x30a>
 800b1f0:	466b      	mov	r3, sp
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	a941      	add	r1, sp, #260	; 0x104
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 f8a4 	bl	800b344 <_scanf_i>
 800b1fc:	e796      	b.n	800b12c <__svfiscanf_r+0x238>
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <__svfiscanf_r+0x348>)
 800b200:	2b00      	cmp	r3, #0
 800b202:	f43f aeaa 	beq.w	800af5a <__svfiscanf_r+0x66>
 800b206:	466b      	mov	r3, sp
 800b208:	4622      	mov	r2, r4
 800b20a:	a941      	add	r1, sp, #260	; 0x104
 800b20c:	4630      	mov	r0, r6
 800b20e:	f3af 8000 	nop.w
 800b212:	e78b      	b.n	800b12c <__svfiscanf_r+0x238>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	0599      	lsls	r1, r3, #22
 800b218:	f53f af58 	bmi.w	800b0cc <__svfiscanf_r+0x1d8>
 800b21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b21e:	f7fd f927 	bl	8008470 <__retarget_lock_release_recursive>
 800b222:	e753      	b.n	800b0cc <__svfiscanf_r+0x1d8>
 800b224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b226:	07da      	lsls	r2, r3, #31
 800b228:	d405      	bmi.n	800b236 <__svfiscanf_r+0x342>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	059b      	lsls	r3, r3, #22
 800b22e:	d402      	bmi.n	800b236 <__svfiscanf_r+0x342>
 800b230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b232:	f7fd f91d 	bl	8008470 <__retarget_lock_release_recursive>
 800b236:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b238:	e751      	b.n	800b0de <__svfiscanf_r+0x1ea>
 800b23a:	bf00      	nop
 800b23c:	00000000 	.word	0x00000000

0800b240 <_vfiscanf_r>:
 800b240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b242:	460c      	mov	r4, r1
 800b244:	4605      	mov	r5, r0
 800b246:	b138      	cbz	r0, 800b258 <_vfiscanf_r+0x18>
 800b248:	6981      	ldr	r1, [r0, #24]
 800b24a:	b929      	cbnz	r1, 800b258 <_vfiscanf_r+0x18>
 800b24c:	e9cd 2300 	strd	r2, r3, [sp]
 800b250:	f7fd f82e 	bl	80082b0 <__sinit>
 800b254:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b258:	490a      	ldr	r1, [pc, #40]	; (800b284 <_vfiscanf_r+0x44>)
 800b25a:	428c      	cmp	r4, r1
 800b25c:	d107      	bne.n	800b26e <_vfiscanf_r+0x2e>
 800b25e:	686c      	ldr	r4, [r5, #4]
 800b260:	4621      	mov	r1, r4
 800b262:	4628      	mov	r0, r5
 800b264:	b003      	add	sp, #12
 800b266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b26a:	f7ff be43 	b.w	800aef4 <__svfiscanf_r>
 800b26e:	4906      	ldr	r1, [pc, #24]	; (800b288 <_vfiscanf_r+0x48>)
 800b270:	428c      	cmp	r4, r1
 800b272:	d101      	bne.n	800b278 <_vfiscanf_r+0x38>
 800b274:	68ac      	ldr	r4, [r5, #8]
 800b276:	e7f3      	b.n	800b260 <_vfiscanf_r+0x20>
 800b278:	4904      	ldr	r1, [pc, #16]	; (800b28c <_vfiscanf_r+0x4c>)
 800b27a:	428c      	cmp	r4, r1
 800b27c:	bf08      	it	eq
 800b27e:	68ec      	ldreq	r4, [r5, #12]
 800b280:	e7ee      	b.n	800b260 <_vfiscanf_r+0x20>
 800b282:	bf00      	nop
 800b284:	0800c2a0 	.word	0x0800c2a0
 800b288:	0800c2c0 	.word	0x0800c2c0
 800b28c:	0800c280 	.word	0x0800c280

0800b290 <_scanf_chars>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	4615      	mov	r5, r2
 800b296:	688a      	ldr	r2, [r1, #8]
 800b298:	4680      	mov	r8, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b932      	cbnz	r2, 800b2ac <_scanf_chars+0x1c>
 800b29e:	698a      	ldr	r2, [r1, #24]
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	bf0c      	ite	eq
 800b2a4:	2201      	moveq	r2, #1
 800b2a6:	f04f 32ff 	movne.w	r2, #4294967295
 800b2aa:	608a      	str	r2, [r1, #8]
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b340 <_scanf_chars+0xb0>
 800b2b2:	06d1      	lsls	r1, r2, #27
 800b2b4:	bf5f      	itttt	pl
 800b2b6:	681a      	ldrpl	r2, [r3, #0]
 800b2b8:	1d11      	addpl	r1, r2, #4
 800b2ba:	6019      	strpl	r1, [r3, #0]
 800b2bc:	6816      	ldrpl	r6, [r2, #0]
 800b2be:	2700      	movs	r7, #0
 800b2c0:	69a0      	ldr	r0, [r4, #24]
 800b2c2:	b188      	cbz	r0, 800b2e8 <_scanf_chars+0x58>
 800b2c4:	2801      	cmp	r0, #1
 800b2c6:	d107      	bne.n	800b2d8 <_scanf_chars+0x48>
 800b2c8:	682a      	ldr	r2, [r5, #0]
 800b2ca:	7811      	ldrb	r1, [r2, #0]
 800b2cc:	6962      	ldr	r2, [r4, #20]
 800b2ce:	5c52      	ldrb	r2, [r2, r1]
 800b2d0:	b952      	cbnz	r2, 800b2e8 <_scanf_chars+0x58>
 800b2d2:	2f00      	cmp	r7, #0
 800b2d4:	d031      	beq.n	800b33a <_scanf_chars+0xaa>
 800b2d6:	e022      	b.n	800b31e <_scanf_chars+0x8e>
 800b2d8:	2802      	cmp	r0, #2
 800b2da:	d120      	bne.n	800b31e <_scanf_chars+0x8e>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b2e4:	071b      	lsls	r3, r3, #28
 800b2e6:	d41a      	bmi.n	800b31e <_scanf_chars+0x8e>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	06da      	lsls	r2, r3, #27
 800b2ec:	bf5e      	ittt	pl
 800b2ee:	682b      	ldrpl	r3, [r5, #0]
 800b2f0:	781b      	ldrbpl	r3, [r3, #0]
 800b2f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b2f6:	682a      	ldr	r2, [r5, #0]
 800b2f8:	686b      	ldr	r3, [r5, #4]
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	602a      	str	r2, [r5, #0]
 800b2fe:	68a2      	ldr	r2, [r4, #8]
 800b300:	3b01      	subs	r3, #1
 800b302:	3a01      	subs	r2, #1
 800b304:	606b      	str	r3, [r5, #4]
 800b306:	3701      	adds	r7, #1
 800b308:	60a2      	str	r2, [r4, #8]
 800b30a:	b142      	cbz	r2, 800b31e <_scanf_chars+0x8e>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dcd7      	bgt.n	800b2c0 <_scanf_chars+0x30>
 800b310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b314:	4629      	mov	r1, r5
 800b316:	4640      	mov	r0, r8
 800b318:	4798      	blx	r3
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d0d0      	beq.n	800b2c0 <_scanf_chars+0x30>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f013 0310 	ands.w	r3, r3, #16
 800b324:	d105      	bne.n	800b332 <_scanf_chars+0xa2>
 800b326:	68e2      	ldr	r2, [r4, #12]
 800b328:	3201      	adds	r2, #1
 800b32a:	60e2      	str	r2, [r4, #12]
 800b32c:	69a2      	ldr	r2, [r4, #24]
 800b32e:	b102      	cbz	r2, 800b332 <_scanf_chars+0xa2>
 800b330:	7033      	strb	r3, [r6, #0]
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	443b      	add	r3, r7
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	2000      	movs	r0, #0
 800b33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33e:	bf00      	nop
 800b340:	0800c56d 	.word	0x0800c56d

0800b344 <_scanf_i>:
 800b344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	4698      	mov	r8, r3
 800b34a:	4b76      	ldr	r3, [pc, #472]	; (800b524 <_scanf_i+0x1e0>)
 800b34c:	460c      	mov	r4, r1
 800b34e:	4682      	mov	sl, r0
 800b350:	4616      	mov	r6, r2
 800b352:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b356:	b087      	sub	sp, #28
 800b358:	ab03      	add	r3, sp, #12
 800b35a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b35e:	4b72      	ldr	r3, [pc, #456]	; (800b528 <_scanf_i+0x1e4>)
 800b360:	69a1      	ldr	r1, [r4, #24]
 800b362:	4a72      	ldr	r2, [pc, #456]	; (800b52c <_scanf_i+0x1e8>)
 800b364:	2903      	cmp	r1, #3
 800b366:	bf18      	it	ne
 800b368:	461a      	movne	r2, r3
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	9201      	str	r2, [sp, #4]
 800b36e:	1e5a      	subs	r2, r3, #1
 800b370:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b374:	bf88      	it	hi
 800b376:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b37a:	4627      	mov	r7, r4
 800b37c:	bf82      	ittt	hi
 800b37e:	eb03 0905 	addhi.w	r9, r3, r5
 800b382:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b386:	60a3      	strhi	r3, [r4, #8]
 800b388:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b38c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b390:	bf98      	it	ls
 800b392:	f04f 0900 	movls.w	r9, #0
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	463d      	mov	r5, r7
 800b39a:	f04f 0b00 	mov.w	fp, #0
 800b39e:	6831      	ldr	r1, [r6, #0]
 800b3a0:	ab03      	add	r3, sp, #12
 800b3a2:	7809      	ldrb	r1, [r1, #0]
 800b3a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f7f4 ff39 	bl	8000220 <memchr>
 800b3ae:	b328      	cbz	r0, 800b3fc <_scanf_i+0xb8>
 800b3b0:	f1bb 0f01 	cmp.w	fp, #1
 800b3b4:	d159      	bne.n	800b46a <_scanf_i+0x126>
 800b3b6:	6862      	ldr	r2, [r4, #4]
 800b3b8:	b92a      	cbnz	r2, 800b3c6 <_scanf_i+0x82>
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	2308      	movs	r3, #8
 800b3be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3c2:	6063      	str	r3, [r4, #4]
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b3cc:	6022      	str	r2, [r4, #0]
 800b3ce:	68a2      	ldr	r2, [r4, #8]
 800b3d0:	1e51      	subs	r1, r2, #1
 800b3d2:	60a1      	str	r1, [r4, #8]
 800b3d4:	b192      	cbz	r2, 800b3fc <_scanf_i+0xb8>
 800b3d6:	6832      	ldr	r2, [r6, #0]
 800b3d8:	1c51      	adds	r1, r2, #1
 800b3da:	6031      	str	r1, [r6, #0]
 800b3dc:	7812      	ldrb	r2, [r2, #0]
 800b3de:	f805 2b01 	strb.w	r2, [r5], #1
 800b3e2:	6872      	ldr	r2, [r6, #4]
 800b3e4:	3a01      	subs	r2, #1
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	6072      	str	r2, [r6, #4]
 800b3ea:	dc07      	bgt.n	800b3fc <_scanf_i+0xb8>
 800b3ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	4790      	blx	r2
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f040 8085 	bne.w	800b506 <_scanf_i+0x1c2>
 800b3fc:	f10b 0b01 	add.w	fp, fp, #1
 800b400:	f1bb 0f03 	cmp.w	fp, #3
 800b404:	d1cb      	bne.n	800b39e <_scanf_i+0x5a>
 800b406:	6863      	ldr	r3, [r4, #4]
 800b408:	b90b      	cbnz	r3, 800b40e <_scanf_i+0xca>
 800b40a:	230a      	movs	r3, #10
 800b40c:	6063      	str	r3, [r4, #4]
 800b40e:	6863      	ldr	r3, [r4, #4]
 800b410:	4947      	ldr	r1, [pc, #284]	; (800b530 <_scanf_i+0x1ec>)
 800b412:	6960      	ldr	r0, [r4, #20]
 800b414:	1ac9      	subs	r1, r1, r3
 800b416:	f000 f933 	bl	800b680 <__sccl>
 800b41a:	f04f 0b00 	mov.w	fp, #0
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d03d      	beq.n	800b4a2 <_scanf_i+0x15e>
 800b426:	6831      	ldr	r1, [r6, #0]
 800b428:	6960      	ldr	r0, [r4, #20]
 800b42a:	f891 c000 	ldrb.w	ip, [r1]
 800b42e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b432:	2800      	cmp	r0, #0
 800b434:	d035      	beq.n	800b4a2 <_scanf_i+0x15e>
 800b436:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b43a:	d124      	bne.n	800b486 <_scanf_i+0x142>
 800b43c:	0510      	lsls	r0, r2, #20
 800b43e:	d522      	bpl.n	800b486 <_scanf_i+0x142>
 800b440:	f10b 0b01 	add.w	fp, fp, #1
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	d003      	beq.n	800b452 <_scanf_i+0x10e>
 800b44a:	3301      	adds	r3, #1
 800b44c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	6873      	ldr	r3, [r6, #4]
 800b454:	3b01      	subs	r3, #1
 800b456:	2b00      	cmp	r3, #0
 800b458:	6073      	str	r3, [r6, #4]
 800b45a:	dd1b      	ble.n	800b494 <_scanf_i+0x150>
 800b45c:	6833      	ldr	r3, [r6, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	6033      	str	r3, [r6, #0]
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	3b01      	subs	r3, #1
 800b466:	60a3      	str	r3, [r4, #8]
 800b468:	e7d9      	b.n	800b41e <_scanf_i+0xda>
 800b46a:	f1bb 0f02 	cmp.w	fp, #2
 800b46e:	d1ae      	bne.n	800b3ce <_scanf_i+0x8a>
 800b470:	6822      	ldr	r2, [r4, #0]
 800b472:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b476:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b47a:	d1bf      	bne.n	800b3fc <_scanf_i+0xb8>
 800b47c:	2310      	movs	r3, #16
 800b47e:	6063      	str	r3, [r4, #4]
 800b480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b484:	e7a2      	b.n	800b3cc <_scanf_i+0x88>
 800b486:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b48a:	6022      	str	r2, [r4, #0]
 800b48c:	780b      	ldrb	r3, [r1, #0]
 800b48e:	f805 3b01 	strb.w	r3, [r5], #1
 800b492:	e7de      	b.n	800b452 <_scanf_i+0x10e>
 800b494:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b498:	4631      	mov	r1, r6
 800b49a:	4650      	mov	r0, sl
 800b49c:	4798      	blx	r3
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d0df      	beq.n	800b462 <_scanf_i+0x11e>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	05db      	lsls	r3, r3, #23
 800b4a6:	d50d      	bpl.n	800b4c4 <_scanf_i+0x180>
 800b4a8:	42bd      	cmp	r5, r7
 800b4aa:	d909      	bls.n	800b4c0 <_scanf_i+0x17c>
 800b4ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b4b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	4798      	blx	r3
 800b4ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800b4be:	464d      	mov	r5, r9
 800b4c0:	42bd      	cmp	r5, r7
 800b4c2:	d02d      	beq.n	800b520 <_scanf_i+0x1dc>
 800b4c4:	6822      	ldr	r2, [r4, #0]
 800b4c6:	f012 0210 	ands.w	r2, r2, #16
 800b4ca:	d113      	bne.n	800b4f4 <_scanf_i+0x1b0>
 800b4cc:	702a      	strb	r2, [r5, #0]
 800b4ce:	6863      	ldr	r3, [r4, #4]
 800b4d0:	9e01      	ldr	r6, [sp, #4]
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	47b0      	blx	r6
 800b4d8:	6821      	ldr	r1, [r4, #0]
 800b4da:	f8d8 3000 	ldr.w	r3, [r8]
 800b4de:	f011 0f20 	tst.w	r1, #32
 800b4e2:	d013      	beq.n	800b50c <_scanf_i+0x1c8>
 800b4e4:	1d1a      	adds	r2, r3, #4
 800b4e6:	f8c8 2000 	str.w	r2, [r8]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6018      	str	r0, [r3, #0]
 800b4ee:	68e3      	ldr	r3, [r4, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	60e3      	str	r3, [r4, #12]
 800b4f4:	1bed      	subs	r5, r5, r7
 800b4f6:	44ab      	add	fp, r5
 800b4f8:	6925      	ldr	r5, [r4, #16]
 800b4fa:	445d      	add	r5, fp
 800b4fc:	6125      	str	r5, [r4, #16]
 800b4fe:	2000      	movs	r0, #0
 800b500:	b007      	add	sp, #28
 800b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b506:	f04f 0b00 	mov.w	fp, #0
 800b50a:	e7ca      	b.n	800b4a2 <_scanf_i+0x15e>
 800b50c:	1d1a      	adds	r2, r3, #4
 800b50e:	f8c8 2000 	str.w	r2, [r8]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f011 0f01 	tst.w	r1, #1
 800b518:	bf14      	ite	ne
 800b51a:	8018      	strhne	r0, [r3, #0]
 800b51c:	6018      	streq	r0, [r3, #0]
 800b51e:	e7e6      	b.n	800b4ee <_scanf_i+0x1aa>
 800b520:	2001      	movs	r0, #1
 800b522:	e7ed      	b.n	800b500 <_scanf_i+0x1bc>
 800b524:	0800c25c 	.word	0x0800c25c
 800b528:	0800b8dd 	.word	0x0800b8dd
 800b52c:	0800b7f5 	.word	0x0800b7f5
 800b530:	0800c52e 	.word	0x0800c52e

0800b534 <_read_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d07      	ldr	r5, [pc, #28]	; (800b554 <_read_r+0x20>)
 800b538:	4604      	mov	r4, r0
 800b53a:	4608      	mov	r0, r1
 800b53c:	4611      	mov	r1, r2
 800b53e:	2200      	movs	r2, #0
 800b540:	602a      	str	r2, [r5, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	f7f6 fe16 	bl	8002174 <_read>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_read_r+0x1e>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_read_r+0x1e>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	200044d0 	.word	0x200044d0

0800b558 <lflush>:
 800b558:	8983      	ldrh	r3, [r0, #12]
 800b55a:	f003 0309 	and.w	r3, r3, #9
 800b55e:	2b09      	cmp	r3, #9
 800b560:	d101      	bne.n	800b566 <lflush+0xe>
 800b562:	f7fe bee5 	b.w	800a330 <fflush>
 800b566:	2000      	movs	r0, #0
 800b568:	4770      	bx	lr
	...

0800b56c <__srefill_r>:
 800b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56e:	460c      	mov	r4, r1
 800b570:	4605      	mov	r5, r0
 800b572:	b118      	cbz	r0, 800b57c <__srefill_r+0x10>
 800b574:	6983      	ldr	r3, [r0, #24]
 800b576:	b90b      	cbnz	r3, 800b57c <__srefill_r+0x10>
 800b578:	f7fc fe9a 	bl	80082b0 <__sinit>
 800b57c:	4b3b      	ldr	r3, [pc, #236]	; (800b66c <__srefill_r+0x100>)
 800b57e:	429c      	cmp	r4, r3
 800b580:	d10a      	bne.n	800b598 <__srefill_r+0x2c>
 800b582:	686c      	ldr	r4, [r5, #4]
 800b584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b588:	2300      	movs	r3, #0
 800b58a:	6063      	str	r3, [r4, #4]
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	069e      	lsls	r6, r3, #26
 800b590:	d50c      	bpl.n	800b5ac <__srefill_r+0x40>
 800b592:	f04f 30ff 	mov.w	r0, #4294967295
 800b596:	e066      	b.n	800b666 <__srefill_r+0xfa>
 800b598:	4b35      	ldr	r3, [pc, #212]	; (800b670 <__srefill_r+0x104>)
 800b59a:	429c      	cmp	r4, r3
 800b59c:	d101      	bne.n	800b5a2 <__srefill_r+0x36>
 800b59e:	68ac      	ldr	r4, [r5, #8]
 800b5a0:	e7f0      	b.n	800b584 <__srefill_r+0x18>
 800b5a2:	4b34      	ldr	r3, [pc, #208]	; (800b674 <__srefill_r+0x108>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	bf08      	it	eq
 800b5a8:	68ec      	ldreq	r4, [r5, #12]
 800b5aa:	e7eb      	b.n	800b584 <__srefill_r+0x18>
 800b5ac:	0758      	lsls	r0, r3, #29
 800b5ae:	d448      	bmi.n	800b642 <__srefill_r+0xd6>
 800b5b0:	06d9      	lsls	r1, r3, #27
 800b5b2:	d405      	bmi.n	800b5c0 <__srefill_r+0x54>
 800b5b4:	2309      	movs	r3, #9
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	e7e8      	b.n	800b592 <__srefill_r+0x26>
 800b5c0:	071a      	lsls	r2, r3, #28
 800b5c2:	d50b      	bpl.n	800b5dc <__srefill_r+0x70>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f7fe fe76 	bl	800a2b8 <_fflush_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1e0      	bne.n	800b592 <__srefill_r+0x26>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	60a0      	str	r0, [r4, #8]
 800b5d4:	f023 0308 	bic.w	r3, r3, #8
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	61a0      	str	r0, [r4, #24]
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f043 0304 	orr.w	r3, r3, #4
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	b91b      	cbnz	r3, 800b5f0 <__srefill_r+0x84>
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f7fe feee 	bl	800a3cc <__smakebuf_r>
 800b5f0:	89a6      	ldrh	r6, [r4, #12]
 800b5f2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b5f6:	07b3      	lsls	r3, r6, #30
 800b5f8:	d00f      	beq.n	800b61a <__srefill_r+0xae>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	4b1e      	ldr	r3, [pc, #120]	; (800b678 <__srefill_r+0x10c>)
 800b600:	491e      	ldr	r1, [pc, #120]	; (800b67c <__srefill_r+0x110>)
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	f006 0609 	and.w	r6, r6, #9
 800b608:	f7fc fed0 	bl	80083ac <_fwalk>
 800b60c:	2e09      	cmp	r6, #9
 800b60e:	81a7      	strh	r7, [r4, #12]
 800b610:	d103      	bne.n	800b61a <__srefill_r+0xae>
 800b612:	4621      	mov	r1, r4
 800b614:	4628      	mov	r0, r5
 800b616:	f7fe fdc9 	bl	800a1ac <__sflush_r>
 800b61a:	6922      	ldr	r2, [r4, #16]
 800b61c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b61e:	6963      	ldr	r3, [r4, #20]
 800b620:	6a21      	ldr	r1, [r4, #32]
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	4628      	mov	r0, r5
 800b626:	47b0      	blx	r6
 800b628:	2800      	cmp	r0, #0
 800b62a:	6060      	str	r0, [r4, #4]
 800b62c:	dc1c      	bgt.n	800b668 <__srefill_r+0xfc>
 800b62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b632:	bf17      	itett	ne
 800b634:	2200      	movne	r2, #0
 800b636:	f043 0320 	orreq.w	r3, r3, #32
 800b63a:	6062      	strne	r2, [r4, #4]
 800b63c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b640:	e7bc      	b.n	800b5bc <__srefill_r+0x50>
 800b642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b644:	2900      	cmp	r1, #0
 800b646:	d0cd      	beq.n	800b5e4 <__srefill_r+0x78>
 800b648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b64c:	4299      	cmp	r1, r3
 800b64e:	d002      	beq.n	800b656 <__srefill_r+0xea>
 800b650:	4628      	mov	r0, r5
 800b652:	f7ff faa9 	bl	800aba8 <_free_r>
 800b656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b658:	6063      	str	r3, [r4, #4]
 800b65a:	2000      	movs	r0, #0
 800b65c:	6360      	str	r0, [r4, #52]	; 0x34
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0c0      	beq.n	800b5e4 <__srefill_r+0x78>
 800b662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b668:	2000      	movs	r0, #0
 800b66a:	e7fc      	b.n	800b666 <__srefill_r+0xfa>
 800b66c:	0800c2a0 	.word	0x0800c2a0
 800b670:	0800c2c0 	.word	0x0800c2c0
 800b674:	0800c280 	.word	0x0800c280
 800b678:	0800c2e0 	.word	0x0800c2e0
 800b67c:	0800b559 	.word	0x0800b559

0800b680 <__sccl>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	780b      	ldrb	r3, [r1, #0]
 800b684:	4604      	mov	r4, r0
 800b686:	2b5e      	cmp	r3, #94	; 0x5e
 800b688:	bf0b      	itete	eq
 800b68a:	784b      	ldrbeq	r3, [r1, #1]
 800b68c:	1c48      	addne	r0, r1, #1
 800b68e:	1c88      	addeq	r0, r1, #2
 800b690:	2200      	movne	r2, #0
 800b692:	bf08      	it	eq
 800b694:	2201      	moveq	r2, #1
 800b696:	1e61      	subs	r1, r4, #1
 800b698:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b69c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b6a0:	42a9      	cmp	r1, r5
 800b6a2:	d1fb      	bne.n	800b69c <__sccl+0x1c>
 800b6a4:	b90b      	cbnz	r3, 800b6aa <__sccl+0x2a>
 800b6a6:	3801      	subs	r0, #1
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	f082 0201 	eor.w	r2, r2, #1
 800b6ae:	54e2      	strb	r2, [r4, r3]
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b6b8:	292d      	cmp	r1, #45	; 0x2d
 800b6ba:	d006      	beq.n	800b6ca <__sccl+0x4a>
 800b6bc:	295d      	cmp	r1, #93	; 0x5d
 800b6be:	d0f3      	beq.n	800b6a8 <__sccl+0x28>
 800b6c0:	b909      	cbnz	r1, 800b6c6 <__sccl+0x46>
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	e7f0      	b.n	800b6a8 <__sccl+0x28>
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	e7f1      	b.n	800b6ae <__sccl+0x2e>
 800b6ca:	786e      	ldrb	r6, [r5, #1]
 800b6cc:	2e5d      	cmp	r6, #93	; 0x5d
 800b6ce:	d0fa      	beq.n	800b6c6 <__sccl+0x46>
 800b6d0:	42b3      	cmp	r3, r6
 800b6d2:	dcf8      	bgt.n	800b6c6 <__sccl+0x46>
 800b6d4:	3502      	adds	r5, #2
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	3101      	adds	r1, #1
 800b6da:	428e      	cmp	r6, r1
 800b6dc:	5462      	strb	r2, [r4, r1]
 800b6de:	dcfb      	bgt.n	800b6d8 <__sccl+0x58>
 800b6e0:	1af1      	subs	r1, r6, r3
 800b6e2:	3901      	subs	r1, #1
 800b6e4:	1c58      	adds	r0, r3, #1
 800b6e6:	42b3      	cmp	r3, r6
 800b6e8:	bfa8      	it	ge
 800b6ea:	2100      	movge	r1, #0
 800b6ec:	1843      	adds	r3, r0, r1
 800b6ee:	e7e0      	b.n	800b6b2 <__sccl+0x32>

0800b6f0 <_strtol_l.constprop.0>:
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f6:	d001      	beq.n	800b6fc <_strtol_l.constprop.0+0xc>
 800b6f8:	2b24      	cmp	r3, #36	; 0x24
 800b6fa:	d906      	bls.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b6fc:	f7fc fd7a 	bl	80081f4 <__errno>
 800b700:	2316      	movs	r3, #22
 800b702:	6003      	str	r3, [r0, #0]
 800b704:	2000      	movs	r0, #0
 800b706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b7f0 <_strtol_l.constprop.0+0x100>
 800b70e:	460d      	mov	r5, r1
 800b710:	462e      	mov	r6, r5
 800b712:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b716:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b71a:	f017 0708 	ands.w	r7, r7, #8
 800b71e:	d1f7      	bne.n	800b710 <_strtol_l.constprop.0+0x20>
 800b720:	2c2d      	cmp	r4, #45	; 0x2d
 800b722:	d132      	bne.n	800b78a <_strtol_l.constprop.0+0x9a>
 800b724:	782c      	ldrb	r4, [r5, #0]
 800b726:	2701      	movs	r7, #1
 800b728:	1cb5      	adds	r5, r6, #2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d05b      	beq.n	800b7e6 <_strtol_l.constprop.0+0xf6>
 800b72e:	2b10      	cmp	r3, #16
 800b730:	d109      	bne.n	800b746 <_strtol_l.constprop.0+0x56>
 800b732:	2c30      	cmp	r4, #48	; 0x30
 800b734:	d107      	bne.n	800b746 <_strtol_l.constprop.0+0x56>
 800b736:	782c      	ldrb	r4, [r5, #0]
 800b738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b73c:	2c58      	cmp	r4, #88	; 0x58
 800b73e:	d14d      	bne.n	800b7dc <_strtol_l.constprop.0+0xec>
 800b740:	786c      	ldrb	r4, [r5, #1]
 800b742:	2310      	movs	r3, #16
 800b744:	3502      	adds	r5, #2
 800b746:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b74a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b74e:	f04f 0c00 	mov.w	ip, #0
 800b752:	fbb8 f9f3 	udiv	r9, r8, r3
 800b756:	4666      	mov	r6, ip
 800b758:	fb03 8a19 	mls	sl, r3, r9, r8
 800b75c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b760:	f1be 0f09 	cmp.w	lr, #9
 800b764:	d816      	bhi.n	800b794 <_strtol_l.constprop.0+0xa4>
 800b766:	4674      	mov	r4, lr
 800b768:	42a3      	cmp	r3, r4
 800b76a:	dd24      	ble.n	800b7b6 <_strtol_l.constprop.0+0xc6>
 800b76c:	f1bc 0f00 	cmp.w	ip, #0
 800b770:	db1e      	blt.n	800b7b0 <_strtol_l.constprop.0+0xc0>
 800b772:	45b1      	cmp	r9, r6
 800b774:	d31c      	bcc.n	800b7b0 <_strtol_l.constprop.0+0xc0>
 800b776:	d101      	bne.n	800b77c <_strtol_l.constprop.0+0x8c>
 800b778:	45a2      	cmp	sl, r4
 800b77a:	db19      	blt.n	800b7b0 <_strtol_l.constprop.0+0xc0>
 800b77c:	fb06 4603 	mla	r6, r6, r3, r4
 800b780:	f04f 0c01 	mov.w	ip, #1
 800b784:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b788:	e7e8      	b.n	800b75c <_strtol_l.constprop.0+0x6c>
 800b78a:	2c2b      	cmp	r4, #43	; 0x2b
 800b78c:	bf04      	itt	eq
 800b78e:	782c      	ldrbeq	r4, [r5, #0]
 800b790:	1cb5      	addeq	r5, r6, #2
 800b792:	e7ca      	b.n	800b72a <_strtol_l.constprop.0+0x3a>
 800b794:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b798:	f1be 0f19 	cmp.w	lr, #25
 800b79c:	d801      	bhi.n	800b7a2 <_strtol_l.constprop.0+0xb2>
 800b79e:	3c37      	subs	r4, #55	; 0x37
 800b7a0:	e7e2      	b.n	800b768 <_strtol_l.constprop.0+0x78>
 800b7a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b7a6:	f1be 0f19 	cmp.w	lr, #25
 800b7aa:	d804      	bhi.n	800b7b6 <_strtol_l.constprop.0+0xc6>
 800b7ac:	3c57      	subs	r4, #87	; 0x57
 800b7ae:	e7db      	b.n	800b768 <_strtol_l.constprop.0+0x78>
 800b7b0:	f04f 3cff 	mov.w	ip, #4294967295
 800b7b4:	e7e6      	b.n	800b784 <_strtol_l.constprop.0+0x94>
 800b7b6:	f1bc 0f00 	cmp.w	ip, #0
 800b7ba:	da05      	bge.n	800b7c8 <_strtol_l.constprop.0+0xd8>
 800b7bc:	2322      	movs	r3, #34	; 0x22
 800b7be:	6003      	str	r3, [r0, #0]
 800b7c0:	4646      	mov	r6, r8
 800b7c2:	b942      	cbnz	r2, 800b7d6 <_strtol_l.constprop.0+0xe6>
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	e79e      	b.n	800b706 <_strtol_l.constprop.0+0x16>
 800b7c8:	b107      	cbz	r7, 800b7cc <_strtol_l.constprop.0+0xdc>
 800b7ca:	4276      	negs	r6, r6
 800b7cc:	2a00      	cmp	r2, #0
 800b7ce:	d0f9      	beq.n	800b7c4 <_strtol_l.constprop.0+0xd4>
 800b7d0:	f1bc 0f00 	cmp.w	ip, #0
 800b7d4:	d000      	beq.n	800b7d8 <_strtol_l.constprop.0+0xe8>
 800b7d6:	1e69      	subs	r1, r5, #1
 800b7d8:	6011      	str	r1, [r2, #0]
 800b7da:	e7f3      	b.n	800b7c4 <_strtol_l.constprop.0+0xd4>
 800b7dc:	2430      	movs	r4, #48	; 0x30
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1b1      	bne.n	800b746 <_strtol_l.constprop.0+0x56>
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	e7af      	b.n	800b746 <_strtol_l.constprop.0+0x56>
 800b7e6:	2c30      	cmp	r4, #48	; 0x30
 800b7e8:	d0a5      	beq.n	800b736 <_strtol_l.constprop.0+0x46>
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	e7ab      	b.n	800b746 <_strtol_l.constprop.0+0x56>
 800b7ee:	bf00      	nop
 800b7f0:	0800c56d 	.word	0x0800c56d

0800b7f4 <_strtol_r>:
 800b7f4:	f7ff bf7c 	b.w	800b6f0 <_strtol_l.constprop.0>

0800b7f8 <_strtoul_l.constprop.0>:
 800b7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	4f36      	ldr	r7, [pc, #216]	; (800b8d8 <_strtoul_l.constprop.0+0xe0>)
 800b7fe:	4686      	mov	lr, r0
 800b800:	460d      	mov	r5, r1
 800b802:	4628      	mov	r0, r5
 800b804:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b808:	5de6      	ldrb	r6, [r4, r7]
 800b80a:	f016 0608 	ands.w	r6, r6, #8
 800b80e:	d1f8      	bne.n	800b802 <_strtoul_l.constprop.0+0xa>
 800b810:	2c2d      	cmp	r4, #45	; 0x2d
 800b812:	d12f      	bne.n	800b874 <_strtoul_l.constprop.0+0x7c>
 800b814:	782c      	ldrb	r4, [r5, #0]
 800b816:	2601      	movs	r6, #1
 800b818:	1c85      	adds	r5, r0, #2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d057      	beq.n	800b8ce <_strtoul_l.constprop.0+0xd6>
 800b81e:	2b10      	cmp	r3, #16
 800b820:	d109      	bne.n	800b836 <_strtoul_l.constprop.0+0x3e>
 800b822:	2c30      	cmp	r4, #48	; 0x30
 800b824:	d107      	bne.n	800b836 <_strtoul_l.constprop.0+0x3e>
 800b826:	7828      	ldrb	r0, [r5, #0]
 800b828:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b82c:	2858      	cmp	r0, #88	; 0x58
 800b82e:	d149      	bne.n	800b8c4 <_strtoul_l.constprop.0+0xcc>
 800b830:	786c      	ldrb	r4, [r5, #1]
 800b832:	2310      	movs	r3, #16
 800b834:	3502      	adds	r5, #2
 800b836:	f04f 38ff 	mov.w	r8, #4294967295
 800b83a:	2700      	movs	r7, #0
 800b83c:	fbb8 f8f3 	udiv	r8, r8, r3
 800b840:	fb03 f908 	mul.w	r9, r3, r8
 800b844:	ea6f 0909 	mvn.w	r9, r9
 800b848:	4638      	mov	r0, r7
 800b84a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b84e:	f1bc 0f09 	cmp.w	ip, #9
 800b852:	d814      	bhi.n	800b87e <_strtoul_l.constprop.0+0x86>
 800b854:	4664      	mov	r4, ip
 800b856:	42a3      	cmp	r3, r4
 800b858:	dd22      	ble.n	800b8a0 <_strtoul_l.constprop.0+0xa8>
 800b85a:	2f00      	cmp	r7, #0
 800b85c:	db1d      	blt.n	800b89a <_strtoul_l.constprop.0+0xa2>
 800b85e:	4580      	cmp	r8, r0
 800b860:	d31b      	bcc.n	800b89a <_strtoul_l.constprop.0+0xa2>
 800b862:	d101      	bne.n	800b868 <_strtoul_l.constprop.0+0x70>
 800b864:	45a1      	cmp	r9, r4
 800b866:	db18      	blt.n	800b89a <_strtoul_l.constprop.0+0xa2>
 800b868:	fb00 4003 	mla	r0, r0, r3, r4
 800b86c:	2701      	movs	r7, #1
 800b86e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b872:	e7ea      	b.n	800b84a <_strtoul_l.constprop.0+0x52>
 800b874:	2c2b      	cmp	r4, #43	; 0x2b
 800b876:	bf04      	itt	eq
 800b878:	782c      	ldrbeq	r4, [r5, #0]
 800b87a:	1c85      	addeq	r5, r0, #2
 800b87c:	e7cd      	b.n	800b81a <_strtoul_l.constprop.0+0x22>
 800b87e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b882:	f1bc 0f19 	cmp.w	ip, #25
 800b886:	d801      	bhi.n	800b88c <_strtoul_l.constprop.0+0x94>
 800b888:	3c37      	subs	r4, #55	; 0x37
 800b88a:	e7e4      	b.n	800b856 <_strtoul_l.constprop.0+0x5e>
 800b88c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b890:	f1bc 0f19 	cmp.w	ip, #25
 800b894:	d804      	bhi.n	800b8a0 <_strtoul_l.constprop.0+0xa8>
 800b896:	3c57      	subs	r4, #87	; 0x57
 800b898:	e7dd      	b.n	800b856 <_strtoul_l.constprop.0+0x5e>
 800b89a:	f04f 37ff 	mov.w	r7, #4294967295
 800b89e:	e7e6      	b.n	800b86e <_strtoul_l.constprop.0+0x76>
 800b8a0:	2f00      	cmp	r7, #0
 800b8a2:	da07      	bge.n	800b8b4 <_strtoul_l.constprop.0+0xbc>
 800b8a4:	2322      	movs	r3, #34	; 0x22
 800b8a6:	f8ce 3000 	str.w	r3, [lr]
 800b8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ae:	b932      	cbnz	r2, 800b8be <_strtoul_l.constprop.0+0xc6>
 800b8b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8b4:	b106      	cbz	r6, 800b8b8 <_strtoul_l.constprop.0+0xc0>
 800b8b6:	4240      	negs	r0, r0
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	d0f9      	beq.n	800b8b0 <_strtoul_l.constprop.0+0xb8>
 800b8bc:	b107      	cbz	r7, 800b8c0 <_strtoul_l.constprop.0+0xc8>
 800b8be:	1e69      	subs	r1, r5, #1
 800b8c0:	6011      	str	r1, [r2, #0]
 800b8c2:	e7f5      	b.n	800b8b0 <_strtoul_l.constprop.0+0xb8>
 800b8c4:	2430      	movs	r4, #48	; 0x30
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1b5      	bne.n	800b836 <_strtoul_l.constprop.0+0x3e>
 800b8ca:	2308      	movs	r3, #8
 800b8cc:	e7b3      	b.n	800b836 <_strtoul_l.constprop.0+0x3e>
 800b8ce:	2c30      	cmp	r4, #48	; 0x30
 800b8d0:	d0a9      	beq.n	800b826 <_strtoul_l.constprop.0+0x2e>
 800b8d2:	230a      	movs	r3, #10
 800b8d4:	e7af      	b.n	800b836 <_strtoul_l.constprop.0+0x3e>
 800b8d6:	bf00      	nop
 800b8d8:	0800c56d 	.word	0x0800c56d

0800b8dc <_strtoul_r>:
 800b8dc:	f7ff bf8c 	b.w	800b7f8 <_strtoul_l.constprop.0>

0800b8e0 <__submore>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8ec:	4299      	cmp	r1, r3
 800b8ee:	d11d      	bne.n	800b92c <__submore+0x4c>
 800b8f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b8f4:	f7fc fdf4 	bl	80084e0 <_malloc_r>
 800b8f8:	b918      	cbnz	r0, 800b902 <__submore+0x22>
 800b8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b906:	63a3      	str	r3, [r4, #56]	; 0x38
 800b908:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b90c:	6360      	str	r0, [r4, #52]	; 0x34
 800b90e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b912:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b916:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b91a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b91e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b922:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	2000      	movs	r0, #0
 800b92a:	e7e8      	b.n	800b8fe <__submore+0x1e>
 800b92c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b92e:	0077      	lsls	r7, r6, #1
 800b930:	463a      	mov	r2, r7
 800b932:	f000 f90b 	bl	800bb4c <_realloc_r>
 800b936:	4605      	mov	r5, r0
 800b938:	2800      	cmp	r0, #0
 800b93a:	d0de      	beq.n	800b8fa <__submore+0x1a>
 800b93c:	eb00 0806 	add.w	r8, r0, r6
 800b940:	4601      	mov	r1, r0
 800b942:	4632      	mov	r2, r6
 800b944:	4640      	mov	r0, r8
 800b946:	f7fc fd94 	bl	8008472 <memcpy>
 800b94a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b94e:	f8c4 8000 	str.w	r8, [r4]
 800b952:	e7e9      	b.n	800b928 <__submore+0x48>

0800b954 <_ungetc_r>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4614      	mov	r4, r2
 800b958:	1c4a      	adds	r2, r1, #1
 800b95a:	4606      	mov	r6, r0
 800b95c:	460d      	mov	r5, r1
 800b95e:	d103      	bne.n	800b968 <_ungetc_r+0x14>
 800b960:	f04f 35ff 	mov.w	r5, #4294967295
 800b964:	4628      	mov	r0, r5
 800b966:	bd70      	pop	{r4, r5, r6, pc}
 800b968:	b118      	cbz	r0, 800b972 <_ungetc_r+0x1e>
 800b96a:	6983      	ldr	r3, [r0, #24]
 800b96c:	b90b      	cbnz	r3, 800b972 <_ungetc_r+0x1e>
 800b96e:	f7fc fc9f 	bl	80082b0 <__sinit>
 800b972:	4b41      	ldr	r3, [pc, #260]	; (800ba78 <_ungetc_r+0x124>)
 800b974:	429c      	cmp	r4, r3
 800b976:	d11d      	bne.n	800b9b4 <_ungetc_r+0x60>
 800b978:	6874      	ldr	r4, [r6, #4]
 800b97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b97c:	07db      	lsls	r3, r3, #31
 800b97e:	d405      	bmi.n	800b98c <_ungetc_r+0x38>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	0598      	lsls	r0, r3, #22
 800b984:	d402      	bmi.n	800b98c <_ungetc_r+0x38>
 800b986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b988:	f7fc fd71 	bl	800846e <__retarget_lock_acquire_recursive>
 800b98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b990:	f023 0320 	bic.w	r3, r3, #32
 800b994:	0759      	lsls	r1, r3, #29
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	b29a      	uxth	r2, r3
 800b99a:	d42d      	bmi.n	800b9f8 <_ungetc_r+0xa4>
 800b99c:	06d3      	lsls	r3, r2, #27
 800b99e:	d413      	bmi.n	800b9c8 <_ungetc_r+0x74>
 800b9a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9a2:	07dd      	lsls	r5, r3, #31
 800b9a4:	d4dc      	bmi.n	800b960 <_ungetc_r+0xc>
 800b9a6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b9aa:	d1d9      	bne.n	800b960 <_ungetc_r+0xc>
 800b9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ae:	f7fc fd5f 	bl	8008470 <__retarget_lock_release_recursive>
 800b9b2:	e7d5      	b.n	800b960 <_ungetc_r+0xc>
 800b9b4:	4b31      	ldr	r3, [pc, #196]	; (800ba7c <_ungetc_r+0x128>)
 800b9b6:	429c      	cmp	r4, r3
 800b9b8:	d101      	bne.n	800b9be <_ungetc_r+0x6a>
 800b9ba:	68b4      	ldr	r4, [r6, #8]
 800b9bc:	e7dd      	b.n	800b97a <_ungetc_r+0x26>
 800b9be:	4b30      	ldr	r3, [pc, #192]	; (800ba80 <_ungetc_r+0x12c>)
 800b9c0:	429c      	cmp	r4, r3
 800b9c2:	bf08      	it	eq
 800b9c4:	68f4      	ldreq	r4, [r6, #12]
 800b9c6:	e7d8      	b.n	800b97a <_ungetc_r+0x26>
 800b9c8:	0710      	lsls	r0, r2, #28
 800b9ca:	d511      	bpl.n	800b9f0 <_ungetc_r+0x9c>
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7fe fc72 	bl	800a2b8 <_fflush_r>
 800b9d4:	b130      	cbz	r0, 800b9e4 <_ungetc_r+0x90>
 800b9d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9d8:	07d9      	lsls	r1, r3, #31
 800b9da:	d4c1      	bmi.n	800b960 <_ungetc_r+0xc>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b9e2:	e7e2      	b.n	800b9aa <_ungetc_r+0x56>
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	60a0      	str	r0, [r4, #8]
 800b9e8:	f023 0308 	bic.w	r3, r3, #8
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	61a0      	str	r0, [r4, #24]
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f043 0304 	orr.w	r3, r3, #4
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9fa:	6862      	ldr	r2, [r4, #4]
 800b9fc:	b2ed      	uxtb	r5, r5
 800b9fe:	b1d3      	cbz	r3, 800ba36 <_ungetc_r+0xe2>
 800ba00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba02:	4293      	cmp	r3, r2
 800ba04:	dc05      	bgt.n	800ba12 <_ungetc_r+0xbe>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f7ff ff69 	bl	800b8e0 <__submore>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d1e1      	bne.n	800b9d6 <_ungetc_r+0x82>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	1e5a      	subs	r2, r3, #1
 800ba16:	6022      	str	r2, [r4, #0]
 800ba18:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ba1c:	6863      	ldr	r3, [r4, #4]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba24:	07da      	lsls	r2, r3, #31
 800ba26:	d49d      	bmi.n	800b964 <_ungetc_r+0x10>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	059b      	lsls	r3, r3, #22
 800ba2c:	d49a      	bmi.n	800b964 <_ungetc_r+0x10>
 800ba2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba30:	f7fc fd1e 	bl	8008470 <__retarget_lock_release_recursive>
 800ba34:	e796      	b.n	800b964 <_ungetc_r+0x10>
 800ba36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ba38:	6920      	ldr	r0, [r4, #16]
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	f001 0101 	and.w	r1, r1, #1
 800ba40:	b160      	cbz	r0, 800ba5c <_ungetc_r+0x108>
 800ba42:	4298      	cmp	r0, r3
 800ba44:	d20a      	bcs.n	800ba5c <_ungetc_r+0x108>
 800ba46:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800ba4a:	42a8      	cmp	r0, r5
 800ba4c:	d106      	bne.n	800ba5c <_ungetc_r+0x108>
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	3201      	adds	r2, #1
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	6062      	str	r2, [r4, #4]
 800ba56:	2900      	cmp	r1, #0
 800ba58:	d184      	bne.n	800b964 <_ungetc_r+0x10>
 800ba5a:	e7e5      	b.n	800ba28 <_ungetc_r+0xd4>
 800ba5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba64:	6363      	str	r3, [r4, #52]	; 0x34
 800ba66:	2303      	movs	r3, #3
 800ba68:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba6a:	4623      	mov	r3, r4
 800ba6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	2301      	movs	r3, #1
 800ba74:	6063      	str	r3, [r4, #4]
 800ba76:	e7ee      	b.n	800ba56 <_ungetc_r+0x102>
 800ba78:	0800c2a0 	.word	0x0800c2a0
 800ba7c:	0800c2c0 	.word	0x0800c2c0
 800ba80:	0800c280 	.word	0x0800c280

0800ba84 <__assert_func>:
 800ba84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba86:	4614      	mov	r4, r2
 800ba88:	461a      	mov	r2, r3
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <__assert_func+0x2c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4605      	mov	r5, r0
 800ba90:	68d8      	ldr	r0, [r3, #12]
 800ba92:	b14c      	cbz	r4, 800baa8 <__assert_func+0x24>
 800ba94:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <__assert_func+0x30>)
 800ba96:	9100      	str	r1, [sp, #0]
 800ba98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba9c:	4906      	ldr	r1, [pc, #24]	; (800bab8 <__assert_func+0x34>)
 800ba9e:	462b      	mov	r3, r5
 800baa0:	f000 f80e 	bl	800bac0 <fiprintf>
 800baa4:	f000 f88e 	bl	800bbc4 <abort>
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <__assert_func+0x38>)
 800baaa:	461c      	mov	r4, r3
 800baac:	e7f3      	b.n	800ba96 <__assert_func+0x12>
 800baae:	bf00      	nop
 800bab0:	20000010 	.word	0x20000010
 800bab4:	0800c530 	.word	0x0800c530
 800bab8:	0800c53d 	.word	0x0800c53d
 800babc:	0800c56b 	.word	0x0800c56b

0800bac0 <fiprintf>:
 800bac0:	b40e      	push	{r1, r2, r3}
 800bac2:	b503      	push	{r0, r1, lr}
 800bac4:	4601      	mov	r1, r0
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	4805      	ldr	r0, [pc, #20]	; (800bae0 <fiprintf+0x20>)
 800baca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bace:	6800      	ldr	r0, [r0, #0]
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	f7ff f8df 	bl	800ac94 <_vfiprintf_r>
 800bad6:	b002      	add	sp, #8
 800bad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800badc:	b003      	add	sp, #12
 800bade:	4770      	bx	lr
 800bae0:	20000010 	.word	0x20000010

0800bae4 <_fstat_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d07      	ldr	r5, [pc, #28]	; (800bb04 <_fstat_r+0x20>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	4611      	mov	r1, r2
 800baf0:	602b      	str	r3, [r5, #0]
 800baf2:	f7f6 fb84 	bl	80021fe <_fstat>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d102      	bne.n	800bb00 <_fstat_r+0x1c>
 800bafa:	682b      	ldr	r3, [r5, #0]
 800bafc:	b103      	cbz	r3, 800bb00 <_fstat_r+0x1c>
 800bafe:	6023      	str	r3, [r4, #0]
 800bb00:	bd38      	pop	{r3, r4, r5, pc}
 800bb02:	bf00      	nop
 800bb04:	200044d0 	.word	0x200044d0

0800bb08 <_isatty_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d06      	ldr	r5, [pc, #24]	; (800bb24 <_isatty_r+0x1c>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	602b      	str	r3, [r5, #0]
 800bb14:	f7f6 fb83 	bl	800221e <_isatty>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_isatty_r+0x1a>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_isatty_r+0x1a>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	200044d0 	.word	0x200044d0

0800bb28 <__ascii_mbtowc>:
 800bb28:	b082      	sub	sp, #8
 800bb2a:	b901      	cbnz	r1, 800bb2e <__ascii_mbtowc+0x6>
 800bb2c:	a901      	add	r1, sp, #4
 800bb2e:	b142      	cbz	r2, 800bb42 <__ascii_mbtowc+0x1a>
 800bb30:	b14b      	cbz	r3, 800bb46 <__ascii_mbtowc+0x1e>
 800bb32:	7813      	ldrb	r3, [r2, #0]
 800bb34:	600b      	str	r3, [r1, #0]
 800bb36:	7812      	ldrb	r2, [r2, #0]
 800bb38:	1e10      	subs	r0, r2, #0
 800bb3a:	bf18      	it	ne
 800bb3c:	2001      	movne	r0, #1
 800bb3e:	b002      	add	sp, #8
 800bb40:	4770      	bx	lr
 800bb42:	4610      	mov	r0, r2
 800bb44:	e7fb      	b.n	800bb3e <__ascii_mbtowc+0x16>
 800bb46:	f06f 0001 	mvn.w	r0, #1
 800bb4a:	e7f8      	b.n	800bb3e <__ascii_mbtowc+0x16>

0800bb4c <_realloc_r>:
 800bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb50:	4680      	mov	r8, r0
 800bb52:	4614      	mov	r4, r2
 800bb54:	460e      	mov	r6, r1
 800bb56:	b921      	cbnz	r1, 800bb62 <_realloc_r+0x16>
 800bb58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	f7fc bcbf 	b.w	80084e0 <_malloc_r>
 800bb62:	b92a      	cbnz	r2, 800bb70 <_realloc_r+0x24>
 800bb64:	f7ff f820 	bl	800aba8 <_free_r>
 800bb68:	4625      	mov	r5, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb70:	f000 f82f 	bl	800bbd2 <_malloc_usable_size_r>
 800bb74:	4284      	cmp	r4, r0
 800bb76:	4607      	mov	r7, r0
 800bb78:	d802      	bhi.n	800bb80 <_realloc_r+0x34>
 800bb7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb7e:	d812      	bhi.n	800bba6 <_realloc_r+0x5a>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4640      	mov	r0, r8
 800bb84:	f7fc fcac 	bl	80084e0 <_malloc_r>
 800bb88:	4605      	mov	r5, r0
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0ed      	beq.n	800bb6a <_realloc_r+0x1e>
 800bb8e:	42bc      	cmp	r4, r7
 800bb90:	4622      	mov	r2, r4
 800bb92:	4631      	mov	r1, r6
 800bb94:	bf28      	it	cs
 800bb96:	463a      	movcs	r2, r7
 800bb98:	f7fc fc6b 	bl	8008472 <memcpy>
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4640      	mov	r0, r8
 800bba0:	f7ff f802 	bl	800aba8 <_free_r>
 800bba4:	e7e1      	b.n	800bb6a <_realloc_r+0x1e>
 800bba6:	4635      	mov	r5, r6
 800bba8:	e7df      	b.n	800bb6a <_realloc_r+0x1e>

0800bbaa <__ascii_wctomb>:
 800bbaa:	b149      	cbz	r1, 800bbc0 <__ascii_wctomb+0x16>
 800bbac:	2aff      	cmp	r2, #255	; 0xff
 800bbae:	bf85      	ittet	hi
 800bbb0:	238a      	movhi	r3, #138	; 0x8a
 800bbb2:	6003      	strhi	r3, [r0, #0]
 800bbb4:	700a      	strbls	r2, [r1, #0]
 800bbb6:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbba:	bf98      	it	ls
 800bbbc:	2001      	movls	r0, #1
 800bbbe:	4770      	bx	lr
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4770      	bx	lr

0800bbc4 <abort>:
 800bbc4:	b508      	push	{r3, lr}
 800bbc6:	2006      	movs	r0, #6
 800bbc8:	f000 f834 	bl	800bc34 <raise>
 800bbcc:	2001      	movs	r0, #1
 800bbce:	f7f6 fac7 	bl	8002160 <_exit>

0800bbd2 <_malloc_usable_size_r>:
 800bbd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd6:	1f18      	subs	r0, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bfbc      	itt	lt
 800bbdc:	580b      	ldrlt	r3, [r1, r0]
 800bbde:	18c0      	addlt	r0, r0, r3
 800bbe0:	4770      	bx	lr

0800bbe2 <_raise_r>:
 800bbe2:	291f      	cmp	r1, #31
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	460d      	mov	r5, r1
 800bbea:	d904      	bls.n	800bbf6 <_raise_r+0x14>
 800bbec:	2316      	movs	r3, #22
 800bbee:	6003      	str	r3, [r0, #0]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbf8:	b112      	cbz	r2, 800bc00 <_raise_r+0x1e>
 800bbfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbfe:	b94b      	cbnz	r3, 800bc14 <_raise_r+0x32>
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 f831 	bl	800bc68 <_getpid_r>
 800bc06:	462a      	mov	r2, r5
 800bc08:	4601      	mov	r1, r0
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc10:	f000 b818 	b.w	800bc44 <_kill_r>
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d00a      	beq.n	800bc2e <_raise_r+0x4c>
 800bc18:	1c59      	adds	r1, r3, #1
 800bc1a:	d103      	bne.n	800bc24 <_raise_r+0x42>
 800bc1c:	2316      	movs	r3, #22
 800bc1e:	6003      	str	r3, [r0, #0]
 800bc20:	2001      	movs	r0, #1
 800bc22:	e7e7      	b.n	800bbf4 <_raise_r+0x12>
 800bc24:	2400      	movs	r4, #0
 800bc26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	4798      	blx	r3
 800bc2e:	2000      	movs	r0, #0
 800bc30:	e7e0      	b.n	800bbf4 <_raise_r+0x12>
	...

0800bc34 <raise>:
 800bc34:	4b02      	ldr	r3, [pc, #8]	; (800bc40 <raise+0xc>)
 800bc36:	4601      	mov	r1, r0
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	f7ff bfd2 	b.w	800bbe2 <_raise_r>
 800bc3e:	bf00      	nop
 800bc40:	20000010 	.word	0x20000010

0800bc44 <_kill_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	; (800bc64 <_kill_r+0x20>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	f7f6 fa75 	bl	8002140 <_kill>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d102      	bne.n	800bc60 <_kill_r+0x1c>
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	b103      	cbz	r3, 800bc60 <_kill_r+0x1c>
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	200044d0 	.word	0x200044d0

0800bc68 <_getpid_r>:
 800bc68:	f7f6 ba62 	b.w	8002130 <_getpid>

0800bc6c <_init>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr

0800bc78 <_fini>:
 800bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7a:	bf00      	nop
 800bc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7e:	bc08      	pop	{r3}
 800bc80:	469e      	mov	lr, r3
 800bc82:	4770      	bx	lr
