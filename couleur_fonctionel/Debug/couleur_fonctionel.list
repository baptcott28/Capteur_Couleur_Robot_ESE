
couleur_fonctionel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  08009690  08009690  00019690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa0  08009fa0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa0  08009fa0  00019fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa8  08009fa8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001dc  0800a18c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800a18c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223a  00000000  00000000  00031fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00034fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271e2  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e15  00000000  00000000  0005cef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2743  00000000  00000000  0006dd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016044a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f34  00000000  00000000  0016049c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009674 	.word	0x08009674

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009674 	.word	0x08009674

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <colorSetOutputFreqScaling>:
// ----- Global Fonctions -----


// --- fonctions de gestion du hardware ---

static void colorSetOutputFreqScaling(h_color_sensor_t * h_color_sensor){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	switch(h_color_sensor->ouput_scale){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d836      	bhi.n	8000fac <colorSetOutputFreqScaling+0x80>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <colorSetOutputFreqScaling+0x18>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f97 	.word	0x08000f97
 8000f48:	08000f81 	.word	0x08000f81
 8000f4c:	08000f6b 	.word	0x08000f6b
 8000f50:	08000f55 	.word	0x08000f55
	case 4:
		// 100%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f5a:	f000 fd42 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f64:	f000 fd3d 	bl	80019e2 <GPIO_write>
		break;
 8000f68:	e020      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 3:
		// 20%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f70:	f000 fd37 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f7a:	f000 fd32 	bl	80019e2 <GPIO_write>
		break;
 8000f7e:	e015      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 2:
		// 2%
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f86:	f000 fd2c 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000f90:	f000 fd27 	bl	80019e2 <GPIO_write>
		break;
 8000f94:	e00a      	b.n	8000fac <colorSetOutputFreqScaling+0x80>
	case 1:
		// Power_down
		GPIO_write(color_S0_GPIO_Port,color_S0_Pin,0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <colorSetOutputFreqScaling+0x88>)
 8000f9c:	f000 fd21 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <colorSetOutputFreqScaling+0x8c>)
 8000fa6:	f000 fd1c 	bl	80019e2 <GPIO_write>
		break;
 8000faa:	bf00      	nop
	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021800 	.word	0x40021800

08000fbc <colorSetPhotodiodeType>:

void colorSetPhotodiodeType(h_color_sensor_t * h_color_sensor,color_sensor_color_t color){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	h_color_sensor->color=color;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	701a      	strb	r2, [r3, #0]
	switch(color){
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d842      	bhi.n	800105c <colorSetPhotodiodeType+0xa0>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <colorSetPhotodiodeType+0x20>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001025 	.word	0x08001025
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08000fed 	.word	0x08000fed
	case GREEN:
		//GREEN
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481c      	ldr	r0, [pc, #112]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8000ff2:	f000 fcf6 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8000ffc:	f000 fcf1 	bl	80019e2 <GPIO_write>
		printf("\n--- photosensor set vert ---\r\n\n");
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <colorSetPhotodiodeType+0xb0>)
 8001002:	f005 fb89 	bl	8006718 <puts>
		break;
 8001006:	e029      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case CLEAR:
		//clear
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800100e:	f000 fce8 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 8001012:	2200      	movs	r2, #0
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001018:	f000 fce3 	bl	80019e2 <GPIO_write>
		printf("\n--- photosensor set clear ---\r\n\n");
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <colorSetPhotodiodeType+0xb4>)
 800101e:	f005 fb7b 	bl	8006718 <puts>
		break;
 8001022:	e01b      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case BLUE:
		//BLUE
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 800102a:	f000 fcda 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 800102e:	2201      	movs	r2, #1
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001034:	f000 fcd5 	bl	80019e2 <GPIO_write>
		printf("\n--- photosensor set blue ---\r\n\n");
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <colorSetPhotodiodeType+0xb8>)
 800103a:	f005 fb6d 	bl	8006718 <puts>
		break;
 800103e:	e00d      	b.n	800105c <colorSetPhotodiodeType+0xa0>
	case RED:
		//RED
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <colorSetPhotodiodeType+0xa8>)
 8001046:	f000 fccc 	bl	80019e2 <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 800104a:	2200      	movs	r2, #0
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <colorSetPhotodiodeType+0xac>)
 8001050:	f000 fcc7 	bl	80019e2 <GPIO_write>
		printf("\n--- photosensor set rouge ---\r\n\n");
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <colorSetPhotodiodeType+0xbc>)
 8001056:	f005 fb5f 	bl	8006718 <puts>
		break;
 800105a:	bf00      	nop
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020400 	.word	0x40020400
 8001068:	40021800 	.word	0x40021800
 800106c:	08009690 	.word	0x08009690
 8001070:	080096b0 	.word	0x080096b0
 8001074:	080096d4 	.word	0x080096d4
 8001078:	080096f4 	.word	0x080096f4

0800107c <colorSensorInit>:

void colorSensorInit(h_color_sensor_t *h_color_sensor, color_sensor_color_t color, color_sensor_output_scale_t output_scale, color_sensor_state_t state){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	460b      	mov	r3, r1
 8001090:	70bb      	strb	r3, [r7, #2]
 8001092:	4613      	mov	r3, r2
 8001094:	707b      	strb	r3, [r7, #1]
	h_color_sensor->color=color;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	701a      	strb	r2, [r3, #0]
	h_color_sensor->ouput_scale=output_scale;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	78ba      	ldrb	r2, [r7, #2]
 80010a0:	705a      	strb	r2, [r3, #1]
	h_color_sensor->sensor_state=state;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	787a      	ldrb	r2, [r7, #1]
 80010a6:	709a      	strb	r2, [r3, #2]
	h_color_sensor->frequence=0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
	h_color_sensor->blue_color=0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
	h_color_sensor->green_color=0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	h_color_sensor->red_color=0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
	h_color_sensor->green_transformation.green_coef_dir=1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_min_freq=1;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	835a      	strh	r2, [r3, #26]
	h_color_sensor->green_transformation.green_ord_origin=1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	831a      	strh	r2, [r3, #24]
	h_color_sensor->red_transformation.red_coef_dir=1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_min_freq=1;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	841a      	strh	r2, [r3, #32]
	h_color_sensor->red_transformation.red_ord_origin=1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	83da      	strh	r2, [r3, #30]
	h_color_sensor->calib_state=WAINTING_FOR_CALIB;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	751a      	strb	r2, [r3, #20]
	colorSetOutputFreqScaling(h_color_sensor);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff1e 	bl	8000f2c <colorSetOutputFreqScaling>
	colorSetPhotodiodeType(h_color_sensor,color);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff61 	bl	8000fbc <colorSetPhotodiodeType>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <colorDisable>:
uint32_t colorGetGreenValue(h_color_sensor_t * h_color_sensor){
	printf("sensor_value : %ld\r\n",h_color_sensor->frequence);
	return h_color_sensor->green_color;
}

void colorDisable(h_color_sensor_t * h_color_sensor){
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b095      	sub	sp, #84	; 0x54
 8001108:	af12      	add	r7, sp, #72	; 0x48
 800110a:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <colorDisable+0x50>)
 8001112:	f000 fc66 	bl	80019e2 <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_DISABLE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,STOP,TIM_CHANNEL_1);
 800111c:	4e0e      	ldr	r6, [pc, #56]	; (8001158 <colorDisable+0x54>)
 800111e:	2300      	movs	r3, #0
 8001120:	9311      	str	r3, [sp, #68]	; 0x44
 8001122:	2300      	movs	r3, #0
 8001124:	9310      	str	r3, [sp, #64]	; 0x40
 8001126:	2301      	movs	r3, #1
 8001128:	930f      	str	r3, [sp, #60]	; 0x3c
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001140:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001144:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001148:	f000 fbd9 	bl	80018fe <timer_handle>
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	40020800 	.word	0x40020800
 8001158:	20000354 	.word	0x20000354

0800115c <colorEnable>:

void colorEnable(h_color_sensor_t * h_color_sensor){
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b095      	sub	sp, #84	; 0x54
 8001160:	af12      	add	r7, sp, #72	; 0x48
 8001162:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <colorEnable+0x50>)
 800116a:	f000 fc3a 	bl	80019e2 <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_ENABLE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	709a      	strb	r2, [r3, #2]
	timer_handle(htim2,INPUT_CAPTURE_IT,START,TIM_CHANNEL_1);
 8001174:	4e0e      	ldr	r6, [pc, #56]	; (80011b0 <colorEnable+0x54>)
 8001176:	2300      	movs	r3, #0
 8001178:	9311      	str	r3, [sp, #68]	; 0x44
 800117a:	2301      	movs	r3, #1
 800117c:	9310      	str	r3, [sp, #64]	; 0x40
 800117e:	2301      	movs	r3, #1
 8001180:	930f      	str	r3, [sp, #60]	; 0x3c
 8001182:	466d      	mov	r5, sp
 8001184:	f106 0410 	add.w	r4, r6, #16
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001198:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800119c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a0:	f000 fbad 	bl	80018fe <timer_handle>
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ac:	40020800 	.word	0x40020800
 80011b0:	20000354 	.word	0x20000354

080011b4 <colorHandleCalibrationSensor>:


// --- fonctions de calibration ---

uint32_t colorHandleCalibrationSensor(h_color_sensor_t * h_color_sensor,h_calib_buffer_structure_t * h_calib_buffer_struct){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	calibration_flag=1;
 80011be:	4b84      	ldr	r3, [pc, #528]	; (80013d0 <colorHandleCalibrationSensor+0x21c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
	printf("calibration flag : %d\r\n",calibration_flag);
 80011c4:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <colorHandleCalibrationSensor+0x21c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4882      	ldr	r0, [pc, #520]	; (80013d4 <colorHandleCalibrationSensor+0x220>)
 80011cc:	f005 fa1e 	bl	800660c <iprintf>
	char entree[2];
	h_color_sensor->calib_state=CALIB_VERT_CANETTE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	751a      	strb	r2, [r3, #20]
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80011d6:	e08b      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>
		//printf("entré dans while\r\n");
		switch(h_color_sensor->calib_state){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7d1b      	ldrb	r3, [r3, #20]
 80011dc:	3b01      	subs	r3, #1
 80011de:	2b03      	cmp	r3, #3
 80011e0:	f200 8085 	bhi.w	80012ee <colorHandleCalibrationSensor+0x13a>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <colorHandleCalibrationSensor+0x38>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	080011fd 	.word	0x080011fd
 80011f0:	08001235 	.word	0x08001235
 80011f4:	08001273 	.word	0x08001273
 80011f8:	080012b1 	.word	0x080012b1
		case CALIB_VERT_CANETTE:
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 80011fc:	2104      	movs	r1, #4
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fedc 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 8001204:	4874      	ldr	r0, [pc, #464]	; (80013d8 <colorHandleCalibrationSensor+0x224>)
 8001206:	f005 fa87 	bl	8006718 <puts>
			scanf( "%s",entree);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4872      	ldr	r0, [pc, #456]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 8001212:	f005 fa89 	bl	8006728 <iscanf>
			h_calib_buffer_struct->calib_value_vert_canette=0;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	801a      	strh	r2, [r3, #0]
			colorEnable(h_color_sensor);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff9d 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_vert_canette==0){
 8001222:	bf00      	nop
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0fb      	beq.n	8001224 <colorHandleCalibrationSensor+0x70>
				//Wait for calib completed
			}
			h_color_sensor->calib_state=CALIB_VERT_VIDE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2202      	movs	r2, #2
 8001230:	751a      	strb	r2, [r3, #20]
			break;
 8001232:	e05d      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		case CALIB_VERT_VIDE:
			printf("calib_vert_vide\r\n");
 8001234:	486a      	ldr	r0, [pc, #424]	; (80013e0 <colorHandleCalibrationSensor+0x22c>)
 8001236:	f005 fa6f 	bl	8006718 <puts>
			colorSetPhotodiodeType(h_color_sensor,GREEN);
 800123a:	2104      	movs	r1, #4
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff febd 	bl	8000fbc <colorSetPhotodiodeType>
			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when the green can is removed\r\n");
 8001242:	4868      	ldr	r0, [pc, #416]	; (80013e4 <colorHandleCalibrationSensor+0x230>)
 8001244:	f005 fa68 	bl	8006718 <puts>
			scanf("%s",entree);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	4863      	ldr	r0, [pc, #396]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 8001250:	f005 fa6a 	bl	8006728 <iscanf>
			h_calib_buffer_struct->calib_value_vert_vide=0;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	805a      	strh	r2, [r3, #2]
			colorEnable(h_color_sensor);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff7e 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_vert_vide==0){
 8001260:	bf00      	nop
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	885b      	ldrh	r3, [r3, #2]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0fb      	beq.n	8001262 <colorHandleCalibrationSensor+0xae>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_CANETTE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	751a      	strb	r2, [r3, #20]
			break;
 8001270:	e03e      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		case CALIB_ROUGE_CANETTE:
			printf("calib_rouge_canette\r\n");
 8001272:	485d      	ldr	r0, [pc, #372]	; (80013e8 <colorHandleCalibrationSensor+0x234>)
 8001274:	f005 fa50 	bl	8006718 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 8001278:	2101      	movs	r1, #1
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fe9e 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a red can is captured\r\n");
 8001280:	485a      	ldr	r0, [pc, #360]	; (80013ec <colorHandleCalibrationSensor+0x238>)
 8001282:	f005 fa49 	bl	8006718 <puts>
			scanf("%s",entree);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4853      	ldr	r0, [pc, #332]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 800128e:	f005 fa4b 	bl	8006728 <iscanf>
			h_calib_buffer_struct->calib_value_rouge_canette=0;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	809a      	strh	r2, [r3, #4]
			colorEnable(h_color_sensor);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff5f 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_rouge_canette==0){
 800129e:	bf00      	nop
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0fb      	beq.n	80012a0 <colorHandleCalibrationSensor+0xec>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_ROUGE_VIDE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2204      	movs	r2, #4
 80012ac:	751a      	strb	r2, [r3, #20]
			break;
 80012ae:	e01f      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		case CALIB_ROUGE_VIDE:
			printf("calib_rouge_vide\r\n");
 80012b0:	484f      	ldr	r0, [pc, #316]	; (80013f0 <colorHandleCalibrationSensor+0x23c>)
 80012b2:	f005 fa31 	bl	8006718 <puts>
			colorSetPhotodiodeType(h_color_sensor,RED);
 80012b6:	2101      	movs	r1, #1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fe7f 	bl	8000fbc <colorSetPhotodiodeType>

			// -- waiting for operator to put a green can in front of the sensor
			printf("press enter when a green can is captured\r\n");
 80012be:	4846      	ldr	r0, [pc, #280]	; (80013d8 <colorHandleCalibrationSensor+0x224>)
 80012c0:	f005 fa2a 	bl	8006718 <puts>
			scanf("%s",entree);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4844      	ldr	r0, [pc, #272]	; (80013dc <colorHandleCalibrationSensor+0x228>)
 80012cc:	f005 fa2c 	bl	8006728 <iscanf>
			h_calib_buffer_struct->calib_value_rouge_vide=0;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	80da      	strh	r2, [r3, #6]
			colorEnable(h_color_sensor);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff40 	bl	800115c <colorEnable>
			while(h_calib_buffer_struct->calib_value_rouge_vide==0){
 80012dc:	bf00      	nop
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	88db      	ldrh	r3, [r3, #6]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0fb      	beq.n	80012de <colorHandleCalibrationSensor+0x12a>
				//Wait for calib completed...
			}
			h_color_sensor->calib_state=CALIB_DONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2205      	movs	r2, #5
 80012ea:	751a      	strb	r2, [r3, #20]
			break;
 80012ec:	e000      	b.n	80012f0 <colorHandleCalibrationSensor+0x13c>

		default:
			break;
 80012ee:	bf00      	nop
	while(h_color_sensor->calib_state!=CALIB_DONE){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7d1b      	ldrb	r3, [r3, #20]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	f47f af6f 	bne.w	80011d8 <colorHandleCalibrationSensor+0x24>
		}
	}
	printf("calib_verte_canette : %u\r\n",h_calib_buffer_struct->calib_value_vert_canette);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	483c      	ldr	r0, [pc, #240]	; (80013f4 <colorHandleCalibrationSensor+0x240>)
 8001302:	f005 f983 	bl	800660c <iprintf>
	printf("calib_verte_vide : %u\r\n\n",h_calib_buffer_struct->calib_value_vert_vide);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	885b      	ldrh	r3, [r3, #2]
 800130a:	4619      	mov	r1, r3
 800130c:	483a      	ldr	r0, [pc, #232]	; (80013f8 <colorHandleCalibrationSensor+0x244>)
 800130e:	f005 f97d 	bl	800660c <iprintf>
	printf("calib_rouge_canette : %u\r\n",h_calib_buffer_struct->calib_value_rouge_canette);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	4619      	mov	r1, r3
 8001318:	4838      	ldr	r0, [pc, #224]	; (80013fc <colorHandleCalibrationSensor+0x248>)
 800131a:	f005 f977 	bl	800660c <iprintf>
	printf("calib_rouge_vide : %u\r\n\n",h_calib_buffer_struct->calib_value_rouge_vide);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	4619      	mov	r1, r3
 8001324:	4836      	ldr	r0, [pc, #216]	; (8001400 <colorHandleCalibrationSensor+0x24c>)
 8001326:	f005 f971 	bl	800660c <iprintf>

	//computation of the transformation coefficient
	h_color_sensor->green_transformation.green_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_calib_buffer_struct->calib_value_vert_vide)-(h_calib_buffer_struct->calib_value_vert_canette)));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	885b      	ldrh	r3, [r3, #2]
 800132e:	461a      	mov	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f242 7210 	movw	r2, #10000	; 0x2710
 800133a:	fb92 f3f3 	sdiv	r3, r2, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	82da      	strh	r2, [r3, #22]
	h_color_sensor->green_transformation.green_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->green_transformation.green_coef_dir)*(h_calib_buffer_struct->calib_value_vert_vide)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8ada      	ldrh	r2, [r3, #22]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	885b      	ldrh	r3, [r3, #2]
 800134c:	fb12 f303 	smulbb	r3, r2, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	831a      	strh	r2, [r3, #24]
	printf("coef dir vert : %u\r\nord origin vert : %u\r\nmin freq vert : %u\r\n\n",h_color_sensor->green_transformation.green_coef_dir,h_color_sensor->green_transformation.green_ord_origin,h_color_sensor->green_transformation.green_min_freq);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8adb      	ldrh	r3, [r3, #22]
 8001362:	4619      	mov	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	8b1b      	ldrh	r3, [r3, #24]
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8b5b      	ldrh	r3, [r3, #26]
 800136e:	4825      	ldr	r0, [pc, #148]	; (8001404 <colorHandleCalibrationSensor+0x250>)
 8001370:	f005 f94c 	bl	800660c <iprintf>

	h_color_sensor->red_transformation.red_coef_dir=(uint16_t)((ECHELLE_VAL_HAUTE-ECHELLE_VAL_BASSE)/((h_calib_buffer_struct->calib_value_rouge_vide)-(h_calib_buffer_struct->calib_value_rouge_canette)));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	88db      	ldrh	r3, [r3, #6]
 8001378:	461a      	mov	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f242 7210 	movw	r2, #10000	; 0x2710
 8001384:	fb92 f3f3 	sdiv	r3, r2, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	839a      	strh	r2, [r3, #28]
	h_color_sensor->red_transformation.red_ord_origin=(uint16_t)(ECHELLE_VAL_HAUTE-((h_color_sensor->red_transformation.red_coef_dir)*(h_calib_buffer_struct->calib_value_rouge_vide)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8b9a      	ldrh	r2, [r3, #28]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	88db      	ldrh	r3, [r3, #6]
 8001396:	fb12 f303 	smulbb	r3, r2, r3
 800139a:	b29a      	uxth	r2, r3
 800139c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	83da      	strh	r2, [r3, #30]
	printf("coef dir rouge : %u\r\nord origin rouge : %u\r\nmin freq rouge : %u\r\n\n",h_color_sensor->red_transformation.red_coef_dir,h_color_sensor->red_transformation.red_ord_origin,h_color_sensor->red_transformation.red_min_freq);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8b9b      	ldrh	r3, [r3, #28]
 80013ac:	4619      	mov	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8bdb      	ldrh	r3, [r3, #30]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8c1b      	ldrh	r3, [r3, #32]
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <colorHandleCalibrationSensor+0x254>)
 80013ba:	f005 f927 	bl	800660c <iprintf>


	// flag to say hey calibration finished
	calibration_flag=0;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <colorHandleCalibrationSensor+0x21c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002d4 	.word	0x200002d4
 80013d4:	08009730 	.word	0x08009730
 80013d8:	08009748 	.word	0x08009748
 80013dc:	08009774 	.word	0x08009774
 80013e0:	08009778 	.word	0x08009778
 80013e4:	0800978c 	.word	0x0800978c
 80013e8:	080097b8 	.word	0x080097b8
 80013ec:	080097d0 	.word	0x080097d0
 80013f0:	080097f8 	.word	0x080097f8
 80013f4:	0800980c 	.word	0x0800980c
 80013f8:	08009828 	.word	0x08009828
 80013fc:	08009844 	.word	0x08009844
 8001400:	08009860 	.word	0x08009860
 8001404:	0800987c 	.word	0x0800987c
 8001408:	080098bc 	.word	0x080098bc

0800140c <colorSensorHandleInputCapture_IT>:


// --- fonction de gestion du retour capteur ---

void colorSensorHandleInputCapture_IT(h_color_sensor_t * h_color_sensor,TIM_TypeDef *TIM,h_calib_buffer_structure_t * h_calib_buffer_struct){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	//printf("entré dans tim2 IT\r\n");
	if(tour==0){
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <colorSensorHandleInputCapture_IT+0x24>
		temps1=TIM->CNT;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	461a      	mov	r2, r3
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <colorSensorHandleInputCapture_IT+0xb8>)
 8001428:	601a      	str	r2, [r3, #0]
		tour=0;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
	}
	if(tour==1){
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <colorSensorHandleInputCapture_IT+0x3c>
		temps2=TIM->CNT;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	461a      	mov	r2, r3
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 8001440:	601a      	str	r2, [r3, #0]
		tour=1;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
	}
	tour=1-tour;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1c3 0301 	rsb	r3, r3, #1
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <colorSensorHandleInputCapture_IT+0xb4>)
 8001452:	6013      	str	r3, [r2, #0]
	freq=abs(temps2-temps1);
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <colorSensorHandleInputCapture_IT+0xbc>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <colorSensorHandleInputCapture_IT+0xb8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	bfb8      	it	lt
 8001462:	425b      	neglt	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 8001468:	601a      	str	r2, [r3, #0]
	h_color_sensor->frequence=freq;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
		}
		printf("fin affichage\r\n");
		u=0;
	}*/

	if((calibration_flag==1)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <colorSensorHandleInputCapture_IT+0xc4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10d      	bne.n	8001496 <colorSensorHandleInputCapture_IT+0x8a>
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001482:	4293      	cmp	r3, r2
 8001484:	d807      	bhi.n	8001496 <colorSensorHandleInputCapture_IT+0x8a>
		colorHandleCalibrationValues(h_color_sensor,freq,h_calib_buffer_struct);
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f820 	bl	80014d4 <colorHandleCalibrationValues>
	}
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
		// Analyse des valeur pour prise de decision sur la couleur
		colorHandleRawValues(h_color_sensor, freq);
	}
}
 8001494:	e00f      	b.n	80014b6 <colorSensorHandleInputCapture_IT+0xaa>
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <colorSensorHandleInputCapture_IT+0xc4>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10b      	bne.n	80014b6 <colorSensorHandleInputCapture_IT+0xaa>
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d805      	bhi.n	80014b6 <colorSensorHandleInputCapture_IT+0xaa>
		colorHandleRawValues(h_color_sensor, freq);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <colorSensorHandleInputCapture_IT+0xc0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f8cf 	bl	8001654 <colorHandleRawValues>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000204 	.word	0x20000204
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	20000200 	.word	0x20000200
 80014cc:	200001f8 	.word	0x200001f8
 80014d0:	200002d4 	.word	0x200002d4

080014d4 <colorHandleCalibrationValues>:

static int colorHandleCalibrationValues(h_color_sensor_t * h_color_sensor, uint32_t frequence,h_calib_buffer_structure_t * h_calib_buffer_struct){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	calib_tab[u]=freq;
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <colorHandleCalibrationValues+0x14c>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	494e      	ldr	r1, [pc, #312]	; (8001624 <colorHandleCalibrationValues+0x150>)
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u++;
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a49      	ldr	r2, [pc, #292]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014f6:	6013      	str	r3, [r2, #0]
	if(u==CALIBRATION_NB_VALUES){
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <colorHandleCalibrationValues+0x148>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b1e      	cmp	r3, #30
 80014fe:	f040 8088 	bne.w	8001612 <colorHandleCalibrationValues+0x13e>
		colorDisable(h_color_sensor);
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff fdfe 	bl	8001104 <colorDisable>
		uint32_t res=0;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
		for(int i=0;i<30;i++){
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e012      	b.n	8001538 <colorHandleCalibrationValues+0x64>
			res=res+calib_tab[i];
 8001512:	4a44      	ldr	r2, [pc, #272]	; (8001624 <colorHandleCalibrationValues+0x150>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4413      	add	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
			printf("calib values[%d] : %ld\r\n",i,calib_tab[i]);
 8001520:	4a40      	ldr	r2, [pc, #256]	; (8001624 <colorHandleCalibrationValues+0x150>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	461a      	mov	r2, r3
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	483e      	ldr	r0, [pc, #248]	; (8001628 <colorHandleCalibrationValues+0x154>)
 800152e:	f005 f86d 	bl	800660c <iprintf>
		for(int i=0;i<30;i++){
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b1d      	cmp	r3, #29
 800153c:	dde9      	ble.n	8001512 <colorHandleCalibrationValues+0x3e>
		}
		switch(h_color_sensor->calib_state){
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	7d1b      	ldrb	r3, [r3, #20]
 8001542:	3b01      	subs	r3, #1
 8001544:	2b03      	cmp	r3, #3
 8001546:	d85b      	bhi.n	8001600 <colorHandleCalibrationValues+0x12c>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <colorHandleCalibrationValues+0x7c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	0800158d 	.word	0x0800158d
 8001558:	080015b1 	.word	0x080015b1
 800155c:	080015dd 	.word	0x080015dd
		case CALIB_VERT_CANETTE:
			h_calib_buffer_struct->calib_value_vert_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4a32      	ldr	r2, [pc, #200]	; (800162c <colorHandleCalibrationValues+0x158>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	801a      	strh	r2, [r3, #0]
			h_color_sensor->green_transformation.green_min_freq=h_calib_buffer_struct->calib_value_vert_canette;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	835a      	strh	r2, [r3, #26]
			printf("Struct calib : champ vert_canette remplie\r\n");
 8001578:	482d      	ldr	r0, [pc, #180]	; (8001630 <colorHandleCalibrationValues+0x15c>)
 800157a:	f005 f8cd 	bl	8006718 <puts>
			printf("Calib_value_vert_canette : %u\r\n\n",h_calib_buffer_struct->calib_value_vert_canette);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	482b      	ldr	r0, [pc, #172]	; (8001634 <colorHandleCalibrationValues+0x160>)
 8001586:	f005 f841 	bl	800660c <iprintf>
			break;
 800158a:	e03d      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		case CALIB_VERT_VIDE:
			h_calib_buffer_struct->calib_value_vert_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4a27      	ldr	r2, [pc, #156]	; (800162c <colorHandleCalibrationValues+0x158>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	805a      	strh	r2, [r3, #2]
			printf("Struct calib : champ vert_vide remplie\r\n");
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <colorHandleCalibrationValues+0x164>)
 800159e:	f005 f8bb 	bl	8006718 <puts>
			printf("Calib_value_vert_vide : %u\r\n\n",h_calib_buffer_struct->calib_value_vert_vide);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	885b      	ldrh	r3, [r3, #2]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4824      	ldr	r0, [pc, #144]	; (800163c <colorHandleCalibrationValues+0x168>)
 80015aa:	f005 f82f 	bl	800660c <iprintf>
			break;
 80015ae:	e02b      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		case CALIB_ROUGE_CANETTE:
			h_calib_buffer_struct->calib_value_rouge_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <colorHandleCalibrationValues+0x158>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	809a      	strh	r2, [r3, #4]
			h_color_sensor->red_transformation.red_min_freq=h_calib_buffer_struct->calib_value_rouge_canette;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	889a      	ldrh	r2, [r3, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	841a      	strh	r2, [r3, #32]
			printf("Struct calib : champ rouge_canette remplie\r\n");
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <colorHandleCalibrationValues+0x16c>)
 80015ca:	f005 f8a5 	bl	8006718 <puts>
			printf("Calib_value_rouge_canette : %u\r\n\n",h_calib_buffer_struct->calib_value_rouge_canette);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	4619      	mov	r1, r3
 80015d4:	481b      	ldr	r0, [pc, #108]	; (8001644 <colorHandleCalibrationValues+0x170>)
 80015d6:	f005 f819 	bl	800660c <iprintf>
			break;
 80015da:	e015      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		case CALIB_ROUGE_VIDE:
			h_calib_buffer_struct->calib_value_rouge_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <colorHandleCalibrationValues+0x158>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	80da      	strh	r2, [r3, #6]
			printf("Struct calib : champ rouge_vide remplie\r\n");
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <colorHandleCalibrationValues+0x174>)
 80015ee:	f005 f893 	bl	8006718 <puts>
			printf("Calib_value_vert_canette : %u\r\n",h_calib_buffer_struct->calib_value_rouge_vide);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	88db      	ldrh	r3, [r3, #6]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <colorHandleCalibrationValues+0x178>)
 80015fa:	f005 f807 	bl	800660c <iprintf>
			break;
 80015fe:	e003      	b.n	8001608 <colorHandleCalibrationValues+0x134>
		default:
			printf("bug dans la calibration\r\n\n");
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <colorHandleCalibrationValues+0x17c>)
 8001602:	f005 f889 	bl	8006718 <puts>
			break;
 8001606:	bf00      	nop
		}
		u=0;
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <colorHandleCalibrationValues+0x148>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
		return 1;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <colorHandleCalibrationValues+0x140>
	}
	return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000350 	.word	0x20000350
 8001620:	200001f8 	.word	0x200001f8
 8001624:	200002d8 	.word	0x200002d8
 8001628:	08009900 	.word	0x08009900
 800162c:	88888889 	.word	0x88888889
 8001630:	0800991c 	.word	0x0800991c
 8001634:	08009948 	.word	0x08009948
 8001638:	0800996c 	.word	0x0800996c
 800163c:	08009994 	.word	0x08009994
 8001640:	080099b4 	.word	0x080099b4
 8001644:	080099e0 	.word	0x080099e0
 8001648:	08009a04 	.word	0x08009a04
 800164c:	08009a30 	.word	0x08009a30
 8001650:	08009a50 	.word	0x08009a50

08001654 <colorHandleRawValues>:

static int colorHandleRawValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	//printf("entre dans color_handle\r\n");
	if(raw_values_compteur<((NB_MEASURE_WANTED/2)-1)){
 800165e:	4b84      	ldr	r3, [pc, #528]	; (8001870 <colorHandleRawValues+0x21c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d826      	bhi.n	80016b4 <colorHandleRawValues+0x60>
		// premieres valeurs du tableau donc on est dans le vert
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	8b5b      	ldrh	r3, [r3, #26]
 800166a:	461a      	mov	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4293      	cmp	r3, r2
 8001670:	d202      	bcs.n	8001678 <colorHandleRawValues+0x24>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8b5b      	ldrh	r3, [r3, #26]
 8001676:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001678:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <colorHandleRawValues+0x21c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4a7d      	ldr	r2, [pc, #500]	; (8001874 <colorHandleRawValues+0x220>)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8adb      	ldrh	r3, [r3, #22]
 800168a:	461a      	mov	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	8b12      	ldrh	r2, [r2, #24]
 8001696:	4610      	mov	r0, r2
 8001698:	4a75      	ldr	r2, [pc, #468]	; (8001870 <colorHandleRawValues+0x21c>)
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	4611      	mov	r1, r2
 800169e:	4403      	add	r3, r0
 80016a0:	4a75      	ldr	r2, [pc, #468]	; (8001878 <colorHandleRawValues+0x224>)
 80016a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 80016a6:	4b72      	ldr	r3, [pc, #456]	; (8001870 <colorHandleRawValues+0x21c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <colorHandleRawValues+0x21c>)
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e0d7      	b.n	8001864 <colorHandleRawValues+0x210>
	}

	else if(raw_values_compteur==((NB_MEASURE_WANTED/2)-1)){
 80016b4:	4b6e      	ldr	r3, [pc, #440]	; (8001870 <colorHandleRawValues+0x21c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d130      	bne.n	800171e <colorHandleRawValues+0xca>
		//on est encore dans le vert mais on doit en plus changer la couleur de detection
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8b5b      	ldrh	r3, [r3, #26]
 80016c0:	461a      	mov	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d202      	bcs.n	80016ce <colorHandleRawValues+0x7a>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	8b5b      	ldrh	r3, [r3, #26]
 80016cc:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80016ce:	4b68      	ldr	r3, [pc, #416]	; (8001870 <colorHandleRawValues+0x21c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	4a67      	ldr	r2, [pc, #412]	; (8001874 <colorHandleRawValues+0x220>)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8adb      	ldrh	r3, [r3, #22]
 80016e0:	461a      	mov	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	8b12      	ldrh	r2, [r2, #24]
 80016ec:	4610      	mov	r0, r2
 80016ee:	4a60      	ldr	r2, [pc, #384]	; (8001870 <colorHandleRawValues+0x21c>)
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4403      	add	r3, r0
 80016f6:	4a60      	ldr	r2, [pc, #384]	; (8001878 <colorHandleRawValues+0x224>)
 80016f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 80016fc:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <colorHandleRawValues+0x21c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <colorHandleRawValues+0x21c>)
 8001706:	701a      	strb	r2, [r3, #0]

		// color change
		colorDisable(h_color_sensor);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fcfb 	bl	8001104 <colorDisable>
		colorSetPhotodiodeType(h_color_sensor,RED);
 800170e:	2101      	movs	r1, #1
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fc53 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(h_color_sensor);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fd20 	bl	800115c <colorEnable>
 800171c:	e0a2      	b.n	8001864 <colorHandleRawValues+0x210>
	}

	else if((raw_values_compteur>((NB_MEASURE_WANTED/2)-1))&&(raw_values_compteur<NB_MEASURE_WANTED)){
 800171e:	4b54      	ldr	r3, [pc, #336]	; (8001870 <colorHandleRawValues+0x21c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b09      	cmp	r3, #9
 8001724:	d92a      	bls.n	800177c <colorHandleRawValues+0x128>
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <colorHandleRawValues+0x21c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b13      	cmp	r3, #19
 800172c:	d826      	bhi.n	800177c <colorHandleRawValues+0x128>
		// valeures rouges
		if(frequence<(h_color_sensor->red_transformation.red_min_freq)){
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8c1b      	ldrh	r3, [r3, #32]
 8001732:	461a      	mov	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4293      	cmp	r3, r2
 8001738:	d202      	bcs.n	8001740 <colorHandleRawValues+0xec>
			frequence = (uint32_t)h_color_sensor->red_transformation.red_min_freq;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	8c1b      	ldrh	r3, [r3, #32]
 800173e:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <colorHandleRawValues+0x21c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <colorHandleRawValues+0x220>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->red_transformation.red_coef_dir)*frequence)+(h_color_sensor->red_transformation.red_ord_origin);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8b9b      	ldrh	r3, [r3, #28]
 8001752:	461a      	mov	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	8bd2      	ldrh	r2, [r2, #30]
 800175e:	4610      	mov	r0, r2
 8001760:	4a43      	ldr	r2, [pc, #268]	; (8001870 <colorHandleRawValues+0x21c>)
 8001762:	7812      	ldrb	r2, [r2, #0]
 8001764:	4611      	mov	r1, r2
 8001766:	4403      	add	r3, r0
 8001768:	4a43      	ldr	r2, [pc, #268]	; (8001878 <colorHandleRawValues+0x224>)
 800176a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		raw_values_compteur++;
 800176e:	4b40      	ldr	r3, [pc, #256]	; (8001870 <colorHandleRawValues+0x21c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <colorHandleRawValues+0x21c>)
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e073      	b.n	8001864 <colorHandleRawValues+0x210>
	}

	else if(raw_values_compteur==NB_MEASURE_WANTED){
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <colorHandleRawValues+0x21c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b14      	cmp	r3, #20
 8001782:	d16f      	bne.n	8001864 <colorHandleRawValues+0x210>
		// Pret a faire la moyenne du tableau pour plus de fiabilité
		colorDisable(h_color_sensor);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fcbd 	bl	8001104 <colorDisable>
		uint32_t green_mean=0;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
		uint32_t red_mean=0;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]

		// green mean with erase of waste values (the 2 first one each time)
		//printf("calcul moyenne vert\r\n");
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 8001792:	2302      	movs	r3, #2
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e009      	b.n	80017ac <colorHandleRawValues+0x158>
			green_mean=green_mean+color_scaled_values[i];
 8001798:	4a37      	ldr	r2, [pc, #220]	; (8001878 <colorHandleRawValues+0x224>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	61fb      	str	r3, [r7, #28]
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b09      	cmp	r3, #9
 80017b0:	ddf2      	ble.n	8001798 <colorHandleRawValues+0x144>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne verte : %ld\r\n",i,color_scaled_values[i]);
			printf("green mean : %ld\r\n",green_mean);*/
		}
		green_color_value=floor(green_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fec4 	bl	8000544 <__aeabi_ui2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa10 	bl	8000be8 <__aeabi_d2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a2c      	ldr	r2, [pc, #176]	; (800187c <colorHandleRawValues+0x228>)
 80017cc:	6013      	str	r3, [r2, #0]
		h_color_sensor->green_color=green_color_value;
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <colorHandleRawValues+0x228>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]
		//printf("green color value : %ld\r\n",green_color_value);


		//red values mean
		//printf("calcul moyenne rouge\r\n");
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017d6:	230c      	movs	r3, #12
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e009      	b.n	80017f0 <colorHandleRawValues+0x19c>
			red_mean=red_mean+color_scaled_values[i];
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <colorHandleRawValues+0x224>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4413      	add	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	3301      	adds	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b13      	cmp	r3, #19
 80017f4:	ddf2      	ble.n	80017dc <colorHandleRawValues+0x188>

			//--debug
			/*printf("i=%d,\t ajouté a la moyenne rouge : %ld\r\n",i,color_scaled_values[i]);
			printf("red mean : %ld\r\n",red_mean);*/
		}
		red_color_value=floor(red_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fea2 	bl	8000544 <__aeabi_ui2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9ee 	bl	8000be8 <__aeabi_d2uiz>
 800180c:	4603      	mov	r3, r0
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <colorHandleRawValues+0x22c>)
 8001810:	6013      	str	r3, [r2, #0]
		h_color_sensor->red_color=red_color_value;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <colorHandleRawValues+0x22c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60da      	str	r2, [r3, #12]

		//--debug
		//printf("red color value : %ld\r\n",red_color_value);

		raw_values_compteur=0;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <colorHandleRawValues+0x21c>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]

		//Affichage tableau
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e010      	b.n	8001848 <colorHandleRawValues+0x1f4>
			printf("color_raw_values[%d] : %ld\t->\t color_scaled_value[%d] : %ld\r\n",i,color_raw_values[i],i,color_scaled_values[i]);
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <colorHandleRawValues+0x220>)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182e:	4912      	ldr	r1, [pc, #72]	; (8001878 <colorHandleRawValues+0x224>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	68f9      	ldr	r1, [r7, #12]
 800183c:	4811      	ldr	r0, [pc, #68]	; (8001884 <colorHandleRawValues+0x230>)
 800183e:	f004 fee5 	bl	800660c <iprintf>
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b13      	cmp	r3, #19
 800184c:	ddeb      	ble.n	8001826 <colorHandleRawValues+0x1d2>
		}
		colorAnalyse(h_color_sensor,green_color_value,red_color_value);
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <colorHandleRawValues+0x228>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <colorHandleRawValues+0x22c>)
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f817 	bl	800188c <colorAnalyse>
		printf("waiting for button press : \r\n");
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <colorHandleRawValues+0x234>)
 8001860:	f004 ff5a 	bl	8006718 <puts>
	}

	return 0; // fonctionnement normal
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002c8 	.word	0x200002c8
 8001874:	20000268 	.word	0x20000268
 8001878:	20000208 	.word	0x20000208
 800187c:	200002cc 	.word	0x200002cc
 8001880:	200002d0 	.word	0x200002d0
 8001884:	08009a6c 	.word	0x08009a6c
 8001888:	08009aac 	.word	0x08009aac

0800188c <colorAnalyse>:


// --- fonction d'analyse et de prise de décision ---

static void colorAnalyse(h_color_sensor_t * h_color_sensor, color_t green, color_t red){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	printf("green : %ld \r\n",green);
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	480f      	ldr	r0, [pc, #60]	; (80018d8 <colorAnalyse+0x4c>)
 800189c:	f004 feb6 	bl	800660c <iprintf>
	printf("red : %ld \r\n",red);
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <colorAnalyse+0x50>)
 80018a4:	f004 feb2 	bl	800660c <iprintf>
	if(green<red){
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d203      	bcs.n	80018b8 <colorAnalyse+0x2c>
		printf("c'est vert\r\n");
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <colorAnalyse+0x54>)
 80018b2:	f004 ff31 	bl	8006718 <puts>
		colorDoMeasureAgain(h_color_sensor);
	}
	else {
		printf("c'est rouge\r\n");
	}
}
 80018b6:	e00a      	b.n	80018ce <colorAnalyse+0x42>
	else if(green==red){
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d103      	bne.n	80018c8 <colorAnalyse+0x3c>
		colorDoMeasureAgain(h_color_sensor);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f811 	bl	80018e8 <colorDoMeasureAgain>
}
 80018c6:	e002      	b.n	80018ce <colorAnalyse+0x42>
		printf("c'est rouge\r\n");
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <colorAnalyse+0x58>)
 80018ca:	f004 ff25 	bl	8006718 <puts>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08009acc 	.word	0x08009acc
 80018dc:	08009adc 	.word	0x08009adc
 80018e0:	08009aec 	.word	0x08009aec
 80018e4:	08009af8 	.word	0x08009af8

080018e8 <colorDoMeasureAgain>:

static void colorDoMeasureAgain(h_color_sensor_t * h_color_sensor){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	colorEnable(h_color_sensor);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fc33 	bl	800115c <colorEnable>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <timer_handle>:
 * tim_mode_t mode : htim configuration accirding to what is in .ioc file (INPUT_CAPTURE_IT, BASE_IT, PWM)
 * tim_status_t status : same but START,STOP
 * uint32_t channel ; the output channel of htim
 * @return none
 */
void timer_handle(TIM_HandleTypeDef htim, tim_mode_t mode, tim_status_t status,uint32_t channel){
 80018fe:	b084      	sub	sp, #16
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
 8001904:	f107 0c08 	add.w	ip, r7, #8
 8001908:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(status==START){
 800190c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001910:	2b01      	cmp	r3, #1
 8001912:	d11b      	bne.n	800194c <timer_handle+0x4e>
		switch(mode){
 8001914:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001918:	2b03      	cmp	r3, #3
 800191a:	d00c      	beq.n	8001936 <timer_handle+0x38>
 800191c:	2b03      	cmp	r3, #3
 800191e:	dc53      	bgt.n	80019c8 <timer_handle+0xca>
 8001920:	2b01      	cmp	r3, #1
 8001922:	d002      	beq.n	800192a <timer_handle+0x2c>
 8001924:	2b02      	cmp	r3, #2
 8001926:	d00c      	beq.n	8001942 <timer_handle+0x44>
			break;
		case BASE_IT:
			HAL_TIM_Base_Start_IT(&htim);
			break;
		default :
			break;
 8001928:	e04e      	b.n	80019c8 <timer_handle+0xca>
			HAL_TIM_IC_Start_IT(&htim, channel);
 800192a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800192c:	f107 0008 	add.w	r0, r7, #8
 8001930:	f002 fc3a 	bl	80041a8 <HAL_TIM_IC_Start_IT>
			break;
 8001934:	e04f      	b.n	80019d6 <timer_handle+0xd8>
			HAL_TIM_PWM_Start(&htim,channel);
 8001936:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001938:	f107 0008 	add.w	r0, r7, #8
 800193c:	f002 fa58 	bl	8003df0 <HAL_TIM_PWM_Start>
			break;
 8001940:	e049      	b.n	80019d6 <timer_handle+0xd8>
			HAL_TIM_Base_Start_IT(&htim);
 8001942:	f107 0008 	add.w	r0, r7, #8
 8001946:	f002 f94b 	bl	8003be0 <HAL_TIM_Base_Start_IT>
			break;
 800194a:	e044      	b.n	80019d6 <timer_handle+0xd8>
		}
	}
	else if (status==STOP){
 800194c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11b      	bne.n	800198c <timer_handle+0x8e>
		switch(mode){
 8001954:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001958:	2b03      	cmp	r3, #3
 800195a:	d00c      	beq.n	8001976 <timer_handle+0x78>
 800195c:	2b03      	cmp	r3, #3
 800195e:	dc35      	bgt.n	80019cc <timer_handle+0xce>
 8001960:	2b01      	cmp	r3, #1
 8001962:	d002      	beq.n	800196a <timer_handle+0x6c>
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00c      	beq.n	8001982 <timer_handle+0x84>
			break;
		case BASE_IT:
			HAL_TIM_Base_Stop_IT(&htim);
			break;
		default :
			break;
 8001968:	e030      	b.n	80019cc <timer_handle+0xce>
			HAL_TIM_IC_Stop_IT(&htim, channel);
 800196a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800196c:	f107 0008 	add.w	r0, r7, #8
 8001970:	f002 fd6a 	bl	8004448 <HAL_TIM_IC_Stop_IT>
			break;
 8001974:	e02f      	b.n	80019d6 <timer_handle+0xd8>
			HAL_TIM_PWM_Stop(&htim,channel);
 8001976:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001978:	f107 0008 	add.w	r0, r7, #8
 800197c:	f002 fb32 	bl	8003fe4 <HAL_TIM_PWM_Stop>
			break;
 8001980:	e029      	b.n	80019d6 <timer_handle+0xd8>
			HAL_TIM_Base_Stop_IT(&htim);
 8001982:	f107 0008 	add.w	r0, r7, #8
 8001986:	f002 f9a3 	bl	8003cd0 <HAL_TIM_Base_Stop_IT>
			break;
 800198a:	e024      	b.n	80019d6 <timer_handle+0xd8>
		}
	}
	else if (status==INIT){
 800198c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001990:	2b02      	cmp	r3, #2
 8001992:	d11d      	bne.n	80019d0 <timer_handle+0xd2>
		switch(mode){
 8001994:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001998:	2b03      	cmp	r3, #3
 800199a:	d00b      	beq.n	80019b4 <timer_handle+0xb6>
 800199c:	2b03      	cmp	r3, #3
 800199e:	dc19      	bgt.n	80019d4 <timer_handle+0xd6>
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d002      	beq.n	80019aa <timer_handle+0xac>
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d00a      	beq.n	80019be <timer_handle+0xc0>
			break;
		case BASE_IT:
			HAL_TIM_Base_Init(&htim);
			break;
		default :
			break;
 80019a8:	e014      	b.n	80019d4 <timer_handle+0xd6>
			HAL_TIM_IC_Init(&htim);
 80019aa:	f107 0008 	add.w	r0, r7, #8
 80019ae:	f002 fb99 	bl	80040e4 <HAL_TIM_IC_Init>
			break;
 80019b2:	e010      	b.n	80019d6 <timer_handle+0xd8>
			HAL_TIM_PWM_Init(&htim);
 80019b4:	f107 0008 	add.w	r0, r7, #8
 80019b8:	f002 f9b9 	bl	8003d2e <HAL_TIM_PWM_Init>
			break;
 80019bc:	e00b      	b.n	80019d6 <timer_handle+0xd8>
			HAL_TIM_Base_Init(&htim);
 80019be:	f107 0008 	add.w	r0, r7, #8
 80019c2:	f002 f8b5 	bl	8003b30 <HAL_TIM_Base_Init>
			break;
 80019c6:	e006      	b.n	80019d6 <timer_handle+0xd8>
			break;
 80019c8:	bf00      	nop
 80019ca:	e004      	b.n	80019d6 <timer_handle+0xd8>
			break;
 80019cc:	bf00      	nop
 80019ce:	e002      	b.n	80019d6 <timer_handle+0xd8>
		}
	}
 80019d0:	bf00      	nop
 80019d2:	e000      	b.n	80019d6 <timer_handle+0xd8>
			break;
 80019d4:	bf00      	nop
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019de:	b004      	add	sp, #16
 80019e0:	4770      	bx	lr

080019e2 <GPIO_write>:
 * uint16_t gpio_pin : The pin of the GPIO you want to deal with
 * GPIO_PinState gpio_PinState : the state you want your GPIO to have (1 or 0)
 *
 * @return 0 if fail else 1
 */
void GPIO_write(GPIO_TypeDef * gpio_port,uint16_t gpio_pin,GPIO_PinState gpio_PinState ){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(gpio_port,gpio_pin,gpio_PinState);
 80019f2:	787a      	ldrb	r2, [r7, #1]
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 ff9d 	bl	8002938 <HAL_GPIO_WritePin>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==button_Pin){
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a18:	d109      	bne.n	8001a2e <HAL_GPIO_EXTI_Callback+0x26>
		printf("----- appui bouton -----\r\n");
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x30>)
 8001a1c:	f004 fe7c 	bl	8006718 <puts>
		colorSetPhotodiodeType(&color_sensor1, GREEN);
 8001a20:	2104      	movs	r1, #4
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x34>)
 8001a24:	f7ff faca 	bl	8000fbc <colorSetPhotodiodeType>
		colorEnable(&color_sensor1);
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x34>)
 8001a2a:	f7ff fb97 	bl	800115c <colorEnable>
	}
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	08009b08 	.word	0x08009b08
 8001a3c:	20000428 	.word	0x20000428

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a44:	f000 fc5d 	bl	8002302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a48:	f000 f82e 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4c:	f000 f93c 	bl	8001cc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a50:	f000 f898 	bl	8001b84 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001a54:	f000 f908 	bl	8001c68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //desactive the internal buffering for scanf, that is set by default in syscalls.c
  setvbuf(stdin, NULL, _IONBF, 0);
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <main+0x50>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6858      	ldr	r0, [r3, #4]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2202      	movs	r2, #2
 8001a62:	2100      	movs	r1, #0
 8001a64:	f004 fe78 	bl	8006758 <setvbuf>

	printf("---- color sensor ----\r\n");
 8001a68:	480a      	ldr	r0, [pc, #40]	; (8001a94 <main+0x54>)
 8001a6a:	f004 fe55 	bl	8006718 <puts>
  color_sensor_init(&color_sensor1,GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
  printf("color sensor initialized\r\nwaiting for button press : \r\n");*/


  	// ----- test 3 : Fonction de calibration -----
  	printf("--- calibration lancée ---\r\n");
 8001a6e:	480a      	ldr	r0, [pc, #40]	; (8001a98 <main+0x58>)
 8001a70:	f004 fe52 	bl	8006718 <puts>
  	colorSensorInit(&color_sensor1, GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
 8001a74:	2300      	movs	r3, #0
 8001a76:	2204      	movs	r2, #4
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <main+0x5c>)
 8001a7c:	f7ff fafe 	bl	800107c <colorSensorInit>
  	colorHandleCalibrationSensor(&color_sensor1,&color_sensor1_buffer_calibration);
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <main+0x60>)
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <main+0x5c>)
 8001a84:	f7ff fb96 	bl	80011b4 <colorHandleCalibrationSensor>
  	printf("waiting for button press to measure : \r\n");
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <main+0x64>)
 8001a8a:	f004 fe45 	bl	8006718 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001a8e:	e7fe      	b.n	8001a8e <main+0x4e>
 8001a90:	2000000c 	.word	0x2000000c
 8001a94:	08009b24 	.word	0x08009b24
 8001a98:	08009b3c 	.word	0x08009b3c
 8001a9c:	20000428 	.word	0x20000428
 8001aa0:	2000044c 	.word	0x2000044c
 8001aa4:	08009b5c 	.word	0x08009b5c

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	; 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	2230      	movs	r2, #48	; 0x30
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 f936 	bl	8005d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <SystemClock_Config+0xd4>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <SystemClock_Config+0xd4>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <SystemClock_Config+0xd4>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <SystemClock_Config+0xd8>)
 8001aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <SystemClock_Config+0xd8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b10:	2319      	movs	r3, #25
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001b14:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b1e:	2309      	movs	r3, #9
 8001b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 ff88 	bl	8002a3c <HAL_RCC_OscConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b32:	f000 f9a9 	bl	8001e88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b36:	f000 ff31 	bl	800299c <HAL_PWREx_EnableOverDrive>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b40:	f000 f9a2 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b44:	230f      	movs	r3, #15
 8001b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2106      	movs	r1, #6
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fa0e 	bl	8002f84 <HAL_RCC_ClockConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b6e:	f000 f98b 	bl	8001e88 <Error_Handler>
  }
}
 8001b72:	bf00      	nop
 8001b74:	3750      	adds	r7, #80	; 0x50
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000

08001b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bba:	2263      	movs	r2, #99	; 0x63
 8001bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bc6:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <MX_TIM2_Init+0xe0>)
 8001bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd6:	4822      	ldr	r0, [pc, #136]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bd8:	f001 ffaa 	bl	8003b30 <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001be2:	f000 f951 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481b      	ldr	r0, [pc, #108]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001bf4:	f002 fea2 	bl	800493c <HAL_TIM_ConfigClockSource>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bfe:	f000 f943 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c02:	4817      	ldr	r0, [pc, #92]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001c04:	f002 fa6e 	bl	80040e4 <HAL_TIM_IC_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c0e:	f000 f93b 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480f      	ldr	r0, [pc, #60]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001c22:	f003 fa11 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001c2c:	f000 f92c 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2200      	movs	r2, #0
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_TIM2_Init+0xdc>)
 8001c48:	f002 fddb 	bl	8004802 <HAL_TIM_IC_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001c52:	f000 f919 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000354 	.word	0x20000354
 8001c64:	000f4240 	.word	0x000f4240

08001c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <MX_USART1_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_USART1_UART_Init+0x58>)
 8001cac:	f003 fa78 	bl	80051a0 <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f000 f8e7 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200003a0 	.word	0x200003a0
 8001cc4:	40011000 	.word	0x40011000

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a4c      	ldr	r2, [pc, #304]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a46      	ldr	r2, [pc, #280]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a40      	ldr	r2, [pc, #256]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MX_GPIO_Init+0x14c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(color_S2_GPIO_Port, color_S2_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2110      	movs	r1, #16
 8001d72:	4829      	ldr	r0, [pc, #164]	; (8001e18 <MX_GPIO_Init+0x150>)
 8001d74:	f000 fde0 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, color_enable_Pin|color_S0_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	21c0      	movs	r1, #192	; 0xc0
 8001d7c:	4827      	ldr	r0, [pc, #156]	; (8001e1c <MX_GPIO_Init+0x154>)
 8001d7e:	f000 fddb 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, color_S3_Pin|color_S1_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	21c0      	movs	r1, #192	; 0xc0
 8001d86:	4826      	ldr	r0, [pc, #152]	; (8001e20 <MX_GPIO_Init+0x158>)
 8001d88:	f000 fdd6 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : color_S2_Pin */
  GPIO_InitStruct.Pin = color_S2_Pin;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(color_S2_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	481d      	ldr	r0, [pc, #116]	; (8001e18 <MX_GPIO_Init+0x150>)
 8001da4:	f000 fc1c 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4819      	ldr	r0, [pc, #100]	; (8001e24 <MX_GPIO_Init+0x15c>)
 8001dc0:	f000 fc0e 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : color_enable_Pin color_S0_Pin */
  GPIO_InitStruct.Pin = color_enable_Pin|color_S0_Pin;
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4810      	ldr	r0, [pc, #64]	; (8001e1c <MX_GPIO_Init+0x154>)
 8001ddc:	f000 fc00 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : color_S3_Pin color_S1_Pin */
  GPIO_InitStruct.Pin = color_S3_Pin|color_S1_Pin;
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	480a      	ldr	r0, [pc, #40]	; (8001e20 <MX_GPIO_Init+0x158>)
 8001df8:	f000 fbf2 	bl	80025e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2028      	movs	r0, #40	; 0x28
 8001e02:	f000 fbb6 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e06:	2028      	movs	r0, #40	; 0x28
 8001e08:	f000 fbcf 	bl	80025aa <HAL_NVIC_EnableIRQ>

}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40022000 	.word	0x40022000

08001e28 <__io_putchar>:

/* USER CODE BEGIN 4 */

//--_ Redirection du printf
int __io_putchar(int ch){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001e30:	1d39      	adds	r1, r7, #4
 8001e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e36:	2201      	movs	r2, #1
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <__io_putchar+0x20>)
 8001e3a:	f003 f9ff 	bl	800523c <HAL_UART_Transmit>
	return ch;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200003a0 	.word	0x200003a0

08001e4c <__io_getchar>:


// --- redirection du scanf
int __io_getchar(void){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <__io_getchar+0x38>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e5e:	1df9      	adds	r1, r7, #7
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	2201      	movs	r2, #1
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <__io_getchar+0x38>)
 8001e68:	f003 fa6b 	bl	8005342 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e6c:	1df9      	adds	r1, r7, #7
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	2201      	movs	r2, #1
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <__io_getchar+0x38>)
 8001e76:	f003 f9e1 	bl	800523c <HAL_UART_Transmit>
  return ch;
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200003a0 	.word	0x200003a0

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_MspInit+0x44>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_MspInit+0x44>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_MspInit+0x44>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_MspInit+0x44>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_MspInit+0x44>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_MspInit+0x44>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d130      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_TIM_Base_MspInit+0x8c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_TIM_Base_MspInit+0x8c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_TIM_Base_MspInit+0x8c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_TIM_Base_MspInit+0x8c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_TIM_Base_MspInit+0x8c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_TIM_Base_MspInit+0x8c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = color_input_freq_Pin;
 8001f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f40:	2301      	movs	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(color_input_freq_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4808      	ldr	r0, [pc, #32]	; (8001f6c <HAL_TIM_Base_MspInit+0x90>)
 8001f4c:	f000 fb48 	bl	80025e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	201c      	movs	r0, #28
 8001f56:	f000 fb0c 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f5a:	201c      	movs	r0, #28
 8001f5c:	f000 fb25 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000

08001f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b0ac      	sub	sp, #176	; 0xb0
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	2284      	movs	r2, #132	; 0x84
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fec9 	bl	8005d28 <memset>
  if(huart->Instance==USART1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_UART_MspInit+0xf4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d15c      	bne.n	800205a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fa0:	2340      	movs	r3, #64	; 0x40
 8001fa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 f9cf 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fb8:	f7ff ff66 	bl	8001e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_UART_MspInit+0xf8>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800201c:	2307      	movs	r3, #7
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002026:	4619      	mov	r1, r3
 8002028:	4810      	ldr	r0, [pc, #64]	; (800206c <HAL_UART_MspInit+0xfc>)
 800202a:	f000 fad9 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800202e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002048:	2307      	movs	r3, #7
 800204a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002052:	4619      	mov	r1, r3
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <HAL_UART_MspInit+0x100>)
 8002056:	f000 fac3 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	37b0      	adds	r7, #176	; 0xb0
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40011000 	.word	0x40011000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400
 8002070:	40020000 	.word	0x40020000

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x4>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 f95c 	bl	800237c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	colorSensorHandleInputCapture_IT(&color_sensor1, TIM2,&color_sensor1_buffer_calibration);
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <TIM2_IRQHandler+0x1c>)
 80020ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <TIM2_IRQHandler+0x20>)
 80020d4:	f7ff f99a 	bl	800140c <colorSensorHandleInputCapture_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <TIM2_IRQHandler+0x24>)
 80020da:	f002 fa73 	bl	80045c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000044c 	.word	0x2000044c
 80020e8:	20000428 	.word	0x20000428
 80020ec:	20000354 	.word	0x20000354

080020f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80020f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020f8:	f000 fc38 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_kill>:

int _kill(int pid, int sig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211a:	f003 fddb 	bl	8005cd4 <__errno>
 800211e:	4603      	mov	r3, r0
 8002120:	2216      	movs	r2, #22
 8002122:	601a      	str	r2, [r3, #0]
	return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_exit>:

void _exit (int status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffe7 	bl	8002110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002142:	e7fe      	b.n	8002142 <_exit+0x12>

08002144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e00a      	b.n	800216c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002156:	f7ff fe79 	bl	8001e4c <__io_getchar>
 800215a:	4601      	mov	r1, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf0      	blt.n	8002156 <_read+0x12>
	}

return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e009      	b.n	80021a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fe45 	bl	8001e28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf1      	blt.n	8002190 <_write+0x12>
	}
	return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_close>:

int _close(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_isatty>:

int _isatty(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return 1;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f003 fd40 	bl	8005cd4 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20050000 	.word	0x20050000
 8002280:	00000400 	.word	0x00000400
 8002284:	20000454 	.word	0x20000454
 8002288:	20000470 	.word	0x20000470

0800228c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022cc:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022da:	f7ff ffd7 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f003 fcff 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7ff fbad 	bl	8001a40 <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022f4:	08009fb0 	.word	0x08009fb0
  ldr r2, =_sbss
 80022f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022fc:	2000046c 	.word	0x2000046c

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>

08002302 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002306:	2003      	movs	r0, #3
 8002308:	f000 f928 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230c:	200f      	movs	r0, #15
 800230e:	f000 f805 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002312:	f7ff fdbf 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x54>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x58>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f943 	bl	80025c6 <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f000 f90b 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <HAL_InitTick+0x5c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000000 	.word	0x20000000
 8002374:	20000008 	.word	0x20000008
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000458 	.word	0x20000458

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000458 	.word	0x20000458

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <__NVIC_SetPriorityGrouping+0x40>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x40>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00
 8002400:	05fa0000 	.word	0x05fa0000

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4907      	ldr	r1, [pc, #28]	; (8002458 <__NVIC_EnableIRQ+0x38>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e100 	.word	0xe000e100

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	; (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	; (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff29 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff3e 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff31 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa2 	bl	8002518 <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e175      	b.n	80028ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8164 	bne.w	80028e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x56>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80be 	beq.w	80028e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_GPIO_Init+0x324>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002782:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_GPIO_Init+0x32c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d037      	beq.n	800281e <HAL_GPIO_Init+0x23e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_GPIO_Init+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_GPIO_Init+0x23a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x334>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x236>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x232>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a53      	ldr	r2, [pc, #332]	; (8002920 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x350>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x21a>
 80027f6:	2309      	movs	r3, #9
 80027f8:	e012      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fa:	230a      	movs	r3, #10
 80027fc:	e010      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fe:	2308      	movs	r3, #8
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002802:	2307      	movs	r3, #7
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_GPIO_Init+0x354>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a29      	ldr	r2, [pc, #164]	; (8002934 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae86 	bls.w	8002600 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40022000 	.word	0x40022000
 8002930:	40022400 	.word	0x40022400
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002948:	787b      	ldrb	r3, [r7, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002954:	e003      	b.n	800295e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f83c 	bl	8001a08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ca:	f7ff fceb 	bl	80023a4 <HAL_GetTick>
 80029ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029d0:	e009      	b.n	80029e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d2:	f7ff fce7 	bl	80023a4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e0:	d901      	bls.n	80029e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e022      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f2:	d1ee      	bne.n	80029d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a00:	f7ff fcd0 	bl	80023a4 <HAL_GetTick>
 8002a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a06:	e009      	b.n	8002a1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a08:	f7ff fccc 	bl	80023a4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a16:	d901      	bls.n	8002a1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e007      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a28:	d1ee      	bne.n	8002a08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e291      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8087 	beq.w	8002b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a60:	4b96      	ldr	r3, [pc, #600]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d00c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6c:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d112      	bne.n	8002a9e <HAL_RCC_OscConfig+0x62>
 8002a78:	4b90      	ldr	r3, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a84:	d10b      	bne.n	8002a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	4b8d      	ldr	r3, [pc, #564]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d06c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x130>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d168      	bne.n	8002b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e26b      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x7a>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e02e      	b.n	8002b14 <HAL_RCC_OscConfig+0xd8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x9c>
 8002abe:	4b7f      	ldr	r3, [pc, #508]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b7c      	ldr	r3, [pc, #496]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7b      	ldr	r2, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e01d      	b.n	8002b14 <HAL_RCC_OscConfig+0xd8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0xc0>
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a72      	ldr	r2, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xd8>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a6e      	ldr	r2, [pc, #440]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fc42 	bl	80023a4 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7ff fc3e 	bl	80023a4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e21f      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe8>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff fc2e 	bl	80023a4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7ff fc2a 	bl	80023a4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e20b      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x110>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d069      	beq.n	8002c4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x190>
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1df      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	493d      	ldr	r1, [pc, #244]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	e040      	b.n	8002c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff fbe0 	bl	80023a4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7ff fbdc 	bl	80023a4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1bd      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4929      	ldr	r1, [pc, #164]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
 8002c1a:	e018      	b.n	8002c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7ff fbbc 	bl	80023a4 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c30:	f7ff fbb8 	bl	80023a4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e199      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d038      	beq.n	8002ccc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d019      	beq.n	8002c96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fb99 	bl	80023a4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7ff fb95 	bl	80023a4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e176      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x23a>
 8002c94:	e01a      	b.n	8002ccc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fb7f 	bl	80023a4 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7ff fb7b 	bl	80023a4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d903      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e15c      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
 8002cbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a4 	beq.w	8002e22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a87      	ldr	r2, [pc, #540]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d02:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7e      	ldr	r2, [pc, #504]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff fb43 	bl	80023a4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7ff fb3f 	bl	80023a4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	; 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e120      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d34:	4b75      	ldr	r3, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x31a>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a6e      	ldr	r2, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	e02d      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x33c>
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
 8002d76:	e01c      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x35e>
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a60      	ldr	r2, [pc, #384]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a5d      	ldr	r2, [pc, #372]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	e00b      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
 8002da6:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7ff faf3 	bl	80023a4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7ff faef 	bl	80023a4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0ce      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x386>
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7ff fadd 	bl	80023a4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7ff fad9 	bl	80023a4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0b8      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a4 	beq.w	8002f74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d06b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d149      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7ff faaa 	bl	80023a4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7ff faa6 	bl	80023a4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e087      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	4313      	orrs	r3, r2
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7ff fa7a 	bl	80023a4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7ff fa76 	bl	80023a4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e057      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x478>
 8002ed2:	e04f      	b.n	8002f74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fa60 	bl	80023a4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7ff fa5c 	bl	80023a4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e03d      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4ac>
 8002f06:	e035      	b.n	8002f74 <HAL_RCC_OscConfig+0x538>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x544>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d121      	bne.n	8002f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0d0      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d910      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	4965      	ldr	r1, [pc, #404]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003006:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d040      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e073      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06b      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4936      	ldr	r1, [pc, #216]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7ff f994 	bl	80023a4 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7ff f990 	bl	80023a4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e053      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2d      	ldr	r3, [pc, #180]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d210      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	4922      	ldr	r1, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1cc>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1d0>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1d4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f8f0 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00
 800314c:	40023800 	.word	0x40023800
 8003150:	08009b90 	.word	0x08009b90
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003160:	b090      	sub	sp, #64	; 0x40
 8003162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
 8003168:	2300      	movs	r3, #0
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316c:	2300      	movs	r3, #0
 800316e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	d00d      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x40>
 8003180:	2b08      	cmp	r3, #8
 8003182:	f200 80a1 	bhi.w	80032c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 800318a:	2b04      	cmp	r3, #4
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3a>
 800318e:	e09b      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003194:	e09b      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003196:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800319a:	e098      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319c:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCC_GetSysClockFreq+0x180>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031a6:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCC_GetSysClockFreq+0x180>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d028      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_GetSysClockFreq+0x180>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	2200      	movs	r2, #0
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	627a      	str	r2, [r7, #36]	; 0x24
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031c4:	2100      	movs	r1, #0
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031c8:	fb03 f201 	mul.w	r2, r3, r1
 80031cc:	2300      	movs	r3, #0
 80031ce:	fb00 f303 	mul.w	r3, r0, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	4a43      	ldr	r2, [pc, #268]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031d6:	fba0 1202 	umull	r1, r2, r0, r2
 80031da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031dc:	460a      	mov	r2, r1
 80031de:	62ba      	str	r2, [r7, #40]	; 0x28
 80031e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e2:	4413      	add	r3, r2
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e8:	2200      	movs	r2, #0
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	61fa      	str	r2, [r7, #28]
 80031ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031f6:	f7fd fd17 	bl	8000c28 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4613      	mov	r3, r2
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003202:	e053      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003204:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	2200      	movs	r2, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	617a      	str	r2, [r7, #20]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003216:	f04f 0b00 	mov.w	fp, #0
 800321a:	4652      	mov	r2, sl
 800321c:	465b      	mov	r3, fp
 800321e:	f04f 0000 	mov.w	r0, #0
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	0159      	lsls	r1, r3, #5
 8003228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322c:	0150      	lsls	r0, r2, #5
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	ebb2 080a 	subs.w	r8, r2, sl
 8003236:	eb63 090b 	sbc.w	r9, r3, fp
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003246:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800324a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800324e:	ebb2 0408 	subs.w	r4, r2, r8
 8003252:	eb63 0509 	sbc.w	r5, r3, r9
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	00eb      	lsls	r3, r5, #3
 8003260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003264:	00e2      	lsls	r2, r4, #3
 8003266:	4614      	mov	r4, r2
 8003268:	461d      	mov	r5, r3
 800326a:	eb14 030a 	adds.w	r3, r4, sl
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	eb45 030b 	adc.w	r3, r5, fp
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003282:	4629      	mov	r1, r5
 8003284:	028b      	lsls	r3, r1, #10
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800328c:	4621      	mov	r1, r4
 800328e:	028a      	lsls	r2, r1, #10
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	2200      	movs	r2, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	60fa      	str	r2, [r7, #12]
 800329c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a0:	f7fd fcc2 	bl	8000c28 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_GetSysClockFreq+0x180>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	3301      	adds	r3, #1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80032bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c6:	e002      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3740      	adds	r7, #64	; 0x40
 80032d4:	46bd      	mov	sp, r7
 80032d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	017d7840 	.word	0x017d7840

080032e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000000 	.word	0x20000000

08003300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003304:	f7ff fff0 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4903      	ldr	r1, [pc, #12]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	08009ba0 	.word	0x08009ba0

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800332c:	f7ff ffdc 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0b5b      	lsrs	r3, r3, #13
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4903      	ldr	r1, [pc, #12]	; (800334c <HAL_RCC_GetPCLK2Freq+0x24>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40023800 	.word	0x40023800
 800334c:	08009ba0 	.word	0x08009ba0

08003350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003378:	4b69      	ldr	r3, [pc, #420]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a68      	ldr	r2, [pc, #416]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003382:	6093      	str	r3, [r2, #8]
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	4964      	ldr	r1, [pc, #400]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d017      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	4959      	ldr	r1, [pc, #356]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c8:	d101      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d017      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	494a      	ldr	r1, [pc, #296]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003404:	d101      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 808b 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4a39      	ldr	r2, [pc, #228]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	6413      	str	r3, [r2, #64]	; 0x40
 8003440:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a34      	ldr	r2, [pc, #208]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003458:	f7fe ffa4 	bl	80023a4 <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fe ffa0 	bl	80023a4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e357      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800347e:	4b28      	ldr	r3, [pc, #160]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d035      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d02e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800349c:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d114      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe ff68 	bl	80023a4 <HAL_GetTick>
 80034d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe ff64 	bl	80023a4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e319      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ee      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003506:	d111      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003516:	400b      	ands	r3, r1
 8003518:	4901      	ldr	r1, [pc, #4]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
 800351e:	e00b      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
 8003528:	0ffffcff 	.word	0x0ffffcff
 800352c:	4baa      	ldr	r3, [pc, #680]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4aa9      	ldr	r2, [pc, #676]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	4ba7      	ldr	r3, [pc, #668]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	49a4      	ldr	r1, [pc, #656]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	4313      	orrs	r3, r2
 8003548:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003556:	4ba0      	ldr	r3, [pc, #640]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800355c:	4a9e      	ldr	r2, [pc, #632]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003562:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003566:	4b9c      	ldr	r3, [pc, #624]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	4999      	ldr	r1, [pc, #612]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003584:	4b94      	ldr	r3, [pc, #592]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003592:	4991      	ldr	r1, [pc, #580]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a6:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b4:	4988      	ldr	r1, [pc, #544]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c8:	4b83      	ldr	r3, [pc, #524]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d6:	4980      	ldr	r1, [pc, #512]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035ea:	4b7b      	ldr	r3, [pc, #492]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4977      	ldr	r1, [pc, #476]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360c:	4b72      	ldr	r3, [pc, #456]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	496f      	ldr	r1, [pc, #444]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362e:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f023 020c 	bic.w	r2, r3, #12
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363c:	4966      	ldr	r1, [pc, #408]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003650:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	495e      	ldr	r1, [pc, #376]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003672:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	4955      	ldr	r1, [pc, #340]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003694:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	494d      	ldr	r1, [pc, #308]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036b6:	4b48      	ldr	r3, [pc, #288]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	4944      	ldr	r1, [pc, #272]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	493c      	ldr	r1, [pc, #240]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	4933      	ldr	r1, [pc, #204]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800371c:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372a:	492b      	ldr	r1, [pc, #172]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d011      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374c:	4922      	ldr	r1, [pc, #136]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378c:	4912      	ldr	r1, [pc, #72]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b0:	4909      	ldr	r1, [pc, #36]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d006      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80d9 	beq.w	800397e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a01      	ldr	r2, [pc, #4]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037d6:	e001      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fe fde1 	bl	80023a4 <HAL_GetTick>
 80037e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037e6:	f7fe fddd 	bl	80023a4 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b64      	cmp	r3, #100	; 0x64
 80037f2:	d901      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e194      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037f8:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d021      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11d      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003818:	4b64      	ldr	r3, [pc, #400]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003826:	4b61      	ldr	r3, [pc, #388]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	019a      	lsls	r2, r3, #6
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	071b      	lsls	r3, r3, #28
 800384c:	4957      	ldr	r1, [pc, #348]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02e      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387e:	d129      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003880:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	0c1b      	lsrs	r3, r3, #16
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003894:	0f1b      	lsrs	r3, r3, #28
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	019a      	lsls	r2, r3, #6
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	071b      	lsls	r3, r3, #28
 80038b4:	493d      	ldr	r1, [pc, #244]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c2:	f023 021f 	bic.w	r2, r3, #31
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	3b01      	subs	r3, #1
 80038cc:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e6:	0e1b      	lsrs	r3, r3, #24
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f4:	0f1b      	lsrs	r3, r3, #28
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	019a      	lsls	r2, r3, #6
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	071b      	lsls	r3, r3, #28
 8003914:	4925      	ldr	r1, [pc, #148]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	019a      	lsls	r2, r3, #6
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	041b      	lsls	r3, r3, #16
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	061b      	lsls	r3, r3, #24
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	071b      	lsls	r3, r3, #28
 8003944:	4919      	ldr	r1, [pc, #100]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fe fd24 	bl	80023a4 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003960:	f7fe fd20 	bl	80023a4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e0d7      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 80cd 	bne.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003992:	f7fe fd07 	bl	80023a4 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800399a:	f7fe fd03 	bl	80023a4 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	d903      	bls.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0ba      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80039ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039bc:	d0ed      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02e      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d12a      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039f4:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	0f1b      	lsrs	r3, r3, #28
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	019a      	lsls	r2, r3, #6
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	061b      	lsls	r3, r3, #24
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	071b      	lsls	r3, r3, #28
 8003a1a:	4944      	ldr	r1, [pc, #272]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	493d      	ldr	r1, [pc, #244]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d022      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a50:	d11d      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	0e1b      	lsrs	r3, r3, #24
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	0f1b      	lsrs	r3, r3, #28
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4929      	ldr	r1, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d028      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aa8:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	019a      	lsls	r2, r3, #6
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	071b      	lsls	r3, r3, #28
 8003ace:	4917      	ldr	r1, [pc, #92]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	4911      	ldr	r1, [pc, #68]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fe fc54 	bl	80023a4 <HAL_GetTick>
 8003afc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b00:	f7fe fc50 	bl	80023a4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e007      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b1e:	d1ef      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800

08003b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e049      	b.n	8003bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fe f9c0 	bl	8001edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f000 ffe0 	bl	8004b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d001      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e054      	b.n	8003ca2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c22:	d01d      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HAL_TIM_Base_Start_IT+0xdc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x80>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d115      	bne.n	8003c8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_TIM_Base_Start_IT+0xec>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d015      	beq.n	8003c9e <HAL_TIM_Base_Start_IT+0xbe>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d011      	beq.n	8003c9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8a:	e008      	b.n	8003c9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e000      	b.n	8003ca0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40010400 	.word	0x40010400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40001800 	.word	0x40001800
 8003ccc:	00010007 	.word	0x00010007

08003cd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <HAL_TIM_Base_Stop_IT+0x48>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	f240 4344 	movw	r3, #1092	; 0x444
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_Base_Stop_IT+0x48>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e049      	b.n	8003dd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f841 	bl	8003ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fee1 	bl	8004b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x24>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e03c      	b.n	8003e8e <HAL_TIM_PWM_Start+0x9e>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d109      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x3e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	bf14      	ite	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2300      	moveq	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	e02f      	b.n	8003e8e <HAL_TIM_PWM_Start+0x9e>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d109      	bne.n	8003e48 <HAL_TIM_PWM_Start+0x58>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e022      	b.n	8003e8e <HAL_TIM_PWM_Start+0x9e>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d109      	bne.n	8003e62 <HAL_TIM_PWM_Start+0x72>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	bf14      	ite	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	2300      	moveq	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	e015      	b.n	8003e8e <HAL_TIM_PWM_Start+0x9e>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d109      	bne.n	8003e7c <HAL_TIM_PWM_Start+0x8c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e008      	b.n	8003e8e <HAL_TIM_PWM_Start+0x9e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e092      	b.n	8003fbc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0xb6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea4:	e023      	b.n	8003eee <HAL_TIM_PWM_Start+0xfe>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0xc6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb4:	e01b      	b.n	8003eee <HAL_TIM_PWM_Start+0xfe>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_PWM_Start+0xd6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec4:	e013      	b.n	8003eee <HAL_TIM_PWM_Start+0xfe>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0xe6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed4:	e00b      	b.n	8003eee <HAL_TIM_PWM_Start+0xfe>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xf6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee4:	e003      	b.n	8003eee <HAL_TIM_PWM_Start+0xfe>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f880 	bl	8004ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a30      	ldr	r2, [pc, #192]	; (8003fc4 <HAL_TIM_PWM_Start+0x1d4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_PWM_Start+0x120>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <HAL_TIM_PWM_Start+0x1d8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_PWM_Start+0x124>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_TIM_PWM_Start+0x126>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <HAL_TIM_PWM_Start+0x1d4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d01d      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_TIM_PWM_Start+0x1dc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_TIM_PWM_Start+0x1e0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_TIM_PWM_Start+0x1e4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_TIM_PWM_Start+0x1d8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <HAL_TIM_PWM_Start+0x1e8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x18a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_TIM_PWM_Start+0x1ec>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d115      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_TIM_PWM_Start+0x1f0>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d015      	beq.n	8003fb8 <HAL_TIM_PWM_Start+0x1c8>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d011      	beq.n	8003fb8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	e008      	b.n	8003fb8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e000      	b.n	8003fba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40001800 	.word	0x40001800
 8003fe0:	00010007 	.word	0x00010007

08003fe4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f800 	bl	8004ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a36      	ldr	r2, [pc, #216]	; (80040dc <HAL_TIM_PWM_Stop+0xf8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIM_PWM_Stop+0x2c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a35      	ldr	r2, [pc, #212]	; (80040e0 <HAL_TIM_PWM_Stop+0xfc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_TIM_PWM_Stop+0x30>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_TIM_PWM_Stop+0x32>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	f241 1311 	movw	r3, #4369	; 0x1111
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_TIM_PWM_Stop+0x66>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a1a      	ldr	r2, [r3, #32]
 8004030:	f240 4344 	movw	r3, #1092	; 0x444
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <HAL_TIM_PWM_Stop+0x66>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	f241 1311 	movw	r3, #4369	; 0x1111
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_TIM_PWM_Stop+0x96>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	f240 4344 	movw	r3, #1092	; 0x444
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_TIM_PWM_Stop+0x96>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <HAL_TIM_PWM_Stop+0xa6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004088:	e023      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xee>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Stop+0xb6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004098:	e01b      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xee>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Stop+0xc6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a8:	e013      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xee>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Stop+0xd6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b8:	e00b      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xee>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d104      	bne.n	80040ca <HAL_TIM_PWM_Stop+0xe6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	e003      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xee>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40010400 	.word	0x40010400

080040e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e049      	b.n	800418a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f841 	bl	8004192 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 fd06 	bl	8004b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0x1e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e023      	b.n	800420e <HAL_TIM_IC_Start_IT+0x66>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x2e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e01b      	b.n	800420e <HAL_TIM_IC_Start_IT+0x66>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x3e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e013      	b.n	800420e <HAL_TIM_IC_Start_IT+0x66>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0x4e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e00b      	b.n	800420e <HAL_TIM_IC_Start_IT+0x66>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_IC_Start_IT+0x5e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e003      	b.n	800420e <HAL_TIM_IC_Start_IT+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800420c:	b2db      	uxtb	r3, r3
 800420e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d104      	bne.n	8004220 <HAL_TIM_IC_Start_IT+0x78>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e013      	b.n	8004248 <HAL_TIM_IC_Start_IT+0xa0>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b04      	cmp	r3, #4
 8004224:	d104      	bne.n	8004230 <HAL_TIM_IC_Start_IT+0x88>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e00b      	b.n	8004248 <HAL_TIM_IC_Start_IT+0xa0>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b08      	cmp	r3, #8
 8004234:	d104      	bne.n	8004240 <HAL_TIM_IC_Start_IT+0x98>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e003      	b.n	8004248 <HAL_TIM_IC_Start_IT+0xa0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004246:	b2db      	uxtb	r3, r3
 8004248:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d102      	bne.n	8004256 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004250:	7b7b      	ldrb	r3, [r7, #13]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0e2      	b.n	8004420 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_TIM_IC_Start_IT+0xc2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	e023      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x10a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d104      	bne.n	800427a <HAL_TIM_IC_Start_IT+0xd2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004278:	e01b      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x10a>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d104      	bne.n	800428a <HAL_TIM_IC_Start_IT+0xe2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004288:	e013      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x10a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d104      	bne.n	800429a <HAL_TIM_IC_Start_IT+0xf2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004298:	e00b      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x10a>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d104      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0x102>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a8:	e003      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0x10a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_IC_Start_IT+0x11a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c0:	e013      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x142>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_IC_Start_IT+0x12a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d0:	e00b      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x142>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0x13a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e0:	e003      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x142>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d841      	bhi.n	8004374 <HAL_TIM_IC_Start_IT+0x1cc>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <HAL_TIM_IC_Start_IT+0x150>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	08004375 	.word	0x08004375
 8004300:	08004375 	.word	0x08004375
 8004304:	08004375 	.word	0x08004375
 8004308:	0800433f 	.word	0x0800433f
 800430c:	08004375 	.word	0x08004375
 8004310:	08004375 	.word	0x08004375
 8004314:	08004375 	.word	0x08004375
 8004318:	08004351 	.word	0x08004351
 800431c:	08004375 	.word	0x08004375
 8004320:	08004375 	.word	0x08004375
 8004324:	08004375 	.word	0x08004375
 8004328:	08004363 	.word	0x08004363
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0202 	orr.w	r2, r2, #2
 800433a:	60da      	str	r2, [r3, #12]
      break;
 800433c:	e01d      	b.n	800437a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	60da      	str	r2, [r3, #12]
      break;
 800434e:	e014      	b.n	800437a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0208 	orr.w	r2, r2, #8
 800435e:	60da      	str	r2, [r3, #12]
      break;
 8004360:	e00b      	b.n	800437a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0210 	orr.w	r2, r2, #16
 8004370:	60da      	str	r2, [r3, #12]
      break;
 8004372:	e002      	b.n	800437a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	bf00      	nop
  }

  if (status == HAL_OK)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d14e      	bne.n	800441e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fe37 	bl	8004ffc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a25      	ldr	r2, [pc, #148]	; (8004428 <HAL_TIM_IC_Start_IT+0x280>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d022      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d01d      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_TIM_IC_Start_IT+0x284>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_TIM_IC_Start_IT+0x288>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_TIM_IC_Start_IT+0x28c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_TIM_IC_Start_IT+0x290>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_TIM_IC_Start_IT+0x294>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x236>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_TIM_IC_Start_IT+0x298>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d115      	bne.n	800440a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <HAL_TIM_IC_Start_IT+0x29c>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d015      	beq.n	800441c <HAL_TIM_IC_Start_IT+0x274>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d011      	beq.n	800441c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	e008      	b.n	800441c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e000      	b.n	800441e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400
 800443c:	40014000 	.word	0x40014000
 8004440:	40001800 	.word	0x40001800
 8004444:	00010007 	.word	0x00010007

08004448 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b0c      	cmp	r3, #12
 800445a:	d841      	bhi.n	80044e0 <HAL_TIM_IC_Stop_IT+0x98>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_TIM_IC_Stop_IT+0x1c>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004499 	.word	0x08004499
 8004468:	080044e1 	.word	0x080044e1
 800446c:	080044e1 	.word	0x080044e1
 8004470:	080044e1 	.word	0x080044e1
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044e1 	.word	0x080044e1
 800447c:	080044e1 	.word	0x080044e1
 8004480:	080044e1 	.word	0x080044e1
 8004484:	080044bd 	.word	0x080044bd
 8004488:	080044e1 	.word	0x080044e1
 800448c:	080044e1 	.word	0x080044e1
 8004490:	080044e1 	.word	0x080044e1
 8004494:	080044cf 	.word	0x080044cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0202 	bic.w	r2, r2, #2
 80044a6:	60da      	str	r2, [r3, #12]
      break;
 80044a8:	e01d      	b.n	80044e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0204 	bic.w	r2, r2, #4
 80044b8:	60da      	str	r2, [r3, #12]
      break;
 80044ba:	e014      	b.n	80044e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0208 	bic.w	r2, r2, #8
 80044ca:	60da      	str	r2, [r3, #12]
      break;
 80044cc:	e00b      	b.n	80044e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0210 	bic.w	r2, r2, #16
 80044dc:	60da      	str	r2, [r3, #12]
      break;
 80044de:	e002      	b.n	80044e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d166      	bne.n	80045ba <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd81 	bl	8004ffc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1a      	ldr	r2, [r3, #32]
 8004500:	f241 1311 	movw	r3, #4369	; 0x1111
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <HAL_TIM_IC_Stop_IT+0xe2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	f240 4344 	movw	r3, #1092	; 0x444
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_TIM_IC_Stop_IT+0xe2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <HAL_TIM_IC_Stop_IT+0xf2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004538:	e023      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x13a>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d104      	bne.n	800454a <HAL_TIM_IC_Stop_IT+0x102>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	e01b      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x13a>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d104      	bne.n	800455a <HAL_TIM_IC_Stop_IT+0x112>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004558:	e013      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x13a>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d104      	bne.n	800456a <HAL_TIM_IC_Stop_IT+0x122>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004568:	e00b      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x13a>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b10      	cmp	r3, #16
 800456e:	d104      	bne.n	800457a <HAL_TIM_IC_Stop_IT+0x132>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004578:	e003      	b.n	8004582 <HAL_TIM_IC_Stop_IT+0x13a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_TIM_IC_Stop_IT+0x14a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	e013      	b.n	80045ba <HAL_TIM_IC_Stop_IT+0x172>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_IC_Stop_IT+0x15a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_IC_Stop_IT+0x172>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_IC_Stop_IT+0x16a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045b0:	e003      	b.n	80045ba <HAL_TIM_IC_Stop_IT+0x172>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0202 	mvn.w	r2, #2
 80045f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa76 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa68 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fa79 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b04      	cmp	r3, #4
 800462c:	d122      	bne.n	8004674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11b      	bne.n	8004674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0204 	mvn.w	r2, #4
 8004644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa4c 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa3e 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fa4f 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b08      	cmp	r3, #8
 8004680:	d122      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d11b      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0208 	mvn.w	r2, #8
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa22 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa14 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fa25 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d122      	bne.n	800471c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d11b      	bne.n	800471c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0210 	mvn.w	r2, #16
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2208      	movs	r2, #8
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9f8 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9ea 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f9fb 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d10e      	bne.n	8004748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0201 	mvn.w	r2, #1
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9c4 	bl	8004ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b80      	cmp	r3, #128	; 0x80
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fd02 	bl	8005178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004782:	d10e      	bne.n	80047a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	d107      	bne.n	80047a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fcf5 	bl	800518c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d10e      	bne.n	80047ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d107      	bne.n	80047ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f9a9 	bl	8004b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d10e      	bne.n	80047fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d107      	bne.n	80047fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0220 	mvn.w	r2, #32
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fcb5 	bl	8005164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIM_IC_ConfigChannel+0x1e>
 800481c:	2302      	movs	r3, #2
 800481e:	e088      	b.n	8004932 <HAL_TIM_IC_ConfigChannel+0x130>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11b      	bne.n	8004866 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f000 fa19 	bl	8004c74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 020c 	bic.w	r2, r2, #12
 8004850:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6999      	ldr	r1, [r3, #24]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
 8004864:	e060      	b.n	8004928 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d11c      	bne.n	80048a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f000 fa9d 	bl	8004dba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800488e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	021a      	lsls	r2, r3, #8
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	619a      	str	r2, [r3, #24]
 80048a4:	e040      	b.n	8004928 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f000 faea 	bl	8004e94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 020c 	bic.w	r2, r2, #12
 80048ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69d9      	ldr	r1, [r3, #28]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	61da      	str	r2, [r3, #28]
 80048e2:	e021      	b.n	8004928 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d11c      	bne.n	8004924 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f000 fb07 	bl	8004f0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800490c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69d9      	ldr	r1, [r3, #28]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	021a      	lsls	r2, r3, #8
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	61da      	str	r2, [r3, #28]
 8004922:	e001      	b.n	8004928 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIM_ConfigClockSource+0x1c>
 8004954:	2302      	movs	r3, #2
 8004956:	e0b4      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x186>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	4b56      	ldr	r3, [pc, #344]	; (8004acc <HAL_TIM_ConfigClockSource+0x190>)
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004990:	d03e      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0xd4>
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004996:	f200 8087 	bhi.w	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	f000 8086 	beq.w	8004aae <HAL_TIM_ConfigClockSource+0x172>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d87f      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b70      	cmp	r3, #112	; 0x70
 80049aa:	d01a      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0xa6>
 80049ac:	2b70      	cmp	r3, #112	; 0x70
 80049ae:	d87b      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b60      	cmp	r3, #96	; 0x60
 80049b2:	d050      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x11a>
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d877      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b50      	cmp	r3, #80	; 0x50
 80049ba:	d03c      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0xfa>
 80049bc:	2b50      	cmp	r3, #80	; 0x50
 80049be:	d873      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d058      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x13a>
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d86f      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b30      	cmp	r3, #48	; 0x30
 80049ca:	d064      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049cc:	2b30      	cmp	r3, #48	; 0x30
 80049ce:	d86b      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d060      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d867      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d05c      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d05a      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049e0:	e062      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f000 fae3 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	609a      	str	r2, [r3, #8]
      break;
 8004a0e:	e04f      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6899      	ldr	r1, [r3, #8]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f000 facc 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a32:	609a      	str	r2, [r3, #8]
      break;
 8004a34:	e03c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 f98a 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2150      	movs	r1, #80	; 0x50
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa99 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e02c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 f9e6 	bl	8004e34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2160      	movs	r1, #96	; 0x60
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa89 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004a74:	e01c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 f96a 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2140      	movs	r1, #64	; 0x40
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fa79 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004a94:	e00c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f000 fa70 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004aa6:	e003      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	fffeff88 	.word	0xfffeff88

08004ad0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a40      	ldr	r2, [pc, #256]	; (8004c48 <TIM_Base_SetConfig+0x114>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d00f      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a3d      	ldr	r2, [pc, #244]	; (8004c4c <TIM_Base_SetConfig+0x118>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a3c      	ldr	r2, [pc, #240]	; (8004c50 <TIM_Base_SetConfig+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3b      	ldr	r2, [pc, #236]	; (8004c54 <TIM_Base_SetConfig+0x120>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a3a      	ldr	r2, [pc, #232]	; (8004c58 <TIM_Base_SetConfig+0x124>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2f      	ldr	r2, [pc, #188]	; (8004c48 <TIM_Base_SetConfig+0x114>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02b      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d027      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <TIM_Base_SetConfig+0x118>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d023      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <TIM_Base_SetConfig+0x11c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01f      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <TIM_Base_SetConfig+0x120>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01b      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <TIM_Base_SetConfig+0x124>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d017      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <TIM_Base_SetConfig+0x128>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <TIM_Base_SetConfig+0x12c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00f      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <TIM_Base_SetConfig+0x130>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00b      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <TIM_Base_SetConfig+0x134>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <TIM_Base_SetConfig+0x138>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <TIM_Base_SetConfig+0x13c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <TIM_Base_SetConfig+0x114>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0xf8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d103      	bne.n	8004c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	615a      	str	r2, [r3, #20]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40010400 	.word	0x40010400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800
 8004c68:	40001800 	.word	0x40001800
 8004c6c:	40001c00 	.word	0x40001c00
 8004c70:	40002000 	.word	0x40002000

08004c74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0201 	bic.w	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_TI1_SetConfig+0xcc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d017      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <TIM_TI1_SetConfig+0xd0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a24      	ldr	r2, [pc, #144]	; (8004d48 <TIM_TI1_SetConfig+0xd4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <TIM_TI1_SetConfig+0xd8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_TI1_SetConfig+0xdc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_TI1_SetConfig+0xe0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <TIM_TI1_SetConfig+0xe4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <TIM_TI1_SetConfig+0x6a>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <TIM_TI1_SetConfig+0x6c>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e003      	b.n	8004cfe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f023 030a 	bic.w	r3, r3, #10
 8004d18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f003 030a 	and.w	r3, r3, #10
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40001800 	.word	0x40001800

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0210 	bic.w	r2, r3, #16
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f023 0210 	bic.w	r2, r3, #16
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	031b      	lsls	r3, r3, #12
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	031b      	lsls	r3, r3, #12
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	031b      	lsls	r3, r3, #12
 8004f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 0307 	orr.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2201      	movs	r2, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e06d      	b.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a30      	ldr	r2, [pc, #192]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2f      	ldr	r2, [pc, #188]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d108      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800509a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d01d      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10c      	bne.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40014000 	.word	0x40014000
 8005160:	40001800 	.word	0x40001800

08005164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e040      	b.n	8005234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc fed4 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	; 0x24
 80051cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f974 	bl	80054cc <UART_SetConfig>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e022      	b.n	8005234 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fbcc 	bl	8005994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800520a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fc53 	bl	8005ad8 <UART_CheckIdleState>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005250:	2b20      	cmp	r3, #32
 8005252:	d171      	bne.n	8005338 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Transmit+0x24>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e06a      	b.n	800533a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2221      	movs	r2, #33	; 0x21
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fd f897 	bl	80023a4 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005290:	d108      	bne.n	80052a4 <HAL_UART_Transmit+0x68>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	e003      	b.n	80052ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052ac:	e02c      	b.n	8005308 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fc44 	bl	8005b46 <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e038      	b.n	800533a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e007      	b.n	80052f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1cc      	bne.n	80052ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2200      	movs	r2, #0
 800531c:	2140      	movs	r1, #64	; 0x40
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fc11 	bl	8005b46 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e005      	b.n	800533a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08a      	sub	sp, #40	; 0x28
 8005346:	af02      	add	r7, sp, #8
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005358:	2b20      	cmp	r3, #32
 800535a:	f040 80b1 	bne.w	80054c0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Receive+0x28>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0a9      	b.n	80054c2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2222      	movs	r2, #34	; 0x22
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005384:	f7fd f80e 	bl	80023a4 <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a2:	d10e      	bne.n	80053c2 <HAL_UART_Receive+0x80>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_UART_Receive+0x76>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b6:	e02d      	b.n	8005414 <HAL_UART_Receive+0xd2>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	22ff      	movs	r2, #255	; 0xff
 80053bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c0:	e028      	b.n	8005414 <HAL_UART_Receive+0xd2>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <HAL_UART_Receive+0xa4>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <HAL_UART_Receive+0x9a>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053da:	e01b      	b.n	8005414 <HAL_UART_Receive+0xd2>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	227f      	movs	r2, #127	; 0x7f
 80053e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053e4:	e016      	b.n	8005414 <HAL_UART_Receive+0xd2>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ee:	d10d      	bne.n	800540c <HAL_UART_Receive+0xca>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_UART_Receive+0xc0>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	227f      	movs	r2, #127	; 0x7f
 80053fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005400:	e008      	b.n	8005414 <HAL_UART_Receive+0xd2>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	223f      	movs	r2, #63	; 0x3f
 8005406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800540a:	e003      	b.n	8005414 <HAL_UART_Receive+0xd2>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800541a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005424:	d108      	bne.n	8005438 <HAL_UART_Receive+0xf6>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e003      	b.n	8005440 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005440:	e032      	b.n	80054a8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	2120      	movs	r1, #32
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fb7a 	bl	8005b46 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e032      	b.n	80054c2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10c      	bne.n	800547c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	b29a      	uxth	r2, r3
 800546a:	8a7b      	ldrh	r3, [r7, #18]
 800546c:	4013      	ands	r3, r2
 800546e:	b29a      	uxth	r2, r3
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3302      	adds	r3, #2
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e00c      	b.n	8005496 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	b2da      	uxtb	r2, r3
 8005484:	8a7b      	ldrh	r3, [r7, #18]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4013      	ands	r3, r2
 800548a:	b2da      	uxtb	r2, r3
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3301      	adds	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1c6      	bne.n	8005442 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4ba6      	ldr	r3, [pc, #664]	; (8005790 <UART_SetConfig+0x2c4>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	430b      	orrs	r3, r1
 8005502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a94      	ldr	r2, [pc, #592]	; (8005794 <UART_SetConfig+0x2c8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d120      	bne.n	800558a <UART_SetConfig+0xbe>
 8005548:	4b93      	ldr	r3, [pc, #588]	; (8005798 <UART_SetConfig+0x2cc>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b03      	cmp	r3, #3
 8005554:	d816      	bhi.n	8005584 <UART_SetConfig+0xb8>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x90>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	08005579 	.word	0x08005579
 8005564:	08005573 	.word	0x08005573
 8005568:	0800557f 	.word	0x0800557f
 800556c:	2301      	movs	r3, #1
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e150      	b.n	8005814 <UART_SetConfig+0x348>
 8005572:	2302      	movs	r3, #2
 8005574:	77fb      	strb	r3, [r7, #31]
 8005576:	e14d      	b.n	8005814 <UART_SetConfig+0x348>
 8005578:	2304      	movs	r3, #4
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e14a      	b.n	8005814 <UART_SetConfig+0x348>
 800557e:	2308      	movs	r3, #8
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e147      	b.n	8005814 <UART_SetConfig+0x348>
 8005584:	2310      	movs	r3, #16
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e144      	b.n	8005814 <UART_SetConfig+0x348>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a83      	ldr	r2, [pc, #524]	; (800579c <UART_SetConfig+0x2d0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d132      	bne.n	80055fa <UART_SetConfig+0x12e>
 8005594:	4b80      	ldr	r3, [pc, #512]	; (8005798 <UART_SetConfig+0x2cc>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d828      	bhi.n	80055f4 <UART_SetConfig+0x128>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0xdc>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	080055f5 	.word	0x080055f5
 80055b8:	080055e9 	.word	0x080055e9
 80055bc:	080055f5 	.word	0x080055f5
 80055c0:	080055f5 	.word	0x080055f5
 80055c4:	080055f5 	.word	0x080055f5
 80055c8:	080055e3 	.word	0x080055e3
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055f5 	.word	0x080055f5
 80055d8:	080055ef 	.word	0x080055ef
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e118      	b.n	8005814 <UART_SetConfig+0x348>
 80055e2:	2302      	movs	r3, #2
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e115      	b.n	8005814 <UART_SetConfig+0x348>
 80055e8:	2304      	movs	r3, #4
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e112      	b.n	8005814 <UART_SetConfig+0x348>
 80055ee:	2308      	movs	r3, #8
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e10f      	b.n	8005814 <UART_SetConfig+0x348>
 80055f4:	2310      	movs	r3, #16
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e10c      	b.n	8005814 <UART_SetConfig+0x348>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a68      	ldr	r2, [pc, #416]	; (80057a0 <UART_SetConfig+0x2d4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d120      	bne.n	8005646 <UART_SetConfig+0x17a>
 8005604:	4b64      	ldr	r3, [pc, #400]	; (8005798 <UART_SetConfig+0x2cc>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800560e:	2b30      	cmp	r3, #48	; 0x30
 8005610:	d013      	beq.n	800563a <UART_SetConfig+0x16e>
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d814      	bhi.n	8005640 <UART_SetConfig+0x174>
 8005616:	2b20      	cmp	r3, #32
 8005618:	d009      	beq.n	800562e <UART_SetConfig+0x162>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d810      	bhi.n	8005640 <UART_SetConfig+0x174>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <UART_SetConfig+0x15c>
 8005622:	2b10      	cmp	r3, #16
 8005624:	d006      	beq.n	8005634 <UART_SetConfig+0x168>
 8005626:	e00b      	b.n	8005640 <UART_SetConfig+0x174>
 8005628:	2300      	movs	r3, #0
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e0f2      	b.n	8005814 <UART_SetConfig+0x348>
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e0ef      	b.n	8005814 <UART_SetConfig+0x348>
 8005634:	2304      	movs	r3, #4
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e0ec      	b.n	8005814 <UART_SetConfig+0x348>
 800563a:	2308      	movs	r3, #8
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e0e9      	b.n	8005814 <UART_SetConfig+0x348>
 8005640:	2310      	movs	r3, #16
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0e6      	b.n	8005814 <UART_SetConfig+0x348>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a56      	ldr	r2, [pc, #344]	; (80057a4 <UART_SetConfig+0x2d8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d120      	bne.n	8005692 <UART_SetConfig+0x1c6>
 8005650:	4b51      	ldr	r3, [pc, #324]	; (8005798 <UART_SetConfig+0x2cc>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800565a:	2bc0      	cmp	r3, #192	; 0xc0
 800565c:	d013      	beq.n	8005686 <UART_SetConfig+0x1ba>
 800565e:	2bc0      	cmp	r3, #192	; 0xc0
 8005660:	d814      	bhi.n	800568c <UART_SetConfig+0x1c0>
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d009      	beq.n	800567a <UART_SetConfig+0x1ae>
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d810      	bhi.n	800568c <UART_SetConfig+0x1c0>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <UART_SetConfig+0x1a8>
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d006      	beq.n	8005680 <UART_SetConfig+0x1b4>
 8005672:	e00b      	b.n	800568c <UART_SetConfig+0x1c0>
 8005674:	2300      	movs	r3, #0
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e0cc      	b.n	8005814 <UART_SetConfig+0x348>
 800567a:	2302      	movs	r3, #2
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e0c9      	b.n	8005814 <UART_SetConfig+0x348>
 8005680:	2304      	movs	r3, #4
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e0c6      	b.n	8005814 <UART_SetConfig+0x348>
 8005686:	2308      	movs	r3, #8
 8005688:	77fb      	strb	r3, [r7, #31]
 800568a:	e0c3      	b.n	8005814 <UART_SetConfig+0x348>
 800568c:	2310      	movs	r3, #16
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0c0      	b.n	8005814 <UART_SetConfig+0x348>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a44      	ldr	r2, [pc, #272]	; (80057a8 <UART_SetConfig+0x2dc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d125      	bne.n	80056e8 <UART_SetConfig+0x21c>
 800569c:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <UART_SetConfig+0x2cc>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056aa:	d017      	beq.n	80056dc <UART_SetConfig+0x210>
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b0:	d817      	bhi.n	80056e2 <UART_SetConfig+0x216>
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b6:	d00b      	beq.n	80056d0 <UART_SetConfig+0x204>
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056bc:	d811      	bhi.n	80056e2 <UART_SetConfig+0x216>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <UART_SetConfig+0x1fe>
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c6:	d006      	beq.n	80056d6 <UART_SetConfig+0x20a>
 80056c8:	e00b      	b.n	80056e2 <UART_SetConfig+0x216>
 80056ca:	2300      	movs	r3, #0
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e0a1      	b.n	8005814 <UART_SetConfig+0x348>
 80056d0:	2302      	movs	r3, #2
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e09e      	b.n	8005814 <UART_SetConfig+0x348>
 80056d6:	2304      	movs	r3, #4
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e09b      	b.n	8005814 <UART_SetConfig+0x348>
 80056dc:	2308      	movs	r3, #8
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e098      	b.n	8005814 <UART_SetConfig+0x348>
 80056e2:	2310      	movs	r3, #16
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e095      	b.n	8005814 <UART_SetConfig+0x348>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <UART_SetConfig+0x2e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d125      	bne.n	800573e <UART_SetConfig+0x272>
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <UART_SetConfig+0x2cc>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005700:	d017      	beq.n	8005732 <UART_SetConfig+0x266>
 8005702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005706:	d817      	bhi.n	8005738 <UART_SetConfig+0x26c>
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570c:	d00b      	beq.n	8005726 <UART_SetConfig+0x25a>
 800570e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005712:	d811      	bhi.n	8005738 <UART_SetConfig+0x26c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <UART_SetConfig+0x254>
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571c:	d006      	beq.n	800572c <UART_SetConfig+0x260>
 800571e:	e00b      	b.n	8005738 <UART_SetConfig+0x26c>
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e076      	b.n	8005814 <UART_SetConfig+0x348>
 8005726:	2302      	movs	r3, #2
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e073      	b.n	8005814 <UART_SetConfig+0x348>
 800572c:	2304      	movs	r3, #4
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e070      	b.n	8005814 <UART_SetConfig+0x348>
 8005732:	2308      	movs	r3, #8
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e06d      	b.n	8005814 <UART_SetConfig+0x348>
 8005738:	2310      	movs	r3, #16
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e06a      	b.n	8005814 <UART_SetConfig+0x348>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <UART_SetConfig+0x2e4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d138      	bne.n	80057ba <UART_SetConfig+0x2ee>
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <UART_SetConfig+0x2cc>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005756:	d017      	beq.n	8005788 <UART_SetConfig+0x2bc>
 8005758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800575c:	d82a      	bhi.n	80057b4 <UART_SetConfig+0x2e8>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	d00b      	beq.n	800577c <UART_SetConfig+0x2b0>
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005768:	d824      	bhi.n	80057b4 <UART_SetConfig+0x2e8>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <UART_SetConfig+0x2aa>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d006      	beq.n	8005782 <UART_SetConfig+0x2b6>
 8005774:	e01e      	b.n	80057b4 <UART_SetConfig+0x2e8>
 8005776:	2300      	movs	r3, #0
 8005778:	77fb      	strb	r3, [r7, #31]
 800577a:	e04b      	b.n	8005814 <UART_SetConfig+0x348>
 800577c:	2302      	movs	r3, #2
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e048      	b.n	8005814 <UART_SetConfig+0x348>
 8005782:	2304      	movs	r3, #4
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e045      	b.n	8005814 <UART_SetConfig+0x348>
 8005788:	2308      	movs	r3, #8
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e042      	b.n	8005814 <UART_SetConfig+0x348>
 800578e:	bf00      	nop
 8005790:	efff69f3 	.word	0xefff69f3
 8005794:	40011000 	.word	0x40011000
 8005798:	40023800 	.word	0x40023800
 800579c:	40004400 	.word	0x40004400
 80057a0:	40004800 	.word	0x40004800
 80057a4:	40004c00 	.word	0x40004c00
 80057a8:	40005000 	.word	0x40005000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	40007800 	.word	0x40007800
 80057b4:	2310      	movs	r3, #16
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e02c      	b.n	8005814 <UART_SetConfig+0x348>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a72      	ldr	r2, [pc, #456]	; (8005988 <UART_SetConfig+0x4bc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d125      	bne.n	8005810 <UART_SetConfig+0x344>
 80057c4:	4b71      	ldr	r3, [pc, #452]	; (800598c <UART_SetConfig+0x4c0>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057d2:	d017      	beq.n	8005804 <UART_SetConfig+0x338>
 80057d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057d8:	d817      	bhi.n	800580a <UART_SetConfig+0x33e>
 80057da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057de:	d00b      	beq.n	80057f8 <UART_SetConfig+0x32c>
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d811      	bhi.n	800580a <UART_SetConfig+0x33e>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <UART_SetConfig+0x326>
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ee:	d006      	beq.n	80057fe <UART_SetConfig+0x332>
 80057f0:	e00b      	b.n	800580a <UART_SetConfig+0x33e>
 80057f2:	2300      	movs	r3, #0
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e00d      	b.n	8005814 <UART_SetConfig+0x348>
 80057f8:	2302      	movs	r3, #2
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e00a      	b.n	8005814 <UART_SetConfig+0x348>
 80057fe:	2304      	movs	r3, #4
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e007      	b.n	8005814 <UART_SetConfig+0x348>
 8005804:	2308      	movs	r3, #8
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e004      	b.n	8005814 <UART_SetConfig+0x348>
 800580a:	2310      	movs	r3, #16
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e001      	b.n	8005814 <UART_SetConfig+0x348>
 8005810:	2310      	movs	r3, #16
 8005812:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581c:	d15b      	bne.n	80058d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800581e:	7ffb      	ldrb	r3, [r7, #31]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d828      	bhi.n	8005876 <UART_SetConfig+0x3aa>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x360>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	08005877 	.word	0x08005877
 800583c:	08005867 	.word	0x08005867
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
 800584c:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fd fd56 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8005854:	61b8      	str	r0, [r7, #24]
        break;
 8005856:	e013      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fd fd66 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 800585c:	61b8      	str	r0, [r7, #24]
        break;
 800585e:	e00f      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <UART_SetConfig+0x4c4>)
 8005862:	61bb      	str	r3, [r7, #24]
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fd fc79 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800586a:	61b8      	str	r0, [r7, #24]
        break;
 800586c:	e008      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61bb      	str	r3, [r7, #24]
        break;
 8005874:	e004      	b.n	8005880 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	77bb      	strb	r3, [r7, #30]
        break;
 800587e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d074      	beq.n	8005970 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d916      	bls.n	80058d0 <UART_SetConfig+0x404>
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a8:	d212      	bcs.n	80058d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	b29a      	uxth	r2, r3
 80058c0:	89fb      	ldrh	r3, [r7, #14]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	89fa      	ldrh	r2, [r7, #14]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	e04f      	b.n	8005970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77bb      	strb	r3, [r7, #30]
 80058d4:	e04c      	b.n	8005970 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d828      	bhi.n	800592e <UART_SetConfig+0x462>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x418>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005919 	.word	0x08005919
 80058f0:	0800592f 	.word	0x0800592f
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	0800592f 	.word	0x0800592f
 80058fc:	0800592f 	.word	0x0800592f
 8005900:	0800592f 	.word	0x0800592f
 8005904:	08005927 	.word	0x08005927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fd fcfa 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 800590c:	61b8      	str	r0, [r7, #24]
        break;
 800590e:	e013      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fd fd0a 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8005914:	61b8      	str	r0, [r7, #24]
        break;
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <UART_SetConfig+0x4c4>)
 800591a:	61bb      	str	r3, [r7, #24]
        break;
 800591c:	e00c      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591e:	f7fd fc1d 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8005922:	61b8      	str	r0, [r7, #24]
        break;
 8005924:	e008      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	61bb      	str	r3, [r7, #24]
        break;
 800592c:	e004      	b.n	8005938 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	77bb      	strb	r3, [r7, #30]
        break;
 8005936:	bf00      	nop
    }

    if (pclk != 0U)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085a      	lsrs	r2, r3, #1
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	441a      	add	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d909      	bls.n	800596c <UART_SetConfig+0x4a0>
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595e:	d205      	bcs.n	800596c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e001      	b.n	8005970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800597c:	7fbb      	ldrb	r3, [r7, #30]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40007c00 	.word	0x40007c00
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400

08005994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d10a      	bne.n	8005aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae8:	f7fc fc5c 	bl	80023a4 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10e      	bne.n	8005b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f81b 	bl	8005b46 <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e011      	b.n	8005b3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b09c      	sub	sp, #112	; 0x70
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b56:	e0a7      	b.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	f000 80a3 	beq.w	8005ca8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fc fc1f 	bl	80023a4 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d13f      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e6      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bca:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e5      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e068      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d050      	beq.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c14:	d148      	bne.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	613b      	str	r3, [r7, #16]
   return(result);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c72:	623a      	str	r2, [r7, #32]
 8005c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	69f9      	ldr	r1, [r7, #28]
 8005c78:	6a3a      	ldr	r2, [r7, #32]
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e010      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2301      	moveq	r3, #1
 8005cba:	2300      	movne	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	f43f af48 	beq.w	8005b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3770      	adds	r7, #112	; 0x70
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <__errno>:
 8005cd4:	4b01      	ldr	r3, [pc, #4]	; (8005cdc <__errno+0x8>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	2000000c 	.word	0x2000000c

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4d0d      	ldr	r5, [pc, #52]	; (8005d18 <__libc_init_array+0x38>)
 8005ce4:	4c0d      	ldr	r4, [pc, #52]	; (8005d1c <__libc_init_array+0x3c>)
 8005ce6:	1b64      	subs	r4, r4, r5
 8005ce8:	10a4      	asrs	r4, r4, #2
 8005cea:	2600      	movs	r6, #0
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	4d0b      	ldr	r5, [pc, #44]	; (8005d20 <__libc_init_array+0x40>)
 8005cf2:	4c0c      	ldr	r4, [pc, #48]	; (8005d24 <__libc_init_array+0x44>)
 8005cf4:	f003 fcbe 	bl	8009674 <_init>
 8005cf8:	1b64      	subs	r4, r4, r5
 8005cfa:	10a4      	asrs	r4, r4, #2
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d08:	4798      	blx	r3
 8005d0a:	3601      	adds	r6, #1
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d12:	4798      	blx	r3
 8005d14:	3601      	adds	r6, #1
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	08009fa8 	.word	0x08009fa8
 8005d1c:	08009fa8 	.word	0x08009fa8
 8005d20:	08009fa8 	.word	0x08009fa8
 8005d24:	08009fac 	.word	0x08009fac

08005d28 <memset>:
 8005d28:	4402      	add	r2, r0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <memset+0xa>
 8005d30:	4770      	bx	lr
 8005d32:	f803 1b01 	strb.w	r1, [r3], #1
 8005d36:	e7f9      	b.n	8005d2c <memset+0x4>

08005d38 <__cvt>:
 8005d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	ec55 4b10 	vmov	r4, r5, d0
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	460e      	mov	r6, r1
 8005d44:	4619      	mov	r1, r3
 8005d46:	462b      	mov	r3, r5
 8005d48:	bfbb      	ittet	lt
 8005d4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d4e:	461d      	movlt	r5, r3
 8005d50:	2300      	movge	r3, #0
 8005d52:	232d      	movlt	r3, #45	; 0x2d
 8005d54:	700b      	strb	r3, [r1, #0]
 8005d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d5c:	4691      	mov	r9, r2
 8005d5e:	f023 0820 	bic.w	r8, r3, #32
 8005d62:	bfbc      	itt	lt
 8005d64:	4622      	movlt	r2, r4
 8005d66:	4614      	movlt	r4, r2
 8005d68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d6c:	d005      	beq.n	8005d7a <__cvt+0x42>
 8005d6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d72:	d100      	bne.n	8005d76 <__cvt+0x3e>
 8005d74:	3601      	adds	r6, #1
 8005d76:	2102      	movs	r1, #2
 8005d78:	e000      	b.n	8005d7c <__cvt+0x44>
 8005d7a:	2103      	movs	r1, #3
 8005d7c:	ab03      	add	r3, sp, #12
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	ab02      	add	r3, sp, #8
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	ec45 4b10 	vmov	d0, r4, r5
 8005d88:	4653      	mov	r3, sl
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	f000 fef8 	bl	8006b80 <_dtoa_r>
 8005d90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d94:	4607      	mov	r7, r0
 8005d96:	d102      	bne.n	8005d9e <__cvt+0x66>
 8005d98:	f019 0f01 	tst.w	r9, #1
 8005d9c:	d022      	beq.n	8005de4 <__cvt+0xac>
 8005d9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005da2:	eb07 0906 	add.w	r9, r7, r6
 8005da6:	d110      	bne.n	8005dca <__cvt+0x92>
 8005da8:	783b      	ldrb	r3, [r7, #0]
 8005daa:	2b30      	cmp	r3, #48	; 0x30
 8005dac:	d10a      	bne.n	8005dc4 <__cvt+0x8c>
 8005dae:	2200      	movs	r2, #0
 8005db0:	2300      	movs	r3, #0
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fea7 	bl	8000b08 <__aeabi_dcmpeq>
 8005dba:	b918      	cbnz	r0, 8005dc4 <__cvt+0x8c>
 8005dbc:	f1c6 0601 	rsb	r6, r6, #1
 8005dc0:	f8ca 6000 	str.w	r6, [sl]
 8005dc4:	f8da 3000 	ldr.w	r3, [sl]
 8005dc8:	4499      	add	r9, r3
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	f7fa fe99 	bl	8000b08 <__aeabi_dcmpeq>
 8005dd6:	b108      	cbz	r0, 8005ddc <__cvt+0xa4>
 8005dd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ddc:	2230      	movs	r2, #48	; 0x30
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	454b      	cmp	r3, r9
 8005de2:	d307      	bcc.n	8005df4 <__cvt+0xbc>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de8:	1bdb      	subs	r3, r3, r7
 8005dea:	4638      	mov	r0, r7
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	b004      	add	sp, #16
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	9103      	str	r1, [sp, #12]
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	e7f0      	b.n	8005dde <__cvt+0xa6>

08005dfc <__exponent>:
 8005dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2900      	cmp	r1, #0
 8005e02:	bfb8      	it	lt
 8005e04:	4249      	neglt	r1, r1
 8005e06:	f803 2b02 	strb.w	r2, [r3], #2
 8005e0a:	bfb4      	ite	lt
 8005e0c:	222d      	movlt	r2, #45	; 0x2d
 8005e0e:	222b      	movge	r2, #43	; 0x2b
 8005e10:	2909      	cmp	r1, #9
 8005e12:	7042      	strb	r2, [r0, #1]
 8005e14:	dd2a      	ble.n	8005e6c <__exponent+0x70>
 8005e16:	f10d 0407 	add.w	r4, sp, #7
 8005e1a:	46a4      	mov	ip, r4
 8005e1c:	270a      	movs	r7, #10
 8005e1e:	46a6      	mov	lr, r4
 8005e20:	460a      	mov	r2, r1
 8005e22:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e26:	fb07 1516 	mls	r5, r7, r6, r1
 8005e2a:	3530      	adds	r5, #48	; 0x30
 8005e2c:	2a63      	cmp	r2, #99	; 0x63
 8005e2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e36:	4631      	mov	r1, r6
 8005e38:	dcf1      	bgt.n	8005e1e <__exponent+0x22>
 8005e3a:	3130      	adds	r1, #48	; 0x30
 8005e3c:	f1ae 0502 	sub.w	r5, lr, #2
 8005e40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e44:	1c44      	adds	r4, r0, #1
 8005e46:	4629      	mov	r1, r5
 8005e48:	4561      	cmp	r1, ip
 8005e4a:	d30a      	bcc.n	8005e62 <__exponent+0x66>
 8005e4c:	f10d 0209 	add.w	r2, sp, #9
 8005e50:	eba2 020e 	sub.w	r2, r2, lr
 8005e54:	4565      	cmp	r5, ip
 8005e56:	bf88      	it	hi
 8005e58:	2200      	movhi	r2, #0
 8005e5a:	4413      	add	r3, r2
 8005e5c:	1a18      	subs	r0, r3, r0
 8005e5e:	b003      	add	sp, #12
 8005e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e6a:	e7ed      	b.n	8005e48 <__exponent+0x4c>
 8005e6c:	2330      	movs	r3, #48	; 0x30
 8005e6e:	3130      	adds	r1, #48	; 0x30
 8005e70:	7083      	strb	r3, [r0, #2]
 8005e72:	70c1      	strb	r1, [r0, #3]
 8005e74:	1d03      	adds	r3, r0, #4
 8005e76:	e7f1      	b.n	8005e5c <__exponent+0x60>

08005e78 <_printf_float>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	ed2d 8b02 	vpush	{d8}
 8005e80:	b08d      	sub	sp, #52	; 0x34
 8005e82:	460c      	mov	r4, r1
 8005e84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e88:	4616      	mov	r6, r2
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	f001 fe4b 	bl	8007b28 <_localeconv_r>
 8005e92:	f8d0 a000 	ldr.w	sl, [r0]
 8005e96:	4650      	mov	r0, sl
 8005e98:	f7fa f9ba 	bl	8000210 <strlen>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	9305      	str	r3, [sp, #20]
 8005ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005eac:	3307      	adds	r3, #7
 8005eae:	f023 0307 	bic.w	r3, r3, #7
 8005eb2:	f103 0208 	add.w	r2, r3, #8
 8005eb6:	f8c8 2000 	str.w	r2, [r8]
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ec2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eca:	9307      	str	r3, [sp, #28]
 8005ecc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ed0:	ee08 0a10 	vmov	s16, r0
 8005ed4:	4b9f      	ldr	r3, [pc, #636]	; (8006154 <_printf_float+0x2dc>)
 8005ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eda:	f04f 32ff 	mov.w	r2, #4294967295
 8005ede:	f7fa fe45 	bl	8000b6c <__aeabi_dcmpun>
 8005ee2:	bb88      	cbnz	r0, 8005f48 <_printf_float+0xd0>
 8005ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee8:	4b9a      	ldr	r3, [pc, #616]	; (8006154 <_printf_float+0x2dc>)
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	f7fa fe1f 	bl	8000b30 <__aeabi_dcmple>
 8005ef2:	bb48      	cbnz	r0, 8005f48 <_printf_float+0xd0>
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4649      	mov	r1, r9
 8005efc:	f7fa fe0e 	bl	8000b1c <__aeabi_dcmplt>
 8005f00:	b110      	cbz	r0, 8005f08 <_printf_float+0x90>
 8005f02:	232d      	movs	r3, #45	; 0x2d
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f08:	4b93      	ldr	r3, [pc, #588]	; (8006158 <_printf_float+0x2e0>)
 8005f0a:	4894      	ldr	r0, [pc, #592]	; (800615c <_printf_float+0x2e4>)
 8005f0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f10:	bf94      	ite	ls
 8005f12:	4698      	movls	r8, r3
 8005f14:	4680      	movhi	r8, r0
 8005f16:	2303      	movs	r3, #3
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	9b05      	ldr	r3, [sp, #20]
 8005f1c:	f023 0204 	bic.w	r2, r3, #4
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	f04f 0900 	mov.w	r9, #0
 8005f26:	9700      	str	r7, [sp, #0]
 8005f28:	4633      	mov	r3, r6
 8005f2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f9d8 	bl	80062e4 <_printf_common>
 8005f34:	3001      	adds	r0, #1
 8005f36:	f040 8090 	bne.w	800605a <_printf_float+0x1e2>
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	b00d      	add	sp, #52	; 0x34
 8005f40:	ecbd 8b02 	vpop	{d8}
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	4649      	mov	r1, r9
 8005f50:	f7fa fe0c 	bl	8000b6c <__aeabi_dcmpun>
 8005f54:	b140      	cbz	r0, 8005f68 <_printf_float+0xf0>
 8005f56:	464b      	mov	r3, r9
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bfbc      	itt	lt
 8005f5c:	232d      	movlt	r3, #45	; 0x2d
 8005f5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f62:	487f      	ldr	r0, [pc, #508]	; (8006160 <_printf_float+0x2e8>)
 8005f64:	4b7f      	ldr	r3, [pc, #508]	; (8006164 <_printf_float+0x2ec>)
 8005f66:	e7d1      	b.n	8005f0c <_printf_float+0x94>
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f6e:	9206      	str	r2, [sp, #24]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	d13f      	bne.n	8005ff4 <_printf_float+0x17c>
 8005f74:	2306      	movs	r3, #6
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	9b05      	ldr	r3, [sp, #20]
 8005f7a:	6861      	ldr	r1, [r4, #4]
 8005f7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f80:	2300      	movs	r3, #0
 8005f82:	9303      	str	r3, [sp, #12]
 8005f84:	ab0a      	add	r3, sp, #40	; 0x28
 8005f86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f8a:	ab09      	add	r3, sp, #36	; 0x24
 8005f8c:	ec49 8b10 	vmov	d0, r8, r9
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f7ff fecd 	bl	8005d38 <__cvt>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fa2:	2b47      	cmp	r3, #71	; 0x47
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	d108      	bne.n	8005fba <_printf_float+0x142>
 8005fa8:	1cc8      	adds	r0, r1, #3
 8005faa:	db02      	blt.n	8005fb2 <_printf_float+0x13a>
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	dd41      	ble.n	8006036 <_printf_float+0x1be>
 8005fb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fb6:	fa5f fb8b 	uxtb.w	fp, fp
 8005fba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fbe:	d820      	bhi.n	8006002 <_printf_float+0x18a>
 8005fc0:	3901      	subs	r1, #1
 8005fc2:	465a      	mov	r2, fp
 8005fc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8005fca:	f7ff ff17 	bl	8005dfc <__exponent>
 8005fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fd0:	1813      	adds	r3, r2, r0
 8005fd2:	2a01      	cmp	r2, #1
 8005fd4:	4681      	mov	r9, r0
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	dc02      	bgt.n	8005fe0 <_printf_float+0x168>
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	07d2      	lsls	r2, r2, #31
 8005fde:	d501      	bpl.n	8005fe4 <_printf_float+0x16c>
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d09c      	beq.n	8005f26 <_printf_float+0xae>
 8005fec:	232d      	movs	r3, #45	; 0x2d
 8005fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff2:	e798      	b.n	8005f26 <_printf_float+0xae>
 8005ff4:	9a06      	ldr	r2, [sp, #24]
 8005ff6:	2a47      	cmp	r2, #71	; 0x47
 8005ff8:	d1be      	bne.n	8005f78 <_printf_float+0x100>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1bc      	bne.n	8005f78 <_printf_float+0x100>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e7b9      	b.n	8005f76 <_printf_float+0xfe>
 8006002:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006006:	d118      	bne.n	800603a <_printf_float+0x1c2>
 8006008:	2900      	cmp	r1, #0
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	dd0b      	ble.n	8006026 <_printf_float+0x1ae>
 800600e:	6121      	str	r1, [r4, #16]
 8006010:	b913      	cbnz	r3, 8006018 <_printf_float+0x1a0>
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	07d0      	lsls	r0, r2, #31
 8006016:	d502      	bpl.n	800601e <_printf_float+0x1a6>
 8006018:	3301      	adds	r3, #1
 800601a:	440b      	add	r3, r1
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006020:	f04f 0900 	mov.w	r9, #0
 8006024:	e7de      	b.n	8005fe4 <_printf_float+0x16c>
 8006026:	b913      	cbnz	r3, 800602e <_printf_float+0x1b6>
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	07d2      	lsls	r2, r2, #31
 800602c:	d501      	bpl.n	8006032 <_printf_float+0x1ba>
 800602e:	3302      	adds	r3, #2
 8006030:	e7f4      	b.n	800601c <_printf_float+0x1a4>
 8006032:	2301      	movs	r3, #1
 8006034:	e7f2      	b.n	800601c <_printf_float+0x1a4>
 8006036:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800603a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603c:	4299      	cmp	r1, r3
 800603e:	db05      	blt.n	800604c <_printf_float+0x1d4>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	6121      	str	r1, [r4, #16]
 8006044:	07d8      	lsls	r0, r3, #31
 8006046:	d5ea      	bpl.n	800601e <_printf_float+0x1a6>
 8006048:	1c4b      	adds	r3, r1, #1
 800604a:	e7e7      	b.n	800601c <_printf_float+0x1a4>
 800604c:	2900      	cmp	r1, #0
 800604e:	bfd4      	ite	le
 8006050:	f1c1 0202 	rsble	r2, r1, #2
 8006054:	2201      	movgt	r2, #1
 8006056:	4413      	add	r3, r2
 8006058:	e7e0      	b.n	800601c <_printf_float+0x1a4>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	055a      	lsls	r2, r3, #21
 800605e:	d407      	bmi.n	8006070 <_printf_float+0x1f8>
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	4642      	mov	r2, r8
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	d12c      	bne.n	80060c8 <_printf_float+0x250>
 800606e:	e764      	b.n	8005f3a <_printf_float+0xc2>
 8006070:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006074:	f240 80e0 	bls.w	8006238 <_printf_float+0x3c0>
 8006078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800607c:	2200      	movs	r2, #0
 800607e:	2300      	movs	r3, #0
 8006080:	f7fa fd42 	bl	8000b08 <__aeabi_dcmpeq>
 8006084:	2800      	cmp	r0, #0
 8006086:	d034      	beq.n	80060f2 <_printf_float+0x27a>
 8006088:	4a37      	ldr	r2, [pc, #220]	; (8006168 <_printf_float+0x2f0>)
 800608a:	2301      	movs	r3, #1
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af51 	beq.w	8005f3a <_printf_float+0xc2>
 8006098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609c:	429a      	cmp	r2, r3
 800609e:	db02      	blt.n	80060a6 <_printf_float+0x22e>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	07d8      	lsls	r0, r3, #31
 80060a4:	d510      	bpl.n	80060c8 <_printf_float+0x250>
 80060a6:	ee18 3a10 	vmov	r3, s16
 80060aa:	4652      	mov	r2, sl
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f af41 	beq.w	8005f3a <_printf_float+0xc2>
 80060b8:	f04f 0800 	mov.w	r8, #0
 80060bc:	f104 091a 	add.w	r9, r4, #26
 80060c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	4543      	cmp	r3, r8
 80060c6:	dc09      	bgt.n	80060dc <_printf_float+0x264>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	f100 8105 	bmi.w	80062da <_printf_float+0x462>
 80060d0:	68e0      	ldr	r0, [r4, #12]
 80060d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d4:	4298      	cmp	r0, r3
 80060d6:	bfb8      	it	lt
 80060d8:	4618      	movlt	r0, r3
 80060da:	e730      	b.n	8005f3e <_printf_float+0xc6>
 80060dc:	2301      	movs	r3, #1
 80060de:	464a      	mov	r2, r9
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f af27 	beq.w	8005f3a <_printf_float+0xc2>
 80060ec:	f108 0801 	add.w	r8, r8, #1
 80060f0:	e7e6      	b.n	80060c0 <_printf_float+0x248>
 80060f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	dc39      	bgt.n	800616c <_printf_float+0x2f4>
 80060f8:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <_printf_float+0x2f0>)
 80060fa:	2301      	movs	r3, #1
 80060fc:	4631      	mov	r1, r6
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	f43f af19 	beq.w	8005f3a <_printf_float+0xc2>
 8006108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800610c:	4313      	orrs	r3, r2
 800610e:	d102      	bne.n	8006116 <_printf_float+0x29e>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07d9      	lsls	r1, r3, #31
 8006114:	d5d8      	bpl.n	80060c8 <_printf_float+0x250>
 8006116:	ee18 3a10 	vmov	r3, s16
 800611a:	4652      	mov	r2, sl
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f af09 	beq.w	8005f3a <_printf_float+0xc2>
 8006128:	f04f 0900 	mov.w	r9, #0
 800612c:	f104 0a1a 	add.w	sl, r4, #26
 8006130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006132:	425b      	negs	r3, r3
 8006134:	454b      	cmp	r3, r9
 8006136:	dc01      	bgt.n	800613c <_printf_float+0x2c4>
 8006138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613a:	e792      	b.n	8006062 <_printf_float+0x1ea>
 800613c:	2301      	movs	r3, #1
 800613e:	4652      	mov	r2, sl
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f aef7 	beq.w	8005f3a <_printf_float+0xc2>
 800614c:	f109 0901 	add.w	r9, r9, #1
 8006150:	e7ee      	b.n	8006130 <_printf_float+0x2b8>
 8006152:	bf00      	nop
 8006154:	7fefffff 	.word	0x7fefffff
 8006158:	08009bac 	.word	0x08009bac
 800615c:	08009bb0 	.word	0x08009bb0
 8006160:	08009bb8 	.word	0x08009bb8
 8006164:	08009bb4 	.word	0x08009bb4
 8006168:	08009e41 	.word	0x08009e41
 800616c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800616e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006170:	429a      	cmp	r2, r3
 8006172:	bfa8      	it	ge
 8006174:	461a      	movge	r2, r3
 8006176:	2a00      	cmp	r2, #0
 8006178:	4691      	mov	r9, r2
 800617a:	dc37      	bgt.n	80061ec <_printf_float+0x374>
 800617c:	f04f 0b00 	mov.w	fp, #0
 8006180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006184:	f104 021a 	add.w	r2, r4, #26
 8006188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	eba3 0309 	sub.w	r3, r3, r9
 8006190:	455b      	cmp	r3, fp
 8006192:	dc33      	bgt.n	80061fc <_printf_float+0x384>
 8006194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006198:	429a      	cmp	r2, r3
 800619a:	db3b      	blt.n	8006214 <_printf_float+0x39c>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07da      	lsls	r2, r3, #31
 80061a0:	d438      	bmi.n	8006214 <_printf_float+0x39c>
 80061a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a4:	9a05      	ldr	r2, [sp, #20]
 80061a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a8:	1a9a      	subs	r2, r3, r2
 80061aa:	eba3 0901 	sub.w	r9, r3, r1
 80061ae:	4591      	cmp	r9, r2
 80061b0:	bfa8      	it	ge
 80061b2:	4691      	movge	r9, r2
 80061b4:	f1b9 0f00 	cmp.w	r9, #0
 80061b8:	dc35      	bgt.n	8006226 <_printf_float+0x3ae>
 80061ba:	f04f 0800 	mov.w	r8, #0
 80061be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061c2:	f104 0a1a 	add.w	sl, r4, #26
 80061c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	eba3 0309 	sub.w	r3, r3, r9
 80061d0:	4543      	cmp	r3, r8
 80061d2:	f77f af79 	ble.w	80060c8 <_printf_float+0x250>
 80061d6:	2301      	movs	r3, #1
 80061d8:	4652      	mov	r2, sl
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f aeaa 	beq.w	8005f3a <_printf_float+0xc2>
 80061e6:	f108 0801 	add.w	r8, r8, #1
 80061ea:	e7ec      	b.n	80061c6 <_printf_float+0x34e>
 80061ec:	4613      	mov	r3, r2
 80061ee:	4631      	mov	r1, r6
 80061f0:	4642      	mov	r2, r8
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	d1c0      	bne.n	800617c <_printf_float+0x304>
 80061fa:	e69e      	b.n	8005f3a <_printf_float+0xc2>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	9205      	str	r2, [sp, #20]
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f ae97 	beq.w	8005f3a <_printf_float+0xc2>
 800620c:	9a05      	ldr	r2, [sp, #20]
 800620e:	f10b 0b01 	add.w	fp, fp, #1
 8006212:	e7b9      	b.n	8006188 <_printf_float+0x310>
 8006214:	ee18 3a10 	vmov	r3, s16
 8006218:	4652      	mov	r2, sl
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	d1be      	bne.n	80061a2 <_printf_float+0x32a>
 8006224:	e689      	b.n	8005f3a <_printf_float+0xc2>
 8006226:	9a05      	ldr	r2, [sp, #20]
 8006228:	464b      	mov	r3, r9
 800622a:	4442      	add	r2, r8
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	47b8      	blx	r7
 8006232:	3001      	adds	r0, #1
 8006234:	d1c1      	bne.n	80061ba <_printf_float+0x342>
 8006236:	e680      	b.n	8005f3a <_printf_float+0xc2>
 8006238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800623a:	2a01      	cmp	r2, #1
 800623c:	dc01      	bgt.n	8006242 <_printf_float+0x3ca>
 800623e:	07db      	lsls	r3, r3, #31
 8006240:	d538      	bpl.n	80062b4 <_printf_float+0x43c>
 8006242:	2301      	movs	r3, #1
 8006244:	4642      	mov	r2, r8
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae74 	beq.w	8005f3a <_printf_float+0xc2>
 8006252:	ee18 3a10 	vmov	r3, s16
 8006256:	4652      	mov	r2, sl
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	f43f ae6b 	beq.w	8005f3a <_printf_float+0xc2>
 8006264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006268:	2200      	movs	r2, #0
 800626a:	2300      	movs	r3, #0
 800626c:	f7fa fc4c 	bl	8000b08 <__aeabi_dcmpeq>
 8006270:	b9d8      	cbnz	r0, 80062aa <_printf_float+0x432>
 8006272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006274:	f108 0201 	add.w	r2, r8, #1
 8006278:	3b01      	subs	r3, #1
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	d10e      	bne.n	80062a2 <_printf_float+0x42a>
 8006284:	e659      	b.n	8005f3a <_printf_float+0xc2>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	f43f ae52 	beq.w	8005f3a <_printf_float+0xc2>
 8006296:	f108 0801 	add.w	r8, r8, #1
 800629a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629c:	3b01      	subs	r3, #1
 800629e:	4543      	cmp	r3, r8
 80062a0:	dcf1      	bgt.n	8006286 <_printf_float+0x40e>
 80062a2:	464b      	mov	r3, r9
 80062a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062a8:	e6dc      	b.n	8006064 <_printf_float+0x1ec>
 80062aa:	f04f 0800 	mov.w	r8, #0
 80062ae:	f104 0a1a 	add.w	sl, r4, #26
 80062b2:	e7f2      	b.n	800629a <_printf_float+0x422>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4642      	mov	r2, r8
 80062b8:	e7df      	b.n	800627a <_printf_float+0x402>
 80062ba:	2301      	movs	r3, #1
 80062bc:	464a      	mov	r2, r9
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f ae38 	beq.w	8005f3a <_printf_float+0xc2>
 80062ca:	f108 0801 	add.w	r8, r8, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	4543      	cmp	r3, r8
 80062d6:	dcf0      	bgt.n	80062ba <_printf_float+0x442>
 80062d8:	e6fa      	b.n	80060d0 <_printf_float+0x258>
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	f104 0919 	add.w	r9, r4, #25
 80062e2:	e7f4      	b.n	80062ce <_printf_float+0x456>

080062e4 <_printf_common>:
 80062e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	4616      	mov	r6, r2
 80062ea:	4699      	mov	r9, r3
 80062ec:	688a      	ldr	r2, [r1, #8]
 80062ee:	690b      	ldr	r3, [r1, #16]
 80062f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062f4:	4293      	cmp	r3, r2
 80062f6:	bfb8      	it	lt
 80062f8:	4613      	movlt	r3, r2
 80062fa:	6033      	str	r3, [r6, #0]
 80062fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006300:	4607      	mov	r7, r0
 8006302:	460c      	mov	r4, r1
 8006304:	b10a      	cbz	r2, 800630a <_printf_common+0x26>
 8006306:	3301      	adds	r3, #1
 8006308:	6033      	str	r3, [r6, #0]
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	0699      	lsls	r1, r3, #26
 800630e:	bf42      	ittt	mi
 8006310:	6833      	ldrmi	r3, [r6, #0]
 8006312:	3302      	addmi	r3, #2
 8006314:	6033      	strmi	r3, [r6, #0]
 8006316:	6825      	ldr	r5, [r4, #0]
 8006318:	f015 0506 	ands.w	r5, r5, #6
 800631c:	d106      	bne.n	800632c <_printf_common+0x48>
 800631e:	f104 0a19 	add.w	sl, r4, #25
 8006322:	68e3      	ldr	r3, [r4, #12]
 8006324:	6832      	ldr	r2, [r6, #0]
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	42ab      	cmp	r3, r5
 800632a:	dc26      	bgt.n	800637a <_printf_common+0x96>
 800632c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006330:	1e13      	subs	r3, r2, #0
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	bf18      	it	ne
 8006336:	2301      	movne	r3, #1
 8006338:	0692      	lsls	r2, r2, #26
 800633a:	d42b      	bmi.n	8006394 <_printf_common+0xb0>
 800633c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006340:	4649      	mov	r1, r9
 8006342:	4638      	mov	r0, r7
 8006344:	47c0      	blx	r8
 8006346:	3001      	adds	r0, #1
 8006348:	d01e      	beq.n	8006388 <_printf_common+0xa4>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	68e5      	ldr	r5, [r4, #12]
 800634e:	6832      	ldr	r2, [r6, #0]
 8006350:	f003 0306 	and.w	r3, r3, #6
 8006354:	2b04      	cmp	r3, #4
 8006356:	bf08      	it	eq
 8006358:	1aad      	subeq	r5, r5, r2
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	bf0c      	ite	eq
 8006360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006364:	2500      	movne	r5, #0
 8006366:	4293      	cmp	r3, r2
 8006368:	bfc4      	itt	gt
 800636a:	1a9b      	subgt	r3, r3, r2
 800636c:	18ed      	addgt	r5, r5, r3
 800636e:	2600      	movs	r6, #0
 8006370:	341a      	adds	r4, #26
 8006372:	42b5      	cmp	r5, r6
 8006374:	d11a      	bne.n	80063ac <_printf_common+0xc8>
 8006376:	2000      	movs	r0, #0
 8006378:	e008      	b.n	800638c <_printf_common+0xa8>
 800637a:	2301      	movs	r3, #1
 800637c:	4652      	mov	r2, sl
 800637e:	4649      	mov	r1, r9
 8006380:	4638      	mov	r0, r7
 8006382:	47c0      	blx	r8
 8006384:	3001      	adds	r0, #1
 8006386:	d103      	bne.n	8006390 <_printf_common+0xac>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	3501      	adds	r5, #1
 8006392:	e7c6      	b.n	8006322 <_printf_common+0x3e>
 8006394:	18e1      	adds	r1, r4, r3
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	2030      	movs	r0, #48	; 0x30
 800639a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800639e:	4422      	add	r2, r4
 80063a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063a8:	3302      	adds	r3, #2
 80063aa:	e7c7      	b.n	800633c <_printf_common+0x58>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4622      	mov	r2, r4
 80063b0:	4649      	mov	r1, r9
 80063b2:	4638      	mov	r0, r7
 80063b4:	47c0      	blx	r8
 80063b6:	3001      	adds	r0, #1
 80063b8:	d0e6      	beq.n	8006388 <_printf_common+0xa4>
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7d9      	b.n	8006372 <_printf_common+0x8e>
	...

080063c0 <_printf_i>:
 80063c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	7e0f      	ldrb	r7, [r1, #24]
 80063c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063c8:	2f78      	cmp	r7, #120	; 0x78
 80063ca:	4691      	mov	r9, r2
 80063cc:	4680      	mov	r8, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	469a      	mov	sl, r3
 80063d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063d6:	d807      	bhi.n	80063e8 <_printf_i+0x28>
 80063d8:	2f62      	cmp	r7, #98	; 0x62
 80063da:	d80a      	bhi.n	80063f2 <_printf_i+0x32>
 80063dc:	2f00      	cmp	r7, #0
 80063de:	f000 80d8 	beq.w	8006592 <_printf_i+0x1d2>
 80063e2:	2f58      	cmp	r7, #88	; 0x58
 80063e4:	f000 80a3 	beq.w	800652e <_printf_i+0x16e>
 80063e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063f0:	e03a      	b.n	8006468 <_printf_i+0xa8>
 80063f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063f6:	2b15      	cmp	r3, #21
 80063f8:	d8f6      	bhi.n	80063e8 <_printf_i+0x28>
 80063fa:	a101      	add	r1, pc, #4	; (adr r1, 8006400 <_printf_i+0x40>)
 80063fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006400:	08006459 	.word	0x08006459
 8006404:	0800646d 	.word	0x0800646d
 8006408:	080063e9 	.word	0x080063e9
 800640c:	080063e9 	.word	0x080063e9
 8006410:	080063e9 	.word	0x080063e9
 8006414:	080063e9 	.word	0x080063e9
 8006418:	0800646d 	.word	0x0800646d
 800641c:	080063e9 	.word	0x080063e9
 8006420:	080063e9 	.word	0x080063e9
 8006424:	080063e9 	.word	0x080063e9
 8006428:	080063e9 	.word	0x080063e9
 800642c:	08006579 	.word	0x08006579
 8006430:	0800649d 	.word	0x0800649d
 8006434:	0800655b 	.word	0x0800655b
 8006438:	080063e9 	.word	0x080063e9
 800643c:	080063e9 	.word	0x080063e9
 8006440:	0800659b 	.word	0x0800659b
 8006444:	080063e9 	.word	0x080063e9
 8006448:	0800649d 	.word	0x0800649d
 800644c:	080063e9 	.word	0x080063e9
 8006450:	080063e9 	.word	0x080063e9
 8006454:	08006563 	.word	0x08006563
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	1d1a      	adds	r2, r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	602a      	str	r2, [r5, #0]
 8006460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006468:	2301      	movs	r3, #1
 800646a:	e0a3      	b.n	80065b4 <_printf_i+0x1f4>
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	6829      	ldr	r1, [r5, #0]
 8006470:	0606      	lsls	r6, r0, #24
 8006472:	f101 0304 	add.w	r3, r1, #4
 8006476:	d50a      	bpl.n	800648e <_printf_i+0xce>
 8006478:	680e      	ldr	r6, [r1, #0]
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	2e00      	cmp	r6, #0
 800647e:	da03      	bge.n	8006488 <_printf_i+0xc8>
 8006480:	232d      	movs	r3, #45	; 0x2d
 8006482:	4276      	negs	r6, r6
 8006484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006488:	485e      	ldr	r0, [pc, #376]	; (8006604 <_printf_i+0x244>)
 800648a:	230a      	movs	r3, #10
 800648c:	e019      	b.n	80064c2 <_printf_i+0x102>
 800648e:	680e      	ldr	r6, [r1, #0]
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006496:	bf18      	it	ne
 8006498:	b236      	sxthne	r6, r6
 800649a:	e7ef      	b.n	800647c <_printf_i+0xbc>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	6820      	ldr	r0, [r4, #0]
 80064a0:	1d19      	adds	r1, r3, #4
 80064a2:	6029      	str	r1, [r5, #0]
 80064a4:	0601      	lsls	r1, r0, #24
 80064a6:	d501      	bpl.n	80064ac <_printf_i+0xec>
 80064a8:	681e      	ldr	r6, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <_printf_i+0xf2>
 80064ac:	0646      	lsls	r6, r0, #25
 80064ae:	d5fb      	bpl.n	80064a8 <_printf_i+0xe8>
 80064b0:	881e      	ldrh	r6, [r3, #0]
 80064b2:	4854      	ldr	r0, [pc, #336]	; (8006604 <_printf_i+0x244>)
 80064b4:	2f6f      	cmp	r7, #111	; 0x6f
 80064b6:	bf0c      	ite	eq
 80064b8:	2308      	moveq	r3, #8
 80064ba:	230a      	movne	r3, #10
 80064bc:	2100      	movs	r1, #0
 80064be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064c2:	6865      	ldr	r5, [r4, #4]
 80064c4:	60a5      	str	r5, [r4, #8]
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	bfa2      	ittt	ge
 80064ca:	6821      	ldrge	r1, [r4, #0]
 80064cc:	f021 0104 	bicge.w	r1, r1, #4
 80064d0:	6021      	strge	r1, [r4, #0]
 80064d2:	b90e      	cbnz	r6, 80064d8 <_printf_i+0x118>
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	d04d      	beq.n	8006574 <_printf_i+0x1b4>
 80064d8:	4615      	mov	r5, r2
 80064da:	fbb6 f1f3 	udiv	r1, r6, r3
 80064de:	fb03 6711 	mls	r7, r3, r1, r6
 80064e2:	5dc7      	ldrb	r7, [r0, r7]
 80064e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064e8:	4637      	mov	r7, r6
 80064ea:	42bb      	cmp	r3, r7
 80064ec:	460e      	mov	r6, r1
 80064ee:	d9f4      	bls.n	80064da <_printf_i+0x11a>
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d10b      	bne.n	800650c <_printf_i+0x14c>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	07de      	lsls	r6, r3, #31
 80064f8:	d508      	bpl.n	800650c <_printf_i+0x14c>
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	6861      	ldr	r1, [r4, #4]
 80064fe:	4299      	cmp	r1, r3
 8006500:	bfde      	ittt	le
 8006502:	2330      	movle	r3, #48	; 0x30
 8006504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800650c:	1b52      	subs	r2, r2, r5
 800650e:	6122      	str	r2, [r4, #16]
 8006510:	f8cd a000 	str.w	sl, [sp]
 8006514:	464b      	mov	r3, r9
 8006516:	aa03      	add	r2, sp, #12
 8006518:	4621      	mov	r1, r4
 800651a:	4640      	mov	r0, r8
 800651c:	f7ff fee2 	bl	80062e4 <_printf_common>
 8006520:	3001      	adds	r0, #1
 8006522:	d14c      	bne.n	80065be <_printf_i+0x1fe>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	b004      	add	sp, #16
 800652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652e:	4835      	ldr	r0, [pc, #212]	; (8006604 <_printf_i+0x244>)
 8006530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006534:	6829      	ldr	r1, [r5, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f851 6b04 	ldr.w	r6, [r1], #4
 800653c:	6029      	str	r1, [r5, #0]
 800653e:	061d      	lsls	r5, r3, #24
 8006540:	d514      	bpl.n	800656c <_printf_i+0x1ac>
 8006542:	07df      	lsls	r7, r3, #31
 8006544:	bf44      	itt	mi
 8006546:	f043 0320 	orrmi.w	r3, r3, #32
 800654a:	6023      	strmi	r3, [r4, #0]
 800654c:	b91e      	cbnz	r6, 8006556 <_printf_i+0x196>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f023 0320 	bic.w	r3, r3, #32
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2310      	movs	r3, #16
 8006558:	e7b0      	b.n	80064bc <_printf_i+0xfc>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f043 0320 	orr.w	r3, r3, #32
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	2378      	movs	r3, #120	; 0x78
 8006564:	4828      	ldr	r0, [pc, #160]	; (8006608 <_printf_i+0x248>)
 8006566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800656a:	e7e3      	b.n	8006534 <_printf_i+0x174>
 800656c:	0659      	lsls	r1, r3, #25
 800656e:	bf48      	it	mi
 8006570:	b2b6      	uxthmi	r6, r6
 8006572:	e7e6      	b.n	8006542 <_printf_i+0x182>
 8006574:	4615      	mov	r5, r2
 8006576:	e7bb      	b.n	80064f0 <_printf_i+0x130>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	6826      	ldr	r6, [r4, #0]
 800657c:	6961      	ldr	r1, [r4, #20]
 800657e:	1d18      	adds	r0, r3, #4
 8006580:	6028      	str	r0, [r5, #0]
 8006582:	0635      	lsls	r5, r6, #24
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	d501      	bpl.n	800658c <_printf_i+0x1cc>
 8006588:	6019      	str	r1, [r3, #0]
 800658a:	e002      	b.n	8006592 <_printf_i+0x1d2>
 800658c:	0670      	lsls	r0, r6, #25
 800658e:	d5fb      	bpl.n	8006588 <_printf_i+0x1c8>
 8006590:	8019      	strh	r1, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	4615      	mov	r5, r2
 8006598:	e7ba      	b.n	8006510 <_printf_i+0x150>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	602a      	str	r2, [r5, #0]
 80065a0:	681d      	ldr	r5, [r3, #0]
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4628      	mov	r0, r5
 80065a8:	f7f9 fe3a 	bl	8000220 <memchr>
 80065ac:	b108      	cbz	r0, 80065b2 <_printf_i+0x1f2>
 80065ae:	1b40      	subs	r0, r0, r5
 80065b0:	6060      	str	r0, [r4, #4]
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	2300      	movs	r3, #0
 80065b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065bc:	e7a8      	b.n	8006510 <_printf_i+0x150>
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	462a      	mov	r2, r5
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d0ab      	beq.n	8006524 <_printf_i+0x164>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	079b      	lsls	r3, r3, #30
 80065d0:	d413      	bmi.n	80065fa <_printf_i+0x23a>
 80065d2:	68e0      	ldr	r0, [r4, #12]
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	4298      	cmp	r0, r3
 80065d8:	bfb8      	it	lt
 80065da:	4618      	movlt	r0, r3
 80065dc:	e7a4      	b.n	8006528 <_printf_i+0x168>
 80065de:	2301      	movs	r3, #1
 80065e0:	4632      	mov	r2, r6
 80065e2:	4649      	mov	r1, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	47d0      	blx	sl
 80065e8:	3001      	adds	r0, #1
 80065ea:	d09b      	beq.n	8006524 <_printf_i+0x164>
 80065ec:	3501      	adds	r5, #1
 80065ee:	68e3      	ldr	r3, [r4, #12]
 80065f0:	9903      	ldr	r1, [sp, #12]
 80065f2:	1a5b      	subs	r3, r3, r1
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	dcf2      	bgt.n	80065de <_printf_i+0x21e>
 80065f8:	e7eb      	b.n	80065d2 <_printf_i+0x212>
 80065fa:	2500      	movs	r5, #0
 80065fc:	f104 0619 	add.w	r6, r4, #25
 8006600:	e7f5      	b.n	80065ee <_printf_i+0x22e>
 8006602:	bf00      	nop
 8006604:	08009bbc 	.word	0x08009bbc
 8006608:	08009bcd 	.word	0x08009bcd

0800660c <iprintf>:
 800660c:	b40f      	push	{r0, r1, r2, r3}
 800660e:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <iprintf+0x2c>)
 8006610:	b513      	push	{r0, r1, r4, lr}
 8006612:	681c      	ldr	r4, [r3, #0]
 8006614:	b124      	cbz	r4, 8006620 <iprintf+0x14>
 8006616:	69a3      	ldr	r3, [r4, #24]
 8006618:	b913      	cbnz	r3, 8006620 <iprintf+0x14>
 800661a:	4620      	mov	r0, r4
 800661c:	f001 f9ca 	bl	80079b4 <__sinit>
 8006620:	ab05      	add	r3, sp, #20
 8006622:	9a04      	ldr	r2, [sp, #16]
 8006624:	68a1      	ldr	r1, [r4, #8]
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	4620      	mov	r0, r4
 800662a:	f001 ffa3 	bl	8008574 <_vfiprintf_r>
 800662e:	b002      	add	sp, #8
 8006630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006634:	b004      	add	sp, #16
 8006636:	4770      	bx	lr
 8006638:	2000000c 	.word	0x2000000c

0800663c <_puts_r>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	460e      	mov	r6, r1
 8006640:	4605      	mov	r5, r0
 8006642:	b118      	cbz	r0, 800664c <_puts_r+0x10>
 8006644:	6983      	ldr	r3, [r0, #24]
 8006646:	b90b      	cbnz	r3, 800664c <_puts_r+0x10>
 8006648:	f001 f9b4 	bl	80079b4 <__sinit>
 800664c:	69ab      	ldr	r3, [r5, #24]
 800664e:	68ac      	ldr	r4, [r5, #8]
 8006650:	b913      	cbnz	r3, 8006658 <_puts_r+0x1c>
 8006652:	4628      	mov	r0, r5
 8006654:	f001 f9ae 	bl	80079b4 <__sinit>
 8006658:	4b2c      	ldr	r3, [pc, #176]	; (800670c <_puts_r+0xd0>)
 800665a:	429c      	cmp	r4, r3
 800665c:	d120      	bne.n	80066a0 <_puts_r+0x64>
 800665e:	686c      	ldr	r4, [r5, #4]
 8006660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006662:	07db      	lsls	r3, r3, #31
 8006664:	d405      	bmi.n	8006672 <_puts_r+0x36>
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	0598      	lsls	r0, r3, #22
 800666a:	d402      	bmi.n	8006672 <_puts_r+0x36>
 800666c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800666e:	f001 fa60 	bl	8007b32 <__retarget_lock_acquire_recursive>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	0719      	lsls	r1, r3, #28
 8006676:	d51d      	bpl.n	80066b4 <_puts_r+0x78>
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	b1db      	cbz	r3, 80066b4 <_puts_r+0x78>
 800667c:	3e01      	subs	r6, #1
 800667e:	68a3      	ldr	r3, [r4, #8]
 8006680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006684:	3b01      	subs	r3, #1
 8006686:	60a3      	str	r3, [r4, #8]
 8006688:	bb39      	cbnz	r1, 80066da <_puts_r+0x9e>
 800668a:	2b00      	cmp	r3, #0
 800668c:	da38      	bge.n	8006700 <_puts_r+0xc4>
 800668e:	4622      	mov	r2, r4
 8006690:	210a      	movs	r1, #10
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f926 	bl	80068e4 <__swbuf_r>
 8006698:	3001      	adds	r0, #1
 800669a:	d011      	beq.n	80066c0 <_puts_r+0x84>
 800669c:	250a      	movs	r5, #10
 800669e:	e011      	b.n	80066c4 <_puts_r+0x88>
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <_puts_r+0xd4>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d101      	bne.n	80066aa <_puts_r+0x6e>
 80066a6:	68ac      	ldr	r4, [r5, #8]
 80066a8:	e7da      	b.n	8006660 <_puts_r+0x24>
 80066aa:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <_puts_r+0xd8>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	bf08      	it	eq
 80066b0:	68ec      	ldreq	r4, [r5, #12]
 80066b2:	e7d5      	b.n	8006660 <_puts_r+0x24>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f966 	bl	8006988 <__swsetup_r>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d0dd      	beq.n	800667c <_puts_r+0x40>
 80066c0:	f04f 35ff 	mov.w	r5, #4294967295
 80066c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066c6:	07da      	lsls	r2, r3, #31
 80066c8:	d405      	bmi.n	80066d6 <_puts_r+0x9a>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	059b      	lsls	r3, r3, #22
 80066ce:	d402      	bmi.n	80066d6 <_puts_r+0x9a>
 80066d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d2:	f001 fa2f 	bl	8007b34 <__retarget_lock_release_recursive>
 80066d6:	4628      	mov	r0, r5
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da04      	bge.n	80066e8 <_puts_r+0xac>
 80066de:	69a2      	ldr	r2, [r4, #24]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	dc06      	bgt.n	80066f2 <_puts_r+0xb6>
 80066e4:	290a      	cmp	r1, #10
 80066e6:	d004      	beq.n	80066f2 <_puts_r+0xb6>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	6022      	str	r2, [r4, #0]
 80066ee:	7019      	strb	r1, [r3, #0]
 80066f0:	e7c5      	b.n	800667e <_puts_r+0x42>
 80066f2:	4622      	mov	r2, r4
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 f8f5 	bl	80068e4 <__swbuf_r>
 80066fa:	3001      	adds	r0, #1
 80066fc:	d1bf      	bne.n	800667e <_puts_r+0x42>
 80066fe:	e7df      	b.n	80066c0 <_puts_r+0x84>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	250a      	movs	r5, #10
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	701d      	strb	r5, [r3, #0]
 800670a:	e7db      	b.n	80066c4 <_puts_r+0x88>
 800670c:	08009c90 	.word	0x08009c90
 8006710:	08009cb0 	.word	0x08009cb0
 8006714:	08009c70 	.word	0x08009c70

08006718 <puts>:
 8006718:	4b02      	ldr	r3, [pc, #8]	; (8006724 <puts+0xc>)
 800671a:	4601      	mov	r1, r0
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	f7ff bf8d 	b.w	800663c <_puts_r>
 8006722:	bf00      	nop
 8006724:	2000000c 	.word	0x2000000c

08006728 <iscanf>:
 8006728:	b40f      	push	{r0, r1, r2, r3}
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <iscanf+0x2c>)
 800672c:	b513      	push	{r0, r1, r4, lr}
 800672e:	681c      	ldr	r4, [r3, #0]
 8006730:	b124      	cbz	r4, 800673c <iscanf+0x14>
 8006732:	69a3      	ldr	r3, [r4, #24]
 8006734:	b913      	cbnz	r3, 800673c <iscanf+0x14>
 8006736:	4620      	mov	r0, r4
 8006738:	f001 f93c 	bl	80079b4 <__sinit>
 800673c:	ab05      	add	r3, sp, #20
 800673e:	9a04      	ldr	r2, [sp, #16]
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	4620      	mov	r0, r4
 8006746:	f002 f9eb 	bl	8008b20 <_vfiscanf_r>
 800674a:	b002      	add	sp, #8
 800674c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006750:	b004      	add	sp, #16
 8006752:	4770      	bx	lr
 8006754:	2000000c 	.word	0x2000000c

08006758 <setvbuf>:
 8006758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800675c:	461d      	mov	r5, r3
 800675e:	4b5d      	ldr	r3, [pc, #372]	; (80068d4 <setvbuf+0x17c>)
 8006760:	681f      	ldr	r7, [r3, #0]
 8006762:	4604      	mov	r4, r0
 8006764:	460e      	mov	r6, r1
 8006766:	4690      	mov	r8, r2
 8006768:	b127      	cbz	r7, 8006774 <setvbuf+0x1c>
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	b913      	cbnz	r3, 8006774 <setvbuf+0x1c>
 800676e:	4638      	mov	r0, r7
 8006770:	f001 f920 	bl	80079b4 <__sinit>
 8006774:	4b58      	ldr	r3, [pc, #352]	; (80068d8 <setvbuf+0x180>)
 8006776:	429c      	cmp	r4, r3
 8006778:	d167      	bne.n	800684a <setvbuf+0xf2>
 800677a:	687c      	ldr	r4, [r7, #4]
 800677c:	f1b8 0f02 	cmp.w	r8, #2
 8006780:	d006      	beq.n	8006790 <setvbuf+0x38>
 8006782:	f1b8 0f01 	cmp.w	r8, #1
 8006786:	f200 809f 	bhi.w	80068c8 <setvbuf+0x170>
 800678a:	2d00      	cmp	r5, #0
 800678c:	f2c0 809c 	blt.w	80068c8 <setvbuf+0x170>
 8006790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006792:	07db      	lsls	r3, r3, #31
 8006794:	d405      	bmi.n	80067a2 <setvbuf+0x4a>
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	0598      	lsls	r0, r3, #22
 800679a:	d402      	bmi.n	80067a2 <setvbuf+0x4a>
 800679c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679e:	f001 f9c8 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80067a2:	4621      	mov	r1, r4
 80067a4:	4638      	mov	r0, r7
 80067a6:	f001 f85f 	bl	8007868 <_fflush_r>
 80067aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ac:	b141      	cbz	r1, 80067c0 <setvbuf+0x68>
 80067ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067b2:	4299      	cmp	r1, r3
 80067b4:	d002      	beq.n	80067bc <setvbuf+0x64>
 80067b6:	4638      	mov	r0, r7
 80067b8:	f001 fdd2 	bl	8008360 <_free_r>
 80067bc:	2300      	movs	r3, #0
 80067be:	6363      	str	r3, [r4, #52]	; 0x34
 80067c0:	2300      	movs	r3, #0
 80067c2:	61a3      	str	r3, [r4, #24]
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	0619      	lsls	r1, r3, #24
 80067ca:	d503      	bpl.n	80067d4 <setvbuf+0x7c>
 80067cc:	6921      	ldr	r1, [r4, #16]
 80067ce:	4638      	mov	r0, r7
 80067d0:	f001 fdc6 	bl	8008360 <_free_r>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	f1b8 0f02 	cmp.w	r8, #2
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	d06c      	beq.n	80068c0 <setvbuf+0x168>
 80067e6:	ab01      	add	r3, sp, #4
 80067e8:	466a      	mov	r2, sp
 80067ea:	4621      	mov	r1, r4
 80067ec:	4638      	mov	r0, r7
 80067ee:	f001 f9a2 	bl	8007b36 <__swhatbuf_r>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	4318      	orrs	r0, r3
 80067f6:	81a0      	strh	r0, [r4, #12]
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	d130      	bne.n	800685e <setvbuf+0x106>
 80067fc:	9d00      	ldr	r5, [sp, #0]
 80067fe:	4628      	mov	r0, r5
 8006800:	f001 f9fe 	bl	8007c00 <malloc>
 8006804:	4606      	mov	r6, r0
 8006806:	2800      	cmp	r0, #0
 8006808:	d155      	bne.n	80068b6 <setvbuf+0x15e>
 800680a:	f8dd 9000 	ldr.w	r9, [sp]
 800680e:	45a9      	cmp	r9, r5
 8006810:	d14a      	bne.n	80068a8 <setvbuf+0x150>
 8006812:	f04f 35ff 	mov.w	r5, #4294967295
 8006816:	2200      	movs	r2, #0
 8006818:	60a2      	str	r2, [r4, #8]
 800681a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	6122      	str	r2, [r4, #16]
 8006822:	2201      	movs	r2, #1
 8006824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006828:	6162      	str	r2, [r4, #20]
 800682a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	07d2      	lsls	r2, r2, #31
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	d405      	bmi.n	8006842 <setvbuf+0xea>
 8006836:	f413 7f00 	tst.w	r3, #512	; 0x200
 800683a:	d102      	bne.n	8006842 <setvbuf+0xea>
 800683c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683e:	f001 f979 	bl	8007b34 <__retarget_lock_release_recursive>
 8006842:	4628      	mov	r0, r5
 8006844:	b003      	add	sp, #12
 8006846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <setvbuf+0x184>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d101      	bne.n	8006854 <setvbuf+0xfc>
 8006850:	68bc      	ldr	r4, [r7, #8]
 8006852:	e793      	b.n	800677c <setvbuf+0x24>
 8006854:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <setvbuf+0x188>)
 8006856:	429c      	cmp	r4, r3
 8006858:	bf08      	it	eq
 800685a:	68fc      	ldreq	r4, [r7, #12]
 800685c:	e78e      	b.n	800677c <setvbuf+0x24>
 800685e:	2e00      	cmp	r6, #0
 8006860:	d0cd      	beq.n	80067fe <setvbuf+0xa6>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	b913      	cbnz	r3, 800686c <setvbuf+0x114>
 8006866:	4638      	mov	r0, r7
 8006868:	f001 f8a4 	bl	80079b4 <__sinit>
 800686c:	f1b8 0f01 	cmp.w	r8, #1
 8006870:	bf08      	it	eq
 8006872:	89a3      	ldrheq	r3, [r4, #12]
 8006874:	6026      	str	r6, [r4, #0]
 8006876:	bf04      	itt	eq
 8006878:	f043 0301 	orreq.w	r3, r3, #1
 800687c:	81a3      	strheq	r3, [r4, #12]
 800687e:	89a2      	ldrh	r2, [r4, #12]
 8006880:	f012 0308 	ands.w	r3, r2, #8
 8006884:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006888:	d01c      	beq.n	80068c4 <setvbuf+0x16c>
 800688a:	07d3      	lsls	r3, r2, #31
 800688c:	bf41      	itttt	mi
 800688e:	2300      	movmi	r3, #0
 8006890:	426d      	negmi	r5, r5
 8006892:	60a3      	strmi	r3, [r4, #8]
 8006894:	61a5      	strmi	r5, [r4, #24]
 8006896:	bf58      	it	pl
 8006898:	60a5      	strpl	r5, [r4, #8]
 800689a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800689c:	f015 0501 	ands.w	r5, r5, #1
 80068a0:	d115      	bne.n	80068ce <setvbuf+0x176>
 80068a2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80068a6:	e7c8      	b.n	800683a <setvbuf+0xe2>
 80068a8:	4648      	mov	r0, r9
 80068aa:	f001 f9a9 	bl	8007c00 <malloc>
 80068ae:	4606      	mov	r6, r0
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d0ae      	beq.n	8006812 <setvbuf+0xba>
 80068b4:	464d      	mov	r5, r9
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	e7d0      	b.n	8006862 <setvbuf+0x10a>
 80068c0:	2500      	movs	r5, #0
 80068c2:	e7a8      	b.n	8006816 <setvbuf+0xbe>
 80068c4:	60a3      	str	r3, [r4, #8]
 80068c6:	e7e8      	b.n	800689a <setvbuf+0x142>
 80068c8:	f04f 35ff 	mov.w	r5, #4294967295
 80068cc:	e7b9      	b.n	8006842 <setvbuf+0xea>
 80068ce:	2500      	movs	r5, #0
 80068d0:	e7b7      	b.n	8006842 <setvbuf+0xea>
 80068d2:	bf00      	nop
 80068d4:	2000000c 	.word	0x2000000c
 80068d8:	08009c90 	.word	0x08009c90
 80068dc:	08009cb0 	.word	0x08009cb0
 80068e0:	08009c70 	.word	0x08009c70

080068e4 <__swbuf_r>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	460e      	mov	r6, r1
 80068e8:	4614      	mov	r4, r2
 80068ea:	4605      	mov	r5, r0
 80068ec:	b118      	cbz	r0, 80068f6 <__swbuf_r+0x12>
 80068ee:	6983      	ldr	r3, [r0, #24]
 80068f0:	b90b      	cbnz	r3, 80068f6 <__swbuf_r+0x12>
 80068f2:	f001 f85f 	bl	80079b4 <__sinit>
 80068f6:	4b21      	ldr	r3, [pc, #132]	; (800697c <__swbuf_r+0x98>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	d12b      	bne.n	8006954 <__swbuf_r+0x70>
 80068fc:	686c      	ldr	r4, [r5, #4]
 80068fe:	69a3      	ldr	r3, [r4, #24]
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	071a      	lsls	r2, r3, #28
 8006906:	d52f      	bpl.n	8006968 <__swbuf_r+0x84>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	b36b      	cbz	r3, 8006968 <__swbuf_r+0x84>
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	6820      	ldr	r0, [r4, #0]
 8006910:	1ac0      	subs	r0, r0, r3
 8006912:	6963      	ldr	r3, [r4, #20]
 8006914:	b2f6      	uxtb	r6, r6
 8006916:	4283      	cmp	r3, r0
 8006918:	4637      	mov	r7, r6
 800691a:	dc04      	bgt.n	8006926 <__swbuf_r+0x42>
 800691c:	4621      	mov	r1, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 ffa2 	bl	8007868 <_fflush_r>
 8006924:	bb30      	cbnz	r0, 8006974 <__swbuf_r+0x90>
 8006926:	68a3      	ldr	r3, [r4, #8]
 8006928:	3b01      	subs	r3, #1
 800692a:	60a3      	str	r3, [r4, #8]
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	6022      	str	r2, [r4, #0]
 8006932:	701e      	strb	r6, [r3, #0]
 8006934:	6963      	ldr	r3, [r4, #20]
 8006936:	3001      	adds	r0, #1
 8006938:	4283      	cmp	r3, r0
 800693a:	d004      	beq.n	8006946 <__swbuf_r+0x62>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	07db      	lsls	r3, r3, #31
 8006940:	d506      	bpl.n	8006950 <__swbuf_r+0x6c>
 8006942:	2e0a      	cmp	r6, #10
 8006944:	d104      	bne.n	8006950 <__swbuf_r+0x6c>
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f000 ff8d 	bl	8007868 <_fflush_r>
 800694e:	b988      	cbnz	r0, 8006974 <__swbuf_r+0x90>
 8006950:	4638      	mov	r0, r7
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006954:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <__swbuf_r+0x9c>)
 8006956:	429c      	cmp	r4, r3
 8006958:	d101      	bne.n	800695e <__swbuf_r+0x7a>
 800695a:	68ac      	ldr	r4, [r5, #8]
 800695c:	e7cf      	b.n	80068fe <__swbuf_r+0x1a>
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <__swbuf_r+0xa0>)
 8006960:	429c      	cmp	r4, r3
 8006962:	bf08      	it	eq
 8006964:	68ec      	ldreq	r4, [r5, #12]
 8006966:	e7ca      	b.n	80068fe <__swbuf_r+0x1a>
 8006968:	4621      	mov	r1, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f80c 	bl	8006988 <__swsetup_r>
 8006970:	2800      	cmp	r0, #0
 8006972:	d0cb      	beq.n	800690c <__swbuf_r+0x28>
 8006974:	f04f 37ff 	mov.w	r7, #4294967295
 8006978:	e7ea      	b.n	8006950 <__swbuf_r+0x6c>
 800697a:	bf00      	nop
 800697c:	08009c90 	.word	0x08009c90
 8006980:	08009cb0 	.word	0x08009cb0
 8006984:	08009c70 	.word	0x08009c70

08006988 <__swsetup_r>:
 8006988:	4b32      	ldr	r3, [pc, #200]	; (8006a54 <__swsetup_r+0xcc>)
 800698a:	b570      	push	{r4, r5, r6, lr}
 800698c:	681d      	ldr	r5, [r3, #0]
 800698e:	4606      	mov	r6, r0
 8006990:	460c      	mov	r4, r1
 8006992:	b125      	cbz	r5, 800699e <__swsetup_r+0x16>
 8006994:	69ab      	ldr	r3, [r5, #24]
 8006996:	b913      	cbnz	r3, 800699e <__swsetup_r+0x16>
 8006998:	4628      	mov	r0, r5
 800699a:	f001 f80b 	bl	80079b4 <__sinit>
 800699e:	4b2e      	ldr	r3, [pc, #184]	; (8006a58 <__swsetup_r+0xd0>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	d10f      	bne.n	80069c4 <__swsetup_r+0x3c>
 80069a4:	686c      	ldr	r4, [r5, #4]
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ac:	0719      	lsls	r1, r3, #28
 80069ae:	d42c      	bmi.n	8006a0a <__swsetup_r+0x82>
 80069b0:	06dd      	lsls	r5, r3, #27
 80069b2:	d411      	bmi.n	80069d8 <__swsetup_r+0x50>
 80069b4:	2309      	movs	r3, #9
 80069b6:	6033      	str	r3, [r6, #0]
 80069b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	e03e      	b.n	8006a42 <__swsetup_r+0xba>
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <__swsetup_r+0xd4>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d101      	bne.n	80069ce <__swsetup_r+0x46>
 80069ca:	68ac      	ldr	r4, [r5, #8]
 80069cc:	e7eb      	b.n	80069a6 <__swsetup_r+0x1e>
 80069ce:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <__swsetup_r+0xd8>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	bf08      	it	eq
 80069d4:	68ec      	ldreq	r4, [r5, #12]
 80069d6:	e7e6      	b.n	80069a6 <__swsetup_r+0x1e>
 80069d8:	0758      	lsls	r0, r3, #29
 80069da:	d512      	bpl.n	8006a02 <__swsetup_r+0x7a>
 80069dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069de:	b141      	cbz	r1, 80069f2 <__swsetup_r+0x6a>
 80069e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069e4:	4299      	cmp	r1, r3
 80069e6:	d002      	beq.n	80069ee <__swsetup_r+0x66>
 80069e8:	4630      	mov	r0, r6
 80069ea:	f001 fcb9 	bl	8008360 <_free_r>
 80069ee:	2300      	movs	r3, #0
 80069f0:	6363      	str	r3, [r4, #52]	; 0x34
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	2300      	movs	r3, #0
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0308 	orr.w	r3, r3, #8
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	b94b      	cbnz	r3, 8006a22 <__swsetup_r+0x9a>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a18:	d003      	beq.n	8006a22 <__swsetup_r+0x9a>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f001 f8af 	bl	8007b80 <__smakebuf_r>
 8006a22:	89a0      	ldrh	r0, [r4, #12]
 8006a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a28:	f010 0301 	ands.w	r3, r0, #1
 8006a2c:	d00a      	beq.n	8006a44 <__swsetup_r+0xbc>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	6963      	ldr	r3, [r4, #20]
 8006a34:	425b      	negs	r3, r3
 8006a36:	61a3      	str	r3, [r4, #24]
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b943      	cbnz	r3, 8006a4e <__swsetup_r+0xc6>
 8006a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a40:	d1ba      	bne.n	80069b8 <__swsetup_r+0x30>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	0781      	lsls	r1, r0, #30
 8006a46:	bf58      	it	pl
 8006a48:	6963      	ldrpl	r3, [r4, #20]
 8006a4a:	60a3      	str	r3, [r4, #8]
 8006a4c:	e7f4      	b.n	8006a38 <__swsetup_r+0xb0>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e7f7      	b.n	8006a42 <__swsetup_r+0xba>
 8006a52:	bf00      	nop
 8006a54:	2000000c 	.word	0x2000000c
 8006a58:	08009c90 	.word	0x08009c90
 8006a5c:	08009cb0 	.word	0x08009cb0
 8006a60:	08009c70 	.word	0x08009c70

08006a64 <quorem>:
 8006a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	6903      	ldr	r3, [r0, #16]
 8006a6a:	690c      	ldr	r4, [r1, #16]
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	4607      	mov	r7, r0
 8006a70:	f2c0 8081 	blt.w	8006b76 <quorem+0x112>
 8006a74:	3c01      	subs	r4, #1
 8006a76:	f101 0814 	add.w	r8, r1, #20
 8006a7a:	f100 0514 	add.w	r5, r0, #20
 8006a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a98:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a9c:	d331      	bcc.n	8006b02 <quorem+0x9e>
 8006a9e:	f04f 0e00 	mov.w	lr, #0
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	46ac      	mov	ip, r5
 8006aa6:	46f2      	mov	sl, lr
 8006aa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006aac:	b293      	uxth	r3, r2
 8006aae:	fb06 e303 	mla	r3, r6, r3, lr
 8006ab2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	ebaa 0303 	sub.w	r3, sl, r3
 8006abc:	f8dc a000 	ldr.w	sl, [ip]
 8006ac0:	0c12      	lsrs	r2, r2, #16
 8006ac2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ac6:	fb06 e202 	mla	r2, r6, r2, lr
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	9b00      	ldr	r3, [sp, #0]
 8006ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006adc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ae0:	4581      	cmp	r9, r0
 8006ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae6:	f84c 3b04 	str.w	r3, [ip], #4
 8006aea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006aee:	d2db      	bcs.n	8006aa8 <quorem+0x44>
 8006af0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006af4:	b92b      	cbnz	r3, 8006b02 <quorem+0x9e>
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	3b04      	subs	r3, #4
 8006afa:	429d      	cmp	r5, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	d32e      	bcc.n	8006b5e <quorem+0xfa>
 8006b00:	613c      	str	r4, [r7, #16]
 8006b02:	4638      	mov	r0, r7
 8006b04:	f001 fb14 	bl	8008130 <__mcmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	db24      	blt.n	8006b56 <quorem+0xf2>
 8006b0c:	3601      	adds	r6, #1
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f04f 0c00 	mov.w	ip, #0
 8006b14:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b18:	f8d0 e000 	ldr.w	lr, [r0]
 8006b1c:	b293      	uxth	r3, r2
 8006b1e:	ebac 0303 	sub.w	r3, ip, r3
 8006b22:	0c12      	lsrs	r2, r2, #16
 8006b24:	fa13 f38e 	uxtah	r3, r3, lr
 8006b28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b36:	45c1      	cmp	r9, r8
 8006b38:	f840 3b04 	str.w	r3, [r0], #4
 8006b3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b40:	d2e8      	bcs.n	8006b14 <quorem+0xb0>
 8006b42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4a:	b922      	cbnz	r2, 8006b56 <quorem+0xf2>
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	429d      	cmp	r5, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	d30a      	bcc.n	8006b6a <quorem+0x106>
 8006b54:	613c      	str	r4, [r7, #16]
 8006b56:	4630      	mov	r0, r6
 8006b58:	b003      	add	sp, #12
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	3b04      	subs	r3, #4
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	d1cc      	bne.n	8006b00 <quorem+0x9c>
 8006b66:	3c01      	subs	r4, #1
 8006b68:	e7c7      	b.n	8006afa <quorem+0x96>
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	3b04      	subs	r3, #4
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	d1f0      	bne.n	8006b54 <quorem+0xf0>
 8006b72:	3c01      	subs	r4, #1
 8006b74:	e7eb      	b.n	8006b4e <quorem+0xea>
 8006b76:	2000      	movs	r0, #0
 8006b78:	e7ee      	b.n	8006b58 <quorem+0xf4>
 8006b7a:	0000      	movs	r0, r0
 8006b7c:	0000      	movs	r0, r0
	...

08006b80 <_dtoa_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ed2d 8b04 	vpush	{d8-d9}
 8006b88:	ec57 6b10 	vmov	r6, r7, d0
 8006b8c:	b093      	sub	sp, #76	; 0x4c
 8006b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b94:	9106      	str	r1, [sp, #24]
 8006b96:	ee10 aa10 	vmov	sl, s0
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba0:	46bb      	mov	fp, r7
 8006ba2:	b975      	cbnz	r5, 8006bc2 <_dtoa_r+0x42>
 8006ba4:	2010      	movs	r0, #16
 8006ba6:	f001 f82b 	bl	8007c00 <malloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6260      	str	r0, [r4, #36]	; 0x24
 8006bae:	b920      	cbnz	r0, 8006bba <_dtoa_r+0x3a>
 8006bb0:	4ba7      	ldr	r3, [pc, #668]	; (8006e50 <_dtoa_r+0x2d0>)
 8006bb2:	21ea      	movs	r1, #234	; 0xea
 8006bb4:	48a7      	ldr	r0, [pc, #668]	; (8006e54 <_dtoa_r+0x2d4>)
 8006bb6:	f002 fc29 	bl	800940c <__assert_func>
 8006bba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bbe:	6005      	str	r5, [r0, #0]
 8006bc0:	60c5      	str	r5, [r0, #12]
 8006bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc4:	6819      	ldr	r1, [r3, #0]
 8006bc6:	b151      	cbz	r1, 8006bde <_dtoa_r+0x5e>
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	604a      	str	r2, [r1, #4]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4093      	lsls	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f001 f86a 	bl	8007cac <_Bfree>
 8006bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	1e3b      	subs	r3, r7, #0
 8006be0:	bfaa      	itet	ge
 8006be2:	2300      	movge	r3, #0
 8006be4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006be8:	f8c8 3000 	strge.w	r3, [r8]
 8006bec:	4b9a      	ldr	r3, [pc, #616]	; (8006e58 <_dtoa_r+0x2d8>)
 8006bee:	bfbc      	itt	lt
 8006bf0:	2201      	movlt	r2, #1
 8006bf2:	f8c8 2000 	strlt.w	r2, [r8]
 8006bf6:	ea33 030b 	bics.w	r3, r3, fp
 8006bfa:	d11b      	bne.n	8006c34 <_dtoa_r+0xb4>
 8006bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bfe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c08:	4333      	orrs	r3, r6
 8006c0a:	f000 8592 	beq.w	8007732 <_dtoa_r+0xbb2>
 8006c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c10:	b963      	cbnz	r3, 8006c2c <_dtoa_r+0xac>
 8006c12:	4b92      	ldr	r3, [pc, #584]	; (8006e5c <_dtoa_r+0x2dc>)
 8006c14:	e022      	b.n	8006c5c <_dtoa_r+0xdc>
 8006c16:	4b92      	ldr	r3, [pc, #584]	; (8006e60 <_dtoa_r+0x2e0>)
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	9801      	ldr	r0, [sp, #4]
 8006c22:	b013      	add	sp, #76	; 0x4c
 8006c24:	ecbd 8b04 	vpop	{d8-d9}
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	4b8b      	ldr	r3, [pc, #556]	; (8006e5c <_dtoa_r+0x2dc>)
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	3303      	adds	r3, #3
 8006c32:	e7f3      	b.n	8006c1c <_dtoa_r+0x9c>
 8006c34:	2200      	movs	r2, #0
 8006c36:	2300      	movs	r3, #0
 8006c38:	4650      	mov	r0, sl
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	f7f9 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8006c40:	ec4b ab19 	vmov	d9, sl, fp
 8006c44:	4680      	mov	r8, r0
 8006c46:	b158      	cbz	r0, 8006c60 <_dtoa_r+0xe0>
 8006c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 856b 	beq.w	800772c <_dtoa_r+0xbac>
 8006c56:	4883      	ldr	r0, [pc, #524]	; (8006e64 <_dtoa_r+0x2e4>)
 8006c58:	6018      	str	r0, [r3, #0]
 8006c5a:	1e43      	subs	r3, r0, #1
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	e7df      	b.n	8006c20 <_dtoa_r+0xa0>
 8006c60:	ec4b ab10 	vmov	d0, sl, fp
 8006c64:	aa10      	add	r2, sp, #64	; 0x40
 8006c66:	a911      	add	r1, sp, #68	; 0x44
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f001 fb07 	bl	800827c <__d2b>
 8006c6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c72:	ee08 0a10 	vmov	s16, r0
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	f000 8084 	beq.w	8006d84 <_dtoa_r+0x204>
 8006c7c:	ee19 3a90 	vmov	r3, s19
 8006c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c88:	4656      	mov	r6, sl
 8006c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c96:	4b74      	ldr	r3, [pc, #464]	; (8006e68 <_dtoa_r+0x2e8>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 fb13 	bl	80002c8 <__aeabi_dsub>
 8006ca2:	a365      	add	r3, pc, #404	; (adr r3, 8006e38 <_dtoa_r+0x2b8>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fcc6 	bl	8000638 <__aeabi_dmul>
 8006cac:	a364      	add	r3, pc, #400	; (adr r3, 8006e40 <_dtoa_r+0x2c0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 fb0b 	bl	80002cc <__adddf3>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	4628      	mov	r0, r5
 8006cba:	460f      	mov	r7, r1
 8006cbc:	f7f9 fc52 	bl	8000564 <__aeabi_i2d>
 8006cc0:	a361      	add	r3, pc, #388	; (adr r3, 8006e48 <_dtoa_r+0x2c8>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fcb7 	bl	8000638 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f7f9 fafb 	bl	80002cc <__adddf3>
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	f7f9 ff5d 	bl	8000b98 <__aeabi_d2iz>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	9000      	str	r0, [sp, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 ff18 	bl	8000b1c <__aeabi_dcmplt>
 8006cec:	b150      	cbz	r0, 8006d04 <_dtoa_r+0x184>
 8006cee:	9800      	ldr	r0, [sp, #0]
 8006cf0:	f7f9 fc38 	bl	8000564 <__aeabi_i2d>
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	f7f9 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 8006cfc:	b910      	cbnz	r0, 8006d04 <_dtoa_r+0x184>
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	9b00      	ldr	r3, [sp, #0]
 8006d06:	2b16      	cmp	r3, #22
 8006d08:	d85a      	bhi.n	8006dc0 <_dtoa_r+0x240>
 8006d0a:	9a00      	ldr	r2, [sp, #0]
 8006d0c:	4b57      	ldr	r3, [pc, #348]	; (8006e6c <_dtoa_r+0x2ec>)
 8006d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	ec51 0b19 	vmov	r0, r1, d9
 8006d1a:	f7f9 feff 	bl	8000b1c <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d050      	beq.n	8006dc4 <_dtoa_r+0x244>
 8006d22:	9b00      	ldr	r3, [sp, #0]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d2e:	1b5d      	subs	r5, r3, r5
 8006d30:	1e6b      	subs	r3, r5, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	bf45      	ittet	mi
 8006d36:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d3a:	9304      	strmi	r3, [sp, #16]
 8006d3c:	2300      	movpl	r3, #0
 8006d3e:	2300      	movmi	r3, #0
 8006d40:	bf4c      	ite	mi
 8006d42:	9305      	strmi	r3, [sp, #20]
 8006d44:	9304      	strpl	r3, [sp, #16]
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db3d      	blt.n	8006dc8 <_dtoa_r+0x248>
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	9a00      	ldr	r2, [sp, #0]
 8006d50:	920a      	str	r2, [sp, #40]	; 0x28
 8006d52:	4413      	add	r3, r2
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	f200 8089 	bhi.w	8006e74 <_dtoa_r+0x2f4>
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	bfc4      	itt	gt
 8006d66:	3b04      	subgt	r3, #4
 8006d68:	9306      	strgt	r3, [sp, #24]
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d70:	bfcc      	ite	gt
 8006d72:	2500      	movgt	r5, #0
 8006d74:	2501      	movle	r5, #1
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f200 8087 	bhi.w	8006e8a <_dtoa_r+0x30a>
 8006d7c:	e8df f003 	tbb	[pc, r3]
 8006d80:	59383a2d 	.word	0x59383a2d
 8006d84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d88:	441d      	add	r5, r3
 8006d8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	bfc1      	itttt	gt
 8006d92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006da2:	bfda      	itte	le
 8006da4:	f1c3 0320 	rsble	r3, r3, #32
 8006da8:	fa06 f003 	lslle.w	r0, r6, r3
 8006dac:	4318      	orrgt	r0, r3
 8006dae:	f7f9 fbc9 	bl	8000544 <__aeabi_ui2d>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4606      	mov	r6, r0
 8006db6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006dba:	3d01      	subs	r5, #1
 8006dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006dbe:	e76a      	b.n	8006c96 <_dtoa_r+0x116>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7b2      	b.n	8006d2a <_dtoa_r+0x1aa>
 8006dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dc6:	e7b1      	b.n	8006d2c <_dtoa_r+0x1ac>
 8006dc8:	9b04      	ldr	r3, [sp, #16]
 8006dca:	9a00      	ldr	r2, [sp, #0]
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	4253      	negs	r3, r2
 8006dd2:	9307      	str	r3, [sp, #28]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd8:	e7bf      	b.n	8006d5a <_dtoa_r+0x1da>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dc55      	bgt.n	8006e90 <_dtoa_r+0x310>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dea:	461a      	mov	r2, r3
 8006dec:	9209      	str	r2, [sp, #36]	; 0x24
 8006dee:	e00c      	b.n	8006e0a <_dtoa_r+0x28a>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e7f3      	b.n	8006ddc <_dtoa_r+0x25c>
 8006df4:	2300      	movs	r3, #0
 8006df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	9b00      	ldr	r3, [sp, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	3301      	adds	r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	bfb8      	it	lt
 8006e08:	2301      	movlt	r3, #1
 8006e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	6042      	str	r2, [r0, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	f102 0614 	add.w	r6, r2, #20
 8006e16:	429e      	cmp	r6, r3
 8006e18:	6841      	ldr	r1, [r0, #4]
 8006e1a:	d93d      	bls.n	8006e98 <_dtoa_r+0x318>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 ff05 	bl	8007c2c <_Balloc>
 8006e22:	9001      	str	r0, [sp, #4]
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d13b      	bne.n	8006ea0 <_dtoa_r+0x320>
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <_dtoa_r+0x2f0>)
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e30:	e6c0      	b.n	8006bb4 <_dtoa_r+0x34>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7df      	b.n	8006df6 <_dtoa_r+0x276>
 8006e36:	bf00      	nop
 8006e38:	636f4361 	.word	0x636f4361
 8006e3c:	3fd287a7 	.word	0x3fd287a7
 8006e40:	8b60c8b3 	.word	0x8b60c8b3
 8006e44:	3fc68a28 	.word	0x3fc68a28
 8006e48:	509f79fb 	.word	0x509f79fb
 8006e4c:	3fd34413 	.word	0x3fd34413
 8006e50:	08009beb 	.word	0x08009beb
 8006e54:	08009c02 	.word	0x08009c02
 8006e58:	7ff00000 	.word	0x7ff00000
 8006e5c:	08009be7 	.word	0x08009be7
 8006e60:	08009bde 	.word	0x08009bde
 8006e64:	08009e42 	.word	0x08009e42
 8006e68:	3ff80000 	.word	0x3ff80000
 8006e6c:	08009d58 	.word	0x08009d58
 8006e70:	08009c5d 	.word	0x08009c5d
 8006e74:	2501      	movs	r5, #1
 8006e76:	2300      	movs	r3, #0
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	9508      	str	r5, [sp, #32]
 8006e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2312      	movs	r3, #18
 8006e88:	e7b0      	b.n	8006dec <_dtoa_r+0x26c>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9308      	str	r3, [sp, #32]
 8006e8e:	e7f5      	b.n	8006e7c <_dtoa_r+0x2fc>
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e96:	e7b8      	b.n	8006e0a <_dtoa_r+0x28a>
 8006e98:	3101      	adds	r1, #1
 8006e9a:	6041      	str	r1, [r0, #4]
 8006e9c:	0052      	lsls	r2, r2, #1
 8006e9e:	e7b8      	b.n	8006e12 <_dtoa_r+0x292>
 8006ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea2:	9a01      	ldr	r2, [sp, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	2b0e      	cmp	r3, #14
 8006eaa:	f200 809d 	bhi.w	8006fe8 <_dtoa_r+0x468>
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	f000 809a 	beq.w	8006fe8 <_dtoa_r+0x468>
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd32      	ble.n	8006f20 <_dtoa_r+0x3a0>
 8006eba:	4ab7      	ldr	r2, [pc, #732]	; (8007198 <_dtoa_r+0x618>)
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	05d8      	lsls	r0, r3, #23
 8006ecc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ed0:	d516      	bpl.n	8006f00 <_dtoa_r+0x380>
 8006ed2:	4bb2      	ldr	r3, [pc, #712]	; (800719c <_dtoa_r+0x61c>)
 8006ed4:	ec51 0b19 	vmov	r0, r1, d9
 8006ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006edc:	f7f9 fcd6 	bl	800088c <__aeabi_ddiv>
 8006ee0:	f007 070f 	and.w	r7, r7, #15
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	468b      	mov	fp, r1
 8006ee8:	2503      	movs	r5, #3
 8006eea:	4eac      	ldr	r6, [pc, #688]	; (800719c <_dtoa_r+0x61c>)
 8006eec:	b957      	cbnz	r7, 8006f04 <_dtoa_r+0x384>
 8006eee:	4642      	mov	r2, r8
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 fcc9 	bl	800088c <__aeabi_ddiv>
 8006efa:	4682      	mov	sl, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	e028      	b.n	8006f52 <_dtoa_r+0x3d2>
 8006f00:	2502      	movs	r5, #2
 8006f02:	e7f2      	b.n	8006eea <_dtoa_r+0x36a>
 8006f04:	07f9      	lsls	r1, r7, #31
 8006f06:	d508      	bpl.n	8006f1a <_dtoa_r+0x39a>
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f10:	f7f9 fb92 	bl	8000638 <__aeabi_dmul>
 8006f14:	3501      	adds	r5, #1
 8006f16:	4680      	mov	r8, r0
 8006f18:	4689      	mov	r9, r1
 8006f1a:	107f      	asrs	r7, r7, #1
 8006f1c:	3608      	adds	r6, #8
 8006f1e:	e7e5      	b.n	8006eec <_dtoa_r+0x36c>
 8006f20:	f000 809b 	beq.w	800705a <_dtoa_r+0x4da>
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	4f9d      	ldr	r7, [pc, #628]	; (800719c <_dtoa_r+0x61c>)
 8006f28:	425e      	negs	r6, r3
 8006f2a:	4b9b      	ldr	r3, [pc, #620]	; (8007198 <_dtoa_r+0x618>)
 8006f2c:	f006 020f 	and.w	r2, r6, #15
 8006f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	ec51 0b19 	vmov	r0, r1, d9
 8006f3c:	f7f9 fb7c 	bl	8000638 <__aeabi_dmul>
 8006f40:	1136      	asrs	r6, r6, #4
 8006f42:	4682      	mov	sl, r0
 8006f44:	468b      	mov	fp, r1
 8006f46:	2300      	movs	r3, #0
 8006f48:	2502      	movs	r5, #2
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d17a      	bne.n	8007044 <_dtoa_r+0x4c4>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1d3      	bne.n	8006efa <_dtoa_r+0x37a>
 8006f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8082 	beq.w	800705e <_dtoa_r+0x4de>
 8006f5a:	4b91      	ldr	r3, [pc, #580]	; (80071a0 <_dtoa_r+0x620>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4650      	mov	r0, sl
 8006f60:	4659      	mov	r1, fp
 8006f62:	f7f9 fddb 	bl	8000b1c <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d079      	beq.n	800705e <_dtoa_r+0x4de>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d076      	beq.n	800705e <_dtoa_r+0x4de>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd36      	ble.n	8006fe4 <_dtoa_r+0x464>
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	1e5f      	subs	r7, r3, #1
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b88      	ldr	r3, [pc, #544]	; (80071a4 <_dtoa_r+0x624>)
 8006f82:	f7f9 fb59 	bl	8000638 <__aeabi_dmul>
 8006f86:	9e02      	ldr	r6, [sp, #8]
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f7f9 fae8 	bl	8000564 <__aeabi_i2d>
 8006f94:	4652      	mov	r2, sl
 8006f96:	465b      	mov	r3, fp
 8006f98:	f7f9 fb4e 	bl	8000638 <__aeabi_dmul>
 8006f9c:	4b82      	ldr	r3, [pc, #520]	; (80071a8 <_dtoa_r+0x628>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f7f9 f994 	bl	80002cc <__adddf3>
 8006fa4:	46d0      	mov	r8, sl
 8006fa6:	46d9      	mov	r9, fp
 8006fa8:	4682      	mov	sl, r0
 8006faa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	d158      	bne.n	8007064 <_dtoa_r+0x4e4>
 8006fb2:	4b7e      	ldr	r3, [pc, #504]	; (80071ac <_dtoa_r+0x62c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f985 	bl	80002c8 <__aeabi_dsub>
 8006fbe:	4652      	mov	r2, sl
 8006fc0:	465b      	mov	r3, fp
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	f7f9 fdc7 	bl	8000b58 <__aeabi_dcmpgt>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f040 8295 	bne.w	80074fa <_dtoa_r+0x97a>
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4649      	mov	r1, r9
 8006fda:	f7f9 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8289 	bne.w	80074f6 <_dtoa_r+0x976>
 8006fe4:	ec5b ab19 	vmov	sl, fp, d9
 8006fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f2c0 8148 	blt.w	8007280 <_dtoa_r+0x700>
 8006ff0:	9a00      	ldr	r2, [sp, #0]
 8006ff2:	2a0e      	cmp	r2, #14
 8006ff4:	f300 8144 	bgt.w	8007280 <_dtoa_r+0x700>
 8006ff8:	4b67      	ldr	r3, [pc, #412]	; (8007198 <_dtoa_r+0x618>)
 8006ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	f280 80d5 	bge.w	80071b4 <_dtoa_r+0x634>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f300 80d1 	bgt.w	80071b4 <_dtoa_r+0x634>
 8007012:	f040 826f 	bne.w	80074f4 <_dtoa_r+0x974>
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <_dtoa_r+0x62c>)
 8007018:	2200      	movs	r2, #0
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 fb0b 	bl	8000638 <__aeabi_dmul>
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	f7f9 fd8d 	bl	8000b44 <__aeabi_dcmpge>
 800702a:	9e03      	ldr	r6, [sp, #12]
 800702c:	4637      	mov	r7, r6
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8245 	bne.w	80074be <_dtoa_r+0x93e>
 8007034:	9d01      	ldr	r5, [sp, #4]
 8007036:	2331      	movs	r3, #49	; 0x31
 8007038:	f805 3b01 	strb.w	r3, [r5], #1
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	e240      	b.n	80074c6 <_dtoa_r+0x946>
 8007044:	07f2      	lsls	r2, r6, #31
 8007046:	d505      	bpl.n	8007054 <_dtoa_r+0x4d4>
 8007048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704c:	f7f9 faf4 	bl	8000638 <__aeabi_dmul>
 8007050:	3501      	adds	r5, #1
 8007052:	2301      	movs	r3, #1
 8007054:	1076      	asrs	r6, r6, #1
 8007056:	3708      	adds	r7, #8
 8007058:	e777      	b.n	8006f4a <_dtoa_r+0x3ca>
 800705a:	2502      	movs	r5, #2
 800705c:	e779      	b.n	8006f52 <_dtoa_r+0x3d2>
 800705e:	9f00      	ldr	r7, [sp, #0]
 8007060:	9e03      	ldr	r6, [sp, #12]
 8007062:	e794      	b.n	8006f8e <_dtoa_r+0x40e>
 8007064:	9901      	ldr	r1, [sp, #4]
 8007066:	4b4c      	ldr	r3, [pc, #304]	; (8007198 <_dtoa_r+0x618>)
 8007068:	4431      	add	r1, r6
 800706a:	910d      	str	r1, [sp, #52]	; 0x34
 800706c:	9908      	ldr	r1, [sp, #32]
 800706e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007072:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007076:	2900      	cmp	r1, #0
 8007078:	d043      	beq.n	8007102 <_dtoa_r+0x582>
 800707a:	494d      	ldr	r1, [pc, #308]	; (80071b0 <_dtoa_r+0x630>)
 800707c:	2000      	movs	r0, #0
 800707e:	f7f9 fc05 	bl	800088c <__aeabi_ddiv>
 8007082:	4652      	mov	r2, sl
 8007084:	465b      	mov	r3, fp
 8007086:	f7f9 f91f 	bl	80002c8 <__aeabi_dsub>
 800708a:	9d01      	ldr	r5, [sp, #4]
 800708c:	4682      	mov	sl, r0
 800708e:	468b      	mov	fp, r1
 8007090:	4649      	mov	r1, r9
 8007092:	4640      	mov	r0, r8
 8007094:	f7f9 fd80 	bl	8000b98 <__aeabi_d2iz>
 8007098:	4606      	mov	r6, r0
 800709a:	f7f9 fa63 	bl	8000564 <__aeabi_i2d>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4640      	mov	r0, r8
 80070a4:	4649      	mov	r1, r9
 80070a6:	f7f9 f90f 	bl	80002c8 <__aeabi_dsub>
 80070aa:	3630      	adds	r6, #48	; 0x30
 80070ac:	f805 6b01 	strb.w	r6, [r5], #1
 80070b0:	4652      	mov	r2, sl
 80070b2:	465b      	mov	r3, fp
 80070b4:	4680      	mov	r8, r0
 80070b6:	4689      	mov	r9, r1
 80070b8:	f7f9 fd30 	bl	8000b1c <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d163      	bne.n	8007188 <_dtoa_r+0x608>
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	4936      	ldr	r1, [pc, #216]	; (80071a0 <_dtoa_r+0x620>)
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7f9 f8fe 	bl	80002c8 <__aeabi_dsub>
 80070cc:	4652      	mov	r2, sl
 80070ce:	465b      	mov	r3, fp
 80070d0:	f7f9 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f040 80b5 	bne.w	8007244 <_dtoa_r+0x6c4>
 80070da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070dc:	429d      	cmp	r5, r3
 80070de:	d081      	beq.n	8006fe4 <_dtoa_r+0x464>
 80070e0:	4b30      	ldr	r3, [pc, #192]	; (80071a4 <_dtoa_r+0x624>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 faa6 	bl	8000638 <__aeabi_dmul>
 80070ec:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <_dtoa_r+0x624>)
 80070ee:	4682      	mov	sl, r0
 80070f0:	468b      	mov	fp, r1
 80070f2:	4640      	mov	r0, r8
 80070f4:	4649      	mov	r1, r9
 80070f6:	2200      	movs	r2, #0
 80070f8:	f7f9 fa9e 	bl	8000638 <__aeabi_dmul>
 80070fc:	4680      	mov	r8, r0
 80070fe:	4689      	mov	r9, r1
 8007100:	e7c6      	b.n	8007090 <_dtoa_r+0x510>
 8007102:	4650      	mov	r0, sl
 8007104:	4659      	mov	r1, fp
 8007106:	f7f9 fa97 	bl	8000638 <__aeabi_dmul>
 800710a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710c:	9d01      	ldr	r5, [sp, #4]
 800710e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007110:	4682      	mov	sl, r0
 8007112:	468b      	mov	fp, r1
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	f7f9 fd3e 	bl	8000b98 <__aeabi_d2iz>
 800711c:	4606      	mov	r6, r0
 800711e:	f7f9 fa21 	bl	8000564 <__aeabi_i2d>
 8007122:	3630      	adds	r6, #48	; 0x30
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 f8cc 	bl	80002c8 <__aeabi_dsub>
 8007130:	f805 6b01 	strb.w	r6, [r5], #1
 8007134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007136:	429d      	cmp	r5, r3
 8007138:	4680      	mov	r8, r0
 800713a:	4689      	mov	r9, r1
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	d124      	bne.n	800718c <_dtoa_r+0x60c>
 8007142:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <_dtoa_r+0x630>)
 8007144:	4650      	mov	r0, sl
 8007146:	4659      	mov	r1, fp
 8007148:	f7f9 f8c0 	bl	80002cc <__adddf3>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 fd00 	bl	8000b58 <__aeabi_dcmpgt>
 8007158:	2800      	cmp	r0, #0
 800715a:	d173      	bne.n	8007244 <_dtoa_r+0x6c4>
 800715c:	4652      	mov	r2, sl
 800715e:	465b      	mov	r3, fp
 8007160:	4913      	ldr	r1, [pc, #76]	; (80071b0 <_dtoa_r+0x630>)
 8007162:	2000      	movs	r0, #0
 8007164:	f7f9 f8b0 	bl	80002c8 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fcd4 	bl	8000b1c <__aeabi_dcmplt>
 8007174:	2800      	cmp	r0, #0
 8007176:	f43f af35 	beq.w	8006fe4 <_dtoa_r+0x464>
 800717a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800717c:	1e6b      	subs	r3, r5, #1
 800717e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007180:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d0f8      	beq.n	800717a <_dtoa_r+0x5fa>
 8007188:	9700      	str	r7, [sp, #0]
 800718a:	e049      	b.n	8007220 <_dtoa_r+0x6a0>
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <_dtoa_r+0x624>)
 800718e:	f7f9 fa53 	bl	8000638 <__aeabi_dmul>
 8007192:	4680      	mov	r8, r0
 8007194:	4689      	mov	r9, r1
 8007196:	e7bd      	b.n	8007114 <_dtoa_r+0x594>
 8007198:	08009d58 	.word	0x08009d58
 800719c:	08009d30 	.word	0x08009d30
 80071a0:	3ff00000 	.word	0x3ff00000
 80071a4:	40240000 	.word	0x40240000
 80071a8:	401c0000 	.word	0x401c0000
 80071ac:	40140000 	.word	0x40140000
 80071b0:	3fe00000 	.word	0x3fe00000
 80071b4:	9d01      	ldr	r5, [sp, #4]
 80071b6:	4656      	mov	r6, sl
 80071b8:	465f      	mov	r7, fp
 80071ba:	4642      	mov	r2, r8
 80071bc:	464b      	mov	r3, r9
 80071be:	4630      	mov	r0, r6
 80071c0:	4639      	mov	r1, r7
 80071c2:	f7f9 fb63 	bl	800088c <__aeabi_ddiv>
 80071c6:	f7f9 fce7 	bl	8000b98 <__aeabi_d2iz>
 80071ca:	4682      	mov	sl, r0
 80071cc:	f7f9 f9ca 	bl	8000564 <__aeabi_i2d>
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	f7f9 fa30 	bl	8000638 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071e4:	f7f9 f870 	bl	80002c8 <__aeabi_dsub>
 80071e8:	f805 6b01 	strb.w	r6, [r5], #1
 80071ec:	9e01      	ldr	r6, [sp, #4]
 80071ee:	9f03      	ldr	r7, [sp, #12]
 80071f0:	1bae      	subs	r6, r5, r6
 80071f2:	42b7      	cmp	r7, r6
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	d135      	bne.n	8007266 <_dtoa_r+0x6e6>
 80071fa:	f7f9 f867 	bl	80002cc <__adddf3>
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	f7f9 fca7 	bl	8000b58 <__aeabi_dcmpgt>
 800720a:	b9d0      	cbnz	r0, 8007242 <_dtoa_r+0x6c2>
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fc78 	bl	8000b08 <__aeabi_dcmpeq>
 8007218:	b110      	cbz	r0, 8007220 <_dtoa_r+0x6a0>
 800721a:	f01a 0f01 	tst.w	sl, #1
 800721e:	d110      	bne.n	8007242 <_dtoa_r+0x6c2>
 8007220:	4620      	mov	r0, r4
 8007222:	ee18 1a10 	vmov	r1, s16
 8007226:	f000 fd41 	bl	8007cac <_Bfree>
 800722a:	2300      	movs	r3, #0
 800722c:	9800      	ldr	r0, [sp, #0]
 800722e:	702b      	strb	r3, [r5, #0]
 8007230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007232:	3001      	adds	r0, #1
 8007234:	6018      	str	r0, [r3, #0]
 8007236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007238:	2b00      	cmp	r3, #0
 800723a:	f43f acf1 	beq.w	8006c20 <_dtoa_r+0xa0>
 800723e:	601d      	str	r5, [r3, #0]
 8007240:	e4ee      	b.n	8006c20 <_dtoa_r+0xa0>
 8007242:	9f00      	ldr	r7, [sp, #0]
 8007244:	462b      	mov	r3, r5
 8007246:	461d      	mov	r5, r3
 8007248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800724c:	2a39      	cmp	r2, #57	; 0x39
 800724e:	d106      	bne.n	800725e <_dtoa_r+0x6de>
 8007250:	9a01      	ldr	r2, [sp, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d1f7      	bne.n	8007246 <_dtoa_r+0x6c6>
 8007256:	9901      	ldr	r1, [sp, #4]
 8007258:	2230      	movs	r2, #48	; 0x30
 800725a:	3701      	adds	r7, #1
 800725c:	700a      	strb	r2, [r1, #0]
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	3201      	adds	r2, #1
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e790      	b.n	8007188 <_dtoa_r+0x608>
 8007266:	4ba6      	ldr	r3, [pc, #664]	; (8007500 <_dtoa_r+0x980>)
 8007268:	2200      	movs	r2, #0
 800726a:	f7f9 f9e5 	bl	8000638 <__aeabi_dmul>
 800726e:	2200      	movs	r2, #0
 8007270:	2300      	movs	r3, #0
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	f7f9 fc47 	bl	8000b08 <__aeabi_dcmpeq>
 800727a:	2800      	cmp	r0, #0
 800727c:	d09d      	beq.n	80071ba <_dtoa_r+0x63a>
 800727e:	e7cf      	b.n	8007220 <_dtoa_r+0x6a0>
 8007280:	9a08      	ldr	r2, [sp, #32]
 8007282:	2a00      	cmp	r2, #0
 8007284:	f000 80d7 	beq.w	8007436 <_dtoa_r+0x8b6>
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	2a01      	cmp	r2, #1
 800728c:	f300 80ba 	bgt.w	8007404 <_dtoa_r+0x884>
 8007290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007292:	2a00      	cmp	r2, #0
 8007294:	f000 80b2 	beq.w	80073fc <_dtoa_r+0x87c>
 8007298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800729c:	9e07      	ldr	r6, [sp, #28]
 800729e:	9d04      	ldr	r5, [sp, #16]
 80072a0:	9a04      	ldr	r2, [sp, #16]
 80072a2:	441a      	add	r2, r3
 80072a4:	9204      	str	r2, [sp, #16]
 80072a6:	9a05      	ldr	r2, [sp, #20]
 80072a8:	2101      	movs	r1, #1
 80072aa:	441a      	add	r2, r3
 80072ac:	4620      	mov	r0, r4
 80072ae:	9205      	str	r2, [sp, #20]
 80072b0:	f000 fdb4 	bl	8007e1c <__i2b>
 80072b4:	4607      	mov	r7, r0
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	dd0c      	ble.n	80072d4 <_dtoa_r+0x754>
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd09      	ble.n	80072d4 <_dtoa_r+0x754>
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	bfa8      	it	ge
 80072c6:	462b      	movge	r3, r5
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	9204      	str	r2, [sp, #16]
 80072cc:	9a05      	ldr	r2, [sp, #20]
 80072ce:	1aed      	subs	r5, r5, r3
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	b31b      	cbz	r3, 8007320 <_dtoa_r+0x7a0>
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80af 	beq.w	800743e <_dtoa_r+0x8be>
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	dd13      	ble.n	800730c <_dtoa_r+0x78c>
 80072e4:	4639      	mov	r1, r7
 80072e6:	4632      	mov	r2, r6
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fe57 	bl	8007f9c <__pow5mult>
 80072ee:	ee18 2a10 	vmov	r2, s16
 80072f2:	4601      	mov	r1, r0
 80072f4:	4607      	mov	r7, r0
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fda6 	bl	8007e48 <__multiply>
 80072fc:	ee18 1a10 	vmov	r1, s16
 8007300:	4680      	mov	r8, r0
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fcd2 	bl	8007cac <_Bfree>
 8007308:	ee08 8a10 	vmov	s16, r8
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	1b9a      	subs	r2, r3, r6
 8007310:	d006      	beq.n	8007320 <_dtoa_r+0x7a0>
 8007312:	ee18 1a10 	vmov	r1, s16
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fe40 	bl	8007f9c <__pow5mult>
 800731c:	ee08 0a10 	vmov	s16, r0
 8007320:	2101      	movs	r1, #1
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fd7a 	bl	8007e1c <__i2b>
 8007328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	4606      	mov	r6, r0
 800732e:	f340 8088 	ble.w	8007442 <_dtoa_r+0x8c2>
 8007332:	461a      	mov	r2, r3
 8007334:	4601      	mov	r1, r0
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fe30 	bl	8007f9c <__pow5mult>
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	2b01      	cmp	r3, #1
 8007340:	4606      	mov	r6, r0
 8007342:	f340 8081 	ble.w	8007448 <_dtoa_r+0x8c8>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	6933      	ldr	r3, [r6, #16]
 800734c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007350:	6918      	ldr	r0, [r3, #16]
 8007352:	f000 fd13 	bl	8007d7c <__hi0bits>
 8007356:	f1c0 0020 	rsb	r0, r0, #32
 800735a:	9b05      	ldr	r3, [sp, #20]
 800735c:	4418      	add	r0, r3
 800735e:	f010 001f 	ands.w	r0, r0, #31
 8007362:	f000 8092 	beq.w	800748a <_dtoa_r+0x90a>
 8007366:	f1c0 0320 	rsb	r3, r0, #32
 800736a:	2b04      	cmp	r3, #4
 800736c:	f340 808a 	ble.w	8007484 <_dtoa_r+0x904>
 8007370:	f1c0 001c 	rsb	r0, r0, #28
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	4403      	add	r3, r0
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	4403      	add	r3, r0
 800737e:	4405      	add	r5, r0
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd07      	ble.n	8007398 <_dtoa_r+0x818>
 8007388:	ee18 1a10 	vmov	r1, s16
 800738c:	461a      	mov	r2, r3
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fe5e 	bl	8008050 <__lshift>
 8007394:	ee08 0a10 	vmov	s16, r0
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd05      	ble.n	80073aa <_dtoa_r+0x82a>
 800739e:	4631      	mov	r1, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fe54 	bl	8008050 <__lshift>
 80073a8:	4606      	mov	r6, r0
 80073aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d06e      	beq.n	800748e <_dtoa_r+0x90e>
 80073b0:	ee18 0a10 	vmov	r0, s16
 80073b4:	4631      	mov	r1, r6
 80073b6:	f000 febb 	bl	8008130 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	da67      	bge.n	800748e <_dtoa_r+0x90e>
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	ee18 1a10 	vmov	r1, s16
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	220a      	movs	r2, #10
 80073ca:	2300      	movs	r3, #0
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fc8f 	bl	8007cf0 <__multadd>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	ee08 0a10 	vmov	s16, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 81b1 	beq.w	8007740 <_dtoa_r+0xbc0>
 80073de:	2300      	movs	r3, #0
 80073e0:	4639      	mov	r1, r7
 80073e2:	220a      	movs	r2, #10
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fc83 	bl	8007cf0 <__multadd>
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	4607      	mov	r7, r0
 80073f0:	f300 808e 	bgt.w	8007510 <_dtoa_r+0x990>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dc51      	bgt.n	800749e <_dtoa_r+0x91e>
 80073fa:	e089      	b.n	8007510 <_dtoa_r+0x990>
 80073fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007402:	e74b      	b.n	800729c <_dtoa_r+0x71c>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	1e5e      	subs	r6, r3, #1
 8007408:	9b07      	ldr	r3, [sp, #28]
 800740a:	42b3      	cmp	r3, r6
 800740c:	bfbf      	itttt	lt
 800740e:	9b07      	ldrlt	r3, [sp, #28]
 8007410:	9607      	strlt	r6, [sp, #28]
 8007412:	1af2      	sublt	r2, r6, r3
 8007414:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007416:	bfb6      	itet	lt
 8007418:	189b      	addlt	r3, r3, r2
 800741a:	1b9e      	subge	r6, r3, r6
 800741c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	bfb8      	it	lt
 8007422:	2600      	movlt	r6, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	bfb7      	itett	lt
 8007428:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800742c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007430:	1a9d      	sublt	r5, r3, r2
 8007432:	2300      	movlt	r3, #0
 8007434:	e734      	b.n	80072a0 <_dtoa_r+0x720>
 8007436:	9e07      	ldr	r6, [sp, #28]
 8007438:	9d04      	ldr	r5, [sp, #16]
 800743a:	9f08      	ldr	r7, [sp, #32]
 800743c:	e73b      	b.n	80072b6 <_dtoa_r+0x736>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	e767      	b.n	8007312 <_dtoa_r+0x792>
 8007442:	9b06      	ldr	r3, [sp, #24]
 8007444:	2b01      	cmp	r3, #1
 8007446:	dc18      	bgt.n	800747a <_dtoa_r+0x8fa>
 8007448:	f1ba 0f00 	cmp.w	sl, #0
 800744c:	d115      	bne.n	800747a <_dtoa_r+0x8fa>
 800744e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007452:	b993      	cbnz	r3, 800747a <_dtoa_r+0x8fa>
 8007454:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007458:	0d1b      	lsrs	r3, r3, #20
 800745a:	051b      	lsls	r3, r3, #20
 800745c:	b183      	cbz	r3, 8007480 <_dtoa_r+0x900>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	3301      	adds	r3, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9b05      	ldr	r3, [sp, #20]
 8007466:	3301      	adds	r3, #1
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f04f 0801 	mov.w	r8, #1
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f af6a 	bne.w	800734a <_dtoa_r+0x7ca>
 8007476:	2001      	movs	r0, #1
 8007478:	e76f      	b.n	800735a <_dtoa_r+0x7da>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	e7f6      	b.n	800746e <_dtoa_r+0x8ee>
 8007480:	4698      	mov	r8, r3
 8007482:	e7f4      	b.n	800746e <_dtoa_r+0x8ee>
 8007484:	f43f af7d 	beq.w	8007382 <_dtoa_r+0x802>
 8007488:	4618      	mov	r0, r3
 800748a:	301c      	adds	r0, #28
 800748c:	e772      	b.n	8007374 <_dtoa_r+0x7f4>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc37      	bgt.n	8007504 <_dtoa_r+0x984>
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	2b02      	cmp	r3, #2
 8007498:	dd34      	ble.n	8007504 <_dtoa_r+0x984>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	9302      	str	r3, [sp, #8]
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	b96b      	cbnz	r3, 80074be <_dtoa_r+0x93e>
 80074a2:	4631      	mov	r1, r6
 80074a4:	2205      	movs	r2, #5
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fc22 	bl	8007cf0 <__multadd>
 80074ac:	4601      	mov	r1, r0
 80074ae:	4606      	mov	r6, r0
 80074b0:	ee18 0a10 	vmov	r0, s16
 80074b4:	f000 fe3c 	bl	8008130 <__mcmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f73f adbb 	bgt.w	8007034 <_dtoa_r+0x4b4>
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	9d01      	ldr	r5, [sp, #4]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f04f 0800 	mov.w	r8, #0
 80074ca:	4631      	mov	r1, r6
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 fbed 	bl	8007cac <_Bfree>
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	f43f aea4 	beq.w	8007220 <_dtoa_r+0x6a0>
 80074d8:	f1b8 0f00 	cmp.w	r8, #0
 80074dc:	d005      	beq.n	80074ea <_dtoa_r+0x96a>
 80074de:	45b8      	cmp	r8, r7
 80074e0:	d003      	beq.n	80074ea <_dtoa_r+0x96a>
 80074e2:	4641      	mov	r1, r8
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fbe1 	bl	8007cac <_Bfree>
 80074ea:	4639      	mov	r1, r7
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 fbdd 	bl	8007cac <_Bfree>
 80074f2:	e695      	b.n	8007220 <_dtoa_r+0x6a0>
 80074f4:	2600      	movs	r6, #0
 80074f6:	4637      	mov	r7, r6
 80074f8:	e7e1      	b.n	80074be <_dtoa_r+0x93e>
 80074fa:	9700      	str	r7, [sp, #0]
 80074fc:	4637      	mov	r7, r6
 80074fe:	e599      	b.n	8007034 <_dtoa_r+0x4b4>
 8007500:	40240000 	.word	0x40240000
 8007504:	9b08      	ldr	r3, [sp, #32]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80ca 	beq.w	80076a0 <_dtoa_r+0xb20>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	2d00      	cmp	r5, #0
 8007512:	dd05      	ble.n	8007520 <_dtoa_r+0x9a0>
 8007514:	4639      	mov	r1, r7
 8007516:	462a      	mov	r2, r5
 8007518:	4620      	mov	r0, r4
 800751a:	f000 fd99 	bl	8008050 <__lshift>
 800751e:	4607      	mov	r7, r0
 8007520:	f1b8 0f00 	cmp.w	r8, #0
 8007524:	d05b      	beq.n	80075de <_dtoa_r+0xa5e>
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fb7f 	bl	8007c2c <_Balloc>
 800752e:	4605      	mov	r5, r0
 8007530:	b928      	cbnz	r0, 800753e <_dtoa_r+0x9be>
 8007532:	4b87      	ldr	r3, [pc, #540]	; (8007750 <_dtoa_r+0xbd0>)
 8007534:	4602      	mov	r2, r0
 8007536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800753a:	f7ff bb3b 	b.w	8006bb4 <_dtoa_r+0x34>
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	3202      	adds	r2, #2
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	f107 010c 	add.w	r1, r7, #12
 8007548:	300c      	adds	r0, #12
 800754a:	f000 fb61 	bl	8007c10 <memcpy>
 800754e:	2201      	movs	r2, #1
 8007550:	4629      	mov	r1, r5
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fd7c 	bl	8008050 <__lshift>
 8007558:	9b01      	ldr	r3, [sp, #4]
 800755a:	f103 0901 	add.w	r9, r3, #1
 800755e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007562:	4413      	add	r3, r2
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	f00a 0301 	and.w	r3, sl, #1
 800756a:	46b8      	mov	r8, r7
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	4607      	mov	r7, r0
 8007570:	4631      	mov	r1, r6
 8007572:	ee18 0a10 	vmov	r0, s16
 8007576:	f7ff fa75 	bl	8006a64 <quorem>
 800757a:	4641      	mov	r1, r8
 800757c:	9002      	str	r0, [sp, #8]
 800757e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007582:	ee18 0a10 	vmov	r0, s16
 8007586:	f000 fdd3 	bl	8008130 <__mcmp>
 800758a:	463a      	mov	r2, r7
 800758c:	9003      	str	r0, [sp, #12]
 800758e:	4631      	mov	r1, r6
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fde9 	bl	8008168 <__mdiff>
 8007596:	68c2      	ldr	r2, [r0, #12]
 8007598:	f109 3bff 	add.w	fp, r9, #4294967295
 800759c:	4605      	mov	r5, r0
 800759e:	bb02      	cbnz	r2, 80075e2 <_dtoa_r+0xa62>
 80075a0:	4601      	mov	r1, r0
 80075a2:	ee18 0a10 	vmov	r0, s16
 80075a6:	f000 fdc3 	bl	8008130 <__mcmp>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4629      	mov	r1, r5
 80075ae:	4620      	mov	r0, r4
 80075b0:	9207      	str	r2, [sp, #28]
 80075b2:	f000 fb7b 	bl	8007cac <_Bfree>
 80075b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075ba:	ea43 0102 	orr.w	r1, r3, r2
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	430b      	orrs	r3, r1
 80075c2:	464d      	mov	r5, r9
 80075c4:	d10f      	bne.n	80075e6 <_dtoa_r+0xa66>
 80075c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075ca:	d02a      	beq.n	8007622 <_dtoa_r+0xaa2>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dd02      	ble.n	80075d8 <_dtoa_r+0xa58>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075d8:	f88b a000 	strb.w	sl, [fp]
 80075dc:	e775      	b.n	80074ca <_dtoa_r+0x94a>
 80075de:	4638      	mov	r0, r7
 80075e0:	e7ba      	b.n	8007558 <_dtoa_r+0x9d8>
 80075e2:	2201      	movs	r2, #1
 80075e4:	e7e2      	b.n	80075ac <_dtoa_r+0xa2c>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	db04      	blt.n	80075f6 <_dtoa_r+0xa76>
 80075ec:	9906      	ldr	r1, [sp, #24]
 80075ee:	430b      	orrs	r3, r1
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	430b      	orrs	r3, r1
 80075f4:	d122      	bne.n	800763c <_dtoa_r+0xabc>
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	ddee      	ble.n	80075d8 <_dtoa_r+0xa58>
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	2201      	movs	r2, #1
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fd25 	bl	8008050 <__lshift>
 8007606:	4631      	mov	r1, r6
 8007608:	ee08 0a10 	vmov	s16, r0
 800760c:	f000 fd90 	bl	8008130 <__mcmp>
 8007610:	2800      	cmp	r0, #0
 8007612:	dc03      	bgt.n	800761c <_dtoa_r+0xa9c>
 8007614:	d1e0      	bne.n	80075d8 <_dtoa_r+0xa58>
 8007616:	f01a 0f01 	tst.w	sl, #1
 800761a:	d0dd      	beq.n	80075d8 <_dtoa_r+0xa58>
 800761c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007620:	d1d7      	bne.n	80075d2 <_dtoa_r+0xa52>
 8007622:	2339      	movs	r3, #57	; 0x39
 8007624:	f88b 3000 	strb.w	r3, [fp]
 8007628:	462b      	mov	r3, r5
 800762a:	461d      	mov	r5, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007632:	2a39      	cmp	r2, #57	; 0x39
 8007634:	d071      	beq.n	800771a <_dtoa_r+0xb9a>
 8007636:	3201      	adds	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e746      	b.n	80074ca <_dtoa_r+0x94a>
 800763c:	2a00      	cmp	r2, #0
 800763e:	dd07      	ble.n	8007650 <_dtoa_r+0xad0>
 8007640:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007644:	d0ed      	beq.n	8007622 <_dtoa_r+0xaa2>
 8007646:	f10a 0301 	add.w	r3, sl, #1
 800764a:	f88b 3000 	strb.w	r3, [fp]
 800764e:	e73c      	b.n	80074ca <_dtoa_r+0x94a>
 8007650:	9b05      	ldr	r3, [sp, #20]
 8007652:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007656:	4599      	cmp	r9, r3
 8007658:	d047      	beq.n	80076ea <_dtoa_r+0xb6a>
 800765a:	ee18 1a10 	vmov	r1, s16
 800765e:	2300      	movs	r3, #0
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fb44 	bl	8007cf0 <__multadd>
 8007668:	45b8      	cmp	r8, r7
 800766a:	ee08 0a10 	vmov	s16, r0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	f04f 020a 	mov.w	r2, #10
 8007676:	4641      	mov	r1, r8
 8007678:	4620      	mov	r0, r4
 800767a:	d106      	bne.n	800768a <_dtoa_r+0xb0a>
 800767c:	f000 fb38 	bl	8007cf0 <__multadd>
 8007680:	4680      	mov	r8, r0
 8007682:	4607      	mov	r7, r0
 8007684:	f109 0901 	add.w	r9, r9, #1
 8007688:	e772      	b.n	8007570 <_dtoa_r+0x9f0>
 800768a:	f000 fb31 	bl	8007cf0 <__multadd>
 800768e:	4639      	mov	r1, r7
 8007690:	4680      	mov	r8, r0
 8007692:	2300      	movs	r3, #0
 8007694:	220a      	movs	r2, #10
 8007696:	4620      	mov	r0, r4
 8007698:	f000 fb2a 	bl	8007cf0 <__multadd>
 800769c:	4607      	mov	r7, r0
 800769e:	e7f1      	b.n	8007684 <_dtoa_r+0xb04>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	9d01      	ldr	r5, [sp, #4]
 80076a6:	ee18 0a10 	vmov	r0, s16
 80076aa:	4631      	mov	r1, r6
 80076ac:	f7ff f9da 	bl	8006a64 <quorem>
 80076b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	f805 ab01 	strb.w	sl, [r5], #1
 80076ba:	1aea      	subs	r2, r5, r3
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	4293      	cmp	r3, r2
 80076c0:	dd09      	ble.n	80076d6 <_dtoa_r+0xb56>
 80076c2:	ee18 1a10 	vmov	r1, s16
 80076c6:	2300      	movs	r3, #0
 80076c8:	220a      	movs	r2, #10
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fb10 	bl	8007cf0 <__multadd>
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	e7e7      	b.n	80076a6 <_dtoa_r+0xb26>
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfc8      	it	gt
 80076dc:	461d      	movgt	r5, r3
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	bfd8      	it	le
 80076e2:	2501      	movle	r5, #1
 80076e4:	441d      	add	r5, r3
 80076e6:	f04f 0800 	mov.w	r8, #0
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	2201      	movs	r2, #1
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fcad 	bl	8008050 <__lshift>
 80076f6:	4631      	mov	r1, r6
 80076f8:	ee08 0a10 	vmov	s16, r0
 80076fc:	f000 fd18 	bl	8008130 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	dc91      	bgt.n	8007628 <_dtoa_r+0xaa8>
 8007704:	d102      	bne.n	800770c <_dtoa_r+0xb8c>
 8007706:	f01a 0f01 	tst.w	sl, #1
 800770a:	d18d      	bne.n	8007628 <_dtoa_r+0xaa8>
 800770c:	462b      	mov	r3, r5
 800770e:	461d      	mov	r5, r3
 8007710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007714:	2a30      	cmp	r2, #48	; 0x30
 8007716:	d0fa      	beq.n	800770e <_dtoa_r+0xb8e>
 8007718:	e6d7      	b.n	80074ca <_dtoa_r+0x94a>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d184      	bne.n	800762a <_dtoa_r+0xaaa>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2331      	movs	r3, #49	; 0x31
 8007728:	7013      	strb	r3, [r2, #0]
 800772a:	e6ce      	b.n	80074ca <_dtoa_r+0x94a>
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <_dtoa_r+0xbd4>)
 800772e:	f7ff ba95 	b.w	8006c5c <_dtoa_r+0xdc>
 8007732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f aa6e 	bne.w	8006c16 <_dtoa_r+0x96>
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <_dtoa_r+0xbd8>)
 800773c:	f7ff ba8e 	b.w	8006c5c <_dtoa_r+0xdc>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dcae      	bgt.n	80076a4 <_dtoa_r+0xb24>
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	2b02      	cmp	r3, #2
 800774a:	f73f aea8 	bgt.w	800749e <_dtoa_r+0x91e>
 800774e:	e7a9      	b.n	80076a4 <_dtoa_r+0xb24>
 8007750:	08009c5d 	.word	0x08009c5d
 8007754:	08009e41 	.word	0x08009e41
 8007758:	08009bde 	.word	0x08009bde

0800775c <__sflush_r>:
 800775c:	898a      	ldrh	r2, [r1, #12]
 800775e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007762:	4605      	mov	r5, r0
 8007764:	0710      	lsls	r0, r2, #28
 8007766:	460c      	mov	r4, r1
 8007768:	d458      	bmi.n	800781c <__sflush_r+0xc0>
 800776a:	684b      	ldr	r3, [r1, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc05      	bgt.n	800777c <__sflush_r+0x20>
 8007770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	dc02      	bgt.n	800777c <__sflush_r+0x20>
 8007776:	2000      	movs	r0, #0
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800777e:	2e00      	cmp	r6, #0
 8007780:	d0f9      	beq.n	8007776 <__sflush_r+0x1a>
 8007782:	2300      	movs	r3, #0
 8007784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007788:	682f      	ldr	r7, [r5, #0]
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	d032      	beq.n	80077f4 <__sflush_r+0x98>
 800778e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	075a      	lsls	r2, r3, #29
 8007794:	d505      	bpl.n	80077a2 <__sflush_r+0x46>
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	1ac0      	subs	r0, r0, r3
 800779a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779c:	b10b      	cbz	r3, 80077a2 <__sflush_r+0x46>
 800779e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077a0:	1ac0      	subs	r0, r0, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	4602      	mov	r2, r0
 80077a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077a8:	6a21      	ldr	r1, [r4, #32]
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b0      	blx	r6
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	d106      	bne.n	80077c2 <__sflush_r+0x66>
 80077b4:	6829      	ldr	r1, [r5, #0]
 80077b6:	291d      	cmp	r1, #29
 80077b8:	d82c      	bhi.n	8007814 <__sflush_r+0xb8>
 80077ba:	4a2a      	ldr	r2, [pc, #168]	; (8007864 <__sflush_r+0x108>)
 80077bc:	40ca      	lsrs	r2, r1
 80077be:	07d6      	lsls	r6, r2, #31
 80077c0:	d528      	bpl.n	8007814 <__sflush_r+0xb8>
 80077c2:	2200      	movs	r2, #0
 80077c4:	6062      	str	r2, [r4, #4]
 80077c6:	04d9      	lsls	r1, r3, #19
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	6022      	str	r2, [r4, #0]
 80077cc:	d504      	bpl.n	80077d8 <__sflush_r+0x7c>
 80077ce:	1c42      	adds	r2, r0, #1
 80077d0:	d101      	bne.n	80077d6 <__sflush_r+0x7a>
 80077d2:	682b      	ldr	r3, [r5, #0]
 80077d4:	b903      	cbnz	r3, 80077d8 <__sflush_r+0x7c>
 80077d6:	6560      	str	r0, [r4, #84]	; 0x54
 80077d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077da:	602f      	str	r7, [r5, #0]
 80077dc:	2900      	cmp	r1, #0
 80077de:	d0ca      	beq.n	8007776 <__sflush_r+0x1a>
 80077e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077e4:	4299      	cmp	r1, r3
 80077e6:	d002      	beq.n	80077ee <__sflush_r+0x92>
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 fdb9 	bl	8008360 <_free_r>
 80077ee:	2000      	movs	r0, #0
 80077f0:	6360      	str	r0, [r4, #52]	; 0x34
 80077f2:	e7c1      	b.n	8007778 <__sflush_r+0x1c>
 80077f4:	6a21      	ldr	r1, [r4, #32]
 80077f6:	2301      	movs	r3, #1
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b0      	blx	r6
 80077fc:	1c41      	adds	r1, r0, #1
 80077fe:	d1c7      	bne.n	8007790 <__sflush_r+0x34>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0c4      	beq.n	8007790 <__sflush_r+0x34>
 8007806:	2b1d      	cmp	r3, #29
 8007808:	d001      	beq.n	800780e <__sflush_r+0xb2>
 800780a:	2b16      	cmp	r3, #22
 800780c:	d101      	bne.n	8007812 <__sflush_r+0xb6>
 800780e:	602f      	str	r7, [r5, #0]
 8007810:	e7b1      	b.n	8007776 <__sflush_r+0x1a>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	e7ad      	b.n	8007778 <__sflush_r+0x1c>
 800781c:	690f      	ldr	r7, [r1, #16]
 800781e:	2f00      	cmp	r7, #0
 8007820:	d0a9      	beq.n	8007776 <__sflush_r+0x1a>
 8007822:	0793      	lsls	r3, r2, #30
 8007824:	680e      	ldr	r6, [r1, #0]
 8007826:	bf08      	it	eq
 8007828:	694b      	ldreq	r3, [r1, #20]
 800782a:	600f      	str	r7, [r1, #0]
 800782c:	bf18      	it	ne
 800782e:	2300      	movne	r3, #0
 8007830:	eba6 0807 	sub.w	r8, r6, r7
 8007834:	608b      	str	r3, [r1, #8]
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	dd9c      	ble.n	8007776 <__sflush_r+0x1a>
 800783c:	6a21      	ldr	r1, [r4, #32]
 800783e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007840:	4643      	mov	r3, r8
 8007842:	463a      	mov	r2, r7
 8007844:	4628      	mov	r0, r5
 8007846:	47b0      	blx	r6
 8007848:	2800      	cmp	r0, #0
 800784a:	dc06      	bgt.n	800785a <__sflush_r+0xfe>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e78e      	b.n	8007778 <__sflush_r+0x1c>
 800785a:	4407      	add	r7, r0
 800785c:	eba8 0800 	sub.w	r8, r8, r0
 8007860:	e7e9      	b.n	8007836 <__sflush_r+0xda>
 8007862:	bf00      	nop
 8007864:	20400001 	.word	0x20400001

08007868 <_fflush_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b913      	cbnz	r3, 8007878 <_fflush_r+0x10>
 8007872:	2500      	movs	r5, #0
 8007874:	4628      	mov	r0, r5
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	b118      	cbz	r0, 8007882 <_fflush_r+0x1a>
 800787a:	6983      	ldr	r3, [r0, #24]
 800787c:	b90b      	cbnz	r3, 8007882 <_fflush_r+0x1a>
 800787e:	f000 f899 	bl	80079b4 <__sinit>
 8007882:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <_fflush_r+0x6c>)
 8007884:	429c      	cmp	r4, r3
 8007886:	d11b      	bne.n	80078c0 <_fflush_r+0x58>
 8007888:	686c      	ldr	r4, [r5, #4]
 800788a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0ef      	beq.n	8007872 <_fflush_r+0xa>
 8007892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007894:	07d0      	lsls	r0, r2, #31
 8007896:	d404      	bmi.n	80078a2 <_fflush_r+0x3a>
 8007898:	0599      	lsls	r1, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_fflush_r+0x3a>
 800789c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789e:	f000 f948 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80078a2:	4628      	mov	r0, r5
 80078a4:	4621      	mov	r1, r4
 80078a6:	f7ff ff59 	bl	800775c <__sflush_r>
 80078aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ac:	07da      	lsls	r2, r3, #31
 80078ae:	4605      	mov	r5, r0
 80078b0:	d4e0      	bmi.n	8007874 <_fflush_r+0xc>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	d4dd      	bmi.n	8007874 <_fflush_r+0xc>
 80078b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ba:	f000 f93b 	bl	8007b34 <__retarget_lock_release_recursive>
 80078be:	e7d9      	b.n	8007874 <_fflush_r+0xc>
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <_fflush_r+0x70>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d101      	bne.n	80078ca <_fflush_r+0x62>
 80078c6:	68ac      	ldr	r4, [r5, #8]
 80078c8:	e7df      	b.n	800788a <_fflush_r+0x22>
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <_fflush_r+0x74>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	bf08      	it	eq
 80078d0:	68ec      	ldreq	r4, [r5, #12]
 80078d2:	e7da      	b.n	800788a <_fflush_r+0x22>
 80078d4:	08009c90 	.word	0x08009c90
 80078d8:	08009cb0 	.word	0x08009cb0
 80078dc:	08009c70 	.word	0x08009c70

080078e0 <fflush>:
 80078e0:	4601      	mov	r1, r0
 80078e2:	b920      	cbnz	r0, 80078ee <fflush+0xe>
 80078e4:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <fflush+0x18>)
 80078e6:	4905      	ldr	r1, [pc, #20]	; (80078fc <fflush+0x1c>)
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	f000 b8fe 	b.w	8007aea <_fwalk_reent>
 80078ee:	4b04      	ldr	r3, [pc, #16]	; (8007900 <fflush+0x20>)
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	f7ff bfb9 	b.w	8007868 <_fflush_r>
 80078f6:	bf00      	nop
 80078f8:	08009ba8 	.word	0x08009ba8
 80078fc:	08007869 	.word	0x08007869
 8007900:	2000000c 	.word	0x2000000c

08007904 <std>:
 8007904:	2300      	movs	r3, #0
 8007906:	b510      	push	{r4, lr}
 8007908:	4604      	mov	r4, r0
 800790a:	e9c0 3300 	strd	r3, r3, [r0]
 800790e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007912:	6083      	str	r3, [r0, #8]
 8007914:	8181      	strh	r1, [r0, #12]
 8007916:	6643      	str	r3, [r0, #100]	; 0x64
 8007918:	81c2      	strh	r2, [r0, #14]
 800791a:	6183      	str	r3, [r0, #24]
 800791c:	4619      	mov	r1, r3
 800791e:	2208      	movs	r2, #8
 8007920:	305c      	adds	r0, #92	; 0x5c
 8007922:	f7fe fa01 	bl	8005d28 <memset>
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <std+0x38>)
 8007928:	6263      	str	r3, [r4, #36]	; 0x24
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <std+0x3c>)
 800792c:	62a3      	str	r3, [r4, #40]	; 0x28
 800792e:	4b05      	ldr	r3, [pc, #20]	; (8007944 <std+0x40>)
 8007930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <std+0x44>)
 8007934:	6224      	str	r4, [r4, #32]
 8007936:	6323      	str	r3, [r4, #48]	; 0x30
 8007938:	bd10      	pop	{r4, pc}
 800793a:	bf00      	nop
 800793c:	08008fcd 	.word	0x08008fcd
 8007940:	08008fef 	.word	0x08008fef
 8007944:	08009027 	.word	0x08009027
 8007948:	0800904b 	.word	0x0800904b

0800794c <_cleanup_r>:
 800794c:	4901      	ldr	r1, [pc, #4]	; (8007954 <_cleanup_r+0x8>)
 800794e:	f000 b8cc 	b.w	8007aea <_fwalk_reent>
 8007952:	bf00      	nop
 8007954:	08007869 	.word	0x08007869

08007958 <__sfmoreglue>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	2268      	movs	r2, #104	; 0x68
 800795c:	1e4d      	subs	r5, r1, #1
 800795e:	4355      	muls	r5, r2
 8007960:	460e      	mov	r6, r1
 8007962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007966:	f000 fd67 	bl	8008438 <_malloc_r>
 800796a:	4604      	mov	r4, r0
 800796c:	b140      	cbz	r0, 8007980 <__sfmoreglue+0x28>
 800796e:	2100      	movs	r1, #0
 8007970:	e9c0 1600 	strd	r1, r6, [r0]
 8007974:	300c      	adds	r0, #12
 8007976:	60a0      	str	r0, [r4, #8]
 8007978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800797c:	f7fe f9d4 	bl	8005d28 <memset>
 8007980:	4620      	mov	r0, r4
 8007982:	bd70      	pop	{r4, r5, r6, pc}

08007984 <__sfp_lock_acquire>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__sfp_lock_acquire+0x8>)
 8007986:	f000 b8d4 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	2000045d 	.word	0x2000045d

08007990 <__sfp_lock_release>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__sfp_lock_release+0x8>)
 8007992:	f000 b8cf 	b.w	8007b34 <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	2000045d 	.word	0x2000045d

0800799c <__sinit_lock_acquire>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__sinit_lock_acquire+0x8>)
 800799e:	f000 b8c8 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 80079a2:	bf00      	nop
 80079a4:	2000045e 	.word	0x2000045e

080079a8 <__sinit_lock_release>:
 80079a8:	4801      	ldr	r0, [pc, #4]	; (80079b0 <__sinit_lock_release+0x8>)
 80079aa:	f000 b8c3 	b.w	8007b34 <__retarget_lock_release_recursive>
 80079ae:	bf00      	nop
 80079b0:	2000045e 	.word	0x2000045e

080079b4 <__sinit>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	f7ff fff0 	bl	800799c <__sinit_lock_acquire>
 80079bc:	69a3      	ldr	r3, [r4, #24]
 80079be:	b11b      	cbz	r3, 80079c8 <__sinit+0x14>
 80079c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c4:	f7ff bff0 	b.w	80079a8 <__sinit_lock_release>
 80079c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079cc:	6523      	str	r3, [r4, #80]	; 0x50
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <__sinit+0x68>)
 80079d0:	4a13      	ldr	r2, [pc, #76]	; (8007a20 <__sinit+0x6c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	bf04      	itt	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	61a3      	streq	r3, [r4, #24]
 80079de:	4620      	mov	r0, r4
 80079e0:	f000 f820 	bl	8007a24 <__sfp>
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f81c 	bl	8007a24 <__sfp>
 80079ec:	60a0      	str	r0, [r4, #8]
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f818 	bl	8007a24 <__sfp>
 80079f4:	2200      	movs	r2, #0
 80079f6:	60e0      	str	r0, [r4, #12]
 80079f8:	2104      	movs	r1, #4
 80079fa:	6860      	ldr	r0, [r4, #4]
 80079fc:	f7ff ff82 	bl	8007904 <std>
 8007a00:	68a0      	ldr	r0, [r4, #8]
 8007a02:	2201      	movs	r2, #1
 8007a04:	2109      	movs	r1, #9
 8007a06:	f7ff ff7d 	bl	8007904 <std>
 8007a0a:	68e0      	ldr	r0, [r4, #12]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	2112      	movs	r1, #18
 8007a10:	f7ff ff78 	bl	8007904 <std>
 8007a14:	2301      	movs	r3, #1
 8007a16:	61a3      	str	r3, [r4, #24]
 8007a18:	e7d2      	b.n	80079c0 <__sinit+0xc>
 8007a1a:	bf00      	nop
 8007a1c:	08009ba8 	.word	0x08009ba8
 8007a20:	0800794d 	.word	0x0800794d

08007a24 <__sfp>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	4607      	mov	r7, r0
 8007a28:	f7ff ffac 	bl	8007984 <__sfp_lock_acquire>
 8007a2c:	4b1e      	ldr	r3, [pc, #120]	; (8007aa8 <__sfp+0x84>)
 8007a2e:	681e      	ldr	r6, [r3, #0]
 8007a30:	69b3      	ldr	r3, [r6, #24]
 8007a32:	b913      	cbnz	r3, 8007a3a <__sfp+0x16>
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffbd 	bl	80079b4 <__sinit>
 8007a3a:	3648      	adds	r6, #72	; 0x48
 8007a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	d503      	bpl.n	8007a4c <__sfp+0x28>
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	b30b      	cbz	r3, 8007a8c <__sfp+0x68>
 8007a48:	6836      	ldr	r6, [r6, #0]
 8007a4a:	e7f7      	b.n	8007a3c <__sfp+0x18>
 8007a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a50:	b9d5      	cbnz	r5, 8007a88 <__sfp+0x64>
 8007a52:	4b16      	ldr	r3, [pc, #88]	; (8007aac <__sfp+0x88>)
 8007a54:	60e3      	str	r3, [r4, #12]
 8007a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a5c:	f000 f868 	bl	8007b30 <__retarget_lock_init_recursive>
 8007a60:	f7ff ff96 	bl	8007990 <__sfp_lock_release>
 8007a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a6c:	6025      	str	r5, [r4, #0]
 8007a6e:	61a5      	str	r5, [r4, #24]
 8007a70:	2208      	movs	r2, #8
 8007a72:	4629      	mov	r1, r5
 8007a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a78:	f7fe f956 	bl	8005d28 <memset>
 8007a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a84:	4620      	mov	r0, r4
 8007a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a88:	3468      	adds	r4, #104	; 0x68
 8007a8a:	e7d9      	b.n	8007a40 <__sfp+0x1c>
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f7ff ff62 	bl	8007958 <__sfmoreglue>
 8007a94:	4604      	mov	r4, r0
 8007a96:	6030      	str	r0, [r6, #0]
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1d5      	bne.n	8007a48 <__sfp+0x24>
 8007a9c:	f7ff ff78 	bl	8007990 <__sfp_lock_release>
 8007aa0:	230c      	movs	r3, #12
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	e7ee      	b.n	8007a84 <__sfp+0x60>
 8007aa6:	bf00      	nop
 8007aa8:	08009ba8 	.word	0x08009ba8
 8007aac:	ffff0001 	.word	0xffff0001

08007ab0 <_fwalk>:
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007aba:	2600      	movs	r6, #0
 8007abc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8007ac0:	f1b8 0801 	subs.w	r8, r8, #1
 8007ac4:	d505      	bpl.n	8007ad2 <_fwalk+0x22>
 8007ac6:	6824      	ldr	r4, [r4, #0]
 8007ac8:	2c00      	cmp	r4, #0
 8007aca:	d1f7      	bne.n	8007abc <_fwalk+0xc>
 8007acc:	4630      	mov	r0, r6
 8007ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d906      	bls.n	8007ae6 <_fwalk+0x36>
 8007ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007adc:	3301      	adds	r3, #1
 8007ade:	d002      	beq.n	8007ae6 <_fwalk+0x36>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	4306      	orrs	r6, r0
 8007ae6:	3568      	adds	r5, #104	; 0x68
 8007ae8:	e7ea      	b.n	8007ac0 <_fwalk+0x10>

08007aea <_fwalk_reent>:
 8007aea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aee:	4606      	mov	r6, r0
 8007af0:	4688      	mov	r8, r1
 8007af2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007af6:	2700      	movs	r7, #0
 8007af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007afc:	f1b9 0901 	subs.w	r9, r9, #1
 8007b00:	d505      	bpl.n	8007b0e <_fwalk_reent+0x24>
 8007b02:	6824      	ldr	r4, [r4, #0]
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	d1f7      	bne.n	8007af8 <_fwalk_reent+0xe>
 8007b08:	4638      	mov	r0, r7
 8007b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b0e:	89ab      	ldrh	r3, [r5, #12]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d907      	bls.n	8007b24 <_fwalk_reent+0x3a>
 8007b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	d003      	beq.n	8007b24 <_fwalk_reent+0x3a>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	47c0      	blx	r8
 8007b22:	4307      	orrs	r7, r0
 8007b24:	3568      	adds	r5, #104	; 0x68
 8007b26:	e7e9      	b.n	8007afc <_fwalk_reent+0x12>

08007b28 <_localeconv_r>:
 8007b28:	4800      	ldr	r0, [pc, #0]	; (8007b2c <_localeconv_r+0x4>)
 8007b2a:	4770      	bx	lr
 8007b2c:	20000160 	.word	0x20000160

08007b30 <__retarget_lock_init_recursive>:
 8007b30:	4770      	bx	lr

08007b32 <__retarget_lock_acquire_recursive>:
 8007b32:	4770      	bx	lr

08007b34 <__retarget_lock_release_recursive>:
 8007b34:	4770      	bx	lr

08007b36 <__swhatbuf_r>:
 8007b36:	b570      	push	{r4, r5, r6, lr}
 8007b38:	460e      	mov	r6, r1
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	b096      	sub	sp, #88	; 0x58
 8007b42:	4614      	mov	r4, r2
 8007b44:	461d      	mov	r5, r3
 8007b46:	da08      	bge.n	8007b5a <__swhatbuf_r+0x24>
 8007b48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	602a      	str	r2, [r5, #0]
 8007b50:	061a      	lsls	r2, r3, #24
 8007b52:	d410      	bmi.n	8007b76 <__swhatbuf_r+0x40>
 8007b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b58:	e00e      	b.n	8007b78 <__swhatbuf_r+0x42>
 8007b5a:	466a      	mov	r2, sp
 8007b5c:	f001 fc96 	bl	800948c <_fstat_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	dbf1      	blt.n	8007b48 <__swhatbuf_r+0x12>
 8007b64:	9a01      	ldr	r2, [sp, #4]
 8007b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b6e:	425a      	negs	r2, r3
 8007b70:	415a      	adcs	r2, r3
 8007b72:	602a      	str	r2, [r5, #0]
 8007b74:	e7ee      	b.n	8007b54 <__swhatbuf_r+0x1e>
 8007b76:	2340      	movs	r3, #64	; 0x40
 8007b78:	2000      	movs	r0, #0
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	b016      	add	sp, #88	; 0x58
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <__smakebuf_r>:
 8007b80:	898b      	ldrh	r3, [r1, #12]
 8007b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b84:	079d      	lsls	r5, r3, #30
 8007b86:	4606      	mov	r6, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	d507      	bpl.n	8007b9c <__smakebuf_r+0x1c>
 8007b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	6123      	str	r3, [r4, #16]
 8007b94:	2301      	movs	r3, #1
 8007b96:	6163      	str	r3, [r4, #20]
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	ab01      	add	r3, sp, #4
 8007b9e:	466a      	mov	r2, sp
 8007ba0:	f7ff ffc9 	bl	8007b36 <__swhatbuf_r>
 8007ba4:	9900      	ldr	r1, [sp, #0]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 fc45 	bl	8008438 <_malloc_r>
 8007bae:	b948      	cbnz	r0, 8007bc4 <__smakebuf_r+0x44>
 8007bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb4:	059a      	lsls	r2, r3, #22
 8007bb6:	d4ef      	bmi.n	8007b98 <__smakebuf_r+0x18>
 8007bb8:	f023 0303 	bic.w	r3, r3, #3
 8007bbc:	f043 0302 	orr.w	r3, r3, #2
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	e7e3      	b.n	8007b8c <__smakebuf_r+0xc>
 8007bc4:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <__smakebuf_r+0x7c>)
 8007bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	6020      	str	r0, [r4, #0]
 8007bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	9b00      	ldr	r3, [sp, #0]
 8007bd4:	6163      	str	r3, [r4, #20]
 8007bd6:	9b01      	ldr	r3, [sp, #4]
 8007bd8:	6120      	str	r0, [r4, #16]
 8007bda:	b15b      	cbz	r3, 8007bf4 <__smakebuf_r+0x74>
 8007bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007be0:	4630      	mov	r0, r6
 8007be2:	f001 fc65 	bl	80094b0 <_isatty_r>
 8007be6:	b128      	cbz	r0, 8007bf4 <__smakebuf_r+0x74>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	89a0      	ldrh	r0, [r4, #12]
 8007bf6:	4305      	orrs	r5, r0
 8007bf8:	81a5      	strh	r5, [r4, #12]
 8007bfa:	e7cd      	b.n	8007b98 <__smakebuf_r+0x18>
 8007bfc:	0800794d 	.word	0x0800794d

08007c00 <malloc>:
 8007c00:	4b02      	ldr	r3, [pc, #8]	; (8007c0c <malloc+0xc>)
 8007c02:	4601      	mov	r1, r0
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	f000 bc17 	b.w	8008438 <_malloc_r>
 8007c0a:	bf00      	nop
 8007c0c:	2000000c 	.word	0x2000000c

08007c10 <memcpy>:
 8007c10:	440a      	add	r2, r1
 8007c12:	4291      	cmp	r1, r2
 8007c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c18:	d100      	bne.n	8007c1c <memcpy+0xc>
 8007c1a:	4770      	bx	lr
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c26:	4291      	cmp	r1, r2
 8007c28:	d1f9      	bne.n	8007c1e <memcpy+0xe>
 8007c2a:	bd10      	pop	{r4, pc}

08007c2c <_Balloc>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c30:	4604      	mov	r4, r0
 8007c32:	460d      	mov	r5, r1
 8007c34:	b976      	cbnz	r6, 8007c54 <_Balloc+0x28>
 8007c36:	2010      	movs	r0, #16
 8007c38:	f7ff ffe2 	bl	8007c00 <malloc>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8007c40:	b920      	cbnz	r0, 8007c4c <_Balloc+0x20>
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <_Balloc+0x78>)
 8007c44:	4818      	ldr	r0, [pc, #96]	; (8007ca8 <_Balloc+0x7c>)
 8007c46:	2166      	movs	r1, #102	; 0x66
 8007c48:	f001 fbe0 	bl	800940c <__assert_func>
 8007c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c50:	6006      	str	r6, [r0, #0]
 8007c52:	60c6      	str	r6, [r0, #12]
 8007c54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c56:	68f3      	ldr	r3, [r6, #12]
 8007c58:	b183      	cbz	r3, 8007c7c <_Balloc+0x50>
 8007c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c62:	b9b8      	cbnz	r0, 8007c94 <_Balloc+0x68>
 8007c64:	2101      	movs	r1, #1
 8007c66:	fa01 f605 	lsl.w	r6, r1, r5
 8007c6a:	1d72      	adds	r2, r6, #5
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fb60 	bl	8008334 <_calloc_r>
 8007c74:	b160      	cbz	r0, 8007c90 <_Balloc+0x64>
 8007c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c7a:	e00e      	b.n	8007c9a <_Balloc+0x6e>
 8007c7c:	2221      	movs	r2, #33	; 0x21
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 fb57 	bl	8008334 <_calloc_r>
 8007c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c88:	60f0      	str	r0, [r6, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e4      	bne.n	8007c5a <_Balloc+0x2e>
 8007c90:	2000      	movs	r0, #0
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	6802      	ldr	r2, [r0, #0]
 8007c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca0:	e7f7      	b.n	8007c92 <_Balloc+0x66>
 8007ca2:	bf00      	nop
 8007ca4:	08009beb 	.word	0x08009beb
 8007ca8:	08009cd0 	.word	0x08009cd0

08007cac <_Bfree>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b976      	cbnz	r6, 8007cd4 <_Bfree+0x28>
 8007cb6:	2010      	movs	r0, #16
 8007cb8:	f7ff ffa2 	bl	8007c00 <malloc>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6268      	str	r0, [r5, #36]	; 0x24
 8007cc0:	b920      	cbnz	r0, 8007ccc <_Bfree+0x20>
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <_Bfree+0x3c>)
 8007cc4:	4809      	ldr	r0, [pc, #36]	; (8007cec <_Bfree+0x40>)
 8007cc6:	218a      	movs	r1, #138	; 0x8a
 8007cc8:	f001 fba0 	bl	800940c <__assert_func>
 8007ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd0:	6006      	str	r6, [r0, #0]
 8007cd2:	60c6      	str	r6, [r0, #12]
 8007cd4:	b13c      	cbz	r4, 8007ce6 <_Bfree+0x3a>
 8007cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cd8:	6862      	ldr	r2, [r4, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce0:	6021      	str	r1, [r4, #0]
 8007ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	08009beb 	.word	0x08009beb
 8007cec:	08009cd0 	.word	0x08009cd0

08007cf0 <__multadd>:
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf4:	690d      	ldr	r5, [r1, #16]
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	461e      	mov	r6, r3
 8007cfc:	f101 0c14 	add.w	ip, r1, #20
 8007d00:	2000      	movs	r0, #0
 8007d02:	f8dc 3000 	ldr.w	r3, [ip]
 8007d06:	b299      	uxth	r1, r3
 8007d08:	fb02 6101 	mla	r1, r2, r1, r6
 8007d0c:	0c1e      	lsrs	r6, r3, #16
 8007d0e:	0c0b      	lsrs	r3, r1, #16
 8007d10:	fb02 3306 	mla	r3, r2, r6, r3
 8007d14:	b289      	uxth	r1, r1
 8007d16:	3001      	adds	r0, #1
 8007d18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d1c:	4285      	cmp	r5, r0
 8007d1e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d26:	dcec      	bgt.n	8007d02 <__multadd+0x12>
 8007d28:	b30e      	cbz	r6, 8007d6e <__multadd+0x7e>
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc19      	bgt.n	8007d64 <__multadd+0x74>
 8007d30:	6861      	ldr	r1, [r4, #4]
 8007d32:	4638      	mov	r0, r7
 8007d34:	3101      	adds	r1, #1
 8007d36:	f7ff ff79 	bl	8007c2c <_Balloc>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	b928      	cbnz	r0, 8007d4a <__multadd+0x5a>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <__multadd+0x84>)
 8007d42:	480d      	ldr	r0, [pc, #52]	; (8007d78 <__multadd+0x88>)
 8007d44:	21b5      	movs	r1, #181	; 0xb5
 8007d46:	f001 fb61 	bl	800940c <__assert_func>
 8007d4a:	6922      	ldr	r2, [r4, #16]
 8007d4c:	3202      	adds	r2, #2
 8007d4e:	f104 010c 	add.w	r1, r4, #12
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	300c      	adds	r0, #12
 8007d56:	f7ff ff5b 	bl	8007c10 <memcpy>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ffa5 	bl	8007cac <_Bfree>
 8007d62:	4644      	mov	r4, r8
 8007d64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d68:	3501      	adds	r5, #1
 8007d6a:	615e      	str	r6, [r3, #20]
 8007d6c:	6125      	str	r5, [r4, #16]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	08009c5d 	.word	0x08009c5d
 8007d78:	08009cd0 	.word	0x08009cd0

08007d7c <__hi0bits>:
 8007d7c:	0c03      	lsrs	r3, r0, #16
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	b9d3      	cbnz	r3, 8007db8 <__hi0bits+0x3c>
 8007d82:	0400      	lsls	r0, r0, #16
 8007d84:	2310      	movs	r3, #16
 8007d86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d8a:	bf04      	itt	eq
 8007d8c:	0200      	lsleq	r0, r0, #8
 8007d8e:	3308      	addeq	r3, #8
 8007d90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d94:	bf04      	itt	eq
 8007d96:	0100      	lsleq	r0, r0, #4
 8007d98:	3304      	addeq	r3, #4
 8007d9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d9e:	bf04      	itt	eq
 8007da0:	0080      	lsleq	r0, r0, #2
 8007da2:	3302      	addeq	r3, #2
 8007da4:	2800      	cmp	r0, #0
 8007da6:	db05      	blt.n	8007db4 <__hi0bits+0x38>
 8007da8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007dac:	f103 0301 	add.w	r3, r3, #1
 8007db0:	bf08      	it	eq
 8007db2:	2320      	moveq	r3, #32
 8007db4:	4618      	mov	r0, r3
 8007db6:	4770      	bx	lr
 8007db8:	2300      	movs	r3, #0
 8007dba:	e7e4      	b.n	8007d86 <__hi0bits+0xa>

08007dbc <__lo0bits>:
 8007dbc:	6803      	ldr	r3, [r0, #0]
 8007dbe:	f013 0207 	ands.w	r2, r3, #7
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	d00b      	beq.n	8007dde <__lo0bits+0x22>
 8007dc6:	07da      	lsls	r2, r3, #31
 8007dc8:	d423      	bmi.n	8007e12 <__lo0bits+0x56>
 8007dca:	0798      	lsls	r0, r3, #30
 8007dcc:	bf49      	itett	mi
 8007dce:	085b      	lsrmi	r3, r3, #1
 8007dd0:	089b      	lsrpl	r3, r3, #2
 8007dd2:	2001      	movmi	r0, #1
 8007dd4:	600b      	strmi	r3, [r1, #0]
 8007dd6:	bf5c      	itt	pl
 8007dd8:	600b      	strpl	r3, [r1, #0]
 8007dda:	2002      	movpl	r0, #2
 8007ddc:	4770      	bx	lr
 8007dde:	b298      	uxth	r0, r3
 8007de0:	b9a8      	cbnz	r0, 8007e0e <__lo0bits+0x52>
 8007de2:	0c1b      	lsrs	r3, r3, #16
 8007de4:	2010      	movs	r0, #16
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	b90a      	cbnz	r2, 8007dee <__lo0bits+0x32>
 8007dea:	3008      	adds	r0, #8
 8007dec:	0a1b      	lsrs	r3, r3, #8
 8007dee:	071a      	lsls	r2, r3, #28
 8007df0:	bf04      	itt	eq
 8007df2:	091b      	lsreq	r3, r3, #4
 8007df4:	3004      	addeq	r0, #4
 8007df6:	079a      	lsls	r2, r3, #30
 8007df8:	bf04      	itt	eq
 8007dfa:	089b      	lsreq	r3, r3, #2
 8007dfc:	3002      	addeq	r0, #2
 8007dfe:	07da      	lsls	r2, r3, #31
 8007e00:	d403      	bmi.n	8007e0a <__lo0bits+0x4e>
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	f100 0001 	add.w	r0, r0, #1
 8007e08:	d005      	beq.n	8007e16 <__lo0bits+0x5a>
 8007e0a:	600b      	str	r3, [r1, #0]
 8007e0c:	4770      	bx	lr
 8007e0e:	4610      	mov	r0, r2
 8007e10:	e7e9      	b.n	8007de6 <__lo0bits+0x2a>
 8007e12:	2000      	movs	r0, #0
 8007e14:	4770      	bx	lr
 8007e16:	2020      	movs	r0, #32
 8007e18:	4770      	bx	lr
	...

08007e1c <__i2b>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	460c      	mov	r4, r1
 8007e20:	2101      	movs	r1, #1
 8007e22:	f7ff ff03 	bl	8007c2c <_Balloc>
 8007e26:	4602      	mov	r2, r0
 8007e28:	b928      	cbnz	r0, 8007e36 <__i2b+0x1a>
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <__i2b+0x24>)
 8007e2c:	4805      	ldr	r0, [pc, #20]	; (8007e44 <__i2b+0x28>)
 8007e2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e32:	f001 faeb 	bl	800940c <__assert_func>
 8007e36:	2301      	movs	r3, #1
 8007e38:	6144      	str	r4, [r0, #20]
 8007e3a:	6103      	str	r3, [r0, #16]
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	bf00      	nop
 8007e40:	08009c5d 	.word	0x08009c5d
 8007e44:	08009cd0 	.word	0x08009cd0

08007e48 <__multiply>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	4691      	mov	r9, r2
 8007e4e:	690a      	ldr	r2, [r1, #16]
 8007e50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	bfb8      	it	lt
 8007e58:	460b      	movlt	r3, r1
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	bfbc      	itt	lt
 8007e5e:	464c      	movlt	r4, r9
 8007e60:	4699      	movlt	r9, r3
 8007e62:	6927      	ldr	r7, [r4, #16]
 8007e64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e68:	68a3      	ldr	r3, [r4, #8]
 8007e6a:	6861      	ldr	r1, [r4, #4]
 8007e6c:	eb07 060a 	add.w	r6, r7, sl
 8007e70:	42b3      	cmp	r3, r6
 8007e72:	b085      	sub	sp, #20
 8007e74:	bfb8      	it	lt
 8007e76:	3101      	addlt	r1, #1
 8007e78:	f7ff fed8 	bl	8007c2c <_Balloc>
 8007e7c:	b930      	cbnz	r0, 8007e8c <__multiply+0x44>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	4b44      	ldr	r3, [pc, #272]	; (8007f94 <__multiply+0x14c>)
 8007e82:	4845      	ldr	r0, [pc, #276]	; (8007f98 <__multiply+0x150>)
 8007e84:	f240 115d 	movw	r1, #349	; 0x15d
 8007e88:	f001 fac0 	bl	800940c <__assert_func>
 8007e8c:	f100 0514 	add.w	r5, r0, #20
 8007e90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e94:	462b      	mov	r3, r5
 8007e96:	2200      	movs	r2, #0
 8007e98:	4543      	cmp	r3, r8
 8007e9a:	d321      	bcc.n	8007ee0 <__multiply+0x98>
 8007e9c:	f104 0314 	add.w	r3, r4, #20
 8007ea0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ea4:	f109 0314 	add.w	r3, r9, #20
 8007ea8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007eac:	9202      	str	r2, [sp, #8]
 8007eae:	1b3a      	subs	r2, r7, r4
 8007eb0:	3a15      	subs	r2, #21
 8007eb2:	f022 0203 	bic.w	r2, r2, #3
 8007eb6:	3204      	adds	r2, #4
 8007eb8:	f104 0115 	add.w	r1, r4, #21
 8007ebc:	428f      	cmp	r7, r1
 8007ebe:	bf38      	it	cc
 8007ec0:	2204      	movcc	r2, #4
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	9a02      	ldr	r2, [sp, #8]
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d80c      	bhi.n	8007ee6 <__multiply+0x9e>
 8007ecc:	2e00      	cmp	r6, #0
 8007ece:	dd03      	ble.n	8007ed8 <__multiply+0x90>
 8007ed0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05a      	beq.n	8007f8e <__multiply+0x146>
 8007ed8:	6106      	str	r6, [r0, #16]
 8007eda:	b005      	add	sp, #20
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	f843 2b04 	str.w	r2, [r3], #4
 8007ee4:	e7d8      	b.n	8007e98 <__multiply+0x50>
 8007ee6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007eea:	f1ba 0f00 	cmp.w	sl, #0
 8007eee:	d024      	beq.n	8007f3a <__multiply+0xf2>
 8007ef0:	f104 0e14 	add.w	lr, r4, #20
 8007ef4:	46a9      	mov	r9, r5
 8007ef6:	f04f 0c00 	mov.w	ip, #0
 8007efa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007efe:	f8d9 1000 	ldr.w	r1, [r9]
 8007f02:	fa1f fb82 	uxth.w	fp, r2
 8007f06:	b289      	uxth	r1, r1
 8007f08:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f10:	f8d9 2000 	ldr.w	r2, [r9]
 8007f14:	4461      	add	r1, ip
 8007f16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f22:	b289      	uxth	r1, r1
 8007f24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f28:	4577      	cmp	r7, lr
 8007f2a:	f849 1b04 	str.w	r1, [r9], #4
 8007f2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f32:	d8e2      	bhi.n	8007efa <__multiply+0xb2>
 8007f34:	9a01      	ldr	r2, [sp, #4]
 8007f36:	f845 c002 	str.w	ip, [r5, r2]
 8007f3a:	9a03      	ldr	r2, [sp, #12]
 8007f3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f40:	3304      	adds	r3, #4
 8007f42:	f1b9 0f00 	cmp.w	r9, #0
 8007f46:	d020      	beq.n	8007f8a <__multiply+0x142>
 8007f48:	6829      	ldr	r1, [r5, #0]
 8007f4a:	f104 0c14 	add.w	ip, r4, #20
 8007f4e:	46ae      	mov	lr, r5
 8007f50:	f04f 0a00 	mov.w	sl, #0
 8007f54:	f8bc b000 	ldrh.w	fp, [ip]
 8007f58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f5c:	fb09 220b 	mla	r2, r9, fp, r2
 8007f60:	4492      	add	sl, r2
 8007f62:	b289      	uxth	r1, r1
 8007f64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f68:	f84e 1b04 	str.w	r1, [lr], #4
 8007f6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f70:	f8be 1000 	ldrh.w	r1, [lr]
 8007f74:	0c12      	lsrs	r2, r2, #16
 8007f76:	fb09 1102 	mla	r1, r9, r2, r1
 8007f7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f7e:	4567      	cmp	r7, ip
 8007f80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f84:	d8e6      	bhi.n	8007f54 <__multiply+0x10c>
 8007f86:	9a01      	ldr	r2, [sp, #4]
 8007f88:	50a9      	str	r1, [r5, r2]
 8007f8a:	3504      	adds	r5, #4
 8007f8c:	e79a      	b.n	8007ec4 <__multiply+0x7c>
 8007f8e:	3e01      	subs	r6, #1
 8007f90:	e79c      	b.n	8007ecc <__multiply+0x84>
 8007f92:	bf00      	nop
 8007f94:	08009c5d 	.word	0x08009c5d
 8007f98:	08009cd0 	.word	0x08009cd0

08007f9c <__pow5mult>:
 8007f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	f012 0203 	ands.w	r2, r2, #3
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460f      	mov	r7, r1
 8007faa:	d007      	beq.n	8007fbc <__pow5mult+0x20>
 8007fac:	4c25      	ldr	r4, [pc, #148]	; (8008044 <__pow5mult+0xa8>)
 8007fae:	3a01      	subs	r2, #1
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fb6:	f7ff fe9b 	bl	8007cf0 <__multadd>
 8007fba:	4607      	mov	r7, r0
 8007fbc:	10ad      	asrs	r5, r5, #2
 8007fbe:	d03d      	beq.n	800803c <__pow5mult+0xa0>
 8007fc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fc2:	b97c      	cbnz	r4, 8007fe4 <__pow5mult+0x48>
 8007fc4:	2010      	movs	r0, #16
 8007fc6:	f7ff fe1b 	bl	8007c00 <malloc>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6270      	str	r0, [r6, #36]	; 0x24
 8007fce:	b928      	cbnz	r0, 8007fdc <__pow5mult+0x40>
 8007fd0:	4b1d      	ldr	r3, [pc, #116]	; (8008048 <__pow5mult+0xac>)
 8007fd2:	481e      	ldr	r0, [pc, #120]	; (800804c <__pow5mult+0xb0>)
 8007fd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fd8:	f001 fa18 	bl	800940c <__assert_func>
 8007fdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fe0:	6004      	str	r4, [r0, #0]
 8007fe2:	60c4      	str	r4, [r0, #12]
 8007fe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fec:	b94c      	cbnz	r4, 8008002 <__pow5mult+0x66>
 8007fee:	f240 2171 	movw	r1, #625	; 0x271
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ff12 	bl	8007e1c <__i2b>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ffe:	4604      	mov	r4, r0
 8008000:	6003      	str	r3, [r0, #0]
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	07eb      	lsls	r3, r5, #31
 8008008:	d50a      	bpl.n	8008020 <__pow5mult+0x84>
 800800a:	4639      	mov	r1, r7
 800800c:	4622      	mov	r2, r4
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ff1a 	bl	8007e48 <__multiply>
 8008014:	4639      	mov	r1, r7
 8008016:	4680      	mov	r8, r0
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff fe47 	bl	8007cac <_Bfree>
 800801e:	4647      	mov	r7, r8
 8008020:	106d      	asrs	r5, r5, #1
 8008022:	d00b      	beq.n	800803c <__pow5mult+0xa0>
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	b938      	cbnz	r0, 8008038 <__pow5mult+0x9c>
 8008028:	4622      	mov	r2, r4
 800802a:	4621      	mov	r1, r4
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff ff0b 	bl	8007e48 <__multiply>
 8008032:	6020      	str	r0, [r4, #0]
 8008034:	f8c0 9000 	str.w	r9, [r0]
 8008038:	4604      	mov	r4, r0
 800803a:	e7e4      	b.n	8008006 <__pow5mult+0x6a>
 800803c:	4638      	mov	r0, r7
 800803e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008042:	bf00      	nop
 8008044:	08009e20 	.word	0x08009e20
 8008048:	08009beb 	.word	0x08009beb
 800804c:	08009cd0 	.word	0x08009cd0

08008050 <__lshift>:
 8008050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	460c      	mov	r4, r1
 8008056:	6849      	ldr	r1, [r1, #4]
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	4607      	mov	r7, r0
 8008062:	4691      	mov	r9, r2
 8008064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008068:	f108 0601 	add.w	r6, r8, #1
 800806c:	42b3      	cmp	r3, r6
 800806e:	db0b      	blt.n	8008088 <__lshift+0x38>
 8008070:	4638      	mov	r0, r7
 8008072:	f7ff fddb 	bl	8007c2c <_Balloc>
 8008076:	4605      	mov	r5, r0
 8008078:	b948      	cbnz	r0, 800808e <__lshift+0x3e>
 800807a:	4602      	mov	r2, r0
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <__lshift+0xd8>)
 800807e:	482b      	ldr	r0, [pc, #172]	; (800812c <__lshift+0xdc>)
 8008080:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008084:	f001 f9c2 	bl	800940c <__assert_func>
 8008088:	3101      	adds	r1, #1
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	e7ee      	b.n	800806c <__lshift+0x1c>
 800808e:	2300      	movs	r3, #0
 8008090:	f100 0114 	add.w	r1, r0, #20
 8008094:	f100 0210 	add.w	r2, r0, #16
 8008098:	4618      	mov	r0, r3
 800809a:	4553      	cmp	r3, sl
 800809c:	db37      	blt.n	800810e <__lshift+0xbe>
 800809e:	6920      	ldr	r0, [r4, #16]
 80080a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080a4:	f104 0314 	add.w	r3, r4, #20
 80080a8:	f019 091f 	ands.w	r9, r9, #31
 80080ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080b4:	d02f      	beq.n	8008116 <__lshift+0xc6>
 80080b6:	f1c9 0e20 	rsb	lr, r9, #32
 80080ba:	468a      	mov	sl, r1
 80080bc:	f04f 0c00 	mov.w	ip, #0
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	fa02 f209 	lsl.w	r2, r2, r9
 80080c6:	ea42 020c 	orr.w	r2, r2, ip
 80080ca:	f84a 2b04 	str.w	r2, [sl], #4
 80080ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d2:	4298      	cmp	r0, r3
 80080d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080d8:	d8f2      	bhi.n	80080c0 <__lshift+0x70>
 80080da:	1b03      	subs	r3, r0, r4
 80080dc:	3b15      	subs	r3, #21
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	3304      	adds	r3, #4
 80080e4:	f104 0215 	add.w	r2, r4, #21
 80080e8:	4290      	cmp	r0, r2
 80080ea:	bf38      	it	cc
 80080ec:	2304      	movcc	r3, #4
 80080ee:	f841 c003 	str.w	ip, [r1, r3]
 80080f2:	f1bc 0f00 	cmp.w	ip, #0
 80080f6:	d001      	beq.n	80080fc <__lshift+0xac>
 80080f8:	f108 0602 	add.w	r6, r8, #2
 80080fc:	3e01      	subs	r6, #1
 80080fe:	4638      	mov	r0, r7
 8008100:	612e      	str	r6, [r5, #16]
 8008102:	4621      	mov	r1, r4
 8008104:	f7ff fdd2 	bl	8007cac <_Bfree>
 8008108:	4628      	mov	r0, r5
 800810a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008112:	3301      	adds	r3, #1
 8008114:	e7c1      	b.n	800809a <__lshift+0x4a>
 8008116:	3904      	subs	r1, #4
 8008118:	f853 2b04 	ldr.w	r2, [r3], #4
 800811c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008120:	4298      	cmp	r0, r3
 8008122:	d8f9      	bhi.n	8008118 <__lshift+0xc8>
 8008124:	e7ea      	b.n	80080fc <__lshift+0xac>
 8008126:	bf00      	nop
 8008128:	08009c5d 	.word	0x08009c5d
 800812c:	08009cd0 	.word	0x08009cd0

08008130 <__mcmp>:
 8008130:	b530      	push	{r4, r5, lr}
 8008132:	6902      	ldr	r2, [r0, #16]
 8008134:	690c      	ldr	r4, [r1, #16]
 8008136:	1b12      	subs	r2, r2, r4
 8008138:	d10e      	bne.n	8008158 <__mcmp+0x28>
 800813a:	f100 0314 	add.w	r3, r0, #20
 800813e:	3114      	adds	r1, #20
 8008140:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008144:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008148:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800814c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008150:	42a5      	cmp	r5, r4
 8008152:	d003      	beq.n	800815c <__mcmp+0x2c>
 8008154:	d305      	bcc.n	8008162 <__mcmp+0x32>
 8008156:	2201      	movs	r2, #1
 8008158:	4610      	mov	r0, r2
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	4283      	cmp	r3, r0
 800815e:	d3f3      	bcc.n	8008148 <__mcmp+0x18>
 8008160:	e7fa      	b.n	8008158 <__mcmp+0x28>
 8008162:	f04f 32ff 	mov.w	r2, #4294967295
 8008166:	e7f7      	b.n	8008158 <__mcmp+0x28>

08008168 <__mdiff>:
 8008168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	4606      	mov	r6, r0
 8008170:	4611      	mov	r1, r2
 8008172:	4620      	mov	r0, r4
 8008174:	4690      	mov	r8, r2
 8008176:	f7ff ffdb 	bl	8008130 <__mcmp>
 800817a:	1e05      	subs	r5, r0, #0
 800817c:	d110      	bne.n	80081a0 <__mdiff+0x38>
 800817e:	4629      	mov	r1, r5
 8008180:	4630      	mov	r0, r6
 8008182:	f7ff fd53 	bl	8007c2c <_Balloc>
 8008186:	b930      	cbnz	r0, 8008196 <__mdiff+0x2e>
 8008188:	4b3a      	ldr	r3, [pc, #232]	; (8008274 <__mdiff+0x10c>)
 800818a:	4602      	mov	r2, r0
 800818c:	f240 2132 	movw	r1, #562	; 0x232
 8008190:	4839      	ldr	r0, [pc, #228]	; (8008278 <__mdiff+0x110>)
 8008192:	f001 f93b 	bl	800940c <__assert_func>
 8008196:	2301      	movs	r3, #1
 8008198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800819c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	bfa4      	itt	ge
 80081a2:	4643      	movge	r3, r8
 80081a4:	46a0      	movge	r8, r4
 80081a6:	4630      	mov	r0, r6
 80081a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081ac:	bfa6      	itte	ge
 80081ae:	461c      	movge	r4, r3
 80081b0:	2500      	movge	r5, #0
 80081b2:	2501      	movlt	r5, #1
 80081b4:	f7ff fd3a 	bl	8007c2c <_Balloc>
 80081b8:	b920      	cbnz	r0, 80081c4 <__mdiff+0x5c>
 80081ba:	4b2e      	ldr	r3, [pc, #184]	; (8008274 <__mdiff+0x10c>)
 80081bc:	4602      	mov	r2, r0
 80081be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081c2:	e7e5      	b.n	8008190 <__mdiff+0x28>
 80081c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081c8:	6926      	ldr	r6, [r4, #16]
 80081ca:	60c5      	str	r5, [r0, #12]
 80081cc:	f104 0914 	add.w	r9, r4, #20
 80081d0:	f108 0514 	add.w	r5, r8, #20
 80081d4:	f100 0e14 	add.w	lr, r0, #20
 80081d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081e0:	f108 0210 	add.w	r2, r8, #16
 80081e4:	46f2      	mov	sl, lr
 80081e6:	2100      	movs	r1, #0
 80081e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80081ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081f0:	fa1f f883 	uxth.w	r8, r3
 80081f4:	fa11 f18b 	uxtah	r1, r1, fp
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	eba1 0808 	sub.w	r8, r1, r8
 80081fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008202:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008206:	fa1f f888 	uxth.w	r8, r8
 800820a:	1419      	asrs	r1, r3, #16
 800820c:	454e      	cmp	r6, r9
 800820e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008212:	f84a 3b04 	str.w	r3, [sl], #4
 8008216:	d8e7      	bhi.n	80081e8 <__mdiff+0x80>
 8008218:	1b33      	subs	r3, r6, r4
 800821a:	3b15      	subs	r3, #21
 800821c:	f023 0303 	bic.w	r3, r3, #3
 8008220:	3304      	adds	r3, #4
 8008222:	3415      	adds	r4, #21
 8008224:	42a6      	cmp	r6, r4
 8008226:	bf38      	it	cc
 8008228:	2304      	movcc	r3, #4
 800822a:	441d      	add	r5, r3
 800822c:	4473      	add	r3, lr
 800822e:	469e      	mov	lr, r3
 8008230:	462e      	mov	r6, r5
 8008232:	4566      	cmp	r6, ip
 8008234:	d30e      	bcc.n	8008254 <__mdiff+0xec>
 8008236:	f10c 0203 	add.w	r2, ip, #3
 800823a:	1b52      	subs	r2, r2, r5
 800823c:	f022 0203 	bic.w	r2, r2, #3
 8008240:	3d03      	subs	r5, #3
 8008242:	45ac      	cmp	ip, r5
 8008244:	bf38      	it	cc
 8008246:	2200      	movcc	r2, #0
 8008248:	441a      	add	r2, r3
 800824a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800824e:	b17b      	cbz	r3, 8008270 <__mdiff+0x108>
 8008250:	6107      	str	r7, [r0, #16]
 8008252:	e7a3      	b.n	800819c <__mdiff+0x34>
 8008254:	f856 8b04 	ldr.w	r8, [r6], #4
 8008258:	fa11 f288 	uxtah	r2, r1, r8
 800825c:	1414      	asrs	r4, r2, #16
 800825e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008262:	b292      	uxth	r2, r2
 8008264:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008268:	f84e 2b04 	str.w	r2, [lr], #4
 800826c:	1421      	asrs	r1, r4, #16
 800826e:	e7e0      	b.n	8008232 <__mdiff+0xca>
 8008270:	3f01      	subs	r7, #1
 8008272:	e7ea      	b.n	800824a <__mdiff+0xe2>
 8008274:	08009c5d 	.word	0x08009c5d
 8008278:	08009cd0 	.word	0x08009cd0

0800827c <__d2b>:
 800827c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008280:	4689      	mov	r9, r1
 8008282:	2101      	movs	r1, #1
 8008284:	ec57 6b10 	vmov	r6, r7, d0
 8008288:	4690      	mov	r8, r2
 800828a:	f7ff fccf 	bl	8007c2c <_Balloc>
 800828e:	4604      	mov	r4, r0
 8008290:	b930      	cbnz	r0, 80082a0 <__d2b+0x24>
 8008292:	4602      	mov	r2, r0
 8008294:	4b25      	ldr	r3, [pc, #148]	; (800832c <__d2b+0xb0>)
 8008296:	4826      	ldr	r0, [pc, #152]	; (8008330 <__d2b+0xb4>)
 8008298:	f240 310a 	movw	r1, #778	; 0x30a
 800829c:	f001 f8b6 	bl	800940c <__assert_func>
 80082a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082a8:	bb35      	cbnz	r5, 80082f8 <__d2b+0x7c>
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	d028      	beq.n	8008302 <__d2b+0x86>
 80082b0:	4668      	mov	r0, sp
 80082b2:	9600      	str	r6, [sp, #0]
 80082b4:	f7ff fd82 	bl	8007dbc <__lo0bits>
 80082b8:	9900      	ldr	r1, [sp, #0]
 80082ba:	b300      	cbz	r0, 80082fe <__d2b+0x82>
 80082bc:	9a01      	ldr	r2, [sp, #4]
 80082be:	f1c0 0320 	rsb	r3, r0, #32
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	430b      	orrs	r3, r1
 80082c8:	40c2      	lsrs	r2, r0
 80082ca:	6163      	str	r3, [r4, #20]
 80082cc:	9201      	str	r2, [sp, #4]
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	61a3      	str	r3, [r4, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	bf14      	ite	ne
 80082d6:	2202      	movne	r2, #2
 80082d8:	2201      	moveq	r2, #1
 80082da:	6122      	str	r2, [r4, #16]
 80082dc:	b1d5      	cbz	r5, 8008314 <__d2b+0x98>
 80082de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082e2:	4405      	add	r5, r0
 80082e4:	f8c9 5000 	str.w	r5, [r9]
 80082e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082ec:	f8c8 0000 	str.w	r0, [r8]
 80082f0:	4620      	mov	r0, r4
 80082f2:	b003      	add	sp, #12
 80082f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082fc:	e7d5      	b.n	80082aa <__d2b+0x2e>
 80082fe:	6161      	str	r1, [r4, #20]
 8008300:	e7e5      	b.n	80082ce <__d2b+0x52>
 8008302:	a801      	add	r0, sp, #4
 8008304:	f7ff fd5a 	bl	8007dbc <__lo0bits>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	6163      	str	r3, [r4, #20]
 800830c:	2201      	movs	r2, #1
 800830e:	6122      	str	r2, [r4, #16]
 8008310:	3020      	adds	r0, #32
 8008312:	e7e3      	b.n	80082dc <__d2b+0x60>
 8008314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800831c:	f8c9 0000 	str.w	r0, [r9]
 8008320:	6918      	ldr	r0, [r3, #16]
 8008322:	f7ff fd2b 	bl	8007d7c <__hi0bits>
 8008326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800832a:	e7df      	b.n	80082ec <__d2b+0x70>
 800832c:	08009c5d 	.word	0x08009c5d
 8008330:	08009cd0 	.word	0x08009cd0

08008334 <_calloc_r>:
 8008334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008336:	fba1 2402 	umull	r2, r4, r1, r2
 800833a:	b94c      	cbnz	r4, 8008350 <_calloc_r+0x1c>
 800833c:	4611      	mov	r1, r2
 800833e:	9201      	str	r2, [sp, #4]
 8008340:	f000 f87a 	bl	8008438 <_malloc_r>
 8008344:	9a01      	ldr	r2, [sp, #4]
 8008346:	4605      	mov	r5, r0
 8008348:	b930      	cbnz	r0, 8008358 <_calloc_r+0x24>
 800834a:	4628      	mov	r0, r5
 800834c:	b003      	add	sp, #12
 800834e:	bd30      	pop	{r4, r5, pc}
 8008350:	220c      	movs	r2, #12
 8008352:	6002      	str	r2, [r0, #0]
 8008354:	2500      	movs	r5, #0
 8008356:	e7f8      	b.n	800834a <_calloc_r+0x16>
 8008358:	4621      	mov	r1, r4
 800835a:	f7fd fce5 	bl	8005d28 <memset>
 800835e:	e7f4      	b.n	800834a <_calloc_r+0x16>

08008360 <_free_r>:
 8008360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008362:	2900      	cmp	r1, #0
 8008364:	d044      	beq.n	80083f0 <_free_r+0x90>
 8008366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836a:	9001      	str	r0, [sp, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f1a1 0404 	sub.w	r4, r1, #4
 8008372:	bfb8      	it	lt
 8008374:	18e4      	addlt	r4, r4, r3
 8008376:	f001 f8cf 	bl	8009518 <__malloc_lock>
 800837a:	4a1e      	ldr	r2, [pc, #120]	; (80083f4 <_free_r+0x94>)
 800837c:	9801      	ldr	r0, [sp, #4]
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	b933      	cbnz	r3, 8008390 <_free_r+0x30>
 8008382:	6063      	str	r3, [r4, #4]
 8008384:	6014      	str	r4, [r2, #0]
 8008386:	b003      	add	sp, #12
 8008388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800838c:	f001 b8ca 	b.w	8009524 <__malloc_unlock>
 8008390:	42a3      	cmp	r3, r4
 8008392:	d908      	bls.n	80083a6 <_free_r+0x46>
 8008394:	6825      	ldr	r5, [r4, #0]
 8008396:	1961      	adds	r1, r4, r5
 8008398:	428b      	cmp	r3, r1
 800839a:	bf01      	itttt	eq
 800839c:	6819      	ldreq	r1, [r3, #0]
 800839e:	685b      	ldreq	r3, [r3, #4]
 80083a0:	1949      	addeq	r1, r1, r5
 80083a2:	6021      	streq	r1, [r4, #0]
 80083a4:	e7ed      	b.n	8008382 <_free_r+0x22>
 80083a6:	461a      	mov	r2, r3
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	b10b      	cbz	r3, 80083b0 <_free_r+0x50>
 80083ac:	42a3      	cmp	r3, r4
 80083ae:	d9fa      	bls.n	80083a6 <_free_r+0x46>
 80083b0:	6811      	ldr	r1, [r2, #0]
 80083b2:	1855      	adds	r5, r2, r1
 80083b4:	42a5      	cmp	r5, r4
 80083b6:	d10b      	bne.n	80083d0 <_free_r+0x70>
 80083b8:	6824      	ldr	r4, [r4, #0]
 80083ba:	4421      	add	r1, r4
 80083bc:	1854      	adds	r4, r2, r1
 80083be:	42a3      	cmp	r3, r4
 80083c0:	6011      	str	r1, [r2, #0]
 80083c2:	d1e0      	bne.n	8008386 <_free_r+0x26>
 80083c4:	681c      	ldr	r4, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	6053      	str	r3, [r2, #4]
 80083ca:	4421      	add	r1, r4
 80083cc:	6011      	str	r1, [r2, #0]
 80083ce:	e7da      	b.n	8008386 <_free_r+0x26>
 80083d0:	d902      	bls.n	80083d8 <_free_r+0x78>
 80083d2:	230c      	movs	r3, #12
 80083d4:	6003      	str	r3, [r0, #0]
 80083d6:	e7d6      	b.n	8008386 <_free_r+0x26>
 80083d8:	6825      	ldr	r5, [r4, #0]
 80083da:	1961      	adds	r1, r4, r5
 80083dc:	428b      	cmp	r3, r1
 80083de:	bf04      	itt	eq
 80083e0:	6819      	ldreq	r1, [r3, #0]
 80083e2:	685b      	ldreq	r3, [r3, #4]
 80083e4:	6063      	str	r3, [r4, #4]
 80083e6:	bf04      	itt	eq
 80083e8:	1949      	addeq	r1, r1, r5
 80083ea:	6021      	streq	r1, [r4, #0]
 80083ec:	6054      	str	r4, [r2, #4]
 80083ee:	e7ca      	b.n	8008386 <_free_r+0x26>
 80083f0:	b003      	add	sp, #12
 80083f2:	bd30      	pop	{r4, r5, pc}
 80083f4:	20000460 	.word	0x20000460

080083f8 <sbrk_aligned>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	4e0e      	ldr	r6, [pc, #56]	; (8008434 <sbrk_aligned+0x3c>)
 80083fc:	460c      	mov	r4, r1
 80083fe:	6831      	ldr	r1, [r6, #0]
 8008400:	4605      	mov	r5, r0
 8008402:	b911      	cbnz	r1, 800840a <sbrk_aligned+0x12>
 8008404:	f000 fd9a 	bl	8008f3c <_sbrk_r>
 8008408:	6030      	str	r0, [r6, #0]
 800840a:	4621      	mov	r1, r4
 800840c:	4628      	mov	r0, r5
 800840e:	f000 fd95 	bl	8008f3c <_sbrk_r>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	d00a      	beq.n	800842c <sbrk_aligned+0x34>
 8008416:	1cc4      	adds	r4, r0, #3
 8008418:	f024 0403 	bic.w	r4, r4, #3
 800841c:	42a0      	cmp	r0, r4
 800841e:	d007      	beq.n	8008430 <sbrk_aligned+0x38>
 8008420:	1a21      	subs	r1, r4, r0
 8008422:	4628      	mov	r0, r5
 8008424:	f000 fd8a 	bl	8008f3c <_sbrk_r>
 8008428:	3001      	adds	r0, #1
 800842a:	d101      	bne.n	8008430 <sbrk_aligned+0x38>
 800842c:	f04f 34ff 	mov.w	r4, #4294967295
 8008430:	4620      	mov	r0, r4
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	20000464 	.word	0x20000464

08008438 <_malloc_r>:
 8008438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	1ccd      	adds	r5, r1, #3
 800843e:	f025 0503 	bic.w	r5, r5, #3
 8008442:	3508      	adds	r5, #8
 8008444:	2d0c      	cmp	r5, #12
 8008446:	bf38      	it	cc
 8008448:	250c      	movcc	r5, #12
 800844a:	2d00      	cmp	r5, #0
 800844c:	4607      	mov	r7, r0
 800844e:	db01      	blt.n	8008454 <_malloc_r+0x1c>
 8008450:	42a9      	cmp	r1, r5
 8008452:	d905      	bls.n	8008460 <_malloc_r+0x28>
 8008454:	230c      	movs	r3, #12
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	2600      	movs	r6, #0
 800845a:	4630      	mov	r0, r6
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	4e2e      	ldr	r6, [pc, #184]	; (800851c <_malloc_r+0xe4>)
 8008462:	f001 f859 	bl	8009518 <__malloc_lock>
 8008466:	6833      	ldr	r3, [r6, #0]
 8008468:	461c      	mov	r4, r3
 800846a:	bb34      	cbnz	r4, 80084ba <_malloc_r+0x82>
 800846c:	4629      	mov	r1, r5
 800846e:	4638      	mov	r0, r7
 8008470:	f7ff ffc2 	bl	80083f8 <sbrk_aligned>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	4604      	mov	r4, r0
 8008478:	d14d      	bne.n	8008516 <_malloc_r+0xde>
 800847a:	6834      	ldr	r4, [r6, #0]
 800847c:	4626      	mov	r6, r4
 800847e:	2e00      	cmp	r6, #0
 8008480:	d140      	bne.n	8008504 <_malloc_r+0xcc>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	4631      	mov	r1, r6
 8008486:	4638      	mov	r0, r7
 8008488:	eb04 0803 	add.w	r8, r4, r3
 800848c:	f000 fd56 	bl	8008f3c <_sbrk_r>
 8008490:	4580      	cmp	r8, r0
 8008492:	d13a      	bne.n	800850a <_malloc_r+0xd2>
 8008494:	6821      	ldr	r1, [r4, #0]
 8008496:	3503      	adds	r5, #3
 8008498:	1a6d      	subs	r5, r5, r1
 800849a:	f025 0503 	bic.w	r5, r5, #3
 800849e:	3508      	adds	r5, #8
 80084a0:	2d0c      	cmp	r5, #12
 80084a2:	bf38      	it	cc
 80084a4:	250c      	movcc	r5, #12
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ffa5 	bl	80083f8 <sbrk_aligned>
 80084ae:	3001      	adds	r0, #1
 80084b0:	d02b      	beq.n	800850a <_malloc_r+0xd2>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	442b      	add	r3, r5
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	e00e      	b.n	80084d8 <_malloc_r+0xa0>
 80084ba:	6822      	ldr	r2, [r4, #0]
 80084bc:	1b52      	subs	r2, r2, r5
 80084be:	d41e      	bmi.n	80084fe <_malloc_r+0xc6>
 80084c0:	2a0b      	cmp	r2, #11
 80084c2:	d916      	bls.n	80084f2 <_malloc_r+0xba>
 80084c4:	1961      	adds	r1, r4, r5
 80084c6:	42a3      	cmp	r3, r4
 80084c8:	6025      	str	r5, [r4, #0]
 80084ca:	bf18      	it	ne
 80084cc:	6059      	strne	r1, [r3, #4]
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	bf08      	it	eq
 80084d2:	6031      	streq	r1, [r6, #0]
 80084d4:	5162      	str	r2, [r4, r5]
 80084d6:	604b      	str	r3, [r1, #4]
 80084d8:	4638      	mov	r0, r7
 80084da:	f104 060b 	add.w	r6, r4, #11
 80084de:	f001 f821 	bl	8009524 <__malloc_unlock>
 80084e2:	f026 0607 	bic.w	r6, r6, #7
 80084e6:	1d23      	adds	r3, r4, #4
 80084e8:	1af2      	subs	r2, r6, r3
 80084ea:	d0b6      	beq.n	800845a <_malloc_r+0x22>
 80084ec:	1b9b      	subs	r3, r3, r6
 80084ee:	50a3      	str	r3, [r4, r2]
 80084f0:	e7b3      	b.n	800845a <_malloc_r+0x22>
 80084f2:	6862      	ldr	r2, [r4, #4]
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	bf0c      	ite	eq
 80084f8:	6032      	streq	r2, [r6, #0]
 80084fa:	605a      	strne	r2, [r3, #4]
 80084fc:	e7ec      	b.n	80084d8 <_malloc_r+0xa0>
 80084fe:	4623      	mov	r3, r4
 8008500:	6864      	ldr	r4, [r4, #4]
 8008502:	e7b2      	b.n	800846a <_malloc_r+0x32>
 8008504:	4634      	mov	r4, r6
 8008506:	6876      	ldr	r6, [r6, #4]
 8008508:	e7b9      	b.n	800847e <_malloc_r+0x46>
 800850a:	230c      	movs	r3, #12
 800850c:	603b      	str	r3, [r7, #0]
 800850e:	4638      	mov	r0, r7
 8008510:	f001 f808 	bl	8009524 <__malloc_unlock>
 8008514:	e7a1      	b.n	800845a <_malloc_r+0x22>
 8008516:	6025      	str	r5, [r4, #0]
 8008518:	e7de      	b.n	80084d8 <_malloc_r+0xa0>
 800851a:	bf00      	nop
 800851c:	20000460 	.word	0x20000460

08008520 <__sfputc_r>:
 8008520:	6893      	ldr	r3, [r2, #8]
 8008522:	3b01      	subs	r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	b410      	push	{r4}
 8008528:	6093      	str	r3, [r2, #8]
 800852a:	da08      	bge.n	800853e <__sfputc_r+0x1e>
 800852c:	6994      	ldr	r4, [r2, #24]
 800852e:	42a3      	cmp	r3, r4
 8008530:	db01      	blt.n	8008536 <__sfputc_r+0x16>
 8008532:	290a      	cmp	r1, #10
 8008534:	d103      	bne.n	800853e <__sfputc_r+0x1e>
 8008536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800853a:	f7fe b9d3 	b.w	80068e4 <__swbuf_r>
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	1c58      	adds	r0, r3, #1
 8008542:	6010      	str	r0, [r2, #0]
 8008544:	7019      	strb	r1, [r3, #0]
 8008546:	4608      	mov	r0, r1
 8008548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800854c:	4770      	bx	lr

0800854e <__sfputs_r>:
 800854e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008550:	4606      	mov	r6, r0
 8008552:	460f      	mov	r7, r1
 8008554:	4614      	mov	r4, r2
 8008556:	18d5      	adds	r5, r2, r3
 8008558:	42ac      	cmp	r4, r5
 800855a:	d101      	bne.n	8008560 <__sfputs_r+0x12>
 800855c:	2000      	movs	r0, #0
 800855e:	e007      	b.n	8008570 <__sfputs_r+0x22>
 8008560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008564:	463a      	mov	r2, r7
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff ffda 	bl	8008520 <__sfputc_r>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d1f3      	bne.n	8008558 <__sfputs_r+0xa>
 8008570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008574 <_vfiprintf_r>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	460d      	mov	r5, r1
 800857a:	b09d      	sub	sp, #116	; 0x74
 800857c:	4614      	mov	r4, r2
 800857e:	4698      	mov	r8, r3
 8008580:	4606      	mov	r6, r0
 8008582:	b118      	cbz	r0, 800858c <_vfiprintf_r+0x18>
 8008584:	6983      	ldr	r3, [r0, #24]
 8008586:	b90b      	cbnz	r3, 800858c <_vfiprintf_r+0x18>
 8008588:	f7ff fa14 	bl	80079b4 <__sinit>
 800858c:	4b89      	ldr	r3, [pc, #548]	; (80087b4 <_vfiprintf_r+0x240>)
 800858e:	429d      	cmp	r5, r3
 8008590:	d11b      	bne.n	80085ca <_vfiprintf_r+0x56>
 8008592:	6875      	ldr	r5, [r6, #4]
 8008594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008596:	07d9      	lsls	r1, r3, #31
 8008598:	d405      	bmi.n	80085a6 <_vfiprintf_r+0x32>
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	059a      	lsls	r2, r3, #22
 800859e:	d402      	bmi.n	80085a6 <_vfiprintf_r+0x32>
 80085a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085a2:	f7ff fac6 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	071b      	lsls	r3, r3, #28
 80085aa:	d501      	bpl.n	80085b0 <_vfiprintf_r+0x3c>
 80085ac:	692b      	ldr	r3, [r5, #16]
 80085ae:	b9eb      	cbnz	r3, 80085ec <_vfiprintf_r+0x78>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7fe f9e8 	bl	8006988 <__swsetup_r>
 80085b8:	b1c0      	cbz	r0, 80085ec <_vfiprintf_r+0x78>
 80085ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085bc:	07dc      	lsls	r4, r3, #31
 80085be:	d50e      	bpl.n	80085de <_vfiprintf_r+0x6a>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	b01d      	add	sp, #116	; 0x74
 80085c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ca:	4b7b      	ldr	r3, [pc, #492]	; (80087b8 <_vfiprintf_r+0x244>)
 80085cc:	429d      	cmp	r5, r3
 80085ce:	d101      	bne.n	80085d4 <_vfiprintf_r+0x60>
 80085d0:	68b5      	ldr	r5, [r6, #8]
 80085d2:	e7df      	b.n	8008594 <_vfiprintf_r+0x20>
 80085d4:	4b79      	ldr	r3, [pc, #484]	; (80087bc <_vfiprintf_r+0x248>)
 80085d6:	429d      	cmp	r5, r3
 80085d8:	bf08      	it	eq
 80085da:	68f5      	ldreq	r5, [r6, #12]
 80085dc:	e7da      	b.n	8008594 <_vfiprintf_r+0x20>
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	0598      	lsls	r0, r3, #22
 80085e2:	d4ed      	bmi.n	80085c0 <_vfiprintf_r+0x4c>
 80085e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085e6:	f7ff faa5 	bl	8007b34 <__retarget_lock_release_recursive>
 80085ea:	e7e9      	b.n	80085c0 <_vfiprintf_r+0x4c>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9309      	str	r3, [sp, #36]	; 0x24
 80085f0:	2320      	movs	r3, #32
 80085f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085fa:	2330      	movs	r3, #48	; 0x30
 80085fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087c0 <_vfiprintf_r+0x24c>
 8008600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008604:	f04f 0901 	mov.w	r9, #1
 8008608:	4623      	mov	r3, r4
 800860a:	469a      	mov	sl, r3
 800860c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008610:	b10a      	cbz	r2, 8008616 <_vfiprintf_r+0xa2>
 8008612:	2a25      	cmp	r2, #37	; 0x25
 8008614:	d1f9      	bne.n	800860a <_vfiprintf_r+0x96>
 8008616:	ebba 0b04 	subs.w	fp, sl, r4
 800861a:	d00b      	beq.n	8008634 <_vfiprintf_r+0xc0>
 800861c:	465b      	mov	r3, fp
 800861e:	4622      	mov	r2, r4
 8008620:	4629      	mov	r1, r5
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ff93 	bl	800854e <__sfputs_r>
 8008628:	3001      	adds	r0, #1
 800862a:	f000 80aa 	beq.w	8008782 <_vfiprintf_r+0x20e>
 800862e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008630:	445a      	add	r2, fp
 8008632:	9209      	str	r2, [sp, #36]	; 0x24
 8008634:	f89a 3000 	ldrb.w	r3, [sl]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80a2 	beq.w	8008782 <_vfiprintf_r+0x20e>
 800863e:	2300      	movs	r3, #0
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008648:	f10a 0a01 	add.w	sl, sl, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	9307      	str	r3, [sp, #28]
 8008650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008654:	931a      	str	r3, [sp, #104]	; 0x68
 8008656:	4654      	mov	r4, sl
 8008658:	2205      	movs	r2, #5
 800865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865e:	4858      	ldr	r0, [pc, #352]	; (80087c0 <_vfiprintf_r+0x24c>)
 8008660:	f7f7 fdde 	bl	8000220 <memchr>
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	b9d8      	cbnz	r0, 80086a0 <_vfiprintf_r+0x12c>
 8008668:	06d1      	lsls	r1, r2, #27
 800866a:	bf44      	itt	mi
 800866c:	2320      	movmi	r3, #32
 800866e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008672:	0713      	lsls	r3, r2, #28
 8008674:	bf44      	itt	mi
 8008676:	232b      	movmi	r3, #43	; 0x2b
 8008678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867c:	f89a 3000 	ldrb.w	r3, [sl]
 8008680:	2b2a      	cmp	r3, #42	; 0x2a
 8008682:	d015      	beq.n	80086b0 <_vfiprintf_r+0x13c>
 8008684:	9a07      	ldr	r2, [sp, #28]
 8008686:	4654      	mov	r4, sl
 8008688:	2000      	movs	r0, #0
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	4621      	mov	r1, r4
 8008690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008694:	3b30      	subs	r3, #48	; 0x30
 8008696:	2b09      	cmp	r3, #9
 8008698:	d94e      	bls.n	8008738 <_vfiprintf_r+0x1c4>
 800869a:	b1b0      	cbz	r0, 80086ca <_vfiprintf_r+0x156>
 800869c:	9207      	str	r2, [sp, #28]
 800869e:	e014      	b.n	80086ca <_vfiprintf_r+0x156>
 80086a0:	eba0 0308 	sub.w	r3, r0, r8
 80086a4:	fa09 f303 	lsl.w	r3, r9, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	46a2      	mov	sl, r4
 80086ae:	e7d2      	b.n	8008656 <_vfiprintf_r+0xe2>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	1d19      	adds	r1, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	9103      	str	r1, [sp, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bfbb      	ittet	lt
 80086bc:	425b      	neglt	r3, r3
 80086be:	f042 0202 	orrlt.w	r2, r2, #2
 80086c2:	9307      	strge	r3, [sp, #28]
 80086c4:	9307      	strlt	r3, [sp, #28]
 80086c6:	bfb8      	it	lt
 80086c8:	9204      	strlt	r2, [sp, #16]
 80086ca:	7823      	ldrb	r3, [r4, #0]
 80086cc:	2b2e      	cmp	r3, #46	; 0x2e
 80086ce:	d10c      	bne.n	80086ea <_vfiprintf_r+0x176>
 80086d0:	7863      	ldrb	r3, [r4, #1]
 80086d2:	2b2a      	cmp	r3, #42	; 0x2a
 80086d4:	d135      	bne.n	8008742 <_vfiprintf_r+0x1ce>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	9203      	str	r2, [sp, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bfb8      	it	lt
 80086e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80086e6:	3402      	adds	r4, #2
 80086e8:	9305      	str	r3, [sp, #20]
 80086ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087d0 <_vfiprintf_r+0x25c>
 80086ee:	7821      	ldrb	r1, [r4, #0]
 80086f0:	2203      	movs	r2, #3
 80086f2:	4650      	mov	r0, sl
 80086f4:	f7f7 fd94 	bl	8000220 <memchr>
 80086f8:	b140      	cbz	r0, 800870c <_vfiprintf_r+0x198>
 80086fa:	2340      	movs	r3, #64	; 0x40
 80086fc:	eba0 000a 	sub.w	r0, r0, sl
 8008700:	fa03 f000 	lsl.w	r0, r3, r0
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	4303      	orrs	r3, r0
 8008708:	3401      	adds	r4, #1
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008710:	482c      	ldr	r0, [pc, #176]	; (80087c4 <_vfiprintf_r+0x250>)
 8008712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008716:	2206      	movs	r2, #6
 8008718:	f7f7 fd82 	bl	8000220 <memchr>
 800871c:	2800      	cmp	r0, #0
 800871e:	d03f      	beq.n	80087a0 <_vfiprintf_r+0x22c>
 8008720:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <_vfiprintf_r+0x254>)
 8008722:	bb1b      	cbnz	r3, 800876c <_vfiprintf_r+0x1f8>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	3307      	adds	r3, #7
 8008728:	f023 0307 	bic.w	r3, r3, #7
 800872c:	3308      	adds	r3, #8
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	443b      	add	r3, r7
 8008734:	9309      	str	r3, [sp, #36]	; 0x24
 8008736:	e767      	b.n	8008608 <_vfiprintf_r+0x94>
 8008738:	fb0c 3202 	mla	r2, ip, r2, r3
 800873c:	460c      	mov	r4, r1
 800873e:	2001      	movs	r0, #1
 8008740:	e7a5      	b.n	800868e <_vfiprintf_r+0x11a>
 8008742:	2300      	movs	r3, #0
 8008744:	3401      	adds	r4, #1
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	4619      	mov	r1, r3
 800874a:	f04f 0c0a 	mov.w	ip, #10
 800874e:	4620      	mov	r0, r4
 8008750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008754:	3a30      	subs	r2, #48	; 0x30
 8008756:	2a09      	cmp	r2, #9
 8008758:	d903      	bls.n	8008762 <_vfiprintf_r+0x1ee>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0c5      	beq.n	80086ea <_vfiprintf_r+0x176>
 800875e:	9105      	str	r1, [sp, #20]
 8008760:	e7c3      	b.n	80086ea <_vfiprintf_r+0x176>
 8008762:	fb0c 2101 	mla	r1, ip, r1, r2
 8008766:	4604      	mov	r4, r0
 8008768:	2301      	movs	r3, #1
 800876a:	e7f0      	b.n	800874e <_vfiprintf_r+0x1da>
 800876c:	ab03      	add	r3, sp, #12
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	462a      	mov	r2, r5
 8008772:	4b16      	ldr	r3, [pc, #88]	; (80087cc <_vfiprintf_r+0x258>)
 8008774:	a904      	add	r1, sp, #16
 8008776:	4630      	mov	r0, r6
 8008778:	f7fd fb7e 	bl	8005e78 <_printf_float>
 800877c:	4607      	mov	r7, r0
 800877e:	1c78      	adds	r0, r7, #1
 8008780:	d1d6      	bne.n	8008730 <_vfiprintf_r+0x1bc>
 8008782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008784:	07d9      	lsls	r1, r3, #31
 8008786:	d405      	bmi.n	8008794 <_vfiprintf_r+0x220>
 8008788:	89ab      	ldrh	r3, [r5, #12]
 800878a:	059a      	lsls	r2, r3, #22
 800878c:	d402      	bmi.n	8008794 <_vfiprintf_r+0x220>
 800878e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008790:	f7ff f9d0 	bl	8007b34 <__retarget_lock_release_recursive>
 8008794:	89ab      	ldrh	r3, [r5, #12]
 8008796:	065b      	lsls	r3, r3, #25
 8008798:	f53f af12 	bmi.w	80085c0 <_vfiprintf_r+0x4c>
 800879c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800879e:	e711      	b.n	80085c4 <_vfiprintf_r+0x50>
 80087a0:	ab03      	add	r3, sp, #12
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	462a      	mov	r2, r5
 80087a6:	4b09      	ldr	r3, [pc, #36]	; (80087cc <_vfiprintf_r+0x258>)
 80087a8:	a904      	add	r1, sp, #16
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7fd fe08 	bl	80063c0 <_printf_i>
 80087b0:	e7e4      	b.n	800877c <_vfiprintf_r+0x208>
 80087b2:	bf00      	nop
 80087b4:	08009c90 	.word	0x08009c90
 80087b8:	08009cb0 	.word	0x08009cb0
 80087bc:	08009c70 	.word	0x08009c70
 80087c0:	08009e2c 	.word	0x08009e2c
 80087c4:	08009e36 	.word	0x08009e36
 80087c8:	08005e79 	.word	0x08005e79
 80087cc:	0800854f 	.word	0x0800854f
 80087d0:	08009e32 	.word	0x08009e32

080087d4 <__svfiscanf_r>:
 80087d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	461d      	mov	r5, r3
 80087da:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80087dc:	07df      	lsls	r7, r3, #31
 80087de:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80087e2:	4606      	mov	r6, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	4692      	mov	sl, r2
 80087e8:	d405      	bmi.n	80087f6 <__svfiscanf_r+0x22>
 80087ea:	898b      	ldrh	r3, [r1, #12]
 80087ec:	0598      	lsls	r0, r3, #22
 80087ee:	d402      	bmi.n	80087f6 <__svfiscanf_r+0x22>
 80087f0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80087f2:	f7ff f99e 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80087f6:	2300      	movs	r3, #0
 80087f8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80087fc:	4ba6      	ldr	r3, [pc, #664]	; (8008a98 <__svfiscanf_r+0x2c4>)
 80087fe:	93a0      	str	r3, [sp, #640]	; 0x280
 8008800:	f10d 0804 	add.w	r8, sp, #4
 8008804:	4ba5      	ldr	r3, [pc, #660]	; (8008a9c <__svfiscanf_r+0x2c8>)
 8008806:	4fa6      	ldr	r7, [pc, #664]	; (8008aa0 <__svfiscanf_r+0x2cc>)
 8008808:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008aa4 <__svfiscanf_r+0x2d0>
 800880c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008810:	93a1      	str	r3, [sp, #644]	; 0x284
 8008812:	9500      	str	r5, [sp, #0]
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 8173 	beq.w	8008b04 <__svfiscanf_r+0x330>
 800881e:	5dd9      	ldrb	r1, [r3, r7]
 8008820:	f011 0108 	ands.w	r1, r1, #8
 8008824:	f10a 0501 	add.w	r5, sl, #1
 8008828:	d019      	beq.n	800885e <__svfiscanf_r+0x8a>
 800882a:	6863      	ldr	r3, [r4, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd0f      	ble.n	8008850 <__svfiscanf_r+0x7c>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	5cba      	ldrb	r2, [r7, r2]
 8008836:	0711      	lsls	r1, r2, #28
 8008838:	d401      	bmi.n	800883e <__svfiscanf_r+0x6a>
 800883a:	46aa      	mov	sl, r5
 800883c:	e7ea      	b.n	8008814 <__svfiscanf_r+0x40>
 800883e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008840:	3201      	adds	r2, #1
 8008842:	9245      	str	r2, [sp, #276]	; 0x114
 8008844:	6862      	ldr	r2, [r4, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	3a01      	subs	r2, #1
 800884a:	6062      	str	r2, [r4, #4]
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	e7ec      	b.n	800882a <__svfiscanf_r+0x56>
 8008850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008852:	4621      	mov	r1, r4
 8008854:	4630      	mov	r0, r6
 8008856:	4798      	blx	r3
 8008858:	2800      	cmp	r0, #0
 800885a:	d0e9      	beq.n	8008830 <__svfiscanf_r+0x5c>
 800885c:	e7ed      	b.n	800883a <__svfiscanf_r+0x66>
 800885e:	2b25      	cmp	r3, #37	; 0x25
 8008860:	d012      	beq.n	8008888 <__svfiscanf_r+0xb4>
 8008862:	469a      	mov	sl, r3
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f340 8095 	ble.w	8008996 <__svfiscanf_r+0x1c2>
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	7813      	ldrb	r3, [r2, #0]
 8008870:	4553      	cmp	r3, sl
 8008872:	f040 8147 	bne.w	8008b04 <__svfiscanf_r+0x330>
 8008876:	6863      	ldr	r3, [r4, #4]
 8008878:	3b01      	subs	r3, #1
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800887e:	3201      	adds	r2, #1
 8008880:	3301      	adds	r3, #1
 8008882:	6022      	str	r2, [r4, #0]
 8008884:	9345      	str	r3, [sp, #276]	; 0x114
 8008886:	e7d8      	b.n	800883a <__svfiscanf_r+0x66>
 8008888:	9141      	str	r1, [sp, #260]	; 0x104
 800888a:	9143      	str	r1, [sp, #268]	; 0x10c
 800888c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008890:	2b2a      	cmp	r3, #42	; 0x2a
 8008892:	bf02      	ittt	eq
 8008894:	2310      	moveq	r3, #16
 8008896:	9341      	streq	r3, [sp, #260]	; 0x104
 8008898:	f10a 0502 	addeq.w	r5, sl, #2
 800889c:	220a      	movs	r2, #10
 800889e:	46aa      	mov	sl, r5
 80088a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80088a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d91e      	bls.n	80088ea <__svfiscanf_r+0x116>
 80088ac:	487d      	ldr	r0, [pc, #500]	; (8008aa4 <__svfiscanf_r+0x2d0>)
 80088ae:	2203      	movs	r2, #3
 80088b0:	f7f7 fcb6 	bl	8000220 <memchr>
 80088b4:	b140      	cbz	r0, 80088c8 <__svfiscanf_r+0xf4>
 80088b6:	2301      	movs	r3, #1
 80088b8:	eba0 0009 	sub.w	r0, r0, r9
 80088bc:	fa03 f000 	lsl.w	r0, r3, r0
 80088c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80088c2:	4318      	orrs	r0, r3
 80088c4:	9041      	str	r0, [sp, #260]	; 0x104
 80088c6:	4655      	mov	r5, sl
 80088c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088cc:	2b78      	cmp	r3, #120	; 0x78
 80088ce:	d807      	bhi.n	80088e0 <__svfiscanf_r+0x10c>
 80088d0:	2b57      	cmp	r3, #87	; 0x57
 80088d2:	d811      	bhi.n	80088f8 <__svfiscanf_r+0x124>
 80088d4:	2b25      	cmp	r3, #37	; 0x25
 80088d6:	d0c4      	beq.n	8008862 <__svfiscanf_r+0x8e>
 80088d8:	d858      	bhi.n	800898c <__svfiscanf_r+0x1b8>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80c8 	beq.w	8008a70 <__svfiscanf_r+0x29c>
 80088e0:	2303      	movs	r3, #3
 80088e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80088e4:	230a      	movs	r3, #10
 80088e6:	9342      	str	r3, [sp, #264]	; 0x108
 80088e8:	e07c      	b.n	80089e4 <__svfiscanf_r+0x210>
 80088ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80088ec:	fb02 1103 	mla	r1, r2, r3, r1
 80088f0:	3930      	subs	r1, #48	; 0x30
 80088f2:	9143      	str	r1, [sp, #268]	; 0x10c
 80088f4:	4655      	mov	r5, sl
 80088f6:	e7d2      	b.n	800889e <__svfiscanf_r+0xca>
 80088f8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80088fc:	2a20      	cmp	r2, #32
 80088fe:	d8ef      	bhi.n	80088e0 <__svfiscanf_r+0x10c>
 8008900:	a101      	add	r1, pc, #4	; (adr r1, 8008908 <__svfiscanf_r+0x134>)
 8008902:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008906:	bf00      	nop
 8008908:	080089cf 	.word	0x080089cf
 800890c:	080088e1 	.word	0x080088e1
 8008910:	080088e1 	.word	0x080088e1
 8008914:	08008a2d 	.word	0x08008a2d
 8008918:	080088e1 	.word	0x080088e1
 800891c:	080088e1 	.word	0x080088e1
 8008920:	080088e1 	.word	0x080088e1
 8008924:	080088e1 	.word	0x080088e1
 8008928:	080088e1 	.word	0x080088e1
 800892c:	080088e1 	.word	0x080088e1
 8008930:	080088e1 	.word	0x080088e1
 8008934:	08008a43 	.word	0x08008a43
 8008938:	08008a19 	.word	0x08008a19
 800893c:	08008993 	.word	0x08008993
 8008940:	08008993 	.word	0x08008993
 8008944:	08008993 	.word	0x08008993
 8008948:	080088e1 	.word	0x080088e1
 800894c:	08008a1d 	.word	0x08008a1d
 8008950:	080088e1 	.word	0x080088e1
 8008954:	080088e1 	.word	0x080088e1
 8008958:	080088e1 	.word	0x080088e1
 800895c:	080088e1 	.word	0x080088e1
 8008960:	08008a53 	.word	0x08008a53
 8008964:	08008a25 	.word	0x08008a25
 8008968:	080089c7 	.word	0x080089c7
 800896c:	080088e1 	.word	0x080088e1
 8008970:	080088e1 	.word	0x080088e1
 8008974:	08008a4f 	.word	0x08008a4f
 8008978:	080088e1 	.word	0x080088e1
 800897c:	08008a19 	.word	0x08008a19
 8008980:	080088e1 	.word	0x080088e1
 8008984:	080088e1 	.word	0x080088e1
 8008988:	080089cf 	.word	0x080089cf
 800898c:	3b45      	subs	r3, #69	; 0x45
 800898e:	2b02      	cmp	r3, #2
 8008990:	d8a6      	bhi.n	80088e0 <__svfiscanf_r+0x10c>
 8008992:	2305      	movs	r3, #5
 8008994:	e025      	b.n	80089e2 <__svfiscanf_r+0x20e>
 8008996:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008998:	4621      	mov	r1, r4
 800899a:	4630      	mov	r0, r6
 800899c:	4798      	blx	r3
 800899e:	2800      	cmp	r0, #0
 80089a0:	f43f af64 	beq.w	800886c <__svfiscanf_r+0x98>
 80089a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089a6:	07da      	lsls	r2, r3, #31
 80089a8:	f140 80a4 	bpl.w	8008af4 <__svfiscanf_r+0x320>
 80089ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d067      	beq.n	8008a82 <__svfiscanf_r+0x2ae>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80089b8:	bf18      	it	ne
 80089ba:	f04f 30ff 	movne.w	r0, #4294967295
 80089be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80089c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089c8:	f042 0220 	orr.w	r2, r2, #32
 80089cc:	9241      	str	r2, [sp, #260]	; 0x104
 80089ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089d4:	9241      	str	r2, [sp, #260]	; 0x104
 80089d6:	2210      	movs	r2, #16
 80089d8:	2b6f      	cmp	r3, #111	; 0x6f
 80089da:	9242      	str	r2, [sp, #264]	; 0x108
 80089dc:	bf34      	ite	cc
 80089de:	2303      	movcc	r3, #3
 80089e0:	2304      	movcs	r3, #4
 80089e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd4e      	ble.n	8008a88 <__svfiscanf_r+0x2b4>
 80089ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089ec:	065b      	lsls	r3, r3, #25
 80089ee:	d404      	bmi.n	80089fa <__svfiscanf_r+0x226>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	5cba      	ldrb	r2, [r7, r2]
 80089f6:	0710      	lsls	r0, r2, #28
 80089f8:	d456      	bmi.n	8008aa8 <__svfiscanf_r+0x2d4>
 80089fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	dc65      	bgt.n	8008acc <__svfiscanf_r+0x2f8>
 8008a00:	466b      	mov	r3, sp
 8008a02:	4622      	mov	r2, r4
 8008a04:	a941      	add	r1, sp, #260	; 0x104
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f8b2 	bl	8008b70 <_scanf_chars>
 8008a0c:	2801      	cmp	r0, #1
 8008a0e:	d079      	beq.n	8008b04 <__svfiscanf_r+0x330>
 8008a10:	2802      	cmp	r0, #2
 8008a12:	f47f af12 	bne.w	800883a <__svfiscanf_r+0x66>
 8008a16:	e7c5      	b.n	80089a4 <__svfiscanf_r+0x1d0>
 8008a18:	220a      	movs	r2, #10
 8008a1a:	e7dd      	b.n	80089d8 <__svfiscanf_r+0x204>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9342      	str	r3, [sp, #264]	; 0x108
 8008a20:	2303      	movs	r3, #3
 8008a22:	e7de      	b.n	80089e2 <__svfiscanf_r+0x20e>
 8008a24:	2308      	movs	r3, #8
 8008a26:	9342      	str	r3, [sp, #264]	; 0x108
 8008a28:	2304      	movs	r3, #4
 8008a2a:	e7da      	b.n	80089e2 <__svfiscanf_r+0x20e>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4640      	mov	r0, r8
 8008a30:	f000 fa94 	bl	8008f5c <__sccl>
 8008a34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3a:	9341      	str	r3, [sp, #260]	; 0x104
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e7cf      	b.n	80089e2 <__svfiscanf_r+0x20e>
 8008a42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a48:	9341      	str	r3, [sp, #260]	; 0x104
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e7c9      	b.n	80089e2 <__svfiscanf_r+0x20e>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e7c7      	b.n	80089e2 <__svfiscanf_r+0x20e>
 8008a52:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008a54:	06c3      	lsls	r3, r0, #27
 8008a56:	f53f aef0 	bmi.w	800883a <__svfiscanf_r+0x66>
 8008a5a:	9b00      	ldr	r3, [sp, #0]
 8008a5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a5e:	1d19      	adds	r1, r3, #4
 8008a60:	9100      	str	r1, [sp, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f010 0f01 	tst.w	r0, #1
 8008a68:	bf14      	ite	ne
 8008a6a:	801a      	strhne	r2, [r3, #0]
 8008a6c:	601a      	streq	r2, [r3, #0]
 8008a6e:	e6e4      	b.n	800883a <__svfiscanf_r+0x66>
 8008a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a72:	07d8      	lsls	r0, r3, #31
 8008a74:	d405      	bmi.n	8008a82 <__svfiscanf_r+0x2ae>
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	0599      	lsls	r1, r3, #22
 8008a7a:	d402      	bmi.n	8008a82 <__svfiscanf_r+0x2ae>
 8008a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a7e:	f7ff f859 	bl	8007b34 <__retarget_lock_release_recursive>
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	e79a      	b.n	80089be <__svfiscanf_r+0x1ea>
 8008a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4798      	blx	r3
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0aa      	beq.n	80089ea <__svfiscanf_r+0x216>
 8008a94:	e786      	b.n	80089a4 <__svfiscanf_r+0x1d0>
 8008a96:	bf00      	nop
 8008a98:	080092b9 	.word	0x080092b9
 8008a9c:	08008e29 	.word	0x08008e29
 8008aa0:	08009e95 	.word	0x08009e95
 8008aa4:	08009e32 	.word	0x08009e32
 8008aa8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008aaa:	3201      	adds	r2, #1
 8008aac:	9245      	str	r2, [sp, #276]	; 0x114
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	3a01      	subs	r2, #1
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	6062      	str	r2, [r4, #4]
 8008ab6:	dd02      	ble.n	8008abe <__svfiscanf_r+0x2ea>
 8008ab8:	3301      	adds	r3, #1
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	e798      	b.n	80089f0 <__svfiscanf_r+0x21c>
 8008abe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4798      	blx	r3
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d092      	beq.n	80089f0 <__svfiscanf_r+0x21c>
 8008aca:	e76b      	b.n	80089a4 <__svfiscanf_r+0x1d0>
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	dc06      	bgt.n	8008ade <__svfiscanf_r+0x30a>
 8008ad0:	466b      	mov	r3, sp
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	a941      	add	r1, sp, #260	; 0x104
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f000 f8a4 	bl	8008c24 <_scanf_i>
 8008adc:	e796      	b.n	8008a0c <__svfiscanf_r+0x238>
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <__svfiscanf_r+0x348>)
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f43f aeaa 	beq.w	800883a <__svfiscanf_r+0x66>
 8008ae6:	466b      	mov	r3, sp
 8008ae8:	4622      	mov	r2, r4
 8008aea:	a941      	add	r1, sp, #260	; 0x104
 8008aec:	4630      	mov	r0, r6
 8008aee:	f3af 8000 	nop.w
 8008af2:	e78b      	b.n	8008a0c <__svfiscanf_r+0x238>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	0599      	lsls	r1, r3, #22
 8008af8:	f53f af58 	bmi.w	80089ac <__svfiscanf_r+0x1d8>
 8008afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afe:	f7ff f819 	bl	8007b34 <__retarget_lock_release_recursive>
 8008b02:	e753      	b.n	80089ac <__svfiscanf_r+0x1d8>
 8008b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b06:	07da      	lsls	r2, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <__svfiscanf_r+0x342>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	059b      	lsls	r3, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <__svfiscanf_r+0x342>
 8008b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b12:	f7ff f80f 	bl	8007b34 <__retarget_lock_release_recursive>
 8008b16:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b18:	e751      	b.n	80089be <__svfiscanf_r+0x1ea>
 8008b1a:	bf00      	nop
 8008b1c:	00000000 	.word	0x00000000

08008b20 <_vfiscanf_r>:
 8008b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	4605      	mov	r5, r0
 8008b26:	b138      	cbz	r0, 8008b38 <_vfiscanf_r+0x18>
 8008b28:	6981      	ldr	r1, [r0, #24]
 8008b2a:	b929      	cbnz	r1, 8008b38 <_vfiscanf_r+0x18>
 8008b2c:	e9cd 2300 	strd	r2, r3, [sp]
 8008b30:	f7fe ff40 	bl	80079b4 <__sinit>
 8008b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b38:	490a      	ldr	r1, [pc, #40]	; (8008b64 <_vfiscanf_r+0x44>)
 8008b3a:	428c      	cmp	r4, r1
 8008b3c:	d107      	bne.n	8008b4e <_vfiscanf_r+0x2e>
 8008b3e:	686c      	ldr	r4, [r5, #4]
 8008b40:	4621      	mov	r1, r4
 8008b42:	4628      	mov	r0, r5
 8008b44:	b003      	add	sp, #12
 8008b46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b4a:	f7ff be43 	b.w	80087d4 <__svfiscanf_r>
 8008b4e:	4906      	ldr	r1, [pc, #24]	; (8008b68 <_vfiscanf_r+0x48>)
 8008b50:	428c      	cmp	r4, r1
 8008b52:	d101      	bne.n	8008b58 <_vfiscanf_r+0x38>
 8008b54:	68ac      	ldr	r4, [r5, #8]
 8008b56:	e7f3      	b.n	8008b40 <_vfiscanf_r+0x20>
 8008b58:	4904      	ldr	r1, [pc, #16]	; (8008b6c <_vfiscanf_r+0x4c>)
 8008b5a:	428c      	cmp	r4, r1
 8008b5c:	bf08      	it	eq
 8008b5e:	68ec      	ldreq	r4, [r5, #12]
 8008b60:	e7ee      	b.n	8008b40 <_vfiscanf_r+0x20>
 8008b62:	bf00      	nop
 8008b64:	08009c90 	.word	0x08009c90
 8008b68:	08009cb0 	.word	0x08009cb0
 8008b6c:	08009c70 	.word	0x08009c70

08008b70 <_scanf_chars>:
 8008b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	4615      	mov	r5, r2
 8008b76:	688a      	ldr	r2, [r1, #8]
 8008b78:	4680      	mov	r8, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	b932      	cbnz	r2, 8008b8c <_scanf_chars+0x1c>
 8008b7e:	698a      	ldr	r2, [r1, #24]
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	bf0c      	ite	eq
 8008b84:	2201      	moveq	r2, #1
 8008b86:	f04f 32ff 	movne.w	r2, #4294967295
 8008b8a:	608a      	str	r2, [r1, #8]
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008c20 <_scanf_chars+0xb0>
 8008b92:	06d1      	lsls	r1, r2, #27
 8008b94:	bf5f      	itttt	pl
 8008b96:	681a      	ldrpl	r2, [r3, #0]
 8008b98:	1d11      	addpl	r1, r2, #4
 8008b9a:	6019      	strpl	r1, [r3, #0]
 8008b9c:	6816      	ldrpl	r6, [r2, #0]
 8008b9e:	2700      	movs	r7, #0
 8008ba0:	69a0      	ldr	r0, [r4, #24]
 8008ba2:	b188      	cbz	r0, 8008bc8 <_scanf_chars+0x58>
 8008ba4:	2801      	cmp	r0, #1
 8008ba6:	d107      	bne.n	8008bb8 <_scanf_chars+0x48>
 8008ba8:	682a      	ldr	r2, [r5, #0]
 8008baa:	7811      	ldrb	r1, [r2, #0]
 8008bac:	6962      	ldr	r2, [r4, #20]
 8008bae:	5c52      	ldrb	r2, [r2, r1]
 8008bb0:	b952      	cbnz	r2, 8008bc8 <_scanf_chars+0x58>
 8008bb2:	2f00      	cmp	r7, #0
 8008bb4:	d031      	beq.n	8008c1a <_scanf_chars+0xaa>
 8008bb6:	e022      	b.n	8008bfe <_scanf_chars+0x8e>
 8008bb8:	2802      	cmp	r0, #2
 8008bba:	d120      	bne.n	8008bfe <_scanf_chars+0x8e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008bc4:	071b      	lsls	r3, r3, #28
 8008bc6:	d41a      	bmi.n	8008bfe <_scanf_chars+0x8e>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	06da      	lsls	r2, r3, #27
 8008bcc:	bf5e      	ittt	pl
 8008bce:	682b      	ldrpl	r3, [r5, #0]
 8008bd0:	781b      	ldrbpl	r3, [r3, #0]
 8008bd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008bd6:	682a      	ldr	r2, [r5, #0]
 8008bd8:	686b      	ldr	r3, [r5, #4]
 8008bda:	3201      	adds	r2, #1
 8008bdc:	602a      	str	r2, [r5, #0]
 8008bde:	68a2      	ldr	r2, [r4, #8]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	3a01      	subs	r2, #1
 8008be4:	606b      	str	r3, [r5, #4]
 8008be6:	3701      	adds	r7, #1
 8008be8:	60a2      	str	r2, [r4, #8]
 8008bea:	b142      	cbz	r2, 8008bfe <_scanf_chars+0x8e>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dcd7      	bgt.n	8008ba0 <_scanf_chars+0x30>
 8008bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4798      	blx	r3
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0d0      	beq.n	8008ba0 <_scanf_chars+0x30>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	f013 0310 	ands.w	r3, r3, #16
 8008c04:	d105      	bne.n	8008c12 <_scanf_chars+0xa2>
 8008c06:	68e2      	ldr	r2, [r4, #12]
 8008c08:	3201      	adds	r2, #1
 8008c0a:	60e2      	str	r2, [r4, #12]
 8008c0c:	69a2      	ldr	r2, [r4, #24]
 8008c0e:	b102      	cbz	r2, 8008c12 <_scanf_chars+0xa2>
 8008c10:	7033      	strb	r3, [r6, #0]
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	443b      	add	r3, r7
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	bf00      	nop
 8008c20:	08009e95 	.word	0x08009e95

08008c24 <_scanf_i>:
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	4698      	mov	r8, r3
 8008c2a:	4b76      	ldr	r3, [pc, #472]	; (8008e04 <_scanf_i+0x1e0>)
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	4682      	mov	sl, r0
 8008c30:	4616      	mov	r6, r2
 8008c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c36:	b087      	sub	sp, #28
 8008c38:	ab03      	add	r3, sp, #12
 8008c3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008c3e:	4b72      	ldr	r3, [pc, #456]	; (8008e08 <_scanf_i+0x1e4>)
 8008c40:	69a1      	ldr	r1, [r4, #24]
 8008c42:	4a72      	ldr	r2, [pc, #456]	; (8008e0c <_scanf_i+0x1e8>)
 8008c44:	2903      	cmp	r1, #3
 8008c46:	bf18      	it	ne
 8008c48:	461a      	movne	r2, r3
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	9201      	str	r2, [sp, #4]
 8008c4e:	1e5a      	subs	r2, r3, #1
 8008c50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c54:	bf88      	it	hi
 8008c56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c5a:	4627      	mov	r7, r4
 8008c5c:	bf82      	ittt	hi
 8008c5e:	eb03 0905 	addhi.w	r9, r3, r5
 8008c62:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c66:	60a3      	strhi	r3, [r4, #8]
 8008c68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008c6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008c70:	bf98      	it	ls
 8008c72:	f04f 0900 	movls.w	r9, #0
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	463d      	mov	r5, r7
 8008c7a:	f04f 0b00 	mov.w	fp, #0
 8008c7e:	6831      	ldr	r1, [r6, #0]
 8008c80:	ab03      	add	r3, sp, #12
 8008c82:	7809      	ldrb	r1, [r1, #0]
 8008c84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	f7f7 fac9 	bl	8000220 <memchr>
 8008c8e:	b328      	cbz	r0, 8008cdc <_scanf_i+0xb8>
 8008c90:	f1bb 0f01 	cmp.w	fp, #1
 8008c94:	d159      	bne.n	8008d4a <_scanf_i+0x126>
 8008c96:	6862      	ldr	r2, [r4, #4]
 8008c98:	b92a      	cbnz	r2, 8008ca6 <_scanf_i+0x82>
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca2:	6063      	str	r3, [r4, #4]
 8008ca4:	6022      	str	r2, [r4, #0]
 8008ca6:	6822      	ldr	r2, [r4, #0]
 8008ca8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008cac:	6022      	str	r2, [r4, #0]
 8008cae:	68a2      	ldr	r2, [r4, #8]
 8008cb0:	1e51      	subs	r1, r2, #1
 8008cb2:	60a1      	str	r1, [r4, #8]
 8008cb4:	b192      	cbz	r2, 8008cdc <_scanf_i+0xb8>
 8008cb6:	6832      	ldr	r2, [r6, #0]
 8008cb8:	1c51      	adds	r1, r2, #1
 8008cba:	6031      	str	r1, [r6, #0]
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	f805 2b01 	strb.w	r2, [r5], #1
 8008cc2:	6872      	ldr	r2, [r6, #4]
 8008cc4:	3a01      	subs	r2, #1
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	6072      	str	r2, [r6, #4]
 8008cca:	dc07      	bgt.n	8008cdc <_scanf_i+0xb8>
 8008ccc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	4790      	blx	r2
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f040 8085 	bne.w	8008de6 <_scanf_i+0x1c2>
 8008cdc:	f10b 0b01 	add.w	fp, fp, #1
 8008ce0:	f1bb 0f03 	cmp.w	fp, #3
 8008ce4:	d1cb      	bne.n	8008c7e <_scanf_i+0x5a>
 8008ce6:	6863      	ldr	r3, [r4, #4]
 8008ce8:	b90b      	cbnz	r3, 8008cee <_scanf_i+0xca>
 8008cea:	230a      	movs	r3, #10
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	4947      	ldr	r1, [pc, #284]	; (8008e10 <_scanf_i+0x1ec>)
 8008cf2:	6960      	ldr	r0, [r4, #20]
 8008cf4:	1ac9      	subs	r1, r1, r3
 8008cf6:	f000 f931 	bl	8008f5c <__sccl>
 8008cfa:	f04f 0b00 	mov.w	fp, #0
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	6822      	ldr	r2, [r4, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d03d      	beq.n	8008d82 <_scanf_i+0x15e>
 8008d06:	6831      	ldr	r1, [r6, #0]
 8008d08:	6960      	ldr	r0, [r4, #20]
 8008d0a:	f891 c000 	ldrb.w	ip, [r1]
 8008d0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d035      	beq.n	8008d82 <_scanf_i+0x15e>
 8008d16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008d1a:	d124      	bne.n	8008d66 <_scanf_i+0x142>
 8008d1c:	0510      	lsls	r0, r2, #20
 8008d1e:	d522      	bpl.n	8008d66 <_scanf_i+0x142>
 8008d20:	f10b 0b01 	add.w	fp, fp, #1
 8008d24:	f1b9 0f00 	cmp.w	r9, #0
 8008d28:	d003      	beq.n	8008d32 <_scanf_i+0x10e>
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d30:	60a3      	str	r3, [r4, #8]
 8008d32:	6873      	ldr	r3, [r6, #4]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	6073      	str	r3, [r6, #4]
 8008d3a:	dd1b      	ble.n	8008d74 <_scanf_i+0x150>
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	e7d9      	b.n	8008cfe <_scanf_i+0xda>
 8008d4a:	f1bb 0f02 	cmp.w	fp, #2
 8008d4e:	d1ae      	bne.n	8008cae <_scanf_i+0x8a>
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008d56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d5a:	d1bf      	bne.n	8008cdc <_scanf_i+0xb8>
 8008d5c:	2310      	movs	r3, #16
 8008d5e:	6063      	str	r3, [r4, #4]
 8008d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d64:	e7a2      	b.n	8008cac <_scanf_i+0x88>
 8008d66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	780b      	ldrb	r3, [r1, #0]
 8008d6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008d72:	e7de      	b.n	8008d32 <_scanf_i+0x10e>
 8008d74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4798      	blx	r3
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0df      	beq.n	8008d42 <_scanf_i+0x11e>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	05db      	lsls	r3, r3, #23
 8008d86:	d50d      	bpl.n	8008da4 <_scanf_i+0x180>
 8008d88:	42bd      	cmp	r5, r7
 8008d8a:	d909      	bls.n	8008da0 <_scanf_i+0x17c>
 8008d8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d94:	4632      	mov	r2, r6
 8008d96:	4650      	mov	r0, sl
 8008d98:	4798      	blx	r3
 8008d9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008d9e:	464d      	mov	r5, r9
 8008da0:	42bd      	cmp	r5, r7
 8008da2:	d02d      	beq.n	8008e00 <_scanf_i+0x1dc>
 8008da4:	6822      	ldr	r2, [r4, #0]
 8008da6:	f012 0210 	ands.w	r2, r2, #16
 8008daa:	d113      	bne.n	8008dd4 <_scanf_i+0x1b0>
 8008dac:	702a      	strb	r2, [r5, #0]
 8008dae:	6863      	ldr	r3, [r4, #4]
 8008db0:	9e01      	ldr	r6, [sp, #4]
 8008db2:	4639      	mov	r1, r7
 8008db4:	4650      	mov	r0, sl
 8008db6:	47b0      	blx	r6
 8008db8:	6821      	ldr	r1, [r4, #0]
 8008dba:	f8d8 3000 	ldr.w	r3, [r8]
 8008dbe:	f011 0f20 	tst.w	r1, #32
 8008dc2:	d013      	beq.n	8008dec <_scanf_i+0x1c8>
 8008dc4:	1d1a      	adds	r2, r3, #4
 8008dc6:	f8c8 2000 	str.w	r2, [r8]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6018      	str	r0, [r3, #0]
 8008dce:	68e3      	ldr	r3, [r4, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60e3      	str	r3, [r4, #12]
 8008dd4:	1bed      	subs	r5, r5, r7
 8008dd6:	44ab      	add	fp, r5
 8008dd8:	6925      	ldr	r5, [r4, #16]
 8008dda:	445d      	add	r5, fp
 8008ddc:	6125      	str	r5, [r4, #16]
 8008dde:	2000      	movs	r0, #0
 8008de0:	b007      	add	sp, #28
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	f04f 0b00 	mov.w	fp, #0
 8008dea:	e7ca      	b.n	8008d82 <_scanf_i+0x15e>
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	f8c8 2000 	str.w	r2, [r8]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f011 0f01 	tst.w	r1, #1
 8008df8:	bf14      	ite	ne
 8008dfa:	8018      	strhne	r0, [r3, #0]
 8008dfc:	6018      	streq	r0, [r3, #0]
 8008dfe:	e7e6      	b.n	8008dce <_scanf_i+0x1aa>
 8008e00:	2001      	movs	r0, #1
 8008e02:	e7ed      	b.n	8008de0 <_scanf_i+0x1bc>
 8008e04:	08009b84 	.word	0x08009b84
 8008e08:	08009241 	.word	0x08009241
 8008e0c:	08009159 	.word	0x08009159
 8008e10:	08009e56 	.word	0x08009e56

08008e14 <lflush>:
 8008e14:	8983      	ldrh	r3, [r0, #12]
 8008e16:	f003 0309 	and.w	r3, r3, #9
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	d101      	bne.n	8008e22 <lflush+0xe>
 8008e1e:	f7fe bd5f 	b.w	80078e0 <fflush>
 8008e22:	2000      	movs	r0, #0
 8008e24:	4770      	bx	lr
	...

08008e28 <__srefill_r>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	b118      	cbz	r0, 8008e38 <__srefill_r+0x10>
 8008e30:	6983      	ldr	r3, [r0, #24]
 8008e32:	b90b      	cbnz	r3, 8008e38 <__srefill_r+0x10>
 8008e34:	f7fe fdbe 	bl	80079b4 <__sinit>
 8008e38:	4b3b      	ldr	r3, [pc, #236]	; (8008f28 <__srefill_r+0x100>)
 8008e3a:	429c      	cmp	r4, r3
 8008e3c:	d10a      	bne.n	8008e54 <__srefill_r+0x2c>
 8008e3e:	686c      	ldr	r4, [r5, #4]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	2300      	movs	r3, #0
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	069e      	lsls	r6, r3, #26
 8008e4c:	d50c      	bpl.n	8008e68 <__srefill_r+0x40>
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e52:	e066      	b.n	8008f22 <__srefill_r+0xfa>
 8008e54:	4b35      	ldr	r3, [pc, #212]	; (8008f2c <__srefill_r+0x104>)
 8008e56:	429c      	cmp	r4, r3
 8008e58:	d101      	bne.n	8008e5e <__srefill_r+0x36>
 8008e5a:	68ac      	ldr	r4, [r5, #8]
 8008e5c:	e7f0      	b.n	8008e40 <__srefill_r+0x18>
 8008e5e:	4b34      	ldr	r3, [pc, #208]	; (8008f30 <__srefill_r+0x108>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	bf08      	it	eq
 8008e64:	68ec      	ldreq	r4, [r5, #12]
 8008e66:	e7eb      	b.n	8008e40 <__srefill_r+0x18>
 8008e68:	0758      	lsls	r0, r3, #29
 8008e6a:	d448      	bmi.n	8008efe <__srefill_r+0xd6>
 8008e6c:	06d9      	lsls	r1, r3, #27
 8008e6e:	d405      	bmi.n	8008e7c <__srefill_r+0x54>
 8008e70:	2309      	movs	r3, #9
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e78:	81a3      	strh	r3, [r4, #12]
 8008e7a:	e7e8      	b.n	8008e4e <__srefill_r+0x26>
 8008e7c:	071a      	lsls	r2, r3, #28
 8008e7e:	d50b      	bpl.n	8008e98 <__srefill_r+0x70>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7fe fcf0 	bl	8007868 <_fflush_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d1e0      	bne.n	8008e4e <__srefill_r+0x26>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	60a0      	str	r0, [r4, #8]
 8008e90:	f023 0308 	bic.w	r3, r3, #8
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	61a0      	str	r0, [r4, #24]
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f043 0304 	orr.w	r3, r3, #4
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	b91b      	cbnz	r3, 8008eac <__srefill_r+0x84>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f7fe fe6a 	bl	8007b80 <__smakebuf_r>
 8008eac:	89a6      	ldrh	r6, [r4, #12]
 8008eae:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008eb2:	07b3      	lsls	r3, r6, #30
 8008eb4:	d00f      	beq.n	8008ed6 <__srefill_r+0xae>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	4b1e      	ldr	r3, [pc, #120]	; (8008f34 <__srefill_r+0x10c>)
 8008ebc:	491e      	ldr	r1, [pc, #120]	; (8008f38 <__srefill_r+0x110>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	f006 0609 	and.w	r6, r6, #9
 8008ec4:	f7fe fdf4 	bl	8007ab0 <_fwalk>
 8008ec8:	2e09      	cmp	r6, #9
 8008eca:	81a7      	strh	r7, [r4, #12]
 8008ecc:	d103      	bne.n	8008ed6 <__srefill_r+0xae>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f7fe fc43 	bl	800775c <__sflush_r>
 8008ed6:	6922      	ldr	r2, [r4, #16]
 8008ed8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eda:	6963      	ldr	r3, [r4, #20]
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	6022      	str	r2, [r4, #0]
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b0      	blx	r6
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	6060      	str	r0, [r4, #4]
 8008ee8:	dc1c      	bgt.n	8008f24 <__srefill_r+0xfc>
 8008eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eee:	bf17      	itett	ne
 8008ef0:	2200      	movne	r2, #0
 8008ef2:	f043 0320 	orreq.w	r3, r3, #32
 8008ef6:	6062      	strne	r2, [r4, #4]
 8008ef8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008efc:	e7bc      	b.n	8008e78 <__srefill_r+0x50>
 8008efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d0cd      	beq.n	8008ea0 <__srefill_r+0x78>
 8008f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	d002      	beq.n	8008f12 <__srefill_r+0xea>
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f7ff fa27 	bl	8008360 <_free_r>
 8008f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f14:	6063      	str	r3, [r4, #4]
 8008f16:	2000      	movs	r0, #0
 8008f18:	6360      	str	r0, [r4, #52]	; 0x34
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0c0      	beq.n	8008ea0 <__srefill_r+0x78>
 8008f1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7fc      	b.n	8008f22 <__srefill_r+0xfa>
 8008f28:	08009c90 	.word	0x08009c90
 8008f2c:	08009cb0 	.word	0x08009cb0
 8008f30:	08009c70 	.word	0x08009c70
 8008f34:	08009ba8 	.word	0x08009ba8
 8008f38:	08008e15 	.word	0x08008e15

08008f3c <_sbrk_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d06      	ldr	r5, [pc, #24]	; (8008f58 <_sbrk_r+0x1c>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	602b      	str	r3, [r5, #0]
 8008f48:	f7f9 f96a 	bl	8002220 <_sbrk>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_sbrk_r+0x1a>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_sbrk_r+0x1a>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	20000468 	.word	0x20000468

08008f5c <__sccl>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	780b      	ldrb	r3, [r1, #0]
 8008f60:	4604      	mov	r4, r0
 8008f62:	2b5e      	cmp	r3, #94	; 0x5e
 8008f64:	bf0b      	itete	eq
 8008f66:	784b      	ldrbeq	r3, [r1, #1]
 8008f68:	1c48      	addne	r0, r1, #1
 8008f6a:	1c88      	addeq	r0, r1, #2
 8008f6c:	2200      	movne	r2, #0
 8008f6e:	bf08      	it	eq
 8008f70:	2201      	moveq	r2, #1
 8008f72:	1e61      	subs	r1, r4, #1
 8008f74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008f78:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008f7c:	42a9      	cmp	r1, r5
 8008f7e:	d1fb      	bne.n	8008f78 <__sccl+0x1c>
 8008f80:	b90b      	cbnz	r3, 8008f86 <__sccl+0x2a>
 8008f82:	3801      	subs	r0, #1
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	f082 0201 	eor.w	r2, r2, #1
 8008f8a:	54e2      	strb	r2, [r4, r3]
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008f94:	292d      	cmp	r1, #45	; 0x2d
 8008f96:	d006      	beq.n	8008fa6 <__sccl+0x4a>
 8008f98:	295d      	cmp	r1, #93	; 0x5d
 8008f9a:	d0f3      	beq.n	8008f84 <__sccl+0x28>
 8008f9c:	b909      	cbnz	r1, 8008fa2 <__sccl+0x46>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	e7f0      	b.n	8008f84 <__sccl+0x28>
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	e7f1      	b.n	8008f8a <__sccl+0x2e>
 8008fa6:	786e      	ldrb	r6, [r5, #1]
 8008fa8:	2e5d      	cmp	r6, #93	; 0x5d
 8008faa:	d0fa      	beq.n	8008fa2 <__sccl+0x46>
 8008fac:	42b3      	cmp	r3, r6
 8008fae:	dcf8      	bgt.n	8008fa2 <__sccl+0x46>
 8008fb0:	3502      	adds	r5, #2
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	3101      	adds	r1, #1
 8008fb6:	428e      	cmp	r6, r1
 8008fb8:	5462      	strb	r2, [r4, r1]
 8008fba:	dcfb      	bgt.n	8008fb4 <__sccl+0x58>
 8008fbc:	1af1      	subs	r1, r6, r3
 8008fbe:	3901      	subs	r1, #1
 8008fc0:	1c58      	adds	r0, r3, #1
 8008fc2:	42b3      	cmp	r3, r6
 8008fc4:	bfa8      	it	ge
 8008fc6:	2100      	movge	r1, #0
 8008fc8:	1843      	adds	r3, r0, r1
 8008fca:	e7e0      	b.n	8008f8e <__sccl+0x32>

08008fcc <__sread>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	460c      	mov	r4, r1
 8008fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd4:	f000 fadc 	bl	8009590 <_read_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	bfab      	itete	ge
 8008fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fde:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe0:	181b      	addge	r3, r3, r0
 8008fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fe6:	bfac      	ite	ge
 8008fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fea:	81a3      	strhlt	r3, [r4, #12]
 8008fec:	bd10      	pop	{r4, pc}

08008fee <__swrite>:
 8008fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff2:	461f      	mov	r7, r3
 8008ff4:	898b      	ldrh	r3, [r1, #12]
 8008ff6:	05db      	lsls	r3, r3, #23
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	d505      	bpl.n	800900c <__swrite+0x1e>
 8009000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009004:	2302      	movs	r3, #2
 8009006:	2200      	movs	r2, #0
 8009008:	f000 fa62 	bl	80094d0 <_lseek_r>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	4632      	mov	r2, r6
 800901a:	463b      	mov	r3, r7
 800901c:	4628      	mov	r0, r5
 800901e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009022:	f000 b9e1 	b.w	80093e8 <_write_r>

08009026 <__sseek>:
 8009026:	b510      	push	{r4, lr}
 8009028:	460c      	mov	r4, r1
 800902a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902e:	f000 fa4f 	bl	80094d0 <_lseek_r>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	bf15      	itete	ne
 8009038:	6560      	strne	r0, [r4, #84]	; 0x54
 800903a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800903e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009042:	81a3      	strheq	r3, [r4, #12]
 8009044:	bf18      	it	ne
 8009046:	81a3      	strhne	r3, [r4, #12]
 8009048:	bd10      	pop	{r4, pc}

0800904a <__sclose>:
 800904a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904e:	f000 b9fb 	b.w	8009448 <_close_r>
	...

08009054 <_strtol_l.constprop.0>:
 8009054:	2b01      	cmp	r3, #1
 8009056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905a:	d001      	beq.n	8009060 <_strtol_l.constprop.0+0xc>
 800905c:	2b24      	cmp	r3, #36	; 0x24
 800905e:	d906      	bls.n	800906e <_strtol_l.constprop.0+0x1a>
 8009060:	f7fc fe38 	bl	8005cd4 <__errno>
 8009064:	2316      	movs	r3, #22
 8009066:	6003      	str	r3, [r0, #0]
 8009068:	2000      	movs	r0, #0
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009154 <_strtol_l.constprop.0+0x100>
 8009072:	460d      	mov	r5, r1
 8009074:	462e      	mov	r6, r5
 8009076:	f815 4b01 	ldrb.w	r4, [r5], #1
 800907a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800907e:	f017 0708 	ands.w	r7, r7, #8
 8009082:	d1f7      	bne.n	8009074 <_strtol_l.constprop.0+0x20>
 8009084:	2c2d      	cmp	r4, #45	; 0x2d
 8009086:	d132      	bne.n	80090ee <_strtol_l.constprop.0+0x9a>
 8009088:	782c      	ldrb	r4, [r5, #0]
 800908a:	2701      	movs	r7, #1
 800908c:	1cb5      	adds	r5, r6, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d05b      	beq.n	800914a <_strtol_l.constprop.0+0xf6>
 8009092:	2b10      	cmp	r3, #16
 8009094:	d109      	bne.n	80090aa <_strtol_l.constprop.0+0x56>
 8009096:	2c30      	cmp	r4, #48	; 0x30
 8009098:	d107      	bne.n	80090aa <_strtol_l.constprop.0+0x56>
 800909a:	782c      	ldrb	r4, [r5, #0]
 800909c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80090a0:	2c58      	cmp	r4, #88	; 0x58
 80090a2:	d14d      	bne.n	8009140 <_strtol_l.constprop.0+0xec>
 80090a4:	786c      	ldrb	r4, [r5, #1]
 80090a6:	2310      	movs	r3, #16
 80090a8:	3502      	adds	r5, #2
 80090aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80090ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80090b2:	f04f 0c00 	mov.w	ip, #0
 80090b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80090ba:	4666      	mov	r6, ip
 80090bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80090c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80090c4:	f1be 0f09 	cmp.w	lr, #9
 80090c8:	d816      	bhi.n	80090f8 <_strtol_l.constprop.0+0xa4>
 80090ca:	4674      	mov	r4, lr
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	dd24      	ble.n	800911a <_strtol_l.constprop.0+0xc6>
 80090d0:	f1bc 0f00 	cmp.w	ip, #0
 80090d4:	db1e      	blt.n	8009114 <_strtol_l.constprop.0+0xc0>
 80090d6:	45b1      	cmp	r9, r6
 80090d8:	d31c      	bcc.n	8009114 <_strtol_l.constprop.0+0xc0>
 80090da:	d101      	bne.n	80090e0 <_strtol_l.constprop.0+0x8c>
 80090dc:	45a2      	cmp	sl, r4
 80090de:	db19      	blt.n	8009114 <_strtol_l.constprop.0+0xc0>
 80090e0:	fb06 4603 	mla	r6, r6, r3, r4
 80090e4:	f04f 0c01 	mov.w	ip, #1
 80090e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090ec:	e7e8      	b.n	80090c0 <_strtol_l.constprop.0+0x6c>
 80090ee:	2c2b      	cmp	r4, #43	; 0x2b
 80090f0:	bf04      	itt	eq
 80090f2:	782c      	ldrbeq	r4, [r5, #0]
 80090f4:	1cb5      	addeq	r5, r6, #2
 80090f6:	e7ca      	b.n	800908e <_strtol_l.constprop.0+0x3a>
 80090f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80090fc:	f1be 0f19 	cmp.w	lr, #25
 8009100:	d801      	bhi.n	8009106 <_strtol_l.constprop.0+0xb2>
 8009102:	3c37      	subs	r4, #55	; 0x37
 8009104:	e7e2      	b.n	80090cc <_strtol_l.constprop.0+0x78>
 8009106:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800910a:	f1be 0f19 	cmp.w	lr, #25
 800910e:	d804      	bhi.n	800911a <_strtol_l.constprop.0+0xc6>
 8009110:	3c57      	subs	r4, #87	; 0x57
 8009112:	e7db      	b.n	80090cc <_strtol_l.constprop.0+0x78>
 8009114:	f04f 3cff 	mov.w	ip, #4294967295
 8009118:	e7e6      	b.n	80090e8 <_strtol_l.constprop.0+0x94>
 800911a:	f1bc 0f00 	cmp.w	ip, #0
 800911e:	da05      	bge.n	800912c <_strtol_l.constprop.0+0xd8>
 8009120:	2322      	movs	r3, #34	; 0x22
 8009122:	6003      	str	r3, [r0, #0]
 8009124:	4646      	mov	r6, r8
 8009126:	b942      	cbnz	r2, 800913a <_strtol_l.constprop.0+0xe6>
 8009128:	4630      	mov	r0, r6
 800912a:	e79e      	b.n	800906a <_strtol_l.constprop.0+0x16>
 800912c:	b107      	cbz	r7, 8009130 <_strtol_l.constprop.0+0xdc>
 800912e:	4276      	negs	r6, r6
 8009130:	2a00      	cmp	r2, #0
 8009132:	d0f9      	beq.n	8009128 <_strtol_l.constprop.0+0xd4>
 8009134:	f1bc 0f00 	cmp.w	ip, #0
 8009138:	d000      	beq.n	800913c <_strtol_l.constprop.0+0xe8>
 800913a:	1e69      	subs	r1, r5, #1
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	e7f3      	b.n	8009128 <_strtol_l.constprop.0+0xd4>
 8009140:	2430      	movs	r4, #48	; 0x30
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1b1      	bne.n	80090aa <_strtol_l.constprop.0+0x56>
 8009146:	2308      	movs	r3, #8
 8009148:	e7af      	b.n	80090aa <_strtol_l.constprop.0+0x56>
 800914a:	2c30      	cmp	r4, #48	; 0x30
 800914c:	d0a5      	beq.n	800909a <_strtol_l.constprop.0+0x46>
 800914e:	230a      	movs	r3, #10
 8009150:	e7ab      	b.n	80090aa <_strtol_l.constprop.0+0x56>
 8009152:	bf00      	nop
 8009154:	08009e95 	.word	0x08009e95

08009158 <_strtol_r>:
 8009158:	f7ff bf7c 	b.w	8009054 <_strtol_l.constprop.0>

0800915c <_strtoul_l.constprop.0>:
 800915c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009160:	4f36      	ldr	r7, [pc, #216]	; (800923c <_strtoul_l.constprop.0+0xe0>)
 8009162:	4686      	mov	lr, r0
 8009164:	460d      	mov	r5, r1
 8009166:	4628      	mov	r0, r5
 8009168:	f815 4b01 	ldrb.w	r4, [r5], #1
 800916c:	5de6      	ldrb	r6, [r4, r7]
 800916e:	f016 0608 	ands.w	r6, r6, #8
 8009172:	d1f8      	bne.n	8009166 <_strtoul_l.constprop.0+0xa>
 8009174:	2c2d      	cmp	r4, #45	; 0x2d
 8009176:	d12f      	bne.n	80091d8 <_strtoul_l.constprop.0+0x7c>
 8009178:	782c      	ldrb	r4, [r5, #0]
 800917a:	2601      	movs	r6, #1
 800917c:	1c85      	adds	r5, r0, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d057      	beq.n	8009232 <_strtoul_l.constprop.0+0xd6>
 8009182:	2b10      	cmp	r3, #16
 8009184:	d109      	bne.n	800919a <_strtoul_l.constprop.0+0x3e>
 8009186:	2c30      	cmp	r4, #48	; 0x30
 8009188:	d107      	bne.n	800919a <_strtoul_l.constprop.0+0x3e>
 800918a:	7828      	ldrb	r0, [r5, #0]
 800918c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009190:	2858      	cmp	r0, #88	; 0x58
 8009192:	d149      	bne.n	8009228 <_strtoul_l.constprop.0+0xcc>
 8009194:	786c      	ldrb	r4, [r5, #1]
 8009196:	2310      	movs	r3, #16
 8009198:	3502      	adds	r5, #2
 800919a:	f04f 38ff 	mov.w	r8, #4294967295
 800919e:	2700      	movs	r7, #0
 80091a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80091a4:	fb03 f908 	mul.w	r9, r3, r8
 80091a8:	ea6f 0909 	mvn.w	r9, r9
 80091ac:	4638      	mov	r0, r7
 80091ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80091b2:	f1bc 0f09 	cmp.w	ip, #9
 80091b6:	d814      	bhi.n	80091e2 <_strtoul_l.constprop.0+0x86>
 80091b8:	4664      	mov	r4, ip
 80091ba:	42a3      	cmp	r3, r4
 80091bc:	dd22      	ble.n	8009204 <_strtoul_l.constprop.0+0xa8>
 80091be:	2f00      	cmp	r7, #0
 80091c0:	db1d      	blt.n	80091fe <_strtoul_l.constprop.0+0xa2>
 80091c2:	4580      	cmp	r8, r0
 80091c4:	d31b      	bcc.n	80091fe <_strtoul_l.constprop.0+0xa2>
 80091c6:	d101      	bne.n	80091cc <_strtoul_l.constprop.0+0x70>
 80091c8:	45a1      	cmp	r9, r4
 80091ca:	db18      	blt.n	80091fe <_strtoul_l.constprop.0+0xa2>
 80091cc:	fb00 4003 	mla	r0, r0, r3, r4
 80091d0:	2701      	movs	r7, #1
 80091d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091d6:	e7ea      	b.n	80091ae <_strtoul_l.constprop.0+0x52>
 80091d8:	2c2b      	cmp	r4, #43	; 0x2b
 80091da:	bf04      	itt	eq
 80091dc:	782c      	ldrbeq	r4, [r5, #0]
 80091de:	1c85      	addeq	r5, r0, #2
 80091e0:	e7cd      	b.n	800917e <_strtoul_l.constprop.0+0x22>
 80091e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80091e6:	f1bc 0f19 	cmp.w	ip, #25
 80091ea:	d801      	bhi.n	80091f0 <_strtoul_l.constprop.0+0x94>
 80091ec:	3c37      	subs	r4, #55	; 0x37
 80091ee:	e7e4      	b.n	80091ba <_strtoul_l.constprop.0+0x5e>
 80091f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80091f4:	f1bc 0f19 	cmp.w	ip, #25
 80091f8:	d804      	bhi.n	8009204 <_strtoul_l.constprop.0+0xa8>
 80091fa:	3c57      	subs	r4, #87	; 0x57
 80091fc:	e7dd      	b.n	80091ba <_strtoul_l.constprop.0+0x5e>
 80091fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009202:	e7e6      	b.n	80091d2 <_strtoul_l.constprop.0+0x76>
 8009204:	2f00      	cmp	r7, #0
 8009206:	da07      	bge.n	8009218 <_strtoul_l.constprop.0+0xbc>
 8009208:	2322      	movs	r3, #34	; 0x22
 800920a:	f8ce 3000 	str.w	r3, [lr]
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	b932      	cbnz	r2, 8009222 <_strtoul_l.constprop.0+0xc6>
 8009214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009218:	b106      	cbz	r6, 800921c <_strtoul_l.constprop.0+0xc0>
 800921a:	4240      	negs	r0, r0
 800921c:	2a00      	cmp	r2, #0
 800921e:	d0f9      	beq.n	8009214 <_strtoul_l.constprop.0+0xb8>
 8009220:	b107      	cbz	r7, 8009224 <_strtoul_l.constprop.0+0xc8>
 8009222:	1e69      	subs	r1, r5, #1
 8009224:	6011      	str	r1, [r2, #0]
 8009226:	e7f5      	b.n	8009214 <_strtoul_l.constprop.0+0xb8>
 8009228:	2430      	movs	r4, #48	; 0x30
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1b5      	bne.n	800919a <_strtoul_l.constprop.0+0x3e>
 800922e:	2308      	movs	r3, #8
 8009230:	e7b3      	b.n	800919a <_strtoul_l.constprop.0+0x3e>
 8009232:	2c30      	cmp	r4, #48	; 0x30
 8009234:	d0a9      	beq.n	800918a <_strtoul_l.constprop.0+0x2e>
 8009236:	230a      	movs	r3, #10
 8009238:	e7af      	b.n	800919a <_strtoul_l.constprop.0+0x3e>
 800923a:	bf00      	nop
 800923c:	08009e95 	.word	0x08009e95

08009240 <_strtoul_r>:
 8009240:	f7ff bf8c 	b.w	800915c <_strtoul_l.constprop.0>

08009244 <__submore>:
 8009244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800924c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009250:	4299      	cmp	r1, r3
 8009252:	d11d      	bne.n	8009290 <__submore+0x4c>
 8009254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009258:	f7ff f8ee 	bl	8008438 <_malloc_r>
 800925c:	b918      	cbnz	r0, 8009266 <__submore+0x22>
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800926a:	63a3      	str	r3, [r4, #56]	; 0x38
 800926c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009270:	6360      	str	r0, [r4, #52]	; 0x34
 8009272:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009276:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800927a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800927e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009282:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009286:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e7e8      	b.n	8009262 <__submore+0x1e>
 8009290:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009292:	0077      	lsls	r7, r6, #1
 8009294:	463a      	mov	r2, r7
 8009296:	f000 f94b 	bl	8009530 <_realloc_r>
 800929a:	4605      	mov	r5, r0
 800929c:	2800      	cmp	r0, #0
 800929e:	d0de      	beq.n	800925e <__submore+0x1a>
 80092a0:	eb00 0806 	add.w	r8, r0, r6
 80092a4:	4601      	mov	r1, r0
 80092a6:	4632      	mov	r2, r6
 80092a8:	4640      	mov	r0, r8
 80092aa:	f7fe fcb1 	bl	8007c10 <memcpy>
 80092ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80092b2:	f8c4 8000 	str.w	r8, [r4]
 80092b6:	e7e9      	b.n	800928c <__submore+0x48>

080092b8 <_ungetc_r>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4614      	mov	r4, r2
 80092bc:	1c4a      	adds	r2, r1, #1
 80092be:	4606      	mov	r6, r0
 80092c0:	460d      	mov	r5, r1
 80092c2:	d103      	bne.n	80092cc <_ungetc_r+0x14>
 80092c4:	f04f 35ff 	mov.w	r5, #4294967295
 80092c8:	4628      	mov	r0, r5
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	b118      	cbz	r0, 80092d6 <_ungetc_r+0x1e>
 80092ce:	6983      	ldr	r3, [r0, #24]
 80092d0:	b90b      	cbnz	r3, 80092d6 <_ungetc_r+0x1e>
 80092d2:	f7fe fb6f 	bl	80079b4 <__sinit>
 80092d6:	4b41      	ldr	r3, [pc, #260]	; (80093dc <_ungetc_r+0x124>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	d11d      	bne.n	8009318 <_ungetc_r+0x60>
 80092dc:	6874      	ldr	r4, [r6, #4]
 80092de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092e0:	07db      	lsls	r3, r3, #31
 80092e2:	d405      	bmi.n	80092f0 <_ungetc_r+0x38>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	0598      	lsls	r0, r3, #22
 80092e8:	d402      	bmi.n	80092f0 <_ungetc_r+0x38>
 80092ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ec:	f7fe fc21 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80092f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f4:	f023 0320 	bic.w	r3, r3, #32
 80092f8:	0759      	lsls	r1, r3, #29
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	d42d      	bmi.n	800935c <_ungetc_r+0xa4>
 8009300:	06d3      	lsls	r3, r2, #27
 8009302:	d413      	bmi.n	800932c <_ungetc_r+0x74>
 8009304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009306:	07dd      	lsls	r5, r3, #31
 8009308:	d4dc      	bmi.n	80092c4 <_ungetc_r+0xc>
 800930a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800930e:	d1d9      	bne.n	80092c4 <_ungetc_r+0xc>
 8009310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009312:	f7fe fc0f 	bl	8007b34 <__retarget_lock_release_recursive>
 8009316:	e7d5      	b.n	80092c4 <_ungetc_r+0xc>
 8009318:	4b31      	ldr	r3, [pc, #196]	; (80093e0 <_ungetc_r+0x128>)
 800931a:	429c      	cmp	r4, r3
 800931c:	d101      	bne.n	8009322 <_ungetc_r+0x6a>
 800931e:	68b4      	ldr	r4, [r6, #8]
 8009320:	e7dd      	b.n	80092de <_ungetc_r+0x26>
 8009322:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <_ungetc_r+0x12c>)
 8009324:	429c      	cmp	r4, r3
 8009326:	bf08      	it	eq
 8009328:	68f4      	ldreq	r4, [r6, #12]
 800932a:	e7d8      	b.n	80092de <_ungetc_r+0x26>
 800932c:	0710      	lsls	r0, r2, #28
 800932e:	d511      	bpl.n	8009354 <_ungetc_r+0x9c>
 8009330:	4621      	mov	r1, r4
 8009332:	4630      	mov	r0, r6
 8009334:	f7fe fa98 	bl	8007868 <_fflush_r>
 8009338:	b130      	cbz	r0, 8009348 <_ungetc_r+0x90>
 800933a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800933c:	07d9      	lsls	r1, r3, #31
 800933e:	d4c1      	bmi.n	80092c4 <_ungetc_r+0xc>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009346:	e7e2      	b.n	800930e <_ungetc_r+0x56>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	60a0      	str	r0, [r4, #8]
 800934c:	f023 0308 	bic.w	r3, r3, #8
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	61a0      	str	r0, [r4, #24]
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f043 0304 	orr.w	r3, r3, #4
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800935e:	6862      	ldr	r2, [r4, #4]
 8009360:	b2ed      	uxtb	r5, r5
 8009362:	b1d3      	cbz	r3, 800939a <_ungetc_r+0xe2>
 8009364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009366:	4293      	cmp	r3, r2
 8009368:	dc05      	bgt.n	8009376 <_ungetc_r+0xbe>
 800936a:	4621      	mov	r1, r4
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff ff69 	bl	8009244 <__submore>
 8009372:	2800      	cmp	r0, #0
 8009374:	d1e1      	bne.n	800933a <_ungetc_r+0x82>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009380:	6863      	ldr	r3, [r4, #4]
 8009382:	3301      	adds	r3, #1
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009388:	07da      	lsls	r2, r3, #31
 800938a:	d49d      	bmi.n	80092c8 <_ungetc_r+0x10>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	059b      	lsls	r3, r3, #22
 8009390:	d49a      	bmi.n	80092c8 <_ungetc_r+0x10>
 8009392:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009394:	f7fe fbce 	bl	8007b34 <__retarget_lock_release_recursive>
 8009398:	e796      	b.n	80092c8 <_ungetc_r+0x10>
 800939a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800939c:	6920      	ldr	r0, [r4, #16]
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f001 0101 	and.w	r1, r1, #1
 80093a4:	b160      	cbz	r0, 80093c0 <_ungetc_r+0x108>
 80093a6:	4298      	cmp	r0, r3
 80093a8:	d20a      	bcs.n	80093c0 <_ungetc_r+0x108>
 80093aa:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80093ae:	42a8      	cmp	r0, r5
 80093b0:	d106      	bne.n	80093c0 <_ungetc_r+0x108>
 80093b2:	3b01      	subs	r3, #1
 80093b4:	3201      	adds	r2, #1
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	6062      	str	r2, [r4, #4]
 80093ba:	2900      	cmp	r1, #0
 80093bc:	d184      	bne.n	80092c8 <_ungetc_r+0x10>
 80093be:	e7e5      	b.n	800938c <_ungetc_r+0xd4>
 80093c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80093c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c8:	6363      	str	r3, [r4, #52]	; 0x34
 80093ca:	2303      	movs	r3, #3
 80093cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80093ce:	4623      	mov	r3, r4
 80093d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	2301      	movs	r3, #1
 80093d8:	6063      	str	r3, [r4, #4]
 80093da:	e7ee      	b.n	80093ba <_ungetc_r+0x102>
 80093dc:	08009c90 	.word	0x08009c90
 80093e0:	08009cb0 	.word	0x08009cb0
 80093e4:	08009c70 	.word	0x08009c70

080093e8 <_write_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d07      	ldr	r5, [pc, #28]	; (8009408 <_write_r+0x20>)
 80093ec:	4604      	mov	r4, r0
 80093ee:	4608      	mov	r0, r1
 80093f0:	4611      	mov	r1, r2
 80093f2:	2200      	movs	r2, #0
 80093f4:	602a      	str	r2, [r5, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f7f8 fec1 	bl	800217e <_write>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d102      	bne.n	8009406 <_write_r+0x1e>
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	b103      	cbz	r3, 8009406 <_write_r+0x1e>
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	20000468 	.word	0x20000468

0800940c <__assert_func>:
 800940c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800940e:	4614      	mov	r4, r2
 8009410:	461a      	mov	r2, r3
 8009412:	4b09      	ldr	r3, [pc, #36]	; (8009438 <__assert_func+0x2c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4605      	mov	r5, r0
 8009418:	68d8      	ldr	r0, [r3, #12]
 800941a:	b14c      	cbz	r4, 8009430 <__assert_func+0x24>
 800941c:	4b07      	ldr	r3, [pc, #28]	; (800943c <__assert_func+0x30>)
 800941e:	9100      	str	r1, [sp, #0]
 8009420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009424:	4906      	ldr	r1, [pc, #24]	; (8009440 <__assert_func+0x34>)
 8009426:	462b      	mov	r3, r5
 8009428:	f000 f81e 	bl	8009468 <fiprintf>
 800942c:	f000 f8cf 	bl	80095ce <abort>
 8009430:	4b04      	ldr	r3, [pc, #16]	; (8009444 <__assert_func+0x38>)
 8009432:	461c      	mov	r4, r3
 8009434:	e7f3      	b.n	800941e <__assert_func+0x12>
 8009436:	bf00      	nop
 8009438:	2000000c 	.word	0x2000000c
 800943c:	08009e58 	.word	0x08009e58
 8009440:	08009e65 	.word	0x08009e65
 8009444:	08009e93 	.word	0x08009e93

08009448 <_close_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	; (8009464 <_close_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f8 feaf 	bl	80021b6 <_close>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_close_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_close_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20000468 	.word	0x20000468

08009468 <fiprintf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	b503      	push	{r0, r1, lr}
 800946c:	4601      	mov	r1, r0
 800946e:	ab03      	add	r3, sp, #12
 8009470:	4805      	ldr	r0, [pc, #20]	; (8009488 <fiprintf+0x20>)
 8009472:	f853 2b04 	ldr.w	r2, [r3], #4
 8009476:	6800      	ldr	r0, [r0, #0]
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	f7ff f87b 	bl	8008574 <_vfiprintf_r>
 800947e:	b002      	add	sp, #8
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	2000000c 	.word	0x2000000c

0800948c <_fstat_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	; (80094ac <_fstat_r+0x20>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	4611      	mov	r1, r2
 8009498:	602b      	str	r3, [r5, #0]
 800949a:	f7f8 fe98 	bl	80021ce <_fstat>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	d102      	bne.n	80094a8 <_fstat_r+0x1c>
 80094a2:	682b      	ldr	r3, [r5, #0]
 80094a4:	b103      	cbz	r3, 80094a8 <_fstat_r+0x1c>
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	bf00      	nop
 80094ac:	20000468 	.word	0x20000468

080094b0 <_isatty_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d06      	ldr	r5, [pc, #24]	; (80094cc <_isatty_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f8 fe97 	bl	80021ee <_isatty>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_isatty_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_isatty_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000468 	.word	0x20000468

080094d0 <_lseek_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d07      	ldr	r5, [pc, #28]	; (80094f0 <_lseek_r+0x20>)
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7f8 fe90 	bl	8002204 <_lseek>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_lseek_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_lseek_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000468 	.word	0x20000468

080094f4 <__ascii_mbtowc>:
 80094f4:	b082      	sub	sp, #8
 80094f6:	b901      	cbnz	r1, 80094fa <__ascii_mbtowc+0x6>
 80094f8:	a901      	add	r1, sp, #4
 80094fa:	b142      	cbz	r2, 800950e <__ascii_mbtowc+0x1a>
 80094fc:	b14b      	cbz	r3, 8009512 <__ascii_mbtowc+0x1e>
 80094fe:	7813      	ldrb	r3, [r2, #0]
 8009500:	600b      	str	r3, [r1, #0]
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	1e10      	subs	r0, r2, #0
 8009506:	bf18      	it	ne
 8009508:	2001      	movne	r0, #1
 800950a:	b002      	add	sp, #8
 800950c:	4770      	bx	lr
 800950e:	4610      	mov	r0, r2
 8009510:	e7fb      	b.n	800950a <__ascii_mbtowc+0x16>
 8009512:	f06f 0001 	mvn.w	r0, #1
 8009516:	e7f8      	b.n	800950a <__ascii_mbtowc+0x16>

08009518 <__malloc_lock>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__malloc_lock+0x8>)
 800951a:	f7fe bb0a 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 800951e:	bf00      	nop
 8009520:	2000045c 	.word	0x2000045c

08009524 <__malloc_unlock>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__malloc_unlock+0x8>)
 8009526:	f7fe bb05 	b.w	8007b34 <__retarget_lock_release_recursive>
 800952a:	bf00      	nop
 800952c:	2000045c 	.word	0x2000045c

08009530 <_realloc_r>:
 8009530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	4680      	mov	r8, r0
 8009536:	4614      	mov	r4, r2
 8009538:	460e      	mov	r6, r1
 800953a:	b921      	cbnz	r1, 8009546 <_realloc_r+0x16>
 800953c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	4611      	mov	r1, r2
 8009542:	f7fe bf79 	b.w	8008438 <_malloc_r>
 8009546:	b92a      	cbnz	r2, 8009554 <_realloc_r+0x24>
 8009548:	f7fe ff0a 	bl	8008360 <_free_r>
 800954c:	4625      	mov	r5, r4
 800954e:	4628      	mov	r0, r5
 8009550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009554:	f000 f842 	bl	80095dc <_malloc_usable_size_r>
 8009558:	4284      	cmp	r4, r0
 800955a:	4607      	mov	r7, r0
 800955c:	d802      	bhi.n	8009564 <_realloc_r+0x34>
 800955e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009562:	d812      	bhi.n	800958a <_realloc_r+0x5a>
 8009564:	4621      	mov	r1, r4
 8009566:	4640      	mov	r0, r8
 8009568:	f7fe ff66 	bl	8008438 <_malloc_r>
 800956c:	4605      	mov	r5, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	d0ed      	beq.n	800954e <_realloc_r+0x1e>
 8009572:	42bc      	cmp	r4, r7
 8009574:	4622      	mov	r2, r4
 8009576:	4631      	mov	r1, r6
 8009578:	bf28      	it	cs
 800957a:	463a      	movcs	r2, r7
 800957c:	f7fe fb48 	bl	8007c10 <memcpy>
 8009580:	4631      	mov	r1, r6
 8009582:	4640      	mov	r0, r8
 8009584:	f7fe feec 	bl	8008360 <_free_r>
 8009588:	e7e1      	b.n	800954e <_realloc_r+0x1e>
 800958a:	4635      	mov	r5, r6
 800958c:	e7df      	b.n	800954e <_realloc_r+0x1e>
	...

08009590 <_read_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	; (80095b0 <_read_r+0x20>)
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7f8 fdd0 	bl	8002144 <_read>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_read_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_read_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20000468 	.word	0x20000468

080095b4 <__ascii_wctomb>:
 80095b4:	b149      	cbz	r1, 80095ca <__ascii_wctomb+0x16>
 80095b6:	2aff      	cmp	r2, #255	; 0xff
 80095b8:	bf85      	ittet	hi
 80095ba:	238a      	movhi	r3, #138	; 0x8a
 80095bc:	6003      	strhi	r3, [r0, #0]
 80095be:	700a      	strbls	r2, [r1, #0]
 80095c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80095c4:	bf98      	it	ls
 80095c6:	2001      	movls	r0, #1
 80095c8:	4770      	bx	lr
 80095ca:	4608      	mov	r0, r1
 80095cc:	4770      	bx	lr

080095ce <abort>:
 80095ce:	b508      	push	{r3, lr}
 80095d0:	2006      	movs	r0, #6
 80095d2:	f000 f833 	bl	800963c <raise>
 80095d6:	2001      	movs	r0, #1
 80095d8:	f7f8 fdaa 	bl	8002130 <_exit>

080095dc <_malloc_usable_size_r>:
 80095dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095e0:	1f18      	subs	r0, r3, #4
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfbc      	itt	lt
 80095e6:	580b      	ldrlt	r3, [r1, r0]
 80095e8:	18c0      	addlt	r0, r0, r3
 80095ea:	4770      	bx	lr

080095ec <_raise_r>:
 80095ec:	291f      	cmp	r1, #31
 80095ee:	b538      	push	{r3, r4, r5, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	d904      	bls.n	8009600 <_raise_r+0x14>
 80095f6:	2316      	movs	r3, #22
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009602:	b112      	cbz	r2, 800960a <_raise_r+0x1e>
 8009604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009608:	b94b      	cbnz	r3, 800961e <_raise_r+0x32>
 800960a:	4620      	mov	r0, r4
 800960c:	f000 f830 	bl	8009670 <_getpid_r>
 8009610:	462a      	mov	r2, r5
 8009612:	4601      	mov	r1, r0
 8009614:	4620      	mov	r0, r4
 8009616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800961a:	f000 b817 	b.w	800964c <_kill_r>
 800961e:	2b01      	cmp	r3, #1
 8009620:	d00a      	beq.n	8009638 <_raise_r+0x4c>
 8009622:	1c59      	adds	r1, r3, #1
 8009624:	d103      	bne.n	800962e <_raise_r+0x42>
 8009626:	2316      	movs	r3, #22
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	2001      	movs	r0, #1
 800962c:	e7e7      	b.n	80095fe <_raise_r+0x12>
 800962e:	2400      	movs	r4, #0
 8009630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009634:	4628      	mov	r0, r5
 8009636:	4798      	blx	r3
 8009638:	2000      	movs	r0, #0
 800963a:	e7e0      	b.n	80095fe <_raise_r+0x12>

0800963c <raise>:
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <raise+0xc>)
 800963e:	4601      	mov	r1, r0
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	f7ff bfd3 	b.w	80095ec <_raise_r>
 8009646:	bf00      	nop
 8009648:	2000000c 	.word	0x2000000c

0800964c <_kill_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	; (800966c <_kill_r+0x20>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	4611      	mov	r1, r2
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	f7f8 fd59 	bl	8002110 <_kill>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d102      	bne.n	8009668 <_kill_r+0x1c>
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b103      	cbz	r3, 8009668 <_kill_r+0x1c>
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	bd38      	pop	{r3, r4, r5, pc}
 800966a:	bf00      	nop
 800966c:	20000468 	.word	0x20000468

08009670 <_getpid_r>:
 8009670:	f7f8 bd46 	b.w	8002100 <_getpid>

08009674 <_init>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr

08009680 <_fini>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr
